
TPaudio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005924  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08005ab4  08005ab4  00006ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c40  08005c40  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005c40  08005c40  00006c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c48  08005c48  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c48  08005c48  00006c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c4c  08005c4c  00006c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005c50  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b4  20000060  08005cb0  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001514  08005cb0  00007514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101a5  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c53  00000000  00000000  00017235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00019e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000acf  00000000  00000000  0001acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027db2  00000000  00000000  0001b797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011be7  00000000  00000000  00043549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0468  00000000  00000000  00055130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145598  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d2c  00000000  00000000  001455dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00149308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a9c 	.word	0x08005a9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005a9c 	.word	0x08005a9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <drv_uart1_receive>:

#include "usart.h"
#include "gpio.h"

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	807b      	strh	r3, [r7, #2]
	//HAL_UART_Receive(&huart2, (uint8_t*)(pData), size, HAL_MAX_DELAY);
	HAL_UART_Receive_IT(&huart2, (uint8_t*)(pData), size);
 800056c:	887b      	ldrh	r3, [r7, #2]
 800056e:	461a      	mov	r2, r3
 8000570:	6879      	ldr	r1, [r7, #4]
 8000572:	4804      	ldr	r0, [pc, #16]	@ (8000584 <drv_uart1_receive+0x24>)
 8000574:	f002 fbaa 	bl	8002ccc <HAL_UART_Receive_IT>
	return 0;	// Life's too short for error management
 8000578:	2300      	movs	r3, #0
}
 800057a:	4618      	mov	r0, r3
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000634 	.word	0x20000634

08000588 <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8000594:	887a      	ldrh	r2, [r7, #2]
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	4803      	ldr	r0, [pc, #12]	@ (80005ac <drv_uart1_transmit+0x24>)
 800059e:	f002 fb0b 	bl	8002bb8 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000634 	.word	0x20000634

080005b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <vApplicationGetIdleTaskMemory+0x2c>)
 80005c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <vApplicationGetIdleTaskMemory+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2280      	movs	r2, #128	@ 0x80
 80005cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000080 	.word	0x20000080
 80005e0:	200000d4 	.word	0x200000d4

080005e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <MX_FREERTOS_Init+0x30>)
 80005ec:	1d3c      	adds	r4, r7, #4
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fb3a 	bl	8003c7a <osThreadCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a03      	ldr	r2, [pc, #12]	@ (8000618 <MX_FREERTOS_Init+0x34>)
 800060a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bdb0      	pop	{r4, r5, r7, pc}
 8000614:	08005ac0 	.word	0x08005ac0
 8000618:	2000007c 	.word	0x2000007c

0800061c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000624:	2001      	movs	r0, #1
 8000626:	f003 fb74 	bl	8003d12 <osDelay>
 800062a:	e7fb      	b.n	8000624 <StartDefaultTask+0x8>

0800062c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	@ 0x28
 8000630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	4b2b      	ldr	r3, [pc, #172]	@ (80006f0 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	4a2a      	ldr	r2, [pc, #168]	@ (80006f0 <MX_GPIO_Init+0xc4>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064e:	4b28      	ldr	r3, [pc, #160]	@ (80006f0 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	4b25      	ldr	r3, [pc, #148]	@ (80006f0 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	4a24      	ldr	r2, [pc, #144]	@ (80006f0 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000666:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a1e      	ldr	r2, [pc, #120]	@ (80006f0 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	4a18      	ldr	r2, [pc, #96]	@ (80006f0 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000696:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2120      	movs	r1, #32
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006aa:	f000 feff 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <MX_GPIO_Init+0xc8>)
 80006c6:	f000 fd47 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ca:	2320      	movs	r3, #32
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e4:	f000 fd38 	bl	8001158 <HAL_GPIO_Init>

}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	@ 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48000800 	.word	0x48000800

080006f8 <fonction>:
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
return ch;
}

int fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800070a:	4a0a      	ldr	r2, [pc, #40]	@ (8000734 <fonction+0x3c>)
 800070c:	2128      	movs	r1, #40	@ 0x28
 800070e:	4618      	mov	r0, r3
 8000710:	f004 fd10 	bl	8005134 <sniprintf>
 8000714:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000722:	6979      	ldr	r1, [r7, #20]
 8000724:	b289      	uxth	r1, r1
 8000726:	4610      	mov	r0, r2
 8000728:	4798      	blx	r3

	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08005adc 	.word	0x08005adc

08000738 <TAskFonction>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void TAskFonction(void *argument)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    for (;;)
    {
    	shell_run(&h_shell);
 8000740:	4801      	ldr	r0, [pc, #4]	@ (8000748 <TAskFonction+0x10>)
 8000742:	f000 f9cf 	bl	8000ae4 <shell_run>
 8000746:	e7fb      	b.n	8000740 <TAskFonction+0x8>
 8000748:	200002d4 	.word	0x200002d4

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b5b0      	push	{r4, r5, r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000752:	f000 fb9f 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000756:	f000 f83f 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075a:	f7ff ff67 	bl	800062c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800075e:	f000 fae3 	bl	8000d28 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char msg[] = "USART2 Test OK\r\n";
 8000762:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <main+0x6c>)
 8000764:	1d3c      	adds	r4, r7, #4
 8000766:	461d      	mov	r5, r3
 8000768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076c:	682b      	ldr	r3, [r5, #0]
 800076e:	7023      	strb	r3, [r4, #0]

    h_shell.drv.receive = drv_uart1_receive;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <main+0x70>)
 8000772:	4a13      	ldr	r2, [pc, #76]	@ (80007c0 <main+0x74>)
 8000774:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
  	h_shell.drv.transmit = drv_uart1_transmit;
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <main+0x70>)
 800077a:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <main+0x78>)
 800077c:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

  	shell_init(&h_shell);
 8000780:	480e      	ldr	r0, [pc, #56]	@ (80007bc <main+0x70>)
 8000782:	f000 f8c1 	bl	8000908 <shell_init>
  	shell_add(&h_shell, 'f', fonction, "Une fonction inutile");
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <main+0x7c>)
 8000788:	4a10      	ldr	r2, [pc, #64]	@ (80007cc <main+0x80>)
 800078a:	2166      	movs	r1, #102	@ 0x66
 800078c:	480b      	ldr	r0, [pc, #44]	@ (80007bc <main+0x70>)
 800078e:	f000 f8fd 	bl	800098c <shell_add>
  	//shell_run(&h_shell);

  	// Créer une tâche FreeRTOS
  	    xTaskCreate(TAskFonction, "Task1", 128, NULL, osPriorityNormal, NULL);
 8000792:	2300      	movs	r3, #0
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2300      	movs	r3, #0
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2300      	movs	r3, #0
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	490c      	ldr	r1, [pc, #48]	@ (80007d0 <main+0x84>)
 80007a0:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <main+0x88>)
 80007a2:	f003 fbde 	bl	8003f62 <xTaskCreate>

  	    // Créer la tâche du shell
  	 //   xTaskCreate(Task_Shell, "Shell Task", 128, NULL, 1, NULL);

  	    // Démarrer le scheduler
  	    vTaskStartScheduler();
 80007a6:	f003 fd49 	bl	800423c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80007aa:	f7ff ff1b 	bl	80005e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007ae:	f003 fa5d 	bl	8003c6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b2:	bf00      	nop
 80007b4:	e7fd      	b.n	80007b2 <main+0x66>
 80007b6:	bf00      	nop
 80007b8:	08005b1c 	.word	0x08005b1c
 80007bc:	200002d4 	.word	0x200002d4
 80007c0:	08000561 	.word	0x08000561
 80007c4:	08000589 	.word	0x08000589
 80007c8:	08005afc 	.word	0x08005afc
 80007cc:	080006f9 	.word	0x080006f9
 80007d0:	08005b14 	.word	0x08005b14
 80007d4:	08000739 	.word	0x08000739

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b096      	sub	sp, #88	@ 0x58
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2244      	movs	r2, #68	@ 0x44
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 fcd8 	bl	800519c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007fe:	f000 fe7b 	bl	80014f8 <HAL_PWREx_ControlVoltageScaling>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000808:	f000 f837 	bl	800087a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080c:	2302      	movs	r3, #2
 800080e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000814:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000816:	2310      	movs	r3, #16
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081e:	2302      	movs	r3, #2
 8000820:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000826:	230a      	movs	r3, #10
 8000828:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800082a:	2307      	movs	r3, #7
 800082c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4618      	mov	r0, r3
 800083c:	f000 feb2 	bl	80015a4 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000846:	f000 f818 	bl	800087a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2303      	movs	r3, #3
 8000850:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	2104      	movs	r1, #4
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fa7a 	bl	8001d5c <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800086e:	f000 f804 	bl	800087a <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3758      	adds	r7, #88	@ 0x58
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087e:	b672      	cpsid	i
}
 8000880:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000882:	bf00      	nop
 8000884:	e7fd      	b.n	8000882 <Error_Handler+0x8>
	...

08000888 <sh_help>:

#include "shell.h"

#include <stdio.h>

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b089      	sub	sp, #36	@ 0x24
 800088c:	af02      	add	r7, sp, #8
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	e029      	b.n	80008ee <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80008a0:	68f9      	ldr	r1, [r7, #12]
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	440b      	add	r3, r1
 80008ae:	3304      	adds	r3, #4
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	461c      	mov	r4, r3
 80008b4:	68f9      	ldr	r1, [r7, #12]
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	4613      	mov	r3, r2
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	4413      	add	r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	440b      	add	r3, r1
 80008c2:	330c      	adds	r3, #12
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	4623      	mov	r3, r4
 80008ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000904 <sh_help+0x7c>)
 80008cc:	2128      	movs	r1, #40	@ 0x28
 80008ce:	f004 fc31 	bl	8005134 <sniprintf>
 80008d2:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80008e0:	6939      	ldr	r1, [r7, #16]
 80008e2:	b289      	uxth	r1, r1
 80008e4:	4610      	mov	r0, r2
 80008e6:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	3301      	adds	r3, #1
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	697a      	ldr	r2, [r7, #20]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	dbd0      	blt.n	800089a <sh_help+0x12>
	}

	return 0;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	371c      	adds	r7, #28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	bf00      	nop
 8000904:	08005b30 	.word	0x08005b30

08000908 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	int size = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000920:	4a16      	ldr	r2, [pc, #88]	@ (800097c <shell_init+0x74>)
 8000922:	2128      	movs	r1, #40	@ 0x28
 8000924:	4618      	mov	r0, r3
 8000926:	f004 fc05 	bl	8005134 <sniprintf>
 800092a:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	b289      	uxth	r1, r1
 800093c:	4610      	mov	r0, r2
 800093e:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000946:	4a0e      	ldr	r2, [pc, #56]	@ (8000980 <shell_init+0x78>)
 8000948:	2128      	movs	r1, #40	@ 0x28
 800094a:	4618      	mov	r0, r3
 800094c:	f004 fbf2 	bl	8005134 <sniprintf>
 8000950:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800095e:	68f9      	ldr	r1, [r7, #12]
 8000960:	b289      	uxth	r1, r1
 8000962:	4610      	mov	r0, r2
 8000964:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 8000966:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <shell_init+0x7c>)
 8000968:	4a07      	ldr	r2, [pc, #28]	@ (8000988 <shell_init+0x80>)
 800096a:	2168      	movs	r1, #104	@ 0x68
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 f80d 	bl	800098c <shell_add>
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	08005b3c 	.word	0x08005b3c
 8000980:	08005b64 	.word	0x08005b64
 8000984:	08005b88 	.word	0x08005b88
 8000988:	08000889 	.word	0x08000889

0800098c <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	607a      	str	r2, [r7, #4]
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	460b      	mov	r3, r1
 800099a:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80009a2:	dc27      	bgt.n	80009f4 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	68f9      	ldr	r1, [r7, #12]
 80009aa:	4613      	mov	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	4413      	add	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	440b      	add	r3, r1
 80009b4:	3304      	adds	r3, #4
 80009b6:	7afa      	ldrb	r2, [r7, #11]
 80009b8:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	68f9      	ldr	r1, [r7, #12]
 80009c0:	4613      	mov	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	4413      	add	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	440b      	add	r3, r1
 80009ca:	3308      	adds	r3, #8
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	68f9      	ldr	r1, [r7, #12]
 80009d6:	4613      	mov	r3, r2
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	440b      	add	r3, r1
 80009e0:	330c      	adds	r3, #12
 80009e2:	683a      	ldr	r2, [r7, #0]
 80009e4:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	601a      	str	r2, [r3, #0]
		return 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	e001      	b.n	80009f8 <shell_add+0x6c>
	}

	return -1;
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b090      	sub	sp, #64	@ 0x40
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000a16:	2300      	movs	r3, #0
 8000a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a1a:	e041      	b.n	8000aa0 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8000a1c:	6879      	ldr	r1, [r7, #4]
 8000a1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a20:	4613      	mov	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	440b      	add	r3, r1
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d131      	bne.n	8000a9a <shell_exec+0x96>
			argc = 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a42:	e013      	b.n	8000a6c <shell_exec+0x68>
				if(*p == ' ') {
 8000a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b20      	cmp	r3, #32
 8000a4a:	d10c      	bne.n	8000a66 <shell_exec+0x62>
					*p = '\0';
 8000a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8000a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000a58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a5a:	3201      	adds	r2, #1
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	3340      	adds	r3, #64	@ 0x40
 8000a60:	443b      	add	r3, r7
 8000a62:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a68:	3301      	adds	r3, #1
 8000a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <shell_exec+0x76>
 8000a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a76:	2b07      	cmp	r3, #7
 8000a78:	dde4      	ble.n	8000a44 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	440b      	add	r3, r1
 8000a88:	3308      	adds	r3, #8
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f107 020c 	add.w	r2, r7, #12
 8000a90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	4798      	blx	r3
 8000a96:	4603      	mov	r3, r0
 8000a98:	e01d      	b.n	8000ad6 <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	dbb8      	blt.n	8000a1c <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000ab0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <shell_exec+0xdc>)
 8000ab6:	2128      	movs	r1, #40	@ 0x28
 8000ab8:	f004 fb3c 	bl	8005134 <sniprintf>
 8000abc:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000acc:	b289      	uxth	r1, r1
 8000ace:	4610      	mov	r0, r2
 8000ad0:	4798      	blx	r3
	return -1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3740      	adds	r7, #64	@ 0x40
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	08005b90 	.word	0x08005b90

08000ae4 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8000afa:	2102      	movs	r1, #2
 8000afc:	483a      	ldr	r0, [pc, #232]	@ (8000be8 <shell_run+0x104>)
 8000afe:	4798      	blx	r3
		reading = 1;
 8000b00:	2301      	movs	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]

		while(reading) {
 8000b04:	e064      	b.n	8000bd0 <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8000b0c:	f107 020b 	add.w	r2, r7, #11
 8000b10:	2101      	movs	r1, #1
 8000b12:	4610      	mov	r0, r2
 8000b14:	4798      	blx	r3
			int size;

			switch (c) {
 8000b16:	7afb      	ldrb	r3, [r7, #11]
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d036      	beq.n	8000b8a <shell_run+0xa6>
 8000b1c:	2b0d      	cmp	r3, #13
 8000b1e:	d141      	bne.n	8000ba4 <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000b26:	4a31      	ldr	r2, [pc, #196]	@ (8000bec <shell_run+0x108>)
 8000b28:	2128      	movs	r1, #40	@ 0x28
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f004 fb02 	bl	8005134 <sniprintf>
 8000b30:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000b3e:	68f9      	ldr	r1, [r7, #12]
 8000b40:	b289      	uxth	r1, r1
 8000b42:	4610      	mov	r0, r2
 8000b44:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	613a      	str	r2, [r7, #16]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8000b62:	4a23      	ldr	r2, [pc, #140]	@ (8000bf0 <shell_run+0x10c>)
 8000b64:	2128      	movs	r1, #40	@ 0x28
 8000b66:	f004 fae5 	bl	8005134 <sniprintf>
 8000b6a:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000b78:	68f9      	ldr	r1, [r7, #12]
 8000b7a:	b289      	uxth	r1, r1
 8000b7c:	4610      	mov	r0, r2
 8000b7e:	4798      	blx	r3
				reading = 0;        //exit read loop
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
				break;
 8000b88:	e022      	b.n	8000bd0 <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	dd1e      	ble.n	8000bce <shell_run+0xea>
					pos--;          //remove it in buffer
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8000b9c:	2103      	movs	r1, #3
 8000b9e:	4815      	ldr	r0, [pc, #84]	@ (8000bf4 <shell_run+0x110>)
 8000ba0:	4798      	blx	r3
				}
				break;
 8000ba2:	e014      	b.n	8000bce <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	2b27      	cmp	r3, #39	@ 0x27
 8000ba8:	dc12      	bgt.n	8000bd0 <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8000bb0:	f107 020b 	add.w	r2, r7, #11
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4610      	mov	r0, r2
 8000bb8:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	1c5a      	adds	r2, r3, #1
 8000bbe:	613a      	str	r2, [r7, #16]
 8000bc0:	7af9      	ldrb	r1, [r7, #11]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	460a      	mov	r2, r1
 8000bc8:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
 8000bcc:	e000      	b.n	8000bd0 <shell_run+0xec>
				break;
 8000bce:	bf00      	nop
		while(reading) {
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d197      	bne.n	8000b06 <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8000bdc:	4619      	mov	r1, r3
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ff10 	bl	8000a04 <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 8000be4:	e786      	b.n	8000af4 <shell_run+0x10>
 8000be6:	bf00      	nop
 8000be8:	08005bc0 	.word	0x08005bc0
 8000bec:	08005ba8 	.word	0x08005ba8
 8000bf0:	08005bac 	.word	0x08005bac
 8000bf4:	08005bbc 	.word	0x08005bbc

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c02:	4a10      	ldr	r2, [pc, #64]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	210f      	movs	r1, #15
 8000c32:	f06f 0001 	mvn.w	r0, #1
 8000c36:	f000 fa66 	bl	8001106 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <NMI_Handler+0x4>

08000c50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <MemManage_Handler+0x4>

08000c60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c82:	f000 f963 	bl	8000f4c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c86:	f003 fdd3 	bl	8004830 <xTaskGetSchedulerState>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d001      	beq.n	8000c94 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c90:	f004 f812 	bl	8004cb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca0:	4a14      	ldr	r2, [pc, #80]	@ (8000cf4 <_sbrk+0x5c>)
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <_sbrk+0x60>)
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <_sbrk+0x64>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <_sbrk+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d207      	bcs.n	8000cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc8:	f004 fa70 	bl	80051ac <__errno>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	220c      	movs	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	e009      	b.n	8000cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cde:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <_sbrk+0x64>)
 8000ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20018000 	.word	0x20018000
 8000cf8:	00000400 	.word	0x00000400
 8000cfc:	20000630 	.word	0x20000630
 8000d00:	20001518 	.word	0x20001518

08000d04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	@ (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d2e:	4a15      	ldr	r2, [pc, #84]	@ (8000d84 <MX_USART2_UART_Init+0x5c>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d32:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d6c:	f001 fed6 	bl	8002b1c <HAL_UART_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d76:	f7ff fd80 	bl	800087a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000634 	.word	0x20000634
 8000d84:	40004400 	.word	0x40004400

08000d88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0ac      	sub	sp, #176	@ 0xb0
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2288      	movs	r2, #136	@ 0x88
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 f9f7 	bl	800519c <memset>
  if(uartHandle->Instance==USART2)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a21      	ldr	r2, [pc, #132]	@ (8000e38 <HAL_UART_MspInit+0xb0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d13b      	bne.n	8000e30 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 f9ed 	bl	80021a4 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd0:	f7ff fd53 	bl	800087a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd4:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <HAL_UART_MspInit+0xb4>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd8:	4a18      	ldr	r2, [pc, #96]	@ (8000e3c <HAL_UART_MspInit+0xb4>)
 8000dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dde:	6593      	str	r3, [r2, #88]	@ 0x58
 8000de0:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <HAL_UART_MspInit+0xb4>)
 8000de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <HAL_UART_MspInit+0xb4>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df0:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <HAL_UART_MspInit+0xb4>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df8:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <HAL_UART_MspInit+0xb4>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e04:	230c      	movs	r3, #12
 8000e06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2c:	f000 f994 	bl	8001158 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e30:	bf00      	nop
 8000e32:	37b0      	adds	r7, #176	@ 0xb0
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40004400 	.word	0x40004400
 8000e3c:	40021000 	.word	0x40021000

08000e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e44:	f7ff ff5e 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	@ (8000e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e84 <LoopForever+0xe>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	@ (8000e8c <LoopForever+0x16>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f004 f9a3 	bl	80051b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e72:	f7ff fc6b 	bl	800074c <main>

08000e76 <LoopForever>:

LoopForever:
    b LoopForever
 8000e76:	e7fe      	b.n	8000e76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e84:	08005c50 	.word	0x08005c50
  ldr r2, =_sbss
 8000e88:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e8c:	20001514 	.word	0x20001514

08000e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <HAL_Init+0x3c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed0 <HAL_Init+0x3c>)
 8000ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eaa:	2003      	movs	r0, #3
 8000eac:	f000 f920 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb0:	200f      	movs	r0, #15
 8000eb2:	f000 f80f 	bl	8000ed4 <HAL_InitTick>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	71fb      	strb	r3, [r7, #7]
 8000ec0:	e001      	b.n	8000ec6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec2:	f7ff fe99 	bl	8000bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40022000 	.word	0x40022000

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ee0:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <HAL_InitTick+0x6c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d023      	beq.n	8000f30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <HAL_InitTick+0x70>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <HAL_InitTick+0x6c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f91d 	bl	800113e <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10f      	bne.n	8000f2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d809      	bhi.n	8000f24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f8f5 	bl	8001106 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <HAL_InitTick+0x74>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e007      	b.n	8000f34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e004      	b.n	8000f34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	e001      	b.n	8000f34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	200006bc 	.word	0x200006bc

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200006bc 	.word	0x200006bc

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	@ (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	@ (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	@ (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	@ 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	@ 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff8e 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff47 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff5c 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff8e 	bl	8001044 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5d 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffb0 	bl	80010ac <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001166:	e17f      	b.n	8001468 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	4013      	ands	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8171 	beq.w	8001462 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b01      	cmp	r3, #1
 800118a:	d005      	beq.n	8001198 <HAL_GPIO_Init+0x40>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d130      	bne.n	80011fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ce:	2201      	movs	r2, #1
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	f003 0201 	and.w	r2, r3, #1
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b03      	cmp	r3, #3
 8001204:	d118      	bne.n	8001238 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800120c:	2201      	movs	r2, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	08db      	lsrs	r3, r3, #3
 8001222:	f003 0201 	and.w	r2, r3, #1
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b03      	cmp	r3, #3
 8001242:	d017      	beq.n	8001274 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d123      	bne.n	80012c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	6939      	ldr	r1, [r7, #16]
 80012c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80ac 	beq.w	8001462 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b5f      	ldr	r3, [pc, #380]	@ (8001488 <HAL_GPIO_Init+0x330>)
 800130c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800130e:	4a5e      	ldr	r2, [pc, #376]	@ (8001488 <HAL_GPIO_Init+0x330>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6613      	str	r3, [r2, #96]	@ 0x60
 8001316:	4b5c      	ldr	r3, [pc, #368]	@ (8001488 <HAL_GPIO_Init+0x330>)
 8001318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001322:	4a5a      	ldr	r2, [pc, #360]	@ (800148c <HAL_GPIO_Init+0x334>)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800134c:	d025      	beq.n	800139a <HAL_GPIO_Init+0x242>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4f      	ldr	r2, [pc, #316]	@ (8001490 <HAL_GPIO_Init+0x338>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01f      	beq.n	8001396 <HAL_GPIO_Init+0x23e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4e      	ldr	r2, [pc, #312]	@ (8001494 <HAL_GPIO_Init+0x33c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x23a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4d      	ldr	r2, [pc, #308]	@ (8001498 <HAL_GPIO_Init+0x340>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x236>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4c      	ldr	r2, [pc, #304]	@ (800149c <HAL_GPIO_Init+0x344>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x232>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4b      	ldr	r2, [pc, #300]	@ (80014a0 <HAL_GPIO_Init+0x348>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x22e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4a      	ldr	r2, [pc, #296]	@ (80014a4 <HAL_GPIO_Init+0x34c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x22a>
 800137e:	2306      	movs	r3, #6
 8001380:	e00c      	b.n	800139c <HAL_GPIO_Init+0x244>
 8001382:	2307      	movs	r3, #7
 8001384:	e00a      	b.n	800139c <HAL_GPIO_Init+0x244>
 8001386:	2305      	movs	r3, #5
 8001388:	e008      	b.n	800139c <HAL_GPIO_Init+0x244>
 800138a:	2304      	movs	r3, #4
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x244>
 800138e:	2303      	movs	r3, #3
 8001390:	e004      	b.n	800139c <HAL_GPIO_Init+0x244>
 8001392:	2302      	movs	r3, #2
 8001394:	e002      	b.n	800139c <HAL_GPIO_Init+0x244>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_GPIO_Init+0x244>
 800139a:	2300      	movs	r3, #0
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	f002 0203 	and.w	r2, r2, #3
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	4093      	lsls	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ac:	4937      	ldr	r1, [pc, #220]	@ (800148c <HAL_GPIO_Init+0x334>)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3302      	adds	r3, #2
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ba:	4b3b      	ldr	r3, [pc, #236]	@ (80014a8 <HAL_GPIO_Init+0x350>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013de:	4a32      	ldr	r2, [pc, #200]	@ (80014a8 <HAL_GPIO_Init+0x350>)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013e4:	4b30      	ldr	r3, [pc, #192]	@ (80014a8 <HAL_GPIO_Init+0x350>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001408:	4a27      	ldr	r2, [pc, #156]	@ (80014a8 <HAL_GPIO_Init+0x350>)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800140e:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <HAL_GPIO_Init+0x350>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001432:	4a1d      	ldr	r2, [pc, #116]	@ (80014a8 <HAL_GPIO_Init+0x350>)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001438:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <HAL_GPIO_Init+0x350>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800145c:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <HAL_GPIO_Init+0x350>)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa22 f303 	lsr.w	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	f47f ae78 	bne.w	8001168 <HAL_GPIO_Init+0x10>
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	40010000 	.word	0x40010000
 8001490:	48000400 	.word	0x48000400
 8001494:	48000800 	.word	0x48000800
 8001498:	48000c00 	.word	0x48000c00
 800149c:	48001000 	.word	0x48001000
 80014a0:	48001400 	.word	0x48001400
 80014a4:	48001800 	.word	0x48001800
 80014a8:	40010400 	.word	0x40010400

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40007000 	.word	0x40007000

080014f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001506:	d130      	bne.n	800156a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001508:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001514:	d038      	beq.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001516:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800151e:	4a1e      	ldr	r2, [pc, #120]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001520:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001524:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001526:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2232      	movs	r2, #50	@ 0x32
 800152c:	fb02 f303 	mul.w	r3, r2, r3
 8001530:	4a1b      	ldr	r2, [pc, #108]	@ (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	0c9b      	lsrs	r3, r3, #18
 8001538:	3301      	adds	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800153c:	e002      	b.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3b01      	subs	r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800154c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001550:	d102      	bne.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f2      	bne.n	800153e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001564:	d110      	bne.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e00f      	b.n	800158a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001576:	d007      	beq.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001578:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001580:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001586:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40007000 	.word	0x40007000
 800159c:	20000000 	.word	0x20000000
 80015a0:	431bde83 	.word	0x431bde83

080015a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e3ca      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b6:	4b97      	ldr	r3, [pc, #604]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c0:	4b94      	ldr	r3, [pc, #592]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80e4 	beq.w	80017a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <HAL_RCC_OscConfig+0x4a>
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b0c      	cmp	r3, #12
 80015e2:	f040 808b 	bne.w	80016fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	f040 8087 	bne.w	80016fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ee:	4b89      	ldr	r3, [pc, #548]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x62>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e3a2      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1a      	ldr	r2, [r3, #32]
 800160a:	4b82      	ldr	r3, [pc, #520]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d004      	beq.n	8001620 <HAL_RCC_OscConfig+0x7c>
 8001616:	4b7f      	ldr	r3, [pc, #508]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800161e:	e005      	b.n	800162c <HAL_RCC_OscConfig+0x88>
 8001620:	4b7c      	ldr	r3, [pc, #496]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001622:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800162c:	4293      	cmp	r3, r2
 800162e:	d223      	bcs.n	8001678 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fd55 	bl	80020e4 <RCC_SetFlashLatencyFromMSIRange>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e383      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001644:	4b73      	ldr	r3, [pc, #460]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a72      	ldr	r2, [pc, #456]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800164a:	f043 0308 	orr.w	r3, r3, #8
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b70      	ldr	r3, [pc, #448]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	496d      	ldr	r1, [pc, #436]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001662:	4b6c      	ldr	r3, [pc, #432]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	4968      	ldr	r1, [pc, #416]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]
 8001676:	e025      	b.n	80016c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001678:	4b66      	ldr	r3, [pc, #408]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a65      	ldr	r2, [pc, #404]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b63      	ldr	r3, [pc, #396]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4960      	ldr	r1, [pc, #384]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001696:	4b5f      	ldr	r3, [pc, #380]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	495b      	ldr	r1, [pc, #364]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d109      	bne.n	80016c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 fd15 	bl	80020e4 <RCC_SetFlashLatencyFromMSIRange>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e343      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016c4:	f000 fc4a 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 80016c8:	4602      	mov	r2, r0
 80016ca:	4b52      	ldr	r3, [pc, #328]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	4950      	ldr	r1, [pc, #320]	@ (8001818 <HAL_RCC_OscConfig+0x274>)
 80016d6:	5ccb      	ldrb	r3, [r1, r3]
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	4a4e      	ldr	r2, [pc, #312]	@ (800181c <HAL_RCC_OscConfig+0x278>)
 80016e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001820 <HAL_RCC_OscConfig+0x27c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fbf3 	bl	8000ed4 <HAL_InitTick>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d052      	beq.n	800179e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	e327      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d032      	beq.n	800176a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001704:	4b43      	ldr	r3, [pc, #268]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a42      	ldr	r2, [pc, #264]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001710:	f7ff fc30 	bl	8000f74 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001718:	f7ff fc2c 	bl	8000f74 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e310      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800172a:	4b3a      	ldr	r3, [pc, #232]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001736:	4b37      	ldr	r3, [pc, #220]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a36      	ldr	r2, [pc, #216]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b34      	ldr	r3, [pc, #208]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4931      	ldr	r1, [pc, #196]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001754:	4b2f      	ldr	r3, [pc, #188]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	492c      	ldr	r1, [pc, #176]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
 8001768:	e01a      	b.n	80017a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800176a:	4b2a      	ldr	r3, [pc, #168]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a29      	ldr	r2, [pc, #164]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001776:	f7ff fbfd 	bl	8000f74 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800177e:	f7ff fbf9 	bl	8000f74 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e2dd      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001790:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f0      	bne.n	800177e <HAL_RCC_OscConfig+0x1da>
 800179c:	e000      	b.n	80017a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800179e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d074      	beq.n	8001896 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d005      	beq.n	80017be <HAL_RCC_OscConfig+0x21a>
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b0c      	cmp	r3, #12
 80017b6:	d10e      	bne.n	80017d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d10b      	bne.n	80017d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d064      	beq.n	8001894 <HAL_RCC_OscConfig+0x2f0>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d160      	bne.n	8001894 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e2ba      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017de:	d106      	bne.n	80017ee <HAL_RCC_OscConfig+0x24a>
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80017e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e026      	b.n	800183c <HAL_RCC_OscConfig+0x298>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017f6:	d115      	bne.n	8001824 <HAL_RCC_OscConfig+0x280>
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 80017fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a02      	ldr	r2, [pc, #8]	@ (8001814 <HAL_RCC_OscConfig+0x270>)
 800180a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e014      	b.n	800183c <HAL_RCC_OscConfig+0x298>
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	08005bc4 	.word	0x08005bc4
 800181c:	20000000 	.word	0x20000000
 8001820:	20000004 	.word	0x20000004
 8001824:	4ba0      	ldr	r3, [pc, #640]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a9f      	ldr	r2, [pc, #636]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 800182a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b9d      	ldr	r3, [pc, #628]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a9c      	ldr	r2, [pc, #624]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800183a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d013      	beq.n	800186c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fb96 	bl	8000f74 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fb92 	bl	8000f74 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	@ 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e276      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185e:	4b92      	ldr	r3, [pc, #584]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x2a8>
 800186a:	e014      	b.n	8001896 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fb82 	bl	8000f74 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff fb7e 	bl	8000f74 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	@ 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e262      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001886:	4b88      	ldr	r3, [pc, #544]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x2d0>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d060      	beq.n	8001964 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_OscConfig+0x310>
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d119      	bne.n	80018e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d116      	bne.n	80018e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b4:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_OscConfig+0x328>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e23f      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018cc:	4b76      	ldr	r3, [pc, #472]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	061b      	lsls	r3, r3, #24
 80018da:	4973      	ldr	r1, [pc, #460]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e0:	e040      	b.n	8001964 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d023      	beq.n	8001932 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ea:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a6e      	ldr	r2, [pc, #440]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff fb3d 	bl	8000f74 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fe:	f7ff fb39 	bl	8000f74 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e21d      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001910:	4b65      	ldr	r3, [pc, #404]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191c:	4b62      	ldr	r3, [pc, #392]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	061b      	lsls	r3, r3, #24
 800192a:	495f      	ldr	r1, [pc, #380]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
 8001930:	e018      	b.n	8001964 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001932:	4b5d      	ldr	r3, [pc, #372]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a5c      	ldr	r2, [pc, #368]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800193c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff fb19 	bl	8000f74 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff fb15 	bl	8000f74 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e1f9      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001958:	4b53      	ldr	r3, [pc, #332]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d03c      	beq.n	80019ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01c      	beq.n	80019b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001978:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800197e:	4a4a      	ldr	r2, [pc, #296]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff faf4 	bl	8000f74 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff faf0 	bl	8000f74 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e1d4      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a2:	4b41      	ldr	r3, [pc, #260]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80019a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ef      	beq.n	8001990 <HAL_RCC_OscConfig+0x3ec>
 80019b0:	e01b      	b.n	80019ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b2:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80019b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019b8:	4a3b      	ldr	r2, [pc, #236]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c2:	f7ff fad7 	bl	8000f74 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ca:	f7ff fad3 	bl	8000f74 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1b7      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019dc:	4b32      	ldr	r3, [pc, #200]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ef      	bne.n	80019ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 80a6 	beq.w	8001b44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019fc:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10d      	bne.n	8001a24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a08:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0c:	4a26      	ldr	r2, [pc, #152]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a14:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a20:	2301      	movs	r3, #1
 8001a22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a24:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <HAL_RCC_OscConfig+0x508>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d118      	bne.n	8001a62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a30:	4b1e      	ldr	r3, [pc, #120]	@ (8001aac <HAL_RCC_OscConfig+0x508>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1d      	ldr	r2, [pc, #116]	@ (8001aac <HAL_RCC_OscConfig+0x508>)
 8001a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fa9a 	bl	8000f74 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a44:	f7ff fa96 	bl	8000f74 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e17a      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <HAL_RCC_OscConfig+0x508>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4d8>
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a70:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a7a:	e029      	b.n	8001ad0 <HAL_RCC_OscConfig+0x52c>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d115      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x50c>
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8a:	4a07      	ldr	r2, [pc, #28]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a94:	4b04      	ldr	r3, [pc, #16]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a9a:	4a03      	ldr	r2, [pc, #12]	@ (8001aa8 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aa4:	e014      	b.n	8001ad0 <HAL_RCC_OscConfig+0x52c>
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	4b9c      	ldr	r3, [pc, #624]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab6:	4a9b      	ldr	r2, [pc, #620]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ac0:	4b98      	ldr	r3, [pc, #608]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac6:	4a97      	ldr	r2, [pc, #604]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001ac8:	f023 0304 	bic.w	r3, r3, #4
 8001acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d016      	beq.n	8001b06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff fa4c 	bl	8000f74 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fa48 	bl	8000f74 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e12a      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af6:	4b8b      	ldr	r3, [pc, #556]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ed      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x53c>
 8001b04:	e015      	b.n	8001b32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b06:	f7ff fa35 	bl	8000f74 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff fa31 	bl	8000f74 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e113      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b24:	4b7f      	ldr	r3, [pc, #508]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1ed      	bne.n	8001b0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b32:	7ffb      	ldrb	r3, [r7, #31]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b38:	4b7a      	ldr	r3, [pc, #488]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3c:	4a79      	ldr	r2, [pc, #484]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80fe 	beq.w	8001d4a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	f040 80d0 	bne.w	8001cf8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b58:	4b72      	ldr	r3, [pc, #456]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d130      	bne.n	8001bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	3b01      	subs	r3, #1
 8001b78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d127      	bne.n	8001bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d11f      	bne.n	8001bce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b98:	2a07      	cmp	r2, #7
 8001b9a:	bf14      	ite	ne
 8001b9c:	2201      	movne	r2, #1
 8001b9e:	2200      	moveq	r2, #0
 8001ba0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d113      	bne.n	8001bce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb0:	085b      	lsrs	r3, r3, #1
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d109      	bne.n	8001bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	085b      	lsrs	r3, r3, #1
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d06e      	beq.n	8001cac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b0c      	cmp	r3, #12
 8001bd2:	d069      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bd4:	4b53      	ldr	r3, [pc, #332]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d105      	bne.n	8001bec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001be0:	4b50      	ldr	r3, [pc, #320]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0ad      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001bf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bfa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bfc:	f7ff f9ba 	bl	8000f74 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff f9b6 	bl	8000f74 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e09a      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c16:	4b43      	ldr	r3, [pc, #268]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c22:	4b40      	ldr	r3, [pc, #256]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	4b40      	ldr	r3, [pc, #256]	@ (8001d28 <HAL_RCC_OscConfig+0x784>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c32:	3a01      	subs	r2, #1
 8001c34:	0112      	lsls	r2, r2, #4
 8001c36:	4311      	orrs	r1, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c3c:	0212      	lsls	r2, r2, #8
 8001c3e:	4311      	orrs	r1, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c44:	0852      	lsrs	r2, r2, #1
 8001c46:	3a01      	subs	r2, #1
 8001c48:	0552      	lsls	r2, r2, #21
 8001c4a:	4311      	orrs	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c50:	0852      	lsrs	r2, r2, #1
 8001c52:	3a01      	subs	r2, #1
 8001c54:	0652      	lsls	r2, r2, #25
 8001c56:	4311      	orrs	r1, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c5c:	0912      	lsrs	r2, r2, #4
 8001c5e:	0452      	lsls	r2, r2, #17
 8001c60:	430a      	orrs	r2, r1
 8001c62:	4930      	ldr	r1, [pc, #192]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c68:	4b2e      	ldr	r3, [pc, #184]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a2d      	ldr	r2, [pc, #180]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c74:	4b2b      	ldr	r3, [pc, #172]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4a2a      	ldr	r2, [pc, #168]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c80:	f7ff f978 	bl	8000f74 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff f974 	bl	8000f74 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e058      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9a:	4b22      	ldr	r3, [pc, #136]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca6:	e050      	b.n	8001d4a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e04f      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cac:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d148      	bne.n	8001d4a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cc4:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4a16      	ldr	r2, [pc, #88]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001cca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cd0:	f7ff f950 	bl	8000f74 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff f94c 	bl	8000f74 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e030      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x734>
 8001cf6:	e028      	b.n	8001d4a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d023      	beq.n	8001d46 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfe:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a08      	ldr	r2, [pc, #32]	@ (8001d24 <HAL_RCC_OscConfig+0x780>)
 8001d04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0a:	f7ff f933 	bl	8000f74 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d10:	e00c      	b.n	8001d2c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d12:	f7ff f92f 	bl	8000f74 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d905      	bls.n	8001d2c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e013      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
 8001d24:	40021000 	.word	0x40021000
 8001d28:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <HAL_RCC_OscConfig+0x7b0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ec      	bne.n	8001d12 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_RCC_OscConfig+0x7b0>)
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	4905      	ldr	r1, [pc, #20]	@ (8001d54 <HAL_RCC_OscConfig+0x7b0>)
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_RCC_OscConfig+0x7b4>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	60cb      	str	r3, [r1, #12]
 8001d44:	e001      	b.n	8001d4a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	feeefffc 	.word	0xfeeefffc

08001d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0e7      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b75      	ldr	r3, [pc, #468]	@ (8001f48 <HAL_RCC_ClockConfig+0x1ec>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d910      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b72      	ldr	r3, [pc, #456]	@ (8001f48 <HAL_RCC_ClockConfig+0x1ec>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 0207 	bic.w	r2, r3, #7
 8001d86:	4970      	ldr	r1, [pc, #448]	@ (8001f48 <HAL_RCC_ClockConfig+0x1ec>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b6e      	ldr	r3, [pc, #440]	@ (8001f48 <HAL_RCC_ClockConfig+0x1ec>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0cf      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d010      	beq.n	8001dce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	4b66      	ldr	r3, [pc, #408]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d908      	bls.n	8001dce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dbc:	4b63      	ldr	r3, [pc, #396]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4960      	ldr	r1, [pc, #384]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d04c      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d121      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0a6      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfa:	4b54      	ldr	r3, [pc, #336]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d115      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e09a      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e12:	4b4e      	ldr	r3, [pc, #312]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e08e      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e22:	4b4a      	ldr	r3, [pc, #296]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e086      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e32:	4b46      	ldr	r3, [pc, #280]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f023 0203 	bic.w	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4943      	ldr	r1, [pc, #268]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e44:	f7ff f896 	bl	8000f74 <HAL_GetTick>
 8001e48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4c:	f7ff f892 	bl	8000f74 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e06e      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	4b3a      	ldr	r3, [pc, #232]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 020c 	and.w	r2, r3, #12
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d1eb      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d010      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	4b31      	ldr	r3, [pc, #196]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d208      	bcs.n	8001ea2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e90:	4b2e      	ldr	r3, [pc, #184]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	492b      	ldr	r1, [pc, #172]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea2:	4b29      	ldr	r3, [pc, #164]	@ (8001f48 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d210      	bcs.n	8001ed2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb0:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f023 0207 	bic.w	r2, r3, #7
 8001eb8:	4923      	ldr	r1, [pc, #140]	@ (8001f48 <HAL_RCC_ClockConfig+0x1ec>)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec0:	4b21      	ldr	r3, [pc, #132]	@ (8001f48 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e036      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d008      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ede:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	4918      	ldr	r1, [pc, #96]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d009      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001efc:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4910      	ldr	r1, [pc, #64]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f10:	f000 f824 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <HAL_RCC_ClockConfig+0x1f0>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	490b      	ldr	r1, [pc, #44]	@ (8001f50 <HAL_RCC_ClockConfig+0x1f4>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	4a09      	ldr	r2, [pc, #36]	@ (8001f54 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f30:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <HAL_RCC_ClockConfig+0x1fc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe ffcd 	bl	8000ed4 <HAL_InitTick>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	08005bc4 	.word	0x08005bc4
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000004 	.word	0x20000004

08001f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	@ 0x24
 8001f60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f74:	4b3b      	ldr	r3, [pc, #236]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x34>
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2b0c      	cmp	r3, #12
 8001f88:	d121      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d11e      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f90:	4b34      	ldr	r3, [pc, #208]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f9c:	4b31      	ldr	r3, [pc, #196]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e005      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fac:	4b2d      	ldr	r3, [pc, #180]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fd4:	4b25      	ldr	r3, [pc, #148]	@ (800206c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	e004      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fe0:	4b23      	ldr	r3, [pc, #140]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fe2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b0c      	cmp	r3, #12
 8001fe8:	d134      	bne.n	8002054 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fea:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d003      	beq.n	8002002 <HAL_RCC_GetSysClockFreq+0xa6>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d003      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0xac>
 8002000:	e005      	b.n	800200e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002002:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <HAL_RCC_GetSysClockFreq+0x110>)
 8002004:	617b      	str	r3, [r7, #20]
      break;
 8002006:	e005      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002008:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x114>)
 800200a:	617b      	str	r3, [r7, #20]
      break;
 800200c:	e002      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	617b      	str	r3, [r7, #20]
      break;
 8002012:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002014:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	3301      	adds	r3, #1
 8002020:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	fb03 f202 	mul.w	r2, r3, r2
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	fbb2 f3f3 	udiv	r3, r2, r3
 8002038:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800203a:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	0e5b      	lsrs	r3, r3, #25
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	3301      	adds	r3, #1
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002054:	69bb      	ldr	r3, [r7, #24]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	@ 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	08005bdc 	.word	0x08005bdc
 800206c:	00f42400 	.word	0x00f42400
 8002070:	007a1200 	.word	0x007a1200

08002074 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002078:	4b03      	ldr	r3, [pc, #12]	@ (8002088 <HAL_RCC_GetHCLKFreq+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000000 	.word	0x20000000

0800208c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002090:	f7ff fff0 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	4904      	ldr	r1, [pc, #16]	@ (80020b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08005bd4 	.word	0x08005bd4

080020b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020bc:	f7ff ffda 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0adb      	lsrs	r3, r3, #11
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4904      	ldr	r1, [pc, #16]	@ (80020e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08005bd4 	.word	0x08005bd4

080020e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020f0:	4b2a      	ldr	r3, [pc, #168]	@ (800219c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020fc:	f7ff f9ee 	bl	80014dc <HAL_PWREx_GetVoltageRange>
 8002100:	6178      	str	r0, [r7, #20]
 8002102:	e014      	b.n	800212e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	4b25      	ldr	r3, [pc, #148]	@ (800219c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	4a24      	ldr	r2, [pc, #144]	@ (800219c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002110:	4b22      	ldr	r3, [pc, #136]	@ (800219c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800211c:	f7ff f9de 	bl	80014dc <HAL_PWREx_GetVoltageRange>
 8002120:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002122:	4b1e      	ldr	r3, [pc, #120]	@ (800219c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	4a1d      	ldr	r2, [pc, #116]	@ (800219c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800212c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002134:	d10b      	bne.n	800214e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b80      	cmp	r3, #128	@ 0x80
 800213a:	d919      	bls.n	8002170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002140:	d902      	bls.n	8002148 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002142:	2302      	movs	r3, #2
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	e013      	b.n	8002170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002148:	2301      	movs	r3, #1
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	e010      	b.n	8002170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b80      	cmp	r3, #128	@ 0x80
 8002152:	d902      	bls.n	800215a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002154:	2303      	movs	r3, #3
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	e00a      	b.n	8002170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b80      	cmp	r3, #128	@ 0x80
 800215e:	d102      	bne.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002160:	2302      	movs	r3, #2
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	e004      	b.n	8002170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b70      	cmp	r3, #112	@ 0x70
 800216a:	d101      	bne.n	8002170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800216c:	2301      	movs	r3, #1
 800216e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 0207 	bic.w	r2, r3, #7
 8002178:	4909      	ldr	r1, [pc, #36]	@ (80021a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002180:	4b07      	ldr	r3, [pc, #28]	@ (80021a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	429a      	cmp	r2, r3
 800218c:	d001      	beq.n	8002192 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	40022000 	.word	0x40022000

080021a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021ac:	2300      	movs	r3, #0
 80021ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021b0:	2300      	movs	r3, #0
 80021b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d041      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021c8:	d02a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021ce:	d824      	bhi.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021d4:	d008      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021da:	d81e      	bhi.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021e4:	d010      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021e6:	e018      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021e8:	4b86      	ldr	r3, [pc, #536]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4a85      	ldr	r2, [pc, #532]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021f4:	e015      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3304      	adds	r3, #4
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fabb 	bl	8002778 <RCCEx_PLLSAI1_Config>
 8002202:	4603      	mov	r3, r0
 8002204:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002206:	e00c      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3320      	adds	r3, #32
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fba6 	bl	8002960 <RCCEx_PLLSAI2_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002218:	e003      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	74fb      	strb	r3, [r7, #19]
      break;
 800221e:	e000      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002222:	7cfb      	ldrb	r3, [r7, #19]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10b      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002228:	4b76      	ldr	r3, [pc, #472]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002236:	4973      	ldr	r1, [pc, #460]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800223e:	e001      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002240:	7cfb      	ldrb	r3, [r7, #19]
 8002242:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d041      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002254:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002258:	d02a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800225a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800225e:	d824      	bhi.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002260:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002264:	d008      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002266:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800226a:	d81e      	bhi.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002274:	d010      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002276:	e018      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002278:	4b62      	ldr	r3, [pc, #392]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4a61      	ldr	r2, [pc, #388]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002282:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002284:	e015      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3304      	adds	r3, #4
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f000 fa73 	bl	8002778 <RCCEx_PLLSAI1_Config>
 8002292:	4603      	mov	r3, r0
 8002294:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002296:	e00c      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3320      	adds	r3, #32
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fb5e 	bl	8002960 <RCCEx_PLLSAI2_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022a8:	e003      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	74fb      	strb	r3, [r7, #19]
      break;
 80022ae:	e000      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022b2:	7cfb      	ldrb	r3, [r7, #19]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10b      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022b8:	4b52      	ldr	r3, [pc, #328]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022c6:	494f      	ldr	r1, [pc, #316]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022ce:	e001      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80a0 	beq.w	8002422 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022e6:	4b47      	ldr	r3, [pc, #284]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022f6:	2300      	movs	r3, #0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00d      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	4b41      	ldr	r3, [pc, #260]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002300:	4a40      	ldr	r2, [pc, #256]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002306:	6593      	str	r3, [r2, #88]	@ 0x58
 8002308:	4b3e      	ldr	r3, [pc, #248]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002314:	2301      	movs	r3, #1
 8002316:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002318:	4b3b      	ldr	r3, [pc, #236]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a3a      	ldr	r2, [pc, #232]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800231e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002322:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002324:	f7fe fe26 	bl	8000f74 <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800232a:	e009      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232c:	f7fe fe22 	bl	8000f74 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d902      	bls.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	74fb      	strb	r3, [r7, #19]
        break;
 800233e:	e005      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002340:	4b31      	ldr	r3, [pc, #196]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ef      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800234c:	7cfb      	ldrb	r3, [r7, #19]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d15c      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002352:	4b2c      	ldr	r3, [pc, #176]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002358:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800235c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01f      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	429a      	cmp	r2, r3
 800236e:	d019      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002370:	4b24      	ldr	r3, [pc, #144]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800237a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800237c:	4b21      	ldr	r3, [pc, #132]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002382:	4a20      	ldr	r2, [pc, #128]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800238c:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002392:	4a1c      	ldr	r2, [pc, #112]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002394:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800239c:	4a19      	ldr	r2, [pc, #100]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d016      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7fe fde1 	bl	8000f74 <HAL_GetTick>
 80023b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b4:	e00b      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b6:	f7fe fddd 	bl	8000f74 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d902      	bls.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	74fb      	strb	r3, [r7, #19]
            break;
 80023cc:	e006      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ec      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10c      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023e2:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023f2:	4904      	ldr	r1, [pc, #16]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023fa:	e009      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	74bb      	strb	r3, [r7, #18]
 8002400:	e006      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002410:	7c7b      	ldrb	r3, [r7, #17]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d105      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002416:	4b9e      	ldr	r3, [pc, #632]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241a:	4a9d      	ldr	r2, [pc, #628]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002420:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800242e:	4b98      	ldr	r3, [pc, #608]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002434:	f023 0203 	bic.w	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243c:	4994      	ldr	r1, [pc, #592]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002450:	4b8f      	ldr	r3, [pc, #572]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002456:	f023 020c 	bic.w	r2, r3, #12
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245e:	498c      	ldr	r1, [pc, #560]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002472:	4b87      	ldr	r3, [pc, #540]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002478:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	4983      	ldr	r1, [pc, #524]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002494:	4b7e      	ldr	r3, [pc, #504]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	497b      	ldr	r1, [pc, #492]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024b6:	4b76      	ldr	r3, [pc, #472]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c4:	4972      	ldr	r1, [pc, #456]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00a      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024d8:	4b6d      	ldr	r3, [pc, #436]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	496a      	ldr	r1, [pc, #424]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024fa:	4b65      	ldr	r3, [pc, #404]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002500:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002508:	4961      	ldr	r1, [pc, #388]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00a      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800251c:	4b5c      	ldr	r3, [pc, #368]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002522:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800252a:	4959      	ldr	r1, [pc, #356]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800253e:	4b54      	ldr	r3, [pc, #336]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002544:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800254c:	4950      	ldr	r1, [pc, #320]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00a      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002560:	4b4b      	ldr	r3, [pc, #300]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002566:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256e:	4948      	ldr	r1, [pc, #288]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002582:	4b43      	ldr	r3, [pc, #268]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002588:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	493f      	ldr	r1, [pc, #252]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d028      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025b2:	4937      	ldr	r1, [pc, #220]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025c2:	d106      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c4:	4b32      	ldr	r3, [pc, #200]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4a31      	ldr	r2, [pc, #196]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025ce:	60d3      	str	r3, [r2, #12]
 80025d0:	e011      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025da:	d10c      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	2101      	movs	r1, #1
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f8c8 	bl	8002778 <RCCEx_PLLSAI1_Config>
 80025e8:	4603      	mov	r3, r0
 80025ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025f2:	7cfb      	ldrb	r3, [r7, #19]
 80025f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d028      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002602:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002608:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002610:	491f      	ldr	r1, [pc, #124]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002620:	d106      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002622:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	4a1a      	ldr	r2, [pc, #104]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002628:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800262c:	60d3      	str	r3, [r2, #12]
 800262e:	e011      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002634:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002638:	d10c      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	2101      	movs	r1, #1
 8002640:	4618      	mov	r0, r3
 8002642:	f000 f899 	bl	8002778 <RCCEx_PLLSAI1_Config>
 8002646:	4603      	mov	r3, r0
 8002648:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800264a:	7cfb      	ldrb	r3, [r7, #19]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d02b      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002666:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266e:	4908      	ldr	r1, [pc, #32]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800267a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800267e:	d109      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002680:	4b03      	ldr	r3, [pc, #12]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4a02      	ldr	r2, [pc, #8]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800268a:	60d3      	str	r3, [r2, #12]
 800268c:	e014      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002698:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2101      	movs	r1, #1
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f867 	bl	8002778 <RCCEx_PLLSAI1_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d02f      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026d2:	4928      	ldr	r1, [pc, #160]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026e2:	d10d      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3304      	adds	r3, #4
 80026e8:	2102      	movs	r1, #2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f844 	bl	8002778 <RCCEx_PLLSAI1_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d014      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026fa:	7cfb      	ldrb	r3, [r7, #19]
 80026fc:	74bb      	strb	r3, [r7, #18]
 80026fe:	e011      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002708:	d10c      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3320      	adds	r3, #32
 800270e:	2102      	movs	r1, #2
 8002710:	4618      	mov	r0, r3
 8002712:	f000 f925 	bl	8002960 <RCCEx_PLLSAI2_Config>
 8002716:	4603      	mov	r3, r0
 8002718:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002720:	7cfb      	ldrb	r3, [r7, #19]
 8002722:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002730:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002736:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800273e:	490d      	ldr	r1, [pc, #52]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002752:	4b08      	ldr	r3, [pc, #32]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002758:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002762:	4904      	ldr	r1, [pc, #16]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800276a:	7cbb      	ldrb	r3, [r7, #18]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000

08002778 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002786:	4b75      	ldr	r3, [pc, #468]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d018      	beq.n	80027c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002792:	4b72      	ldr	r3, [pc, #456]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0203 	and.w	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d10d      	bne.n	80027be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
       ||
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027aa:	4b6c      	ldr	r3, [pc, #432]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	091b      	lsrs	r3, r3, #4
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
       ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d047      	beq.n	800284e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	e044      	b.n	800284e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d018      	beq.n	80027fe <RCCEx_PLLSAI1_Config+0x86>
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d825      	bhi.n	800281c <RCCEx_PLLSAI1_Config+0xa4>
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d002      	beq.n	80027da <RCCEx_PLLSAI1_Config+0x62>
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d009      	beq.n	80027ec <RCCEx_PLLSAI1_Config+0x74>
 80027d8:	e020      	b.n	800281c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027da:	4b60      	ldr	r3, [pc, #384]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d11d      	bne.n	8002822 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ea:	e01a      	b.n	8002822 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027ec:	4b5b      	ldr	r3, [pc, #364]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d116      	bne.n	8002826 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027fc:	e013      	b.n	8002826 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027fe:	4b57      	ldr	r3, [pc, #348]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10f      	bne.n	800282a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800280a:	4b54      	ldr	r3, [pc, #336]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800281a:	e006      	b.n	800282a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
      break;
 8002820:	e004      	b.n	800282c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002822:	bf00      	nop
 8002824:	e002      	b.n	800282c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002826:	bf00      	nop
 8002828:	e000      	b.n	800282c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800282a:	bf00      	nop
    }

    if(status == HAL_OK)
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10d      	bne.n	800284e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002832:	4b4a      	ldr	r3, [pc, #296]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6819      	ldr	r1, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	430b      	orrs	r3, r1
 8002848:	4944      	ldr	r1, [pc, #272]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d17d      	bne.n	8002950 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002854:	4b41      	ldr	r3, [pc, #260]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a40      	ldr	r2, [pc, #256]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 800285a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800285e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002860:	f7fe fb88 	bl	8000f74 <HAL_GetTick>
 8002864:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002866:	e009      	b.n	800287c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002868:	f7fe fb84 	bl	8000f74 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d902      	bls.n	800287c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	73fb      	strb	r3, [r7, #15]
        break;
 800287a:	e005      	b.n	8002888 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800287c:	4b37      	ldr	r3, [pc, #220]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1ef      	bne.n	8002868 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d160      	bne.n	8002950 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d111      	bne.n	80028b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002894:	4b31      	ldr	r3, [pc, #196]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800289c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6892      	ldr	r2, [r2, #8]
 80028a4:	0211      	lsls	r1, r2, #8
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68d2      	ldr	r2, [r2, #12]
 80028aa:	0912      	lsrs	r2, r2, #4
 80028ac:	0452      	lsls	r2, r2, #17
 80028ae:	430a      	orrs	r2, r1
 80028b0:	492a      	ldr	r1, [pc, #168]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	610b      	str	r3, [r1, #16]
 80028b6:	e027      	b.n	8002908 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d112      	bne.n	80028e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028be:	4b27      	ldr	r3, [pc, #156]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80028c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6892      	ldr	r2, [r2, #8]
 80028ce:	0211      	lsls	r1, r2, #8
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6912      	ldr	r2, [r2, #16]
 80028d4:	0852      	lsrs	r2, r2, #1
 80028d6:	3a01      	subs	r2, #1
 80028d8:	0552      	lsls	r2, r2, #21
 80028da:	430a      	orrs	r2, r1
 80028dc:	491f      	ldr	r1, [pc, #124]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	610b      	str	r3, [r1, #16]
 80028e2:	e011      	b.n	8002908 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028e4:	4b1d      	ldr	r3, [pc, #116]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6892      	ldr	r2, [r2, #8]
 80028f4:	0211      	lsls	r1, r2, #8
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6952      	ldr	r2, [r2, #20]
 80028fa:	0852      	lsrs	r2, r2, #1
 80028fc:	3a01      	subs	r2, #1
 80028fe:	0652      	lsls	r2, r2, #25
 8002900:	430a      	orrs	r2, r1
 8002902:	4916      	ldr	r1, [pc, #88]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002904:	4313      	orrs	r3, r2
 8002906:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002908:	4b14      	ldr	r3, [pc, #80]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a13      	ldr	r2, [pc, #76]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 800290e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002912:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe fb2e 	bl	8000f74 <HAL_GetTick>
 8002918:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800291a:	e009      	b.n	8002930 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800291c:	f7fe fb2a 	bl	8000f74 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d902      	bls.n	8002930 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	73fb      	strb	r3, [r7, #15]
          break;
 800292e:	e005      	b.n	800293c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002930:	4b0a      	ldr	r3, [pc, #40]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ef      	beq.n	800291c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002942:	4b06      	ldr	r3, [pc, #24]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	4904      	ldr	r1, [pc, #16]	@ (800295c <RCCEx_PLLSAI1_Config+0x1e4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002950:	7bfb      	ldrb	r3, [r7, #15]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000

08002960 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800296e:	4b6a      	ldr	r3, [pc, #424]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d018      	beq.n	80029ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800297a:	4b67      	ldr	r3, [pc, #412]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f003 0203 	and.w	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d10d      	bne.n	80029a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
       ||
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002992:	4b61      	ldr	r3, [pc, #388]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	091b      	lsrs	r3, r3, #4
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
       ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d047      	beq.n	8002a36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	73fb      	strb	r3, [r7, #15]
 80029aa:	e044      	b.n	8002a36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d018      	beq.n	80029e6 <RCCEx_PLLSAI2_Config+0x86>
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d825      	bhi.n	8002a04 <RCCEx_PLLSAI2_Config+0xa4>
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d002      	beq.n	80029c2 <RCCEx_PLLSAI2_Config+0x62>
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d009      	beq.n	80029d4 <RCCEx_PLLSAI2_Config+0x74>
 80029c0:	e020      	b.n	8002a04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029c2:	4b55      	ldr	r3, [pc, #340]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d11d      	bne.n	8002a0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d2:	e01a      	b.n	8002a0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029d4:	4b50      	ldr	r3, [pc, #320]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d116      	bne.n	8002a0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e4:	e013      	b.n	8002a0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10f      	bne.n	8002a12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029f2:	4b49      	ldr	r3, [pc, #292]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a02:	e006      	b.n	8002a12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
      break;
 8002a08:	e004      	b.n	8002a14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e002      	b.n	8002a14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e000      	b.n	8002a14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a12:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10d      	bne.n	8002a36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6819      	ldr	r1, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	4939      	ldr	r1, [pc, #228]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d167      	bne.n	8002b0c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a3c:	4b36      	ldr	r3, [pc, #216]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a35      	ldr	r2, [pc, #212]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a48:	f7fe fa94 	bl	8000f74 <HAL_GetTick>
 8002a4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a4e:	e009      	b.n	8002a64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a50:	f7fe fa90 	bl	8000f74 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d902      	bls.n	8002a64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	73fb      	strb	r3, [r7, #15]
        break;
 8002a62:	e005      	b.n	8002a70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a64:	4b2c      	ldr	r3, [pc, #176]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1ef      	bne.n	8002a50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d14a      	bne.n	8002b0c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d111      	bne.n	8002aa0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a7c:	4b26      	ldr	r3, [pc, #152]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6892      	ldr	r2, [r2, #8]
 8002a8c:	0211      	lsls	r1, r2, #8
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68d2      	ldr	r2, [r2, #12]
 8002a92:	0912      	lsrs	r2, r2, #4
 8002a94:	0452      	lsls	r2, r2, #17
 8002a96:	430a      	orrs	r2, r1
 8002a98:	491f      	ldr	r1, [pc, #124]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	614b      	str	r3, [r1, #20]
 8002a9e:	e011      	b.n	8002ac4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002aa8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6892      	ldr	r2, [r2, #8]
 8002ab0:	0211      	lsls	r1, r2, #8
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6912      	ldr	r2, [r2, #16]
 8002ab6:	0852      	lsrs	r2, r2, #1
 8002ab8:	3a01      	subs	r2, #1
 8002aba:	0652      	lsls	r2, r2, #25
 8002abc:	430a      	orrs	r2, r1
 8002abe:	4916      	ldr	r1, [pc, #88]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ac4:	4b14      	ldr	r3, [pc, #80]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a13      	ldr	r2, [pc, #76]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fa50 	bl	8000f74 <HAL_GetTick>
 8002ad4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ad6:	e009      	b.n	8002aec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ad8:	f7fe fa4c 	bl	8000f74 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d902      	bls.n	8002aec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	73fb      	strb	r3, [r7, #15]
          break;
 8002aea:	e005      	b.n	8002af8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aec:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ef      	beq.n	8002ad8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	4904      	ldr	r1, [pc, #16]	@ (8002b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000

08002b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e040      	b.n	8002bb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe f922 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2224      	movs	r2, #36	@ 0x24
 8002b48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0201 	bic.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fbcc 	bl	8003300 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f911 	bl	8002d90 <UART_SetConfig>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e01b      	b.n	8002bb0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fc4b 	bl	8003444 <UART_CheckIdleState>
 8002bae:	4603      	mov	r3, r0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	@ 0x28
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d177      	bne.n	8002cc0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_UART_Transmit+0x24>
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e070      	b.n	8002cc2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2221      	movs	r2, #33	@ 0x21
 8002bec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bee:	f7fe f9c1 	bl	8000f74 <HAL_GetTick>
 8002bf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	88fa      	ldrh	r2, [r7, #6]
 8002bf8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	88fa      	ldrh	r2, [r7, #6]
 8002c00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c0c:	d108      	bne.n	8002c20 <HAL_UART_Transmit+0x68>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d104      	bne.n	8002c20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	e003      	b.n	8002c28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c28:	e02f      	b.n	8002c8a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2200      	movs	r2, #0
 8002c32:	2180      	movs	r1, #128	@ 0x80
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fcad 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d004      	beq.n	8002c4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e03b      	b.n	8002cc2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10b      	bne.n	8002c68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	881a      	ldrh	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c5c:	b292      	uxth	r2, r2
 8002c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	3302      	adds	r3, #2
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	e007      	b.n	8002c78 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3301      	adds	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1c9      	bne.n	8002c2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2140      	movs	r1, #64	@ 0x40
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 fc77 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d004      	beq.n	8002cb6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e005      	b.n	8002cc2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e000      	b.n	8002cc2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	@ 0x28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d137      	bne.n	8002d54 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_UART_Receive_IT+0x24>
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e030      	b.n	8002d56 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a18      	ldr	r2, [pc, #96]	@ (8002d60 <HAL_UART_Receive_IT+0x94>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d01f      	beq.n	8002d44 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d018      	beq.n	8002d44 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	e853 3f00 	ldrex	r3, [r3]
 8002d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	623b      	str	r3, [r7, #32]
 8002d32:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d34:	69f9      	ldr	r1, [r7, #28]
 8002d36:	6a3a      	ldr	r2, [r7, #32]
 8002d38:	e841 2300 	strex	r3, r2, [r1]
 8002d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e6      	bne.n	8002d12 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fc90 	bl	8003670 <UART_Start_Receive_IT>
 8002d50:	4603      	mov	r3, r0
 8002d52:	e000      	b.n	8002d56 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3728      	adds	r7, #40	@ 0x28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40008000 	.word	0x40008000

08002d64 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d94:	b08a      	sub	sp, #40	@ 0x28
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4ba4      	ldr	r3, [pc, #656]	@ (8003050 <UART_SetConfig+0x2c0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a99      	ldr	r2, [pc, #612]	@ (8003054 <UART_SetConfig+0x2c4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a90      	ldr	r2, [pc, #576]	@ (8003058 <UART_SetConfig+0x2c8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d126      	bne.n	8002e68 <UART_SetConfig+0xd8>
 8002e1a:	4b90      	ldr	r3, [pc, #576]	@ (800305c <UART_SetConfig+0x2cc>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d81b      	bhi.n	8002e60 <UART_SetConfig+0xd0>
 8002e28:	a201      	add	r2, pc, #4	@ (adr r2, 8002e30 <UART_SetConfig+0xa0>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e41 	.word	0x08002e41
 8002e34:	08002e51 	.word	0x08002e51
 8002e38:	08002e49 	.word	0x08002e49
 8002e3c:	08002e59 	.word	0x08002e59
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e46:	e116      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e4e:	e112      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002e50:	2304      	movs	r3, #4
 8002e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e56:	e10e      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002e58:	2308      	movs	r3, #8
 8002e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e5e:	e10a      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002e60:	2310      	movs	r3, #16
 8002e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e66:	e106      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a7c      	ldr	r2, [pc, #496]	@ (8003060 <UART_SetConfig+0x2d0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d138      	bne.n	8002ee4 <UART_SetConfig+0x154>
 8002e72:	4b7a      	ldr	r3, [pc, #488]	@ (800305c <UART_SetConfig+0x2cc>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b0c      	cmp	r3, #12
 8002e7e:	d82d      	bhi.n	8002edc <UART_SetConfig+0x14c>
 8002e80:	a201      	add	r2, pc, #4	@ (adr r2, 8002e88 <UART_SetConfig+0xf8>)
 8002e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e86:	bf00      	nop
 8002e88:	08002ebd 	.word	0x08002ebd
 8002e8c:	08002edd 	.word	0x08002edd
 8002e90:	08002edd 	.word	0x08002edd
 8002e94:	08002edd 	.word	0x08002edd
 8002e98:	08002ecd 	.word	0x08002ecd
 8002e9c:	08002edd 	.word	0x08002edd
 8002ea0:	08002edd 	.word	0x08002edd
 8002ea4:	08002edd 	.word	0x08002edd
 8002ea8:	08002ec5 	.word	0x08002ec5
 8002eac:	08002edd 	.word	0x08002edd
 8002eb0:	08002edd 	.word	0x08002edd
 8002eb4:	08002edd 	.word	0x08002edd
 8002eb8:	08002ed5 	.word	0x08002ed5
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ec2:	e0d8      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eca:	e0d4      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ed2:	e0d0      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eda:	e0cc      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002edc:	2310      	movs	r3, #16
 8002ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ee2:	e0c8      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a5e      	ldr	r2, [pc, #376]	@ (8003064 <UART_SetConfig+0x2d4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d125      	bne.n	8002f3a <UART_SetConfig+0x1aa>
 8002eee:	4b5b      	ldr	r3, [pc, #364]	@ (800305c <UART_SetConfig+0x2cc>)
 8002ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ef8:	2b30      	cmp	r3, #48	@ 0x30
 8002efa:	d016      	beq.n	8002f2a <UART_SetConfig+0x19a>
 8002efc:	2b30      	cmp	r3, #48	@ 0x30
 8002efe:	d818      	bhi.n	8002f32 <UART_SetConfig+0x1a2>
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d00a      	beq.n	8002f1a <UART_SetConfig+0x18a>
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d814      	bhi.n	8002f32 <UART_SetConfig+0x1a2>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <UART_SetConfig+0x182>
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d008      	beq.n	8002f22 <UART_SetConfig+0x192>
 8002f10:	e00f      	b.n	8002f32 <UART_SetConfig+0x1a2>
 8002f12:	2300      	movs	r3, #0
 8002f14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f18:	e0ad      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f20:	e0a9      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002f22:	2304      	movs	r3, #4
 8002f24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f28:	e0a5      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002f2a:	2308      	movs	r3, #8
 8002f2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f30:	e0a1      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002f32:	2310      	movs	r3, #16
 8002f34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f38:	e09d      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a4a      	ldr	r2, [pc, #296]	@ (8003068 <UART_SetConfig+0x2d8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d125      	bne.n	8002f90 <UART_SetConfig+0x200>
 8002f44:	4b45      	ldr	r3, [pc, #276]	@ (800305c <UART_SetConfig+0x2cc>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f50:	d016      	beq.n	8002f80 <UART_SetConfig+0x1f0>
 8002f52:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f54:	d818      	bhi.n	8002f88 <UART_SetConfig+0x1f8>
 8002f56:	2b80      	cmp	r3, #128	@ 0x80
 8002f58:	d00a      	beq.n	8002f70 <UART_SetConfig+0x1e0>
 8002f5a:	2b80      	cmp	r3, #128	@ 0x80
 8002f5c:	d814      	bhi.n	8002f88 <UART_SetConfig+0x1f8>
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <UART_SetConfig+0x1d8>
 8002f62:	2b40      	cmp	r3, #64	@ 0x40
 8002f64:	d008      	beq.n	8002f78 <UART_SetConfig+0x1e8>
 8002f66:	e00f      	b.n	8002f88 <UART_SetConfig+0x1f8>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f6e:	e082      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002f70:	2302      	movs	r3, #2
 8002f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f76:	e07e      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f7e:	e07a      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002f80:	2308      	movs	r3, #8
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f86:	e076      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002f88:	2310      	movs	r3, #16
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f8e:	e072      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a35      	ldr	r2, [pc, #212]	@ (800306c <UART_SetConfig+0x2dc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d12a      	bne.n	8002ff0 <UART_SetConfig+0x260>
 8002f9a:	4b30      	ldr	r3, [pc, #192]	@ (800305c <UART_SetConfig+0x2cc>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fa8:	d01a      	beq.n	8002fe0 <UART_SetConfig+0x250>
 8002faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fae:	d81b      	bhi.n	8002fe8 <UART_SetConfig+0x258>
 8002fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb4:	d00c      	beq.n	8002fd0 <UART_SetConfig+0x240>
 8002fb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fba:	d815      	bhi.n	8002fe8 <UART_SetConfig+0x258>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <UART_SetConfig+0x238>
 8002fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fc4:	d008      	beq.n	8002fd8 <UART_SetConfig+0x248>
 8002fc6:	e00f      	b.n	8002fe8 <UART_SetConfig+0x258>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fce:	e052      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd6:	e04e      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002fd8:	2304      	movs	r3, #4
 8002fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fde:	e04a      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002fe0:	2308      	movs	r3, #8
 8002fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fe6:	e046      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002fe8:	2310      	movs	r3, #16
 8002fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fee:	e042      	b.n	8003076 <UART_SetConfig+0x2e6>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a17      	ldr	r2, [pc, #92]	@ (8003054 <UART_SetConfig+0x2c4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d13a      	bne.n	8003070 <UART_SetConfig+0x2e0>
 8002ffa:	4b18      	ldr	r3, [pc, #96]	@ (800305c <UART_SetConfig+0x2cc>)
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003000:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003004:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003008:	d01a      	beq.n	8003040 <UART_SetConfig+0x2b0>
 800300a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800300e:	d81b      	bhi.n	8003048 <UART_SetConfig+0x2b8>
 8003010:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003014:	d00c      	beq.n	8003030 <UART_SetConfig+0x2a0>
 8003016:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800301a:	d815      	bhi.n	8003048 <UART_SetConfig+0x2b8>
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <UART_SetConfig+0x298>
 8003020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003024:	d008      	beq.n	8003038 <UART_SetConfig+0x2a8>
 8003026:	e00f      	b.n	8003048 <UART_SetConfig+0x2b8>
 8003028:	2300      	movs	r3, #0
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800302e:	e022      	b.n	8003076 <UART_SetConfig+0x2e6>
 8003030:	2302      	movs	r3, #2
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003036:	e01e      	b.n	8003076 <UART_SetConfig+0x2e6>
 8003038:	2304      	movs	r3, #4
 800303a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800303e:	e01a      	b.n	8003076 <UART_SetConfig+0x2e6>
 8003040:	2308      	movs	r3, #8
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003046:	e016      	b.n	8003076 <UART_SetConfig+0x2e6>
 8003048:	2310      	movs	r3, #16
 800304a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800304e:	e012      	b.n	8003076 <UART_SetConfig+0x2e6>
 8003050:	efff69f3 	.word	0xefff69f3
 8003054:	40008000 	.word	0x40008000
 8003058:	40013800 	.word	0x40013800
 800305c:	40021000 	.word	0x40021000
 8003060:	40004400 	.word	0x40004400
 8003064:	40004800 	.word	0x40004800
 8003068:	40004c00 	.word	0x40004c00
 800306c:	40005000 	.word	0x40005000
 8003070:	2310      	movs	r3, #16
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a9f      	ldr	r2, [pc, #636]	@ (80032f8 <UART_SetConfig+0x568>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d17a      	bne.n	8003176 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003080:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003084:	2b08      	cmp	r3, #8
 8003086:	d824      	bhi.n	80030d2 <UART_SetConfig+0x342>
 8003088:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <UART_SetConfig+0x300>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030b5 	.word	0x080030b5
 8003094:	080030d3 	.word	0x080030d3
 8003098:	080030bd 	.word	0x080030bd
 800309c:	080030d3 	.word	0x080030d3
 80030a0:	080030c3 	.word	0x080030c3
 80030a4:	080030d3 	.word	0x080030d3
 80030a8:	080030d3 	.word	0x080030d3
 80030ac:	080030d3 	.word	0x080030d3
 80030b0:	080030cb 	.word	0x080030cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b4:	f7fe ffea 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 80030b8:	61f8      	str	r0, [r7, #28]
        break;
 80030ba:	e010      	b.n	80030de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030bc:	4b8f      	ldr	r3, [pc, #572]	@ (80032fc <UART_SetConfig+0x56c>)
 80030be:	61fb      	str	r3, [r7, #28]
        break;
 80030c0:	e00d      	b.n	80030de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c2:	f7fe ff4b 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 80030c6:	61f8      	str	r0, [r7, #28]
        break;
 80030c8:	e009      	b.n	80030de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ce:	61fb      	str	r3, [r7, #28]
        break;
 80030d0:	e005      	b.n	80030de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80fb 	beq.w	80032dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d305      	bcc.n	8003102 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d903      	bls.n	800310a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003108:	e0e8      	b.n	80032dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	2200      	movs	r2, #0
 800310e:	461c      	mov	r4, r3
 8003110:	4615      	mov	r5, r2
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	022b      	lsls	r3, r5, #8
 800311c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003120:	0222      	lsls	r2, r4, #8
 8003122:	68f9      	ldr	r1, [r7, #12]
 8003124:	6849      	ldr	r1, [r1, #4]
 8003126:	0849      	lsrs	r1, r1, #1
 8003128:	2000      	movs	r0, #0
 800312a:	4688      	mov	r8, r1
 800312c:	4681      	mov	r9, r0
 800312e:	eb12 0a08 	adds.w	sl, r2, r8
 8003132:	eb43 0b09 	adc.w	fp, r3, r9
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003144:	4650      	mov	r0, sl
 8003146:	4659      	mov	r1, fp
 8003148:	f7fd f892 	bl	8000270 <__aeabi_uldivmod>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4613      	mov	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800315a:	d308      	bcc.n	800316e <UART_SetConfig+0x3de>
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003162:	d204      	bcs.n	800316e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	60da      	str	r2, [r3, #12]
 800316c:	e0b6      	b.n	80032dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003174:	e0b2      	b.n	80032dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800317e:	d15e      	bne.n	800323e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003180:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x44a>
 8003188:	a201      	add	r2, pc, #4	@ (adr r2, 8003190 <UART_SetConfig+0x400>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7fe ff6a 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 80031b8:	61f8      	str	r0, [r7, #28]
        break;
 80031ba:	e014      	b.n	80031e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7fe ff7c 	bl	80020b8 <HAL_RCC_GetPCLK2Freq>
 80031c0:	61f8      	str	r0, [r7, #28]
        break;
 80031c2:	e010      	b.n	80031e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b4d      	ldr	r3, [pc, #308]	@ (80032fc <UART_SetConfig+0x56c>)
 80031c6:	61fb      	str	r3, [r7, #28]
        break;
 80031c8:	e00d      	b.n	80031e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7fe fec7 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 80031ce:	61f8      	str	r0, [r7, #28]
        break;
 80031d0:	e009      	b.n	80031e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031d6:	61fb      	str	r3, [r7, #28]
        break;
 80031d8:	e005      	b.n	80031e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d077      	beq.n	80032dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	005a      	lsls	r2, r3, #1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	441a      	add	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	2b0f      	cmp	r3, #15
 8003206:	d916      	bls.n	8003236 <UART_SetConfig+0x4a6>
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800320e:	d212      	bcs.n	8003236 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	b29b      	uxth	r3, r3
 8003214:	f023 030f 	bic.w	r3, r3, #15
 8003218:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	b29b      	uxth	r3, r3
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	b29a      	uxth	r2, r3
 8003226:	8afb      	ldrh	r3, [r7, #22]
 8003228:	4313      	orrs	r3, r2
 800322a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	8afa      	ldrh	r2, [r7, #22]
 8003232:	60da      	str	r2, [r3, #12]
 8003234:	e052      	b.n	80032dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800323c:	e04e      	b.n	80032dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800323e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003242:	2b08      	cmp	r3, #8
 8003244:	d827      	bhi.n	8003296 <UART_SetConfig+0x506>
 8003246:	a201      	add	r2, pc, #4	@ (adr r2, 800324c <UART_SetConfig+0x4bc>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	08003271 	.word	0x08003271
 8003250:	08003279 	.word	0x08003279
 8003254:	08003281 	.word	0x08003281
 8003258:	08003297 	.word	0x08003297
 800325c:	08003287 	.word	0x08003287
 8003260:	08003297 	.word	0x08003297
 8003264:	08003297 	.word	0x08003297
 8003268:	08003297 	.word	0x08003297
 800326c:	0800328f 	.word	0x0800328f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003270:	f7fe ff0c 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 8003274:	61f8      	str	r0, [r7, #28]
        break;
 8003276:	e014      	b.n	80032a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003278:	f7fe ff1e 	bl	80020b8 <HAL_RCC_GetPCLK2Freq>
 800327c:	61f8      	str	r0, [r7, #28]
        break;
 800327e:	e010      	b.n	80032a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003280:	4b1e      	ldr	r3, [pc, #120]	@ (80032fc <UART_SetConfig+0x56c>)
 8003282:	61fb      	str	r3, [r7, #28]
        break;
 8003284:	e00d      	b.n	80032a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003286:	f7fe fe69 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 800328a:	61f8      	str	r0, [r7, #28]
        break;
 800328c:	e009      	b.n	80032a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800328e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003292:	61fb      	str	r3, [r7, #28]
        break;
 8003294:	e005      	b.n	80032a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80032a0:	bf00      	nop
    }

    if (pclk != 0U)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d019      	beq.n	80032dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	085a      	lsrs	r2, r3, #1
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	441a      	add	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b0f      	cmp	r3, #15
 80032c0:	d909      	bls.n	80032d6 <UART_SetConfig+0x546>
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c8:	d205      	bcs.n	80032d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60da      	str	r2, [r3, #12]
 80032d4:	e002      	b.n	80032dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3728      	adds	r7, #40	@ 0x28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f6:	bf00      	nop
 80032f8:	40008000 	.word	0x40008000
 80032fc:	00f42400 	.word	0x00f42400

08003300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01a      	beq.n	8003416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033fe:	d10a      	bne.n	8003416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  }
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b098      	sub	sp, #96	@ 0x60
 8003448:	af02      	add	r7, sp, #8
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003454:	f7fd fd8e 	bl	8000f74 <HAL_GetTick>
 8003458:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b08      	cmp	r3, #8
 8003466:	d12e      	bne.n	80034c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003468:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003470:	2200      	movs	r2, #0
 8003472:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f88c 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d021      	beq.n	80034c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003496:	653b      	str	r3, [r7, #80]	@ 0x50
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034a8:	e841 2300 	strex	r3, r2, [r1]
 80034ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e6      	bne.n	8003482 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e062      	b.n	800358c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d149      	bne.n	8003568 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034dc:	2200      	movs	r2, #0
 80034de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f856 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d03c      	beq.n	8003568 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	e853 3f00 	ldrex	r3, [r3]
 80034fa:	623b      	str	r3, [r7, #32]
   return(result);
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003502:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800350c:	633b      	str	r3, [r7, #48]	@ 0x30
 800350e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800351a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e6      	bne.n	80034ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3308      	adds	r3, #8
 8003526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0301 	bic.w	r3, r3, #1
 8003536:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3308      	adds	r3, #8
 800353e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003540:	61fa      	str	r2, [r7, #28]
 8003542:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	69b9      	ldr	r1, [r7, #24]
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	617b      	str	r3, [r7, #20]
   return(result);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e5      	bne.n	8003520 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e011      	b.n	800358c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3758      	adds	r7, #88	@ 0x58
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a4:	e04f      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d04b      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ae:	f7fd fce1 	bl	8000f74 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d302      	bcc.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e04e      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d037      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b80      	cmp	r3, #128	@ 0x80
 80035da:	d034      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b40      	cmp	r3, #64	@ 0x40
 80035e0:	d031      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d110      	bne.n	8003612 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2208      	movs	r2, #8
 80035f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f8ff 	bl	80037fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2208      	movs	r2, #8
 8003602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e029      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800361c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003620:	d111      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800362a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f8e5 	bl	80037fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e00f      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	429a      	cmp	r2, r3
 8003662:	d0a0      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003670:	b480      	push	{r7}
 8003672:	b097      	sub	sp, #92	@ 0x5c
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	88fa      	ldrh	r2, [r7, #6]
 8003688:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a2:	d10e      	bne.n	80036c2 <UART_Start_Receive_IT+0x52>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <UART_Start_Receive_IT+0x48>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80036b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036b6:	e02d      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	22ff      	movs	r2, #255	@ 0xff
 80036bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036c0:	e028      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <UART_Start_Receive_IT+0x76>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d104      	bne.n	80036dc <UART_Start_Receive_IT+0x6c>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	22ff      	movs	r2, #255	@ 0xff
 80036d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036da:	e01b      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	227f      	movs	r2, #127	@ 0x7f
 80036e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036e4:	e016      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036ee:	d10d      	bne.n	800370c <UART_Start_Receive_IT+0x9c>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <UART_Start_Receive_IT+0x92>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	227f      	movs	r2, #127	@ 0x7f
 80036fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003700:	e008      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	223f      	movs	r2, #63	@ 0x3f
 8003706:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800370a:	e003      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2222      	movs	r2, #34	@ 0x22
 8003720:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3308      	adds	r3, #8
 800372a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	657b      	str	r3, [r7, #84]	@ 0x54
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3308      	adds	r3, #8
 8003742:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003744:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003746:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800374a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e5      	bne.n	8003724 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003760:	d107      	bne.n	8003772 <UART_Start_Receive_IT+0x102>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a21      	ldr	r2, [pc, #132]	@ (80037f4 <UART_Start_Receive_IT+0x184>)
 800376e:	669a      	str	r2, [r3, #104]	@ 0x68
 8003770:	e002      	b.n	8003778 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a20      	ldr	r2, [pc, #128]	@ (80037f8 <UART_Start_Receive_IT+0x188>)
 8003776:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d019      	beq.n	80037b4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003794:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800379e:	637b      	str	r3, [r7, #52]	@ 0x34
 80037a0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80037ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e6      	bne.n	8003780 <UART_Start_Receive_IT+0x110>
 80037b2:	e018      	b.n	80037e6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	613b      	str	r3, [r7, #16]
   return(result);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f043 0320 	orr.w	r3, r3, #32
 80037c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037d2:	623b      	str	r3, [r7, #32]
 80037d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	69f9      	ldr	r1, [r7, #28]
 80037d8:	6a3a      	ldr	r2, [r7, #32]
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	61bb      	str	r3, [r7, #24]
   return(result);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e6      	bne.n	80037b4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	375c      	adds	r7, #92	@ 0x5c
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	08003a81 	.word	0x08003a81
 80037f8:	080038c5 	.word	0x080038c5

080037fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b095      	sub	sp, #84	@ 0x54
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003822:	643b      	str	r3, [r7, #64]	@ 0x40
 8003824:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e6      	bne.n	8003804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3308      	adds	r3, #8
 800383c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	61fb      	str	r3, [r7, #28]
   return(result);
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3308      	adds	r3, #8
 8003854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800385c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e5      	bne.n	8003836 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386e:	2b01      	cmp	r3, #1
 8003870:	d118      	bne.n	80038a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f023 0310 	bic.w	r3, r3, #16
 8003886:	647b      	str	r3, [r7, #68]	@ 0x44
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	6979      	ldr	r1, [r7, #20]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	613b      	str	r3, [r7, #16]
   return(result);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e6      	bne.n	8003872 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80038b8:	bf00      	nop
 80038ba:	3754      	adds	r7, #84	@ 0x54
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b09c      	sub	sp, #112	@ 0x70
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80038d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038dc:	2b22      	cmp	r3, #34	@ 0x22
 80038de:	f040 80be 	bne.w	8003a5e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80038e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80038f0:	b2d9      	uxtb	r1, r3
 80038f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fc:	400a      	ands	r2, r1
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 80a3 	bne.w	8003a72 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800393a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800393c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003940:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800394a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800394c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003950:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003952:	e841 2300 	strex	r3, r2, [r1]
 8003956:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e6      	bne.n	800392c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3308      	adds	r3, #8
 8003964:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800396e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	667b      	str	r3, [r7, #100]	@ 0x64
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3308      	adds	r3, #8
 800397c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800397e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003980:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003984:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800398c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e5      	bne.n	800395e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a34      	ldr	r2, [pc, #208]	@ (8003a7c <UART_RxISR_8BIT+0x1b8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d01f      	beq.n	80039f0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d018      	beq.n	80039f0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	e853 3f00 	ldrex	r3, [r3]
 80039ca:	623b      	str	r3, [r7, #32]
   return(result);
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80039de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e6      	bne.n	80039be <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d12e      	bne.n	8003a56 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	e853 3f00 	ldrex	r3, [r3]
 8003a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0310 	bic.w	r3, r3, #16
 8003a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	69b9      	ldr	r1, [r7, #24]
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	e841 2300 	strex	r3, r2, [r1]
 8003a28:	617b      	str	r3, [r7, #20]
   return(result);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e6      	bne.n	80039fe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d103      	bne.n	8003a46 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2210      	movs	r2, #16
 8003a44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff f992 	bl	8002d78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a54:	e00d      	b.n	8003a72 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff f984 	bl	8002d64 <HAL_UART_RxCpltCallback>
}
 8003a5c:	e009      	b.n	8003a72 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	8b1b      	ldrh	r3, [r3, #24]
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0208 	orr.w	r2, r2, #8
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	831a      	strh	r2, [r3, #24]
}
 8003a72:	bf00      	nop
 8003a74:	3770      	adds	r7, #112	@ 0x70
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40008000 	.word	0x40008000

08003a80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b09c      	sub	sp, #112	@ 0x70
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a98:	2b22      	cmp	r3, #34	@ 0x22
 8003a9a:	f040 80be 	bne.w	8003c1a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003aa4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003aae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003ab2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003abc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac2:	1c9a      	adds	r2, r3, #2
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f040 80a3 	bne.w	8003c2e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003af0:	e853 3f00 	ldrex	r3, [r3]
 8003af4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003afc:	667b      	str	r3, [r7, #100]	@ 0x64
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b06:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b08:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003b0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b0e:	e841 2300 	strex	r3, r2, [r1]
 8003b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1e6      	bne.n	8003ae8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3308      	adds	r3, #8
 8003b20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b24:	e853 3f00 	ldrex	r3, [r3]
 8003b28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3308      	adds	r3, #8
 8003b38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003b3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b42:	e841 2300 	strex	r3, r2, [r1]
 8003b46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1e5      	bne.n	8003b1a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a34      	ldr	r2, [pc, #208]	@ (8003c38 <UART_RxISR_16BIT+0x1b8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d01f      	beq.n	8003bac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d018      	beq.n	8003bac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	e853 3f00 	ldrex	r3, [r3]
 8003b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	461a      	mov	r2, r3
 8003b96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b9a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ba0:	e841 2300 	strex	r3, r2, [r1]
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e6      	bne.n	8003b7a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d12e      	bne.n	8003c12 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f023 0310 	bic.w	r3, r3, #16
 8003bce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6979      	ldr	r1, [r7, #20]
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	613b      	str	r3, [r7, #16]
   return(result);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e6      	bne.n	8003bba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b10      	cmp	r3, #16
 8003bf8:	d103      	bne.n	8003c02 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2210      	movs	r2, #16
 8003c00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c08:	4619      	mov	r1, r3
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff f8b4 	bl	8002d78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c10:	e00d      	b.n	8003c2e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff f8a6 	bl	8002d64 <HAL_UART_RxCpltCallback>
}
 8003c18:	e009      	b.n	8003c2e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	8b1b      	ldrh	r3, [r3, #24]
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0208 	orr.w	r2, r2, #8
 8003c2a:	b292      	uxth	r2, r2
 8003c2c:	831a      	strh	r2, [r3, #24]
}
 8003c2e:	bf00      	nop
 8003c30:	3770      	adds	r7, #112	@ 0x70
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40008000 	.word	0x40008000

08003c3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c4e:	2b84      	cmp	r3, #132	@ 0x84
 8003c50:	d005      	beq.n	8003c5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	3303      	adds	r3, #3
 8003c5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c70:	f000 fae4 	bl	800423c <vTaskStartScheduler>
  
  return osOK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c7c:	b089      	sub	sp, #36	@ 0x24
 8003c7e:	af04      	add	r7, sp, #16
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d020      	beq.n	8003cce <osThreadCreate+0x54>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01c      	beq.n	8003cce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685c      	ldr	r4, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691e      	ldr	r6, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff ffc8 	bl	8003c3c <makeFreeRtosPriority>
 8003cac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cb6:	9202      	str	r2, [sp, #8]
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	9100      	str	r1, [sp, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	4632      	mov	r2, r6
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f000 f8ed 	bl	8003ea2 <xTaskCreateStatic>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	e01c      	b.n	8003d08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685c      	ldr	r4, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cda:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff ffaa 	bl	8003c3c <makeFreeRtosPriority>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	f107 030c 	add.w	r3, r7, #12
 8003cee:	9301      	str	r3, [sp, #4]
 8003cf0:	9200      	str	r2, [sp, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	4632      	mov	r2, r6
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f000 f932 	bl	8003f62 <xTaskCreate>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d001      	beq.n	8003d08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e000      	b.n	8003d0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d08:	68fb      	ldr	r3, [r7, #12]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <osDelay+0x16>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	e000      	b.n	8003d2a <osDelay+0x18>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fa50 	bl	80041d0 <vTaskDelay>
  
  return osOK;
 8003d30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f103 0208 	add.w	r2, r3, #8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d52:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f103 0208 	add.w	r2, r3, #8
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f103 0208 	add.w	r2, r3, #8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	601a      	str	r2, [r3, #0]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d103      	bne.n	8003dfc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e00c      	b.n	8003e16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e002      	b.n	8003e0a <vListInsert+0x2e>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d2f6      	bcs.n	8003e04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6892      	ldr	r2, [r2, #8]
 8003e64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6852      	ldr	r2, [r2, #4]
 8003e6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d103      	bne.n	8003e82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	1e5a      	subs	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b08e      	sub	sp, #56	@ 0x38
 8003ea6:	af04      	add	r7, sp, #16
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10b      	bne.n	8003ece <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	e7fd      	b.n	8003eca <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <xTaskCreateStatic+0x4a>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	61fb      	str	r3, [r7, #28]
}
 8003ee6:	bf00      	nop
 8003ee8:	bf00      	nop
 8003eea:	e7fd      	b.n	8003ee8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003eec:	2354      	movs	r3, #84	@ 0x54
 8003eee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b54      	cmp	r3, #84	@ 0x54
 8003ef4:	d00b      	beq.n	8003f0e <xTaskCreateStatic+0x6c>
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	61bb      	str	r3, [r7, #24]
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	e7fd      	b.n	8003f0a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01e      	beq.n	8003f54 <xTaskCreateStatic+0xb2>
 8003f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01b      	beq.n	8003f54 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f24:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f28:	2202      	movs	r2, #2
 8003f2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f2e:	2300      	movs	r3, #0
 8003f30:	9303      	str	r3, [sp, #12]
 8003f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f34:	9302      	str	r3, [sp, #8]
 8003f36:	f107 0314 	add.w	r3, r7, #20
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f850 	bl	8003fec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f4e:	f000 f8d5 	bl	80040fc <prvAddNewTaskToReadyList>
 8003f52:	e001      	b.n	8003f58 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f58:	697b      	ldr	r3, [r7, #20]
	}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3728      	adds	r7, #40	@ 0x28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b08c      	sub	sp, #48	@ 0x30
 8003f66:	af04      	add	r7, sp, #16
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 feee 	bl	8004d58 <pvPortMalloc>
 8003f7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00e      	beq.n	8003fa2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f84:	2054      	movs	r0, #84	@ 0x54
 8003f86:	f000 fee7 	bl	8004d58 <pvPortMalloc>
 8003f8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f98:	e005      	b.n	8003fa6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f9a:	6978      	ldr	r0, [r7, #20]
 8003f9c:	f000 ffaa 	bl	8004ef4 <vPortFree>
 8003fa0:	e001      	b.n	8003fa6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d017      	beq.n	8003fdc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	9303      	str	r3, [sp, #12]
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	9302      	str	r3, [sp, #8]
 8003fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f80e 	bl	8003fec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fd0:	69f8      	ldr	r0, [r7, #28]
 8003fd2:	f000 f893 	bl	80040fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	e002      	b.n	8003fe2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
	}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004004:	3b01      	subs	r3, #1
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f023 0307 	bic.w	r3, r3, #7
 8004012:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	617b      	str	r3, [r7, #20]
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	e7fd      	b.n	8004032 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01f      	beq.n	800407c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800403c:	2300      	movs	r3, #0
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	e012      	b.n	8004068 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	4413      	add	r3, r2
 8004048:	7819      	ldrb	r1, [r3, #0]
 800404a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	3334      	adds	r3, #52	@ 0x34
 8004052:	460a      	mov	r2, r1
 8004054:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	4413      	add	r3, r2
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3301      	adds	r3, #1
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	2b0f      	cmp	r3, #15
 800406c:	d9e9      	bls.n	8004042 <prvInitialiseNewTask+0x56>
 800406e:	e000      	b.n	8004072 <prvInitialiseNewTask+0x86>
			{
				break;
 8004070:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800407a:	e003      	b.n	8004084 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800407c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004086:	2b06      	cmp	r3, #6
 8004088:	d901      	bls.n	800408e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800408a:	2306      	movs	r3, #6
 800408c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800408e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004092:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004096:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004098:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800409a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409c:	2200      	movs	r2, #0
 800409e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fe68 	bl	8003d7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ac:	3318      	adds	r3, #24
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fe63 	bl	8003d7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	f1c3 0207 	rsb	r2, r3, #7
 80040c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040cc:	2200      	movs	r2, #0
 80040ce:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	69b8      	ldr	r0, [r7, #24]
 80040de:	f000 fc2b 	bl	8004938 <pxPortInitialiseStack>
 80040e2:	4602      	mov	r2, r0
 80040e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040f4:	bf00      	nop
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004104:	f000 fd48 	bl	8004b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004108:	4b2a      	ldr	r3, [pc, #168]	@ (80041b4 <prvAddNewTaskToReadyList+0xb8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3301      	adds	r3, #1
 800410e:	4a29      	ldr	r2, [pc, #164]	@ (80041b4 <prvAddNewTaskToReadyList+0xb8>)
 8004110:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004112:	4b29      	ldr	r3, [pc, #164]	@ (80041b8 <prvAddNewTaskToReadyList+0xbc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800411a:	4a27      	ldr	r2, [pc, #156]	@ (80041b8 <prvAddNewTaskToReadyList+0xbc>)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004120:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <prvAddNewTaskToReadyList+0xb8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d110      	bne.n	800414a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004128:	f000 fac4 	bl	80046b4 <prvInitialiseTaskLists>
 800412c:	e00d      	b.n	800414a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800412e:	4b23      	ldr	r3, [pc, #140]	@ (80041bc <prvAddNewTaskToReadyList+0xc0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004136:	4b20      	ldr	r3, [pc, #128]	@ (80041b8 <prvAddNewTaskToReadyList+0xbc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004140:	429a      	cmp	r2, r3
 8004142:	d802      	bhi.n	800414a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004144:	4a1c      	ldr	r2, [pc, #112]	@ (80041b8 <prvAddNewTaskToReadyList+0xbc>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800414a:	4b1d      	ldr	r3, [pc, #116]	@ (80041c0 <prvAddNewTaskToReadyList+0xc4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3301      	adds	r3, #1
 8004150:	4a1b      	ldr	r2, [pc, #108]	@ (80041c0 <prvAddNewTaskToReadyList+0xc4>)
 8004152:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	2201      	movs	r2, #1
 800415a:	409a      	lsls	r2, r3
 800415c:	4b19      	ldr	r3, [pc, #100]	@ (80041c4 <prvAddNewTaskToReadyList+0xc8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4313      	orrs	r3, r2
 8004162:	4a18      	ldr	r2, [pc, #96]	@ (80041c4 <prvAddNewTaskToReadyList+0xc8>)
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4a15      	ldr	r2, [pc, #84]	@ (80041c8 <prvAddNewTaskToReadyList+0xcc>)
 8004174:	441a      	add	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3304      	adds	r3, #4
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f7ff fe09 	bl	8003d94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004182:	f000 fd3b 	bl	8004bfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004186:	4b0d      	ldr	r3, [pc, #52]	@ (80041bc <prvAddNewTaskToReadyList+0xc0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00e      	beq.n	80041ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800418e:	4b0a      	ldr	r3, [pc, #40]	@ (80041b8 <prvAddNewTaskToReadyList+0xbc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004198:	429a      	cmp	r2, r3
 800419a:	d207      	bcs.n	80041ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800419c:	4b0b      	ldr	r3, [pc, #44]	@ (80041cc <prvAddNewTaskToReadyList+0xd0>)
 800419e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041ac:	bf00      	nop
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	200007c0 	.word	0x200007c0
 80041b8:	200006c0 	.word	0x200006c0
 80041bc:	200007cc 	.word	0x200007cc
 80041c0:	200007dc 	.word	0x200007dc
 80041c4:	200007c8 	.word	0x200007c8
 80041c8:	200006c4 	.word	0x200006c4
 80041cc:	e000ed04 	.word	0xe000ed04

080041d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d018      	beq.n	8004214 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041e2:	4b14      	ldr	r3, [pc, #80]	@ (8004234 <vTaskDelay+0x64>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <vTaskDelay+0x32>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	60bb      	str	r3, [r7, #8]
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	e7fd      	b.n	80041fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004202:	f000 f87d 	bl	8004300 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004206:	2100      	movs	r1, #0
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fb2f 	bl	800486c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800420e:	f000 f885 	bl	800431c <xTaskResumeAll>
 8004212:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d107      	bne.n	800422a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800421a:	4b07      	ldr	r3, [pc, #28]	@ (8004238 <vTaskDelay+0x68>)
 800421c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	200007e8 	.word	0x200007e8
 8004238:	e000ed04 	.word	0xe000ed04

0800423c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	@ 0x28
 8004240:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800424a:	463a      	mov	r2, r7
 800424c:	1d39      	adds	r1, r7, #4
 800424e:	f107 0308 	add.w	r3, r7, #8
 8004252:	4618      	mov	r0, r3
 8004254:	f7fc f9ac 	bl	80005b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004258:	6839      	ldr	r1, [r7, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	9202      	str	r2, [sp, #8]
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	2300      	movs	r3, #0
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	2300      	movs	r3, #0
 8004268:	460a      	mov	r2, r1
 800426a:	491f      	ldr	r1, [pc, #124]	@ (80042e8 <vTaskStartScheduler+0xac>)
 800426c:	481f      	ldr	r0, [pc, #124]	@ (80042ec <vTaskStartScheduler+0xb0>)
 800426e:	f7ff fe18 	bl	8003ea2 <xTaskCreateStatic>
 8004272:	4603      	mov	r3, r0
 8004274:	4a1e      	ldr	r2, [pc, #120]	@ (80042f0 <vTaskStartScheduler+0xb4>)
 8004276:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004278:	4b1d      	ldr	r3, [pc, #116]	@ (80042f0 <vTaskStartScheduler+0xb4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004280:	2301      	movs	r3, #1
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	e001      	b.n	800428a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d116      	bne.n	80042be <vTaskStartScheduler+0x82>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	613b      	str	r3, [r7, #16]
}
 80042a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042a4:	4b13      	ldr	r3, [pc, #76]	@ (80042f4 <vTaskStartScheduler+0xb8>)
 80042a6:	f04f 32ff 	mov.w	r2, #4294967295
 80042aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042ac:	4b12      	ldr	r3, [pc, #72]	@ (80042f8 <vTaskStartScheduler+0xbc>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042b2:	4b12      	ldr	r3, [pc, #72]	@ (80042fc <vTaskStartScheduler+0xc0>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042b8:	f000 fbca 	bl	8004a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042bc:	e00f      	b.n	80042de <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d10b      	bne.n	80042de <vTaskStartScheduler+0xa2>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	60fb      	str	r3, [r7, #12]
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	e7fd      	b.n	80042da <vTaskStartScheduler+0x9e>
}
 80042de:	bf00      	nop
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	08005bb4 	.word	0x08005bb4
 80042ec:	08004685 	.word	0x08004685
 80042f0:	200007e4 	.word	0x200007e4
 80042f4:	200007e0 	.word	0x200007e0
 80042f8:	200007cc 	.word	0x200007cc
 80042fc:	200007c4 	.word	0x200007c4

08004300 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004304:	4b04      	ldr	r3, [pc, #16]	@ (8004318 <vTaskSuspendAll+0x18>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3301      	adds	r3, #1
 800430a:	4a03      	ldr	r2, [pc, #12]	@ (8004318 <vTaskSuspendAll+0x18>)
 800430c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800430e:	bf00      	nop
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	200007e8 	.word	0x200007e8

0800431c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800432a:	4b42      	ldr	r3, [pc, #264]	@ (8004434 <xTaskResumeAll+0x118>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10b      	bne.n	800434a <xTaskResumeAll+0x2e>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	603b      	str	r3, [r7, #0]
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	e7fd      	b.n	8004346 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800434a:	f000 fc25 	bl	8004b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800434e:	4b39      	ldr	r3, [pc, #228]	@ (8004434 <xTaskResumeAll+0x118>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3b01      	subs	r3, #1
 8004354:	4a37      	ldr	r2, [pc, #220]	@ (8004434 <xTaskResumeAll+0x118>)
 8004356:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004358:	4b36      	ldr	r3, [pc, #216]	@ (8004434 <xTaskResumeAll+0x118>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d161      	bne.n	8004424 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004360:	4b35      	ldr	r3, [pc, #212]	@ (8004438 <xTaskResumeAll+0x11c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d05d      	beq.n	8004424 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004368:	e02e      	b.n	80043c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800436a:	4b34      	ldr	r3, [pc, #208]	@ (800443c <xTaskResumeAll+0x120>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3318      	adds	r3, #24
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fd69 	bl	8003e4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3304      	adds	r3, #4
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fd64 	bl	8003e4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	2201      	movs	r2, #1
 800438c:	409a      	lsls	r2, r3
 800438e:	4b2c      	ldr	r3, [pc, #176]	@ (8004440 <xTaskResumeAll+0x124>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	4a2a      	ldr	r2, [pc, #168]	@ (8004440 <xTaskResumeAll+0x124>)
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4a27      	ldr	r2, [pc, #156]	@ (8004444 <xTaskResumeAll+0x128>)
 80043a6:	441a      	add	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4619      	mov	r1, r3
 80043ae:	4610      	mov	r0, r2
 80043b0:	f7ff fcf0 	bl	8003d94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b8:	4b23      	ldr	r3, [pc, #140]	@ (8004448 <xTaskResumeAll+0x12c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043be:	429a      	cmp	r2, r3
 80043c0:	d302      	bcc.n	80043c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80043c2:	4b22      	ldr	r3, [pc, #136]	@ (800444c <xTaskResumeAll+0x130>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043c8:	4b1c      	ldr	r3, [pc, #112]	@ (800443c <xTaskResumeAll+0x120>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1cc      	bne.n	800436a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043d6:	f000 fa0b 	bl	80047f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043da:	4b1d      	ldr	r3, [pc, #116]	@ (8004450 <xTaskResumeAll+0x134>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d010      	beq.n	8004408 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043e6:	f000 f837 	bl	8004458 <xTaskIncrementTick>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80043f0:	4b16      	ldr	r3, [pc, #88]	@ (800444c <xTaskResumeAll+0x130>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f1      	bne.n	80043e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004402:	4b13      	ldr	r3, [pc, #76]	@ (8004450 <xTaskResumeAll+0x134>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004408:	4b10      	ldr	r3, [pc, #64]	@ (800444c <xTaskResumeAll+0x130>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d009      	beq.n	8004424 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004410:	2301      	movs	r3, #1
 8004412:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004414:	4b0f      	ldr	r3, [pc, #60]	@ (8004454 <xTaskResumeAll+0x138>)
 8004416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004424:	f000 fbea 	bl	8004bfc <vPortExitCritical>

	return xAlreadyYielded;
 8004428:	68bb      	ldr	r3, [r7, #8]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	200007e8 	.word	0x200007e8
 8004438:	200007c0 	.word	0x200007c0
 800443c:	20000780 	.word	0x20000780
 8004440:	200007c8 	.word	0x200007c8
 8004444:	200006c4 	.word	0x200006c4
 8004448:	200006c0 	.word	0x200006c0
 800444c:	200007d4 	.word	0x200007d4
 8004450:	200007d0 	.word	0x200007d0
 8004454:	e000ed04 	.word	0xe000ed04

08004458 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004462:	4b4f      	ldr	r3, [pc, #316]	@ (80045a0 <xTaskIncrementTick+0x148>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	f040 808f 	bne.w	800458a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800446c:	4b4d      	ldr	r3, [pc, #308]	@ (80045a4 <xTaskIncrementTick+0x14c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3301      	adds	r3, #1
 8004472:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004474:	4a4b      	ldr	r2, [pc, #300]	@ (80045a4 <xTaskIncrementTick+0x14c>)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d121      	bne.n	80044c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004480:	4b49      	ldr	r3, [pc, #292]	@ (80045a8 <xTaskIncrementTick+0x150>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	603b      	str	r3, [r7, #0]
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	e7fd      	b.n	800449e <xTaskIncrementTick+0x46>
 80044a2:	4b41      	ldr	r3, [pc, #260]	@ (80045a8 <xTaskIncrementTick+0x150>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	4b40      	ldr	r3, [pc, #256]	@ (80045ac <xTaskIncrementTick+0x154>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a3e      	ldr	r2, [pc, #248]	@ (80045a8 <xTaskIncrementTick+0x150>)
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4a3e      	ldr	r2, [pc, #248]	@ (80045ac <xTaskIncrementTick+0x154>)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b3e      	ldr	r3, [pc, #248]	@ (80045b0 <xTaskIncrementTick+0x158>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3301      	adds	r3, #1
 80044bc:	4a3c      	ldr	r2, [pc, #240]	@ (80045b0 <xTaskIncrementTick+0x158>)
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	f000 f996 	bl	80047f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044c4:	4b3b      	ldr	r3, [pc, #236]	@ (80045b4 <xTaskIncrementTick+0x15c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d348      	bcc.n	8004560 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044ce:	4b36      	ldr	r3, [pc, #216]	@ (80045a8 <xTaskIncrementTick+0x150>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d104      	bne.n	80044e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d8:	4b36      	ldr	r3, [pc, #216]	@ (80045b4 <xTaskIncrementTick+0x15c>)
 80044da:	f04f 32ff 	mov.w	r2, #4294967295
 80044de:	601a      	str	r2, [r3, #0]
					break;
 80044e0:	e03e      	b.n	8004560 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044e2:	4b31      	ldr	r3, [pc, #196]	@ (80045a8 <xTaskIncrementTick+0x150>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d203      	bcs.n	8004502 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044fa:	4a2e      	ldr	r2, [pc, #184]	@ (80045b4 <xTaskIncrementTick+0x15c>)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004500:	e02e      	b.n	8004560 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	3304      	adds	r3, #4
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff fca1 	bl	8003e4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004510:	2b00      	cmp	r3, #0
 8004512:	d004      	beq.n	800451e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	3318      	adds	r3, #24
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff fc98 	bl	8003e4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004522:	2201      	movs	r2, #1
 8004524:	409a      	lsls	r2, r3
 8004526:	4b24      	ldr	r3, [pc, #144]	@ (80045b8 <xTaskIncrementTick+0x160>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4313      	orrs	r3, r2
 800452c:	4a22      	ldr	r2, [pc, #136]	@ (80045b8 <xTaskIncrementTick+0x160>)
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4a1f      	ldr	r2, [pc, #124]	@ (80045bc <xTaskIncrementTick+0x164>)
 800453e:	441a      	add	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f7ff fc24 	bl	8003d94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004550:	4b1b      	ldr	r3, [pc, #108]	@ (80045c0 <xTaskIncrementTick+0x168>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004556:	429a      	cmp	r2, r3
 8004558:	d3b9      	bcc.n	80044ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800455a:	2301      	movs	r3, #1
 800455c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800455e:	e7b6      	b.n	80044ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004560:	4b17      	ldr	r3, [pc, #92]	@ (80045c0 <xTaskIncrementTick+0x168>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004566:	4915      	ldr	r1, [pc, #84]	@ (80045bc <xTaskIncrementTick+0x164>)
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d901      	bls.n	800457c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004578:	2301      	movs	r3, #1
 800457a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800457c:	4b11      	ldr	r3, [pc, #68]	@ (80045c4 <xTaskIncrementTick+0x16c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004584:	2301      	movs	r3, #1
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	e004      	b.n	8004594 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800458a:	4b0f      	ldr	r3, [pc, #60]	@ (80045c8 <xTaskIncrementTick+0x170>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3301      	adds	r3, #1
 8004590:	4a0d      	ldr	r2, [pc, #52]	@ (80045c8 <xTaskIncrementTick+0x170>)
 8004592:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004594:	697b      	ldr	r3, [r7, #20]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	200007e8 	.word	0x200007e8
 80045a4:	200007c4 	.word	0x200007c4
 80045a8:	20000778 	.word	0x20000778
 80045ac:	2000077c 	.word	0x2000077c
 80045b0:	200007d8 	.word	0x200007d8
 80045b4:	200007e0 	.word	0x200007e0
 80045b8:	200007c8 	.word	0x200007c8
 80045bc:	200006c4 	.word	0x200006c4
 80045c0:	200006c0 	.word	0x200006c0
 80045c4:	200007d4 	.word	0x200007d4
 80045c8:	200007d0 	.word	0x200007d0

080045cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045d2:	4b27      	ldr	r3, [pc, #156]	@ (8004670 <vTaskSwitchContext+0xa4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045da:	4b26      	ldr	r3, [pc, #152]	@ (8004674 <vTaskSwitchContext+0xa8>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045e0:	e040      	b.n	8004664 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80045e2:	4b24      	ldr	r3, [pc, #144]	@ (8004674 <vTaskSwitchContext+0xa8>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e8:	4b23      	ldr	r3, [pc, #140]	@ (8004678 <vTaskSwitchContext+0xac>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	fab3 f383 	clz	r3, r3
 80045f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80045f6:	7afb      	ldrb	r3, [r7, #11]
 80045f8:	f1c3 031f 	rsb	r3, r3, #31
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	491f      	ldr	r1, [pc, #124]	@ (800467c <vTaskSwitchContext+0xb0>)
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10b      	bne.n	800462a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	607b      	str	r3, [r7, #4]
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop
 8004628:	e7fd      	b.n	8004626 <vTaskSwitchContext+0x5a>
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4a11      	ldr	r2, [pc, #68]	@ (800467c <vTaskSwitchContext+0xb0>)
 8004636:	4413      	add	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	3308      	adds	r3, #8
 800464c:	429a      	cmp	r2, r3
 800464e:	d104      	bne.n	800465a <vTaskSwitchContext+0x8e>
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	605a      	str	r2, [r3, #4]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4a07      	ldr	r2, [pc, #28]	@ (8004680 <vTaskSwitchContext+0xb4>)
 8004662:	6013      	str	r3, [r2, #0]
}
 8004664:	bf00      	nop
 8004666:	371c      	adds	r7, #28
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	200007e8 	.word	0x200007e8
 8004674:	200007d4 	.word	0x200007d4
 8004678:	200007c8 	.word	0x200007c8
 800467c:	200006c4 	.word	0x200006c4
 8004680:	200006c0 	.word	0x200006c0

08004684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800468c:	f000 f852 	bl	8004734 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004690:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <prvIdleTask+0x28>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d9f9      	bls.n	800468c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004698:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <prvIdleTask+0x2c>)
 800469a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046a8:	e7f0      	b.n	800468c <prvIdleTask+0x8>
 80046aa:	bf00      	nop
 80046ac:	200006c4 	.word	0x200006c4
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046ba:	2300      	movs	r3, #0
 80046bc:	607b      	str	r3, [r7, #4]
 80046be:	e00c      	b.n	80046da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4a12      	ldr	r2, [pc, #72]	@ (8004714 <prvInitialiseTaskLists+0x60>)
 80046cc:	4413      	add	r3, r2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff fb33 	bl	8003d3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3301      	adds	r3, #1
 80046d8:	607b      	str	r3, [r7, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b06      	cmp	r3, #6
 80046de:	d9ef      	bls.n	80046c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046e0:	480d      	ldr	r0, [pc, #52]	@ (8004718 <prvInitialiseTaskLists+0x64>)
 80046e2:	f7ff fb2a 	bl	8003d3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046e6:	480d      	ldr	r0, [pc, #52]	@ (800471c <prvInitialiseTaskLists+0x68>)
 80046e8:	f7ff fb27 	bl	8003d3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046ec:	480c      	ldr	r0, [pc, #48]	@ (8004720 <prvInitialiseTaskLists+0x6c>)
 80046ee:	f7ff fb24 	bl	8003d3a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046f2:	480c      	ldr	r0, [pc, #48]	@ (8004724 <prvInitialiseTaskLists+0x70>)
 80046f4:	f7ff fb21 	bl	8003d3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046f8:	480b      	ldr	r0, [pc, #44]	@ (8004728 <prvInitialiseTaskLists+0x74>)
 80046fa:	f7ff fb1e 	bl	8003d3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046fe:	4b0b      	ldr	r3, [pc, #44]	@ (800472c <prvInitialiseTaskLists+0x78>)
 8004700:	4a05      	ldr	r2, [pc, #20]	@ (8004718 <prvInitialiseTaskLists+0x64>)
 8004702:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004704:	4b0a      	ldr	r3, [pc, #40]	@ (8004730 <prvInitialiseTaskLists+0x7c>)
 8004706:	4a05      	ldr	r2, [pc, #20]	@ (800471c <prvInitialiseTaskLists+0x68>)
 8004708:	601a      	str	r2, [r3, #0]
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	200006c4 	.word	0x200006c4
 8004718:	20000750 	.word	0x20000750
 800471c:	20000764 	.word	0x20000764
 8004720:	20000780 	.word	0x20000780
 8004724:	20000794 	.word	0x20000794
 8004728:	200007ac 	.word	0x200007ac
 800472c:	20000778 	.word	0x20000778
 8004730:	2000077c 	.word	0x2000077c

08004734 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800473a:	e019      	b.n	8004770 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800473c:	f000 fa2c 	bl	8004b98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004740:	4b10      	ldr	r3, [pc, #64]	@ (8004784 <prvCheckTasksWaitingTermination+0x50>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3304      	adds	r3, #4
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fb7e 	bl	8003e4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004752:	4b0d      	ldr	r3, [pc, #52]	@ (8004788 <prvCheckTasksWaitingTermination+0x54>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3b01      	subs	r3, #1
 8004758:	4a0b      	ldr	r2, [pc, #44]	@ (8004788 <prvCheckTasksWaitingTermination+0x54>)
 800475a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800475c:	4b0b      	ldr	r3, [pc, #44]	@ (800478c <prvCheckTasksWaitingTermination+0x58>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3b01      	subs	r3, #1
 8004762:	4a0a      	ldr	r2, [pc, #40]	@ (800478c <prvCheckTasksWaitingTermination+0x58>)
 8004764:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004766:	f000 fa49 	bl	8004bfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f810 	bl	8004790 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004770:	4b06      	ldr	r3, [pc, #24]	@ (800478c <prvCheckTasksWaitingTermination+0x58>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e1      	bne.n	800473c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004778:	bf00      	nop
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000794 	.word	0x20000794
 8004788:	200007c0 	.word	0x200007c0
 800478c:	200007a8 	.word	0x200007a8

08004790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d108      	bne.n	80047b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fba4 	bl	8004ef4 <vPortFree>
				vPortFree( pxTCB );
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fba1 	bl	8004ef4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047b2:	e019      	b.n	80047e8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d103      	bne.n	80047c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fb98 	bl	8004ef4 <vPortFree>
	}
 80047c4:	e010      	b.n	80047e8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d00b      	beq.n	80047e8 <prvDeleteTCB+0x58>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	60fb      	str	r3, [r7, #12]
}
 80047e2:	bf00      	nop
 80047e4:	bf00      	nop
 80047e6:	e7fd      	b.n	80047e4 <prvDeleteTCB+0x54>
	}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004828 <prvResetNextTaskUnblockTime+0x38>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004800:	4b0a      	ldr	r3, [pc, #40]	@ (800482c <prvResetNextTaskUnblockTime+0x3c>)
 8004802:	f04f 32ff 	mov.w	r2, #4294967295
 8004806:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004808:	e008      	b.n	800481c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800480a:	4b07      	ldr	r3, [pc, #28]	@ (8004828 <prvResetNextTaskUnblockTime+0x38>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a04      	ldr	r2, [pc, #16]	@ (800482c <prvResetNextTaskUnblockTime+0x3c>)
 800481a:	6013      	str	r3, [r2, #0]
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	20000778 	.word	0x20000778
 800482c:	200007e0 	.word	0x200007e0

08004830 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004836:	4b0b      	ldr	r3, [pc, #44]	@ (8004864 <xTaskGetSchedulerState+0x34>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d102      	bne.n	8004844 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800483e:	2301      	movs	r3, #1
 8004840:	607b      	str	r3, [r7, #4]
 8004842:	e008      	b.n	8004856 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004844:	4b08      	ldr	r3, [pc, #32]	@ (8004868 <xTaskGetSchedulerState+0x38>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800484c:	2302      	movs	r3, #2
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	e001      	b.n	8004856 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004852:	2300      	movs	r3, #0
 8004854:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004856:	687b      	ldr	r3, [r7, #4]
	}
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	200007cc 	.word	0x200007cc
 8004868:	200007e8 	.word	0x200007e8

0800486c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004876:	4b29      	ldr	r3, [pc, #164]	@ (800491c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800487c:	4b28      	ldr	r3, [pc, #160]	@ (8004920 <prvAddCurrentTaskToDelayedList+0xb4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3304      	adds	r3, #4
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fae3 	bl	8003e4e <uxListRemove>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10b      	bne.n	80048a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800488e:	4b24      	ldr	r3, [pc, #144]	@ (8004920 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004894:	2201      	movs	r2, #1
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43da      	mvns	r2, r3
 800489c:	4b21      	ldr	r3, [pc, #132]	@ (8004924 <prvAddCurrentTaskToDelayedList+0xb8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4013      	ands	r3, r2
 80048a2:	4a20      	ldr	r2, [pc, #128]	@ (8004924 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d10a      	bne.n	80048c4 <prvAddCurrentTaskToDelayedList+0x58>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	481a      	ldr	r0, [pc, #104]	@ (8004928 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048be:	f7ff fa69 	bl	8003d94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048c2:	e026      	b.n	8004912 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4413      	add	r3, r2
 80048ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048cc:	4b14      	ldr	r3, [pc, #80]	@ (8004920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d209      	bcs.n	80048f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048dc:	4b13      	ldr	r3, [pc, #76]	@ (800492c <prvAddCurrentTaskToDelayedList+0xc0>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f7ff fa77 	bl	8003ddc <vListInsert>
}
 80048ee:	e010      	b.n	8004912 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004930 <prvAddCurrentTaskToDelayedList+0xc4>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f7ff fa6d 	bl	8003ddc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004902:	4b0c      	ldr	r3, [pc, #48]	@ (8004934 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	429a      	cmp	r2, r3
 800490a:	d202      	bcs.n	8004912 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800490c:	4a09      	ldr	r2, [pc, #36]	@ (8004934 <prvAddCurrentTaskToDelayedList+0xc8>)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	6013      	str	r3, [r2, #0]
}
 8004912:	bf00      	nop
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	200007c4 	.word	0x200007c4
 8004920:	200006c0 	.word	0x200006c0
 8004924:	200007c8 	.word	0x200007c8
 8004928:	200007ac 	.word	0x200007ac
 800492c:	2000077c 	.word	0x2000077c
 8004930:	20000778 	.word	0x20000778
 8004934:	200007e0 	.word	0x200007e0

08004938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3b04      	subs	r3, #4
 8004948:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3b04      	subs	r3, #4
 8004956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f023 0201 	bic.w	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3b04      	subs	r3, #4
 8004966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004968:	4a0c      	ldr	r2, [pc, #48]	@ (800499c <pxPortInitialiseStack+0x64>)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3b14      	subs	r3, #20
 8004972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3b04      	subs	r3, #4
 800497e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f06f 0202 	mvn.w	r2, #2
 8004986:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3b20      	subs	r3, #32
 800498c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800498e:	68fb      	ldr	r3, [r7, #12]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	080049a1 	.word	0x080049a1

080049a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049aa:	4b13      	ldr	r3, [pc, #76]	@ (80049f8 <prvTaskExitError+0x58>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b2:	d00b      	beq.n	80049cc <prvTaskExitError+0x2c>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	60fb      	str	r3, [r7, #12]
}
 80049c6:	bf00      	nop
 80049c8:	bf00      	nop
 80049ca:	e7fd      	b.n	80049c8 <prvTaskExitError+0x28>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	60bb      	str	r3, [r7, #8]
}
 80049de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049e0:	bf00      	nop
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0fc      	beq.n	80049e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	2000000c 	.word	0x2000000c
 80049fc:	00000000 	.word	0x00000000

08004a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a00:	4b07      	ldr	r3, [pc, #28]	@ (8004a20 <pxCurrentTCBConst2>)
 8004a02:	6819      	ldr	r1, [r3, #0]
 8004a04:	6808      	ldr	r0, [r1, #0]
 8004a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0a:	f380 8809 	msr	PSP, r0
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f380 8811 	msr	BASEPRI, r0
 8004a1a:	4770      	bx	lr
 8004a1c:	f3af 8000 	nop.w

08004a20 <pxCurrentTCBConst2>:
 8004a20:	200006c0 	.word	0x200006c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop

08004a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a28:	4808      	ldr	r0, [pc, #32]	@ (8004a4c <prvPortStartFirstTask+0x24>)
 8004a2a:	6800      	ldr	r0, [r0, #0]
 8004a2c:	6800      	ldr	r0, [r0, #0]
 8004a2e:	f380 8808 	msr	MSP, r0
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	f380 8814 	msr	CONTROL, r0
 8004a3a:	b662      	cpsie	i
 8004a3c:	b661      	cpsie	f
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	df00      	svc	0
 8004a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a4a:	bf00      	nop
 8004a4c:	e000ed08 	.word	0xe000ed08

08004a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a56:	4b47      	ldr	r3, [pc, #284]	@ (8004b74 <xPortStartScheduler+0x124>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a47      	ldr	r2, [pc, #284]	@ (8004b78 <xPortStartScheduler+0x128>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d10b      	bne.n	8004a78 <xPortStartScheduler+0x28>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	613b      	str	r3, [r7, #16]
}
 8004a72:	bf00      	nop
 8004a74:	bf00      	nop
 8004a76:	e7fd      	b.n	8004a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a78:	4b3e      	ldr	r3, [pc, #248]	@ (8004b74 <xPortStartScheduler+0x124>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b7c <xPortStartScheduler+0x12c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d10b      	bne.n	8004a9a <xPortStartScheduler+0x4a>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60fb      	str	r3, [r7, #12]
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	e7fd      	b.n	8004a96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a9a:	4b39      	ldr	r3, [pc, #228]	@ (8004b80 <xPortStartScheduler+0x130>)
 8004a9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	22ff      	movs	r2, #255	@ 0xff
 8004aaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	4b31      	ldr	r3, [pc, #196]	@ (8004b84 <xPortStartScheduler+0x134>)
 8004ac0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ac2:	4b31      	ldr	r3, [pc, #196]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004ac4:	2207      	movs	r2, #7
 8004ac6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ac8:	e009      	b.n	8004ade <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004aca:	4b2f      	ldr	r3, [pc, #188]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004ad2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae6:	2b80      	cmp	r3, #128	@ 0x80
 8004ae8:	d0ef      	beq.n	8004aca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aea:	4b27      	ldr	r3, [pc, #156]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f1c3 0307 	rsb	r3, r3, #7
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d00b      	beq.n	8004b0e <xPortStartScheduler+0xbe>
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	60bb      	str	r3, [r7, #8]
}
 8004b08:	bf00      	nop
 8004b0a:	bf00      	nop
 8004b0c:	e7fd      	b.n	8004b0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	4a1c      	ldr	r2, [pc, #112]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004b16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b18:	4b1b      	ldr	r3, [pc, #108]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b20:	4a19      	ldr	r2, [pc, #100]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004b22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b2c:	4b17      	ldr	r3, [pc, #92]	@ (8004b8c <xPortStartScheduler+0x13c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a16      	ldr	r2, [pc, #88]	@ (8004b8c <xPortStartScheduler+0x13c>)
 8004b32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b38:	4b14      	ldr	r3, [pc, #80]	@ (8004b8c <xPortStartScheduler+0x13c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a13      	ldr	r2, [pc, #76]	@ (8004b8c <xPortStartScheduler+0x13c>)
 8004b3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b44:	f000 f8da 	bl	8004cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b48:	4b11      	ldr	r3, [pc, #68]	@ (8004b90 <xPortStartScheduler+0x140>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b4e:	f000 f8f9 	bl	8004d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b52:	4b10      	ldr	r3, [pc, #64]	@ (8004b94 <xPortStartScheduler+0x144>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a0f      	ldr	r2, [pc, #60]	@ (8004b94 <xPortStartScheduler+0x144>)
 8004b58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004b5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b5e:	f7ff ff63 	bl	8004a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b62:	f7ff fd33 	bl	80045cc <vTaskSwitchContext>
	prvTaskExitError();
 8004b66:	f7ff ff1b 	bl	80049a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	e000ed00 	.word	0xe000ed00
 8004b78:	410fc271 	.word	0x410fc271
 8004b7c:	410fc270 	.word	0x410fc270
 8004b80:	e000e400 	.word	0xe000e400
 8004b84:	200007ec 	.word	0x200007ec
 8004b88:	200007f0 	.word	0x200007f0
 8004b8c:	e000ed20 	.word	0xe000ed20
 8004b90:	2000000c 	.word	0x2000000c
 8004b94:	e000ef34 	.word	0xe000ef34

08004b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	607b      	str	r3, [r7, #4]
}
 8004bb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bb2:	4b10      	ldr	r3, [pc, #64]	@ (8004bf4 <vPortEnterCritical+0x5c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8004bf4 <vPortEnterCritical+0x5c>)
 8004bba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <vPortEnterCritical+0x5c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d110      	bne.n	8004be6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf8 <vPortEnterCritical+0x60>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	603b      	str	r3, [r7, #0]
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	e7fd      	b.n	8004be2 <vPortEnterCritical+0x4a>
	}
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	2000000c 	.word	0x2000000c
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c02:	4b12      	ldr	r3, [pc, #72]	@ (8004c4c <vPortExitCritical+0x50>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <vPortExitCritical+0x26>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	607b      	str	r3, [r7, #4]
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	e7fd      	b.n	8004c1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c22:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <vPortExitCritical+0x50>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	4a08      	ldr	r2, [pc, #32]	@ (8004c4c <vPortExitCritical+0x50>)
 8004c2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c2c:	4b07      	ldr	r3, [pc, #28]	@ (8004c4c <vPortExitCritical+0x50>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d105      	bne.n	8004c40 <vPortExitCritical+0x44>
 8004c34:	2300      	movs	r3, #0
 8004c36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	2000000c 	.word	0x2000000c

08004c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c50:	f3ef 8009 	mrs	r0, PSP
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	4b15      	ldr	r3, [pc, #84]	@ (8004cb0 <pxCurrentTCBConst>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	f01e 0f10 	tst.w	lr, #16
 8004c60:	bf08      	it	eq
 8004c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6a:	6010      	str	r0, [r2, #0]
 8004c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c74:	f380 8811 	msr	BASEPRI, r0
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f7ff fca4 	bl	80045cc <vTaskSwitchContext>
 8004c84:	f04f 0000 	mov.w	r0, #0
 8004c88:	f380 8811 	msr	BASEPRI, r0
 8004c8c:	bc09      	pop	{r0, r3}
 8004c8e:	6819      	ldr	r1, [r3, #0]
 8004c90:	6808      	ldr	r0, [r1, #0]
 8004c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c96:	f01e 0f10 	tst.w	lr, #16
 8004c9a:	bf08      	it	eq
 8004c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ca0:	f380 8809 	msr	PSP, r0
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	f3af 8000 	nop.w

08004cb0 <pxCurrentTCBConst>:
 8004cb0:	200006c0 	.word	0x200006c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop

08004cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	607b      	str	r3, [r7, #4]
}
 8004cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004cd2:	f7ff fbc1 	bl	8004458 <xTaskIncrementTick>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cdc:	4b06      	ldr	r3, [pc, #24]	@ (8004cf8 <xPortSysTickHandler+0x40>)
 8004cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f383 8811 	msr	BASEPRI, r3
}
 8004cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	e000ed04 	.word	0xe000ed04

08004cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d00:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <vPortSetupTimerInterrupt+0x34>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d06:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <vPortSetupTimerInterrupt+0x38>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d38 <vPortSetupTimerInterrupt+0x3c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a0a      	ldr	r2, [pc, #40]	@ (8004d3c <vPortSetupTimerInterrupt+0x40>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	4a09      	ldr	r2, [pc, #36]	@ (8004d40 <vPortSetupTimerInterrupt+0x44>)
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d1e:	4b04      	ldr	r3, [pc, #16]	@ (8004d30 <vPortSetupTimerInterrupt+0x34>)
 8004d20:	2207      	movs	r2, #7
 8004d22:	601a      	str	r2, [r3, #0]
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	e000e010 	.word	0xe000e010
 8004d34:	e000e018 	.word	0xe000e018
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	10624dd3 	.word	0x10624dd3
 8004d40:	e000e014 	.word	0xe000e014

08004d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004d54 <vPortEnableVFP+0x10>
 8004d48:	6801      	ldr	r1, [r0, #0]
 8004d4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004d4e:	6001      	str	r1, [r0, #0]
 8004d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d52:	bf00      	nop
 8004d54:	e000ed88 	.word	0xe000ed88

08004d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	@ 0x28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d64:	f7ff facc 	bl	8004300 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d68:	4b5c      	ldr	r3, [pc, #368]	@ (8004edc <pvPortMalloc+0x184>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d70:	f000 f924 	bl	8004fbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d74:	4b5a      	ldr	r3, [pc, #360]	@ (8004ee0 <pvPortMalloc+0x188>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 8095 	bne.w	8004eac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01e      	beq.n	8004dc6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004d88:	2208      	movs	r2, #8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d015      	beq.n	8004dc6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f023 0307 	bic.w	r3, r3, #7
 8004da0:	3308      	adds	r3, #8
 8004da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <pvPortMalloc+0x6e>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	617b      	str	r3, [r7, #20]
}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	e7fd      	b.n	8004dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d06f      	beq.n	8004eac <pvPortMalloc+0x154>
 8004dcc:	4b45      	ldr	r3, [pc, #276]	@ (8004ee4 <pvPortMalloc+0x18c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d86a      	bhi.n	8004eac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004dd6:	4b44      	ldr	r3, [pc, #272]	@ (8004ee8 <pvPortMalloc+0x190>)
 8004dd8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004dda:	4b43      	ldr	r3, [pc, #268]	@ (8004ee8 <pvPortMalloc+0x190>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004de0:	e004      	b.n	8004dec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d903      	bls.n	8004dfe <pvPortMalloc+0xa6>
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f1      	bne.n	8004de2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004dfe:	4b37      	ldr	r3, [pc, #220]	@ (8004edc <pvPortMalloc+0x184>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d051      	beq.n	8004eac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	4413      	add	r3, r2
 8004e10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	1ad2      	subs	r2, r2, r3
 8004e22:	2308      	movs	r3, #8
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d920      	bls.n	8004e6c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00b      	beq.n	8004e54 <pvPortMalloc+0xfc>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	613b      	str	r3, [r7, #16]
}
 8004e4e:	bf00      	nop
 8004e50:	bf00      	nop
 8004e52:	e7fd      	b.n	8004e50 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	1ad2      	subs	r2, r2, r3
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e66:	69b8      	ldr	r0, [r7, #24]
 8004e68:	f000 f90a 	bl	8005080 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee4 <pvPortMalloc+0x18c>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee4 <pvPortMalloc+0x18c>)
 8004e78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee4 <pvPortMalloc+0x18c>)
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004eec <pvPortMalloc+0x194>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d203      	bcs.n	8004e8e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e86:	4b17      	ldr	r3, [pc, #92]	@ (8004ee4 <pvPortMalloc+0x18c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a18      	ldr	r2, [pc, #96]	@ (8004eec <pvPortMalloc+0x194>)
 8004e8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	4b13      	ldr	r3, [pc, #76]	@ (8004ee0 <pvPortMalloc+0x188>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004ea2:	4b13      	ldr	r3, [pc, #76]	@ (8004ef0 <pvPortMalloc+0x198>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	4a11      	ldr	r2, [pc, #68]	@ (8004ef0 <pvPortMalloc+0x198>)
 8004eaa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004eac:	f7ff fa36 	bl	800431c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <pvPortMalloc+0x17a>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	60fb      	str	r3, [r7, #12]
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	e7fd      	b.n	8004ece <pvPortMalloc+0x176>
	return pvReturn;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3728      	adds	r7, #40	@ 0x28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	200013b4 	.word	0x200013b4
 8004ee0:	200013c8 	.word	0x200013c8
 8004ee4:	200013b8 	.word	0x200013b8
 8004ee8:	200013ac 	.word	0x200013ac
 8004eec:	200013bc 	.word	0x200013bc
 8004ef0:	200013c0 	.word	0x200013c0

08004ef4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d04f      	beq.n	8004fa6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f06:	2308      	movs	r3, #8
 8004f08:	425b      	negs	r3, r3
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	4b25      	ldr	r3, [pc, #148]	@ (8004fb0 <vPortFree+0xbc>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10b      	bne.n	8004f3a <vPortFree+0x46>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	60fb      	str	r3, [r7, #12]
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	e7fd      	b.n	8004f36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <vPortFree+0x66>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	60bb      	str	r3, [r7, #8]
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	e7fd      	b.n	8004f56 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	4b14      	ldr	r3, [pc, #80]	@ (8004fb0 <vPortFree+0xbc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01e      	beq.n	8004fa6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d11a      	bne.n	8004fa6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb0 <vPortFree+0xbc>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	401a      	ands	r2, r3
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f80:	f7ff f9be 	bl	8004300 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb4 <vPortFree+0xc0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	4a09      	ldr	r2, [pc, #36]	@ (8004fb4 <vPortFree+0xc0>)
 8004f90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f92:	6938      	ldr	r0, [r7, #16]
 8004f94:	f000 f874 	bl	8005080 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f98:	4b07      	ldr	r3, [pc, #28]	@ (8004fb8 <vPortFree+0xc4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	4a06      	ldr	r2, [pc, #24]	@ (8004fb8 <vPortFree+0xc4>)
 8004fa0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004fa2:	f7ff f9bb 	bl	800431c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fa6:	bf00      	nop
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	200013c8 	.word	0x200013c8
 8004fb4:	200013b8 	.word	0x200013b8
 8004fb8:	200013c4 	.word	0x200013c4

08004fbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fc2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004fc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fc8:	4b27      	ldr	r3, [pc, #156]	@ (8005068 <prvHeapInit+0xac>)
 8004fca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00c      	beq.n	8004ff0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3307      	adds	r3, #7
 8004fda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0307 	bic.w	r3, r3, #7
 8004fe2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	4a1f      	ldr	r2, [pc, #124]	@ (8005068 <prvHeapInit+0xac>)
 8004fec:	4413      	add	r3, r2
 8004fee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800506c <prvHeapInit+0xb0>)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800506c <prvHeapInit+0xb0>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	4413      	add	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005008:	2208      	movs	r2, #8
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0307 	bic.w	r3, r3, #7
 8005016:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4a15      	ldr	r2, [pc, #84]	@ (8005070 <prvHeapInit+0xb4>)
 800501c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800501e:	4b14      	ldr	r3, [pc, #80]	@ (8005070 <prvHeapInit+0xb4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2200      	movs	r2, #0
 8005024:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005026:	4b12      	ldr	r3, [pc, #72]	@ (8005070 <prvHeapInit+0xb4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	1ad2      	subs	r2, r2, r3
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800503c:	4b0c      	ldr	r3, [pc, #48]	@ (8005070 <prvHeapInit+0xb4>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	4a0a      	ldr	r2, [pc, #40]	@ (8005074 <prvHeapInit+0xb8>)
 800504a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4a09      	ldr	r2, [pc, #36]	@ (8005078 <prvHeapInit+0xbc>)
 8005052:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005054:	4b09      	ldr	r3, [pc, #36]	@ (800507c <prvHeapInit+0xc0>)
 8005056:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800505a:	601a      	str	r2, [r3, #0]
}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	200007f4 	.word	0x200007f4
 800506c:	200013ac 	.word	0x200013ac
 8005070:	200013b4 	.word	0x200013b4
 8005074:	200013bc 	.word	0x200013bc
 8005078:	200013b8 	.word	0x200013b8
 800507c:	200013c8 	.word	0x200013c8

08005080 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005088:	4b28      	ldr	r3, [pc, #160]	@ (800512c <prvInsertBlockIntoFreeList+0xac>)
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	e002      	b.n	8005094 <prvInsertBlockIntoFreeList+0x14>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	429a      	cmp	r2, r3
 800509c:	d8f7      	bhi.n	800508e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	4413      	add	r3, r2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d108      	bne.n	80050c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	441a      	add	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	441a      	add	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d118      	bne.n	8005108 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4b15      	ldr	r3, [pc, #84]	@ (8005130 <prvInsertBlockIntoFreeList+0xb0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d00d      	beq.n	80050fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	441a      	add	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	e008      	b.n	8005110 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005130 <prvInsertBlockIntoFreeList+0xb0>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e003      	b.n	8005110 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	429a      	cmp	r2, r3
 8005116:	d002      	beq.n	800511e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	200013ac 	.word	0x200013ac
 8005130:	200013b4 	.word	0x200013b4

08005134 <sniprintf>:
 8005134:	b40c      	push	{r2, r3}
 8005136:	b530      	push	{r4, r5, lr}
 8005138:	4b17      	ldr	r3, [pc, #92]	@ (8005198 <sniprintf+0x64>)
 800513a:	1e0c      	subs	r4, r1, #0
 800513c:	681d      	ldr	r5, [r3, #0]
 800513e:	b09d      	sub	sp, #116	@ 0x74
 8005140:	da08      	bge.n	8005154 <sniprintf+0x20>
 8005142:	238b      	movs	r3, #139	@ 0x8b
 8005144:	602b      	str	r3, [r5, #0]
 8005146:	f04f 30ff 	mov.w	r0, #4294967295
 800514a:	b01d      	add	sp, #116	@ 0x74
 800514c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005150:	b002      	add	sp, #8
 8005152:	4770      	bx	lr
 8005154:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005158:	f8ad 3014 	strh.w	r3, [sp, #20]
 800515c:	bf14      	ite	ne
 800515e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005162:	4623      	moveq	r3, r4
 8005164:	9304      	str	r3, [sp, #16]
 8005166:	9307      	str	r3, [sp, #28]
 8005168:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800516c:	9002      	str	r0, [sp, #8]
 800516e:	9006      	str	r0, [sp, #24]
 8005170:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005174:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005176:	ab21      	add	r3, sp, #132	@ 0x84
 8005178:	a902      	add	r1, sp, #8
 800517a:	4628      	mov	r0, r5
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	f000 f9a3 	bl	80054c8 <_svfiprintf_r>
 8005182:	1c43      	adds	r3, r0, #1
 8005184:	bfbc      	itt	lt
 8005186:	238b      	movlt	r3, #139	@ 0x8b
 8005188:	602b      	strlt	r3, [r5, #0]
 800518a:	2c00      	cmp	r4, #0
 800518c:	d0dd      	beq.n	800514a <sniprintf+0x16>
 800518e:	9b02      	ldr	r3, [sp, #8]
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	e7d9      	b.n	800514a <sniprintf+0x16>
 8005196:	bf00      	nop
 8005198:	20000010 	.word	0x20000010

0800519c <memset>:
 800519c:	4402      	add	r2, r0
 800519e:	4603      	mov	r3, r0
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d100      	bne.n	80051a6 <memset+0xa>
 80051a4:	4770      	bx	lr
 80051a6:	f803 1b01 	strb.w	r1, [r3], #1
 80051aa:	e7f9      	b.n	80051a0 <memset+0x4>

080051ac <__errno>:
 80051ac:	4b01      	ldr	r3, [pc, #4]	@ (80051b4 <__errno+0x8>)
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000010 	.word	0x20000010

080051b8 <__libc_init_array>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	4d0d      	ldr	r5, [pc, #52]	@ (80051f0 <__libc_init_array+0x38>)
 80051bc:	4c0d      	ldr	r4, [pc, #52]	@ (80051f4 <__libc_init_array+0x3c>)
 80051be:	1b64      	subs	r4, r4, r5
 80051c0:	10a4      	asrs	r4, r4, #2
 80051c2:	2600      	movs	r6, #0
 80051c4:	42a6      	cmp	r6, r4
 80051c6:	d109      	bne.n	80051dc <__libc_init_array+0x24>
 80051c8:	4d0b      	ldr	r5, [pc, #44]	@ (80051f8 <__libc_init_array+0x40>)
 80051ca:	4c0c      	ldr	r4, [pc, #48]	@ (80051fc <__libc_init_array+0x44>)
 80051cc:	f000 fc66 	bl	8005a9c <_init>
 80051d0:	1b64      	subs	r4, r4, r5
 80051d2:	10a4      	asrs	r4, r4, #2
 80051d4:	2600      	movs	r6, #0
 80051d6:	42a6      	cmp	r6, r4
 80051d8:	d105      	bne.n	80051e6 <__libc_init_array+0x2e>
 80051da:	bd70      	pop	{r4, r5, r6, pc}
 80051dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e0:	4798      	blx	r3
 80051e2:	3601      	adds	r6, #1
 80051e4:	e7ee      	b.n	80051c4 <__libc_init_array+0xc>
 80051e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ea:	4798      	blx	r3
 80051ec:	3601      	adds	r6, #1
 80051ee:	e7f2      	b.n	80051d6 <__libc_init_array+0x1e>
 80051f0:	08005c48 	.word	0x08005c48
 80051f4:	08005c48 	.word	0x08005c48
 80051f8:	08005c48 	.word	0x08005c48
 80051fc:	08005c4c 	.word	0x08005c4c

08005200 <__retarget_lock_acquire_recursive>:
 8005200:	4770      	bx	lr

08005202 <__retarget_lock_release_recursive>:
 8005202:	4770      	bx	lr

08005204 <memcpy>:
 8005204:	440a      	add	r2, r1
 8005206:	4291      	cmp	r1, r2
 8005208:	f100 33ff 	add.w	r3, r0, #4294967295
 800520c:	d100      	bne.n	8005210 <memcpy+0xc>
 800520e:	4770      	bx	lr
 8005210:	b510      	push	{r4, lr}
 8005212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800521a:	4291      	cmp	r1, r2
 800521c:	d1f9      	bne.n	8005212 <memcpy+0xe>
 800521e:	bd10      	pop	{r4, pc}

08005220 <_free_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4605      	mov	r5, r0
 8005224:	2900      	cmp	r1, #0
 8005226:	d041      	beq.n	80052ac <_free_r+0x8c>
 8005228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800522c:	1f0c      	subs	r4, r1, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	bfb8      	it	lt
 8005232:	18e4      	addlt	r4, r4, r3
 8005234:	f000 f8e0 	bl	80053f8 <__malloc_lock>
 8005238:	4a1d      	ldr	r2, [pc, #116]	@ (80052b0 <_free_r+0x90>)
 800523a:	6813      	ldr	r3, [r2, #0]
 800523c:	b933      	cbnz	r3, 800524c <_free_r+0x2c>
 800523e:	6063      	str	r3, [r4, #4]
 8005240:	6014      	str	r4, [r2, #0]
 8005242:	4628      	mov	r0, r5
 8005244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005248:	f000 b8dc 	b.w	8005404 <__malloc_unlock>
 800524c:	42a3      	cmp	r3, r4
 800524e:	d908      	bls.n	8005262 <_free_r+0x42>
 8005250:	6820      	ldr	r0, [r4, #0]
 8005252:	1821      	adds	r1, r4, r0
 8005254:	428b      	cmp	r3, r1
 8005256:	bf01      	itttt	eq
 8005258:	6819      	ldreq	r1, [r3, #0]
 800525a:	685b      	ldreq	r3, [r3, #4]
 800525c:	1809      	addeq	r1, r1, r0
 800525e:	6021      	streq	r1, [r4, #0]
 8005260:	e7ed      	b.n	800523e <_free_r+0x1e>
 8005262:	461a      	mov	r2, r3
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	b10b      	cbz	r3, 800526c <_free_r+0x4c>
 8005268:	42a3      	cmp	r3, r4
 800526a:	d9fa      	bls.n	8005262 <_free_r+0x42>
 800526c:	6811      	ldr	r1, [r2, #0]
 800526e:	1850      	adds	r0, r2, r1
 8005270:	42a0      	cmp	r0, r4
 8005272:	d10b      	bne.n	800528c <_free_r+0x6c>
 8005274:	6820      	ldr	r0, [r4, #0]
 8005276:	4401      	add	r1, r0
 8005278:	1850      	adds	r0, r2, r1
 800527a:	4283      	cmp	r3, r0
 800527c:	6011      	str	r1, [r2, #0]
 800527e:	d1e0      	bne.n	8005242 <_free_r+0x22>
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	6053      	str	r3, [r2, #4]
 8005286:	4408      	add	r0, r1
 8005288:	6010      	str	r0, [r2, #0]
 800528a:	e7da      	b.n	8005242 <_free_r+0x22>
 800528c:	d902      	bls.n	8005294 <_free_r+0x74>
 800528e:	230c      	movs	r3, #12
 8005290:	602b      	str	r3, [r5, #0]
 8005292:	e7d6      	b.n	8005242 <_free_r+0x22>
 8005294:	6820      	ldr	r0, [r4, #0]
 8005296:	1821      	adds	r1, r4, r0
 8005298:	428b      	cmp	r3, r1
 800529a:	bf04      	itt	eq
 800529c:	6819      	ldreq	r1, [r3, #0]
 800529e:	685b      	ldreq	r3, [r3, #4]
 80052a0:	6063      	str	r3, [r4, #4]
 80052a2:	bf04      	itt	eq
 80052a4:	1809      	addeq	r1, r1, r0
 80052a6:	6021      	streq	r1, [r4, #0]
 80052a8:	6054      	str	r4, [r2, #4]
 80052aa:	e7ca      	b.n	8005242 <_free_r+0x22>
 80052ac:	bd38      	pop	{r3, r4, r5, pc}
 80052ae:	bf00      	nop
 80052b0:	20001510 	.word	0x20001510

080052b4 <sbrk_aligned>:
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	4e0f      	ldr	r6, [pc, #60]	@ (80052f4 <sbrk_aligned+0x40>)
 80052b8:	460c      	mov	r4, r1
 80052ba:	6831      	ldr	r1, [r6, #0]
 80052bc:	4605      	mov	r5, r0
 80052be:	b911      	cbnz	r1, 80052c6 <sbrk_aligned+0x12>
 80052c0:	f000 fba6 	bl	8005a10 <_sbrk_r>
 80052c4:	6030      	str	r0, [r6, #0]
 80052c6:	4621      	mov	r1, r4
 80052c8:	4628      	mov	r0, r5
 80052ca:	f000 fba1 	bl	8005a10 <_sbrk_r>
 80052ce:	1c43      	adds	r3, r0, #1
 80052d0:	d103      	bne.n	80052da <sbrk_aligned+0x26>
 80052d2:	f04f 34ff 	mov.w	r4, #4294967295
 80052d6:	4620      	mov	r0, r4
 80052d8:	bd70      	pop	{r4, r5, r6, pc}
 80052da:	1cc4      	adds	r4, r0, #3
 80052dc:	f024 0403 	bic.w	r4, r4, #3
 80052e0:	42a0      	cmp	r0, r4
 80052e2:	d0f8      	beq.n	80052d6 <sbrk_aligned+0x22>
 80052e4:	1a21      	subs	r1, r4, r0
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 fb92 	bl	8005a10 <_sbrk_r>
 80052ec:	3001      	adds	r0, #1
 80052ee:	d1f2      	bne.n	80052d6 <sbrk_aligned+0x22>
 80052f0:	e7ef      	b.n	80052d2 <sbrk_aligned+0x1e>
 80052f2:	bf00      	nop
 80052f4:	2000150c 	.word	0x2000150c

080052f8 <_malloc_r>:
 80052f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052fc:	1ccd      	adds	r5, r1, #3
 80052fe:	f025 0503 	bic.w	r5, r5, #3
 8005302:	3508      	adds	r5, #8
 8005304:	2d0c      	cmp	r5, #12
 8005306:	bf38      	it	cc
 8005308:	250c      	movcc	r5, #12
 800530a:	2d00      	cmp	r5, #0
 800530c:	4606      	mov	r6, r0
 800530e:	db01      	blt.n	8005314 <_malloc_r+0x1c>
 8005310:	42a9      	cmp	r1, r5
 8005312:	d904      	bls.n	800531e <_malloc_r+0x26>
 8005314:	230c      	movs	r3, #12
 8005316:	6033      	str	r3, [r6, #0]
 8005318:	2000      	movs	r0, #0
 800531a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800531e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053f4 <_malloc_r+0xfc>
 8005322:	f000 f869 	bl	80053f8 <__malloc_lock>
 8005326:	f8d8 3000 	ldr.w	r3, [r8]
 800532a:	461c      	mov	r4, r3
 800532c:	bb44      	cbnz	r4, 8005380 <_malloc_r+0x88>
 800532e:	4629      	mov	r1, r5
 8005330:	4630      	mov	r0, r6
 8005332:	f7ff ffbf 	bl	80052b4 <sbrk_aligned>
 8005336:	1c43      	adds	r3, r0, #1
 8005338:	4604      	mov	r4, r0
 800533a:	d158      	bne.n	80053ee <_malloc_r+0xf6>
 800533c:	f8d8 4000 	ldr.w	r4, [r8]
 8005340:	4627      	mov	r7, r4
 8005342:	2f00      	cmp	r7, #0
 8005344:	d143      	bne.n	80053ce <_malloc_r+0xd6>
 8005346:	2c00      	cmp	r4, #0
 8005348:	d04b      	beq.n	80053e2 <_malloc_r+0xea>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	4639      	mov	r1, r7
 800534e:	4630      	mov	r0, r6
 8005350:	eb04 0903 	add.w	r9, r4, r3
 8005354:	f000 fb5c 	bl	8005a10 <_sbrk_r>
 8005358:	4581      	cmp	r9, r0
 800535a:	d142      	bne.n	80053e2 <_malloc_r+0xea>
 800535c:	6821      	ldr	r1, [r4, #0]
 800535e:	1a6d      	subs	r5, r5, r1
 8005360:	4629      	mov	r1, r5
 8005362:	4630      	mov	r0, r6
 8005364:	f7ff ffa6 	bl	80052b4 <sbrk_aligned>
 8005368:	3001      	adds	r0, #1
 800536a:	d03a      	beq.n	80053e2 <_malloc_r+0xea>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	442b      	add	r3, r5
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	f8d8 3000 	ldr.w	r3, [r8]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	bb62      	cbnz	r2, 80053d4 <_malloc_r+0xdc>
 800537a:	f8c8 7000 	str.w	r7, [r8]
 800537e:	e00f      	b.n	80053a0 <_malloc_r+0xa8>
 8005380:	6822      	ldr	r2, [r4, #0]
 8005382:	1b52      	subs	r2, r2, r5
 8005384:	d420      	bmi.n	80053c8 <_malloc_r+0xd0>
 8005386:	2a0b      	cmp	r2, #11
 8005388:	d917      	bls.n	80053ba <_malloc_r+0xc2>
 800538a:	1961      	adds	r1, r4, r5
 800538c:	42a3      	cmp	r3, r4
 800538e:	6025      	str	r5, [r4, #0]
 8005390:	bf18      	it	ne
 8005392:	6059      	strne	r1, [r3, #4]
 8005394:	6863      	ldr	r3, [r4, #4]
 8005396:	bf08      	it	eq
 8005398:	f8c8 1000 	streq.w	r1, [r8]
 800539c:	5162      	str	r2, [r4, r5]
 800539e:	604b      	str	r3, [r1, #4]
 80053a0:	4630      	mov	r0, r6
 80053a2:	f000 f82f 	bl	8005404 <__malloc_unlock>
 80053a6:	f104 000b 	add.w	r0, r4, #11
 80053aa:	1d23      	adds	r3, r4, #4
 80053ac:	f020 0007 	bic.w	r0, r0, #7
 80053b0:	1ac2      	subs	r2, r0, r3
 80053b2:	bf1c      	itt	ne
 80053b4:	1a1b      	subne	r3, r3, r0
 80053b6:	50a3      	strne	r3, [r4, r2]
 80053b8:	e7af      	b.n	800531a <_malloc_r+0x22>
 80053ba:	6862      	ldr	r2, [r4, #4]
 80053bc:	42a3      	cmp	r3, r4
 80053be:	bf0c      	ite	eq
 80053c0:	f8c8 2000 	streq.w	r2, [r8]
 80053c4:	605a      	strne	r2, [r3, #4]
 80053c6:	e7eb      	b.n	80053a0 <_malloc_r+0xa8>
 80053c8:	4623      	mov	r3, r4
 80053ca:	6864      	ldr	r4, [r4, #4]
 80053cc:	e7ae      	b.n	800532c <_malloc_r+0x34>
 80053ce:	463c      	mov	r4, r7
 80053d0:	687f      	ldr	r7, [r7, #4]
 80053d2:	e7b6      	b.n	8005342 <_malloc_r+0x4a>
 80053d4:	461a      	mov	r2, r3
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	42a3      	cmp	r3, r4
 80053da:	d1fb      	bne.n	80053d4 <_malloc_r+0xdc>
 80053dc:	2300      	movs	r3, #0
 80053de:	6053      	str	r3, [r2, #4]
 80053e0:	e7de      	b.n	80053a0 <_malloc_r+0xa8>
 80053e2:	230c      	movs	r3, #12
 80053e4:	6033      	str	r3, [r6, #0]
 80053e6:	4630      	mov	r0, r6
 80053e8:	f000 f80c 	bl	8005404 <__malloc_unlock>
 80053ec:	e794      	b.n	8005318 <_malloc_r+0x20>
 80053ee:	6005      	str	r5, [r0, #0]
 80053f0:	e7d6      	b.n	80053a0 <_malloc_r+0xa8>
 80053f2:	bf00      	nop
 80053f4:	20001510 	.word	0x20001510

080053f8 <__malloc_lock>:
 80053f8:	4801      	ldr	r0, [pc, #4]	@ (8005400 <__malloc_lock+0x8>)
 80053fa:	f7ff bf01 	b.w	8005200 <__retarget_lock_acquire_recursive>
 80053fe:	bf00      	nop
 8005400:	20001508 	.word	0x20001508

08005404 <__malloc_unlock>:
 8005404:	4801      	ldr	r0, [pc, #4]	@ (800540c <__malloc_unlock+0x8>)
 8005406:	f7ff befc 	b.w	8005202 <__retarget_lock_release_recursive>
 800540a:	bf00      	nop
 800540c:	20001508 	.word	0x20001508

08005410 <__ssputs_r>:
 8005410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005414:	688e      	ldr	r6, [r1, #8]
 8005416:	461f      	mov	r7, r3
 8005418:	42be      	cmp	r6, r7
 800541a:	680b      	ldr	r3, [r1, #0]
 800541c:	4682      	mov	sl, r0
 800541e:	460c      	mov	r4, r1
 8005420:	4690      	mov	r8, r2
 8005422:	d82d      	bhi.n	8005480 <__ssputs_r+0x70>
 8005424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005428:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800542c:	d026      	beq.n	800547c <__ssputs_r+0x6c>
 800542e:	6965      	ldr	r5, [r4, #20]
 8005430:	6909      	ldr	r1, [r1, #16]
 8005432:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005436:	eba3 0901 	sub.w	r9, r3, r1
 800543a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800543e:	1c7b      	adds	r3, r7, #1
 8005440:	444b      	add	r3, r9
 8005442:	106d      	asrs	r5, r5, #1
 8005444:	429d      	cmp	r5, r3
 8005446:	bf38      	it	cc
 8005448:	461d      	movcc	r5, r3
 800544a:	0553      	lsls	r3, r2, #21
 800544c:	d527      	bpl.n	800549e <__ssputs_r+0x8e>
 800544e:	4629      	mov	r1, r5
 8005450:	f7ff ff52 	bl	80052f8 <_malloc_r>
 8005454:	4606      	mov	r6, r0
 8005456:	b360      	cbz	r0, 80054b2 <__ssputs_r+0xa2>
 8005458:	6921      	ldr	r1, [r4, #16]
 800545a:	464a      	mov	r2, r9
 800545c:	f7ff fed2 	bl	8005204 <memcpy>
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800546a:	81a3      	strh	r3, [r4, #12]
 800546c:	6126      	str	r6, [r4, #16]
 800546e:	6165      	str	r5, [r4, #20]
 8005470:	444e      	add	r6, r9
 8005472:	eba5 0509 	sub.w	r5, r5, r9
 8005476:	6026      	str	r6, [r4, #0]
 8005478:	60a5      	str	r5, [r4, #8]
 800547a:	463e      	mov	r6, r7
 800547c:	42be      	cmp	r6, r7
 800547e:	d900      	bls.n	8005482 <__ssputs_r+0x72>
 8005480:	463e      	mov	r6, r7
 8005482:	6820      	ldr	r0, [r4, #0]
 8005484:	4632      	mov	r2, r6
 8005486:	4641      	mov	r1, r8
 8005488:	f000 faa8 	bl	80059dc <memmove>
 800548c:	68a3      	ldr	r3, [r4, #8]
 800548e:	1b9b      	subs	r3, r3, r6
 8005490:	60a3      	str	r3, [r4, #8]
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	4433      	add	r3, r6
 8005496:	6023      	str	r3, [r4, #0]
 8005498:	2000      	movs	r0, #0
 800549a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549e:	462a      	mov	r2, r5
 80054a0:	f000 fac6 	bl	8005a30 <_realloc_r>
 80054a4:	4606      	mov	r6, r0
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d1e0      	bne.n	800546c <__ssputs_r+0x5c>
 80054aa:	6921      	ldr	r1, [r4, #16]
 80054ac:	4650      	mov	r0, sl
 80054ae:	f7ff feb7 	bl	8005220 <_free_r>
 80054b2:	230c      	movs	r3, #12
 80054b4:	f8ca 3000 	str.w	r3, [sl]
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054be:	81a3      	strh	r3, [r4, #12]
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295
 80054c4:	e7e9      	b.n	800549a <__ssputs_r+0x8a>
	...

080054c8 <_svfiprintf_r>:
 80054c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054cc:	4698      	mov	r8, r3
 80054ce:	898b      	ldrh	r3, [r1, #12]
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	b09d      	sub	sp, #116	@ 0x74
 80054d4:	4607      	mov	r7, r0
 80054d6:	460d      	mov	r5, r1
 80054d8:	4614      	mov	r4, r2
 80054da:	d510      	bpl.n	80054fe <_svfiprintf_r+0x36>
 80054dc:	690b      	ldr	r3, [r1, #16]
 80054de:	b973      	cbnz	r3, 80054fe <_svfiprintf_r+0x36>
 80054e0:	2140      	movs	r1, #64	@ 0x40
 80054e2:	f7ff ff09 	bl	80052f8 <_malloc_r>
 80054e6:	6028      	str	r0, [r5, #0]
 80054e8:	6128      	str	r0, [r5, #16]
 80054ea:	b930      	cbnz	r0, 80054fa <_svfiprintf_r+0x32>
 80054ec:	230c      	movs	r3, #12
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295
 80054f4:	b01d      	add	sp, #116	@ 0x74
 80054f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054fa:	2340      	movs	r3, #64	@ 0x40
 80054fc:	616b      	str	r3, [r5, #20]
 80054fe:	2300      	movs	r3, #0
 8005500:	9309      	str	r3, [sp, #36]	@ 0x24
 8005502:	2320      	movs	r3, #32
 8005504:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005508:	f8cd 800c 	str.w	r8, [sp, #12]
 800550c:	2330      	movs	r3, #48	@ 0x30
 800550e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80056ac <_svfiprintf_r+0x1e4>
 8005512:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005516:	f04f 0901 	mov.w	r9, #1
 800551a:	4623      	mov	r3, r4
 800551c:	469a      	mov	sl, r3
 800551e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005522:	b10a      	cbz	r2, 8005528 <_svfiprintf_r+0x60>
 8005524:	2a25      	cmp	r2, #37	@ 0x25
 8005526:	d1f9      	bne.n	800551c <_svfiprintf_r+0x54>
 8005528:	ebba 0b04 	subs.w	fp, sl, r4
 800552c:	d00b      	beq.n	8005546 <_svfiprintf_r+0x7e>
 800552e:	465b      	mov	r3, fp
 8005530:	4622      	mov	r2, r4
 8005532:	4629      	mov	r1, r5
 8005534:	4638      	mov	r0, r7
 8005536:	f7ff ff6b 	bl	8005410 <__ssputs_r>
 800553a:	3001      	adds	r0, #1
 800553c:	f000 80a7 	beq.w	800568e <_svfiprintf_r+0x1c6>
 8005540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005542:	445a      	add	r2, fp
 8005544:	9209      	str	r2, [sp, #36]	@ 0x24
 8005546:	f89a 3000 	ldrb.w	r3, [sl]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 809f 	beq.w	800568e <_svfiprintf_r+0x1c6>
 8005550:	2300      	movs	r3, #0
 8005552:	f04f 32ff 	mov.w	r2, #4294967295
 8005556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800555a:	f10a 0a01 	add.w	sl, sl, #1
 800555e:	9304      	str	r3, [sp, #16]
 8005560:	9307      	str	r3, [sp, #28]
 8005562:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005566:	931a      	str	r3, [sp, #104]	@ 0x68
 8005568:	4654      	mov	r4, sl
 800556a:	2205      	movs	r2, #5
 800556c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005570:	484e      	ldr	r0, [pc, #312]	@ (80056ac <_svfiprintf_r+0x1e4>)
 8005572:	f7fa fe2d 	bl	80001d0 <memchr>
 8005576:	9a04      	ldr	r2, [sp, #16]
 8005578:	b9d8      	cbnz	r0, 80055b2 <_svfiprintf_r+0xea>
 800557a:	06d0      	lsls	r0, r2, #27
 800557c:	bf44      	itt	mi
 800557e:	2320      	movmi	r3, #32
 8005580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005584:	0711      	lsls	r1, r2, #28
 8005586:	bf44      	itt	mi
 8005588:	232b      	movmi	r3, #43	@ 0x2b
 800558a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800558e:	f89a 3000 	ldrb.w	r3, [sl]
 8005592:	2b2a      	cmp	r3, #42	@ 0x2a
 8005594:	d015      	beq.n	80055c2 <_svfiprintf_r+0xfa>
 8005596:	9a07      	ldr	r2, [sp, #28]
 8005598:	4654      	mov	r4, sl
 800559a:	2000      	movs	r0, #0
 800559c:	f04f 0c0a 	mov.w	ip, #10
 80055a0:	4621      	mov	r1, r4
 80055a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055a6:	3b30      	subs	r3, #48	@ 0x30
 80055a8:	2b09      	cmp	r3, #9
 80055aa:	d94b      	bls.n	8005644 <_svfiprintf_r+0x17c>
 80055ac:	b1b0      	cbz	r0, 80055dc <_svfiprintf_r+0x114>
 80055ae:	9207      	str	r2, [sp, #28]
 80055b0:	e014      	b.n	80055dc <_svfiprintf_r+0x114>
 80055b2:	eba0 0308 	sub.w	r3, r0, r8
 80055b6:	fa09 f303 	lsl.w	r3, r9, r3
 80055ba:	4313      	orrs	r3, r2
 80055bc:	9304      	str	r3, [sp, #16]
 80055be:	46a2      	mov	sl, r4
 80055c0:	e7d2      	b.n	8005568 <_svfiprintf_r+0xa0>
 80055c2:	9b03      	ldr	r3, [sp, #12]
 80055c4:	1d19      	adds	r1, r3, #4
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	9103      	str	r1, [sp, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bfbb      	ittet	lt
 80055ce:	425b      	neglt	r3, r3
 80055d0:	f042 0202 	orrlt.w	r2, r2, #2
 80055d4:	9307      	strge	r3, [sp, #28]
 80055d6:	9307      	strlt	r3, [sp, #28]
 80055d8:	bfb8      	it	lt
 80055da:	9204      	strlt	r2, [sp, #16]
 80055dc:	7823      	ldrb	r3, [r4, #0]
 80055de:	2b2e      	cmp	r3, #46	@ 0x2e
 80055e0:	d10a      	bne.n	80055f8 <_svfiprintf_r+0x130>
 80055e2:	7863      	ldrb	r3, [r4, #1]
 80055e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80055e6:	d132      	bne.n	800564e <_svfiprintf_r+0x186>
 80055e8:	9b03      	ldr	r3, [sp, #12]
 80055ea:	1d1a      	adds	r2, r3, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	9203      	str	r2, [sp, #12]
 80055f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055f4:	3402      	adds	r4, #2
 80055f6:	9305      	str	r3, [sp, #20]
 80055f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80056bc <_svfiprintf_r+0x1f4>
 80055fc:	7821      	ldrb	r1, [r4, #0]
 80055fe:	2203      	movs	r2, #3
 8005600:	4650      	mov	r0, sl
 8005602:	f7fa fde5 	bl	80001d0 <memchr>
 8005606:	b138      	cbz	r0, 8005618 <_svfiprintf_r+0x150>
 8005608:	9b04      	ldr	r3, [sp, #16]
 800560a:	eba0 000a 	sub.w	r0, r0, sl
 800560e:	2240      	movs	r2, #64	@ 0x40
 8005610:	4082      	lsls	r2, r0
 8005612:	4313      	orrs	r3, r2
 8005614:	3401      	adds	r4, #1
 8005616:	9304      	str	r3, [sp, #16]
 8005618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800561c:	4824      	ldr	r0, [pc, #144]	@ (80056b0 <_svfiprintf_r+0x1e8>)
 800561e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005622:	2206      	movs	r2, #6
 8005624:	f7fa fdd4 	bl	80001d0 <memchr>
 8005628:	2800      	cmp	r0, #0
 800562a:	d036      	beq.n	800569a <_svfiprintf_r+0x1d2>
 800562c:	4b21      	ldr	r3, [pc, #132]	@ (80056b4 <_svfiprintf_r+0x1ec>)
 800562e:	bb1b      	cbnz	r3, 8005678 <_svfiprintf_r+0x1b0>
 8005630:	9b03      	ldr	r3, [sp, #12]
 8005632:	3307      	adds	r3, #7
 8005634:	f023 0307 	bic.w	r3, r3, #7
 8005638:	3308      	adds	r3, #8
 800563a:	9303      	str	r3, [sp, #12]
 800563c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800563e:	4433      	add	r3, r6
 8005640:	9309      	str	r3, [sp, #36]	@ 0x24
 8005642:	e76a      	b.n	800551a <_svfiprintf_r+0x52>
 8005644:	fb0c 3202 	mla	r2, ip, r2, r3
 8005648:	460c      	mov	r4, r1
 800564a:	2001      	movs	r0, #1
 800564c:	e7a8      	b.n	80055a0 <_svfiprintf_r+0xd8>
 800564e:	2300      	movs	r3, #0
 8005650:	3401      	adds	r4, #1
 8005652:	9305      	str	r3, [sp, #20]
 8005654:	4619      	mov	r1, r3
 8005656:	f04f 0c0a 	mov.w	ip, #10
 800565a:	4620      	mov	r0, r4
 800565c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005660:	3a30      	subs	r2, #48	@ 0x30
 8005662:	2a09      	cmp	r2, #9
 8005664:	d903      	bls.n	800566e <_svfiprintf_r+0x1a6>
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0c6      	beq.n	80055f8 <_svfiprintf_r+0x130>
 800566a:	9105      	str	r1, [sp, #20]
 800566c:	e7c4      	b.n	80055f8 <_svfiprintf_r+0x130>
 800566e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005672:	4604      	mov	r4, r0
 8005674:	2301      	movs	r3, #1
 8005676:	e7f0      	b.n	800565a <_svfiprintf_r+0x192>
 8005678:	ab03      	add	r3, sp, #12
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	462a      	mov	r2, r5
 800567e:	4b0e      	ldr	r3, [pc, #56]	@ (80056b8 <_svfiprintf_r+0x1f0>)
 8005680:	a904      	add	r1, sp, #16
 8005682:	4638      	mov	r0, r7
 8005684:	f3af 8000 	nop.w
 8005688:	1c42      	adds	r2, r0, #1
 800568a:	4606      	mov	r6, r0
 800568c:	d1d6      	bne.n	800563c <_svfiprintf_r+0x174>
 800568e:	89ab      	ldrh	r3, [r5, #12]
 8005690:	065b      	lsls	r3, r3, #25
 8005692:	f53f af2d 	bmi.w	80054f0 <_svfiprintf_r+0x28>
 8005696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005698:	e72c      	b.n	80054f4 <_svfiprintf_r+0x2c>
 800569a:	ab03      	add	r3, sp, #12
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	462a      	mov	r2, r5
 80056a0:	4b05      	ldr	r3, [pc, #20]	@ (80056b8 <_svfiprintf_r+0x1f0>)
 80056a2:	a904      	add	r1, sp, #16
 80056a4:	4638      	mov	r0, r7
 80056a6:	f000 f879 	bl	800579c <_printf_i>
 80056aa:	e7ed      	b.n	8005688 <_svfiprintf_r+0x1c0>
 80056ac:	08005c0c 	.word	0x08005c0c
 80056b0:	08005c16 	.word	0x08005c16
 80056b4:	00000000 	.word	0x00000000
 80056b8:	08005411 	.word	0x08005411
 80056bc:	08005c12 	.word	0x08005c12

080056c0 <_printf_common>:
 80056c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c4:	4616      	mov	r6, r2
 80056c6:	4698      	mov	r8, r3
 80056c8:	688a      	ldr	r2, [r1, #8]
 80056ca:	690b      	ldr	r3, [r1, #16]
 80056cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056d0:	4293      	cmp	r3, r2
 80056d2:	bfb8      	it	lt
 80056d4:	4613      	movlt	r3, r2
 80056d6:	6033      	str	r3, [r6, #0]
 80056d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056dc:	4607      	mov	r7, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	b10a      	cbz	r2, 80056e6 <_printf_common+0x26>
 80056e2:	3301      	adds	r3, #1
 80056e4:	6033      	str	r3, [r6, #0]
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	0699      	lsls	r1, r3, #26
 80056ea:	bf42      	ittt	mi
 80056ec:	6833      	ldrmi	r3, [r6, #0]
 80056ee:	3302      	addmi	r3, #2
 80056f0:	6033      	strmi	r3, [r6, #0]
 80056f2:	6825      	ldr	r5, [r4, #0]
 80056f4:	f015 0506 	ands.w	r5, r5, #6
 80056f8:	d106      	bne.n	8005708 <_printf_common+0x48>
 80056fa:	f104 0a19 	add.w	sl, r4, #25
 80056fe:	68e3      	ldr	r3, [r4, #12]
 8005700:	6832      	ldr	r2, [r6, #0]
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	42ab      	cmp	r3, r5
 8005706:	dc26      	bgt.n	8005756 <_printf_common+0x96>
 8005708:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800570c:	6822      	ldr	r2, [r4, #0]
 800570e:	3b00      	subs	r3, #0
 8005710:	bf18      	it	ne
 8005712:	2301      	movne	r3, #1
 8005714:	0692      	lsls	r2, r2, #26
 8005716:	d42b      	bmi.n	8005770 <_printf_common+0xb0>
 8005718:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800571c:	4641      	mov	r1, r8
 800571e:	4638      	mov	r0, r7
 8005720:	47c8      	blx	r9
 8005722:	3001      	adds	r0, #1
 8005724:	d01e      	beq.n	8005764 <_printf_common+0xa4>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	6922      	ldr	r2, [r4, #16]
 800572a:	f003 0306 	and.w	r3, r3, #6
 800572e:	2b04      	cmp	r3, #4
 8005730:	bf02      	ittt	eq
 8005732:	68e5      	ldreq	r5, [r4, #12]
 8005734:	6833      	ldreq	r3, [r6, #0]
 8005736:	1aed      	subeq	r5, r5, r3
 8005738:	68a3      	ldr	r3, [r4, #8]
 800573a:	bf0c      	ite	eq
 800573c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005740:	2500      	movne	r5, #0
 8005742:	4293      	cmp	r3, r2
 8005744:	bfc4      	itt	gt
 8005746:	1a9b      	subgt	r3, r3, r2
 8005748:	18ed      	addgt	r5, r5, r3
 800574a:	2600      	movs	r6, #0
 800574c:	341a      	adds	r4, #26
 800574e:	42b5      	cmp	r5, r6
 8005750:	d11a      	bne.n	8005788 <_printf_common+0xc8>
 8005752:	2000      	movs	r0, #0
 8005754:	e008      	b.n	8005768 <_printf_common+0xa8>
 8005756:	2301      	movs	r3, #1
 8005758:	4652      	mov	r2, sl
 800575a:	4641      	mov	r1, r8
 800575c:	4638      	mov	r0, r7
 800575e:	47c8      	blx	r9
 8005760:	3001      	adds	r0, #1
 8005762:	d103      	bne.n	800576c <_printf_common+0xac>
 8005764:	f04f 30ff 	mov.w	r0, #4294967295
 8005768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576c:	3501      	adds	r5, #1
 800576e:	e7c6      	b.n	80056fe <_printf_common+0x3e>
 8005770:	18e1      	adds	r1, r4, r3
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	2030      	movs	r0, #48	@ 0x30
 8005776:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800577a:	4422      	add	r2, r4
 800577c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005784:	3302      	adds	r3, #2
 8005786:	e7c7      	b.n	8005718 <_printf_common+0x58>
 8005788:	2301      	movs	r3, #1
 800578a:	4622      	mov	r2, r4
 800578c:	4641      	mov	r1, r8
 800578e:	4638      	mov	r0, r7
 8005790:	47c8      	blx	r9
 8005792:	3001      	adds	r0, #1
 8005794:	d0e6      	beq.n	8005764 <_printf_common+0xa4>
 8005796:	3601      	adds	r6, #1
 8005798:	e7d9      	b.n	800574e <_printf_common+0x8e>
	...

0800579c <_printf_i>:
 800579c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a0:	7e0f      	ldrb	r7, [r1, #24]
 80057a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057a4:	2f78      	cmp	r7, #120	@ 0x78
 80057a6:	4691      	mov	r9, r2
 80057a8:	4680      	mov	r8, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	469a      	mov	sl, r3
 80057ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057b2:	d807      	bhi.n	80057c4 <_printf_i+0x28>
 80057b4:	2f62      	cmp	r7, #98	@ 0x62
 80057b6:	d80a      	bhi.n	80057ce <_printf_i+0x32>
 80057b8:	2f00      	cmp	r7, #0
 80057ba:	f000 80d2 	beq.w	8005962 <_printf_i+0x1c6>
 80057be:	2f58      	cmp	r7, #88	@ 0x58
 80057c0:	f000 80b9 	beq.w	8005936 <_printf_i+0x19a>
 80057c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057cc:	e03a      	b.n	8005844 <_printf_i+0xa8>
 80057ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057d2:	2b15      	cmp	r3, #21
 80057d4:	d8f6      	bhi.n	80057c4 <_printf_i+0x28>
 80057d6:	a101      	add	r1, pc, #4	@ (adr r1, 80057dc <_printf_i+0x40>)
 80057d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057dc:	08005835 	.word	0x08005835
 80057e0:	08005849 	.word	0x08005849
 80057e4:	080057c5 	.word	0x080057c5
 80057e8:	080057c5 	.word	0x080057c5
 80057ec:	080057c5 	.word	0x080057c5
 80057f0:	080057c5 	.word	0x080057c5
 80057f4:	08005849 	.word	0x08005849
 80057f8:	080057c5 	.word	0x080057c5
 80057fc:	080057c5 	.word	0x080057c5
 8005800:	080057c5 	.word	0x080057c5
 8005804:	080057c5 	.word	0x080057c5
 8005808:	08005949 	.word	0x08005949
 800580c:	08005873 	.word	0x08005873
 8005810:	08005903 	.word	0x08005903
 8005814:	080057c5 	.word	0x080057c5
 8005818:	080057c5 	.word	0x080057c5
 800581c:	0800596b 	.word	0x0800596b
 8005820:	080057c5 	.word	0x080057c5
 8005824:	08005873 	.word	0x08005873
 8005828:	080057c5 	.word	0x080057c5
 800582c:	080057c5 	.word	0x080057c5
 8005830:	0800590b 	.word	0x0800590b
 8005834:	6833      	ldr	r3, [r6, #0]
 8005836:	1d1a      	adds	r2, r3, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6032      	str	r2, [r6, #0]
 800583c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005844:	2301      	movs	r3, #1
 8005846:	e09d      	b.n	8005984 <_printf_i+0x1e8>
 8005848:	6833      	ldr	r3, [r6, #0]
 800584a:	6820      	ldr	r0, [r4, #0]
 800584c:	1d19      	adds	r1, r3, #4
 800584e:	6031      	str	r1, [r6, #0]
 8005850:	0606      	lsls	r6, r0, #24
 8005852:	d501      	bpl.n	8005858 <_printf_i+0xbc>
 8005854:	681d      	ldr	r5, [r3, #0]
 8005856:	e003      	b.n	8005860 <_printf_i+0xc4>
 8005858:	0645      	lsls	r5, r0, #25
 800585a:	d5fb      	bpl.n	8005854 <_printf_i+0xb8>
 800585c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005860:	2d00      	cmp	r5, #0
 8005862:	da03      	bge.n	800586c <_printf_i+0xd0>
 8005864:	232d      	movs	r3, #45	@ 0x2d
 8005866:	426d      	negs	r5, r5
 8005868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800586c:	4859      	ldr	r0, [pc, #356]	@ (80059d4 <_printf_i+0x238>)
 800586e:	230a      	movs	r3, #10
 8005870:	e011      	b.n	8005896 <_printf_i+0xfa>
 8005872:	6821      	ldr	r1, [r4, #0]
 8005874:	6833      	ldr	r3, [r6, #0]
 8005876:	0608      	lsls	r0, r1, #24
 8005878:	f853 5b04 	ldr.w	r5, [r3], #4
 800587c:	d402      	bmi.n	8005884 <_printf_i+0xe8>
 800587e:	0649      	lsls	r1, r1, #25
 8005880:	bf48      	it	mi
 8005882:	b2ad      	uxthmi	r5, r5
 8005884:	2f6f      	cmp	r7, #111	@ 0x6f
 8005886:	4853      	ldr	r0, [pc, #332]	@ (80059d4 <_printf_i+0x238>)
 8005888:	6033      	str	r3, [r6, #0]
 800588a:	bf14      	ite	ne
 800588c:	230a      	movne	r3, #10
 800588e:	2308      	moveq	r3, #8
 8005890:	2100      	movs	r1, #0
 8005892:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005896:	6866      	ldr	r6, [r4, #4]
 8005898:	60a6      	str	r6, [r4, #8]
 800589a:	2e00      	cmp	r6, #0
 800589c:	bfa2      	ittt	ge
 800589e:	6821      	ldrge	r1, [r4, #0]
 80058a0:	f021 0104 	bicge.w	r1, r1, #4
 80058a4:	6021      	strge	r1, [r4, #0]
 80058a6:	b90d      	cbnz	r5, 80058ac <_printf_i+0x110>
 80058a8:	2e00      	cmp	r6, #0
 80058aa:	d04b      	beq.n	8005944 <_printf_i+0x1a8>
 80058ac:	4616      	mov	r6, r2
 80058ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80058b2:	fb03 5711 	mls	r7, r3, r1, r5
 80058b6:	5dc7      	ldrb	r7, [r0, r7]
 80058b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058bc:	462f      	mov	r7, r5
 80058be:	42bb      	cmp	r3, r7
 80058c0:	460d      	mov	r5, r1
 80058c2:	d9f4      	bls.n	80058ae <_printf_i+0x112>
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d10b      	bne.n	80058e0 <_printf_i+0x144>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	07df      	lsls	r7, r3, #31
 80058cc:	d508      	bpl.n	80058e0 <_printf_i+0x144>
 80058ce:	6923      	ldr	r3, [r4, #16]
 80058d0:	6861      	ldr	r1, [r4, #4]
 80058d2:	4299      	cmp	r1, r3
 80058d4:	bfde      	ittt	le
 80058d6:	2330      	movle	r3, #48	@ 0x30
 80058d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058e0:	1b92      	subs	r2, r2, r6
 80058e2:	6122      	str	r2, [r4, #16]
 80058e4:	f8cd a000 	str.w	sl, [sp]
 80058e8:	464b      	mov	r3, r9
 80058ea:	aa03      	add	r2, sp, #12
 80058ec:	4621      	mov	r1, r4
 80058ee:	4640      	mov	r0, r8
 80058f0:	f7ff fee6 	bl	80056c0 <_printf_common>
 80058f4:	3001      	adds	r0, #1
 80058f6:	d14a      	bne.n	800598e <_printf_i+0x1f2>
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295
 80058fc:	b004      	add	sp, #16
 80058fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	f043 0320 	orr.w	r3, r3, #32
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	4833      	ldr	r0, [pc, #204]	@ (80059d8 <_printf_i+0x23c>)
 800590c:	2778      	movs	r7, #120	@ 0x78
 800590e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	6831      	ldr	r1, [r6, #0]
 8005916:	061f      	lsls	r7, r3, #24
 8005918:	f851 5b04 	ldr.w	r5, [r1], #4
 800591c:	d402      	bmi.n	8005924 <_printf_i+0x188>
 800591e:	065f      	lsls	r7, r3, #25
 8005920:	bf48      	it	mi
 8005922:	b2ad      	uxthmi	r5, r5
 8005924:	6031      	str	r1, [r6, #0]
 8005926:	07d9      	lsls	r1, r3, #31
 8005928:	bf44      	itt	mi
 800592a:	f043 0320 	orrmi.w	r3, r3, #32
 800592e:	6023      	strmi	r3, [r4, #0]
 8005930:	b11d      	cbz	r5, 800593a <_printf_i+0x19e>
 8005932:	2310      	movs	r3, #16
 8005934:	e7ac      	b.n	8005890 <_printf_i+0xf4>
 8005936:	4827      	ldr	r0, [pc, #156]	@ (80059d4 <_printf_i+0x238>)
 8005938:	e7e9      	b.n	800590e <_printf_i+0x172>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	f023 0320 	bic.w	r3, r3, #32
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	e7f6      	b.n	8005932 <_printf_i+0x196>
 8005944:	4616      	mov	r6, r2
 8005946:	e7bd      	b.n	80058c4 <_printf_i+0x128>
 8005948:	6833      	ldr	r3, [r6, #0]
 800594a:	6825      	ldr	r5, [r4, #0]
 800594c:	6961      	ldr	r1, [r4, #20]
 800594e:	1d18      	adds	r0, r3, #4
 8005950:	6030      	str	r0, [r6, #0]
 8005952:	062e      	lsls	r6, r5, #24
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	d501      	bpl.n	800595c <_printf_i+0x1c0>
 8005958:	6019      	str	r1, [r3, #0]
 800595a:	e002      	b.n	8005962 <_printf_i+0x1c6>
 800595c:	0668      	lsls	r0, r5, #25
 800595e:	d5fb      	bpl.n	8005958 <_printf_i+0x1bc>
 8005960:	8019      	strh	r1, [r3, #0]
 8005962:	2300      	movs	r3, #0
 8005964:	6123      	str	r3, [r4, #16]
 8005966:	4616      	mov	r6, r2
 8005968:	e7bc      	b.n	80058e4 <_printf_i+0x148>
 800596a:	6833      	ldr	r3, [r6, #0]
 800596c:	1d1a      	adds	r2, r3, #4
 800596e:	6032      	str	r2, [r6, #0]
 8005970:	681e      	ldr	r6, [r3, #0]
 8005972:	6862      	ldr	r2, [r4, #4]
 8005974:	2100      	movs	r1, #0
 8005976:	4630      	mov	r0, r6
 8005978:	f7fa fc2a 	bl	80001d0 <memchr>
 800597c:	b108      	cbz	r0, 8005982 <_printf_i+0x1e6>
 800597e:	1b80      	subs	r0, r0, r6
 8005980:	6060      	str	r0, [r4, #4]
 8005982:	6863      	ldr	r3, [r4, #4]
 8005984:	6123      	str	r3, [r4, #16]
 8005986:	2300      	movs	r3, #0
 8005988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800598c:	e7aa      	b.n	80058e4 <_printf_i+0x148>
 800598e:	6923      	ldr	r3, [r4, #16]
 8005990:	4632      	mov	r2, r6
 8005992:	4649      	mov	r1, r9
 8005994:	4640      	mov	r0, r8
 8005996:	47d0      	blx	sl
 8005998:	3001      	adds	r0, #1
 800599a:	d0ad      	beq.n	80058f8 <_printf_i+0x15c>
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	079b      	lsls	r3, r3, #30
 80059a0:	d413      	bmi.n	80059ca <_printf_i+0x22e>
 80059a2:	68e0      	ldr	r0, [r4, #12]
 80059a4:	9b03      	ldr	r3, [sp, #12]
 80059a6:	4298      	cmp	r0, r3
 80059a8:	bfb8      	it	lt
 80059aa:	4618      	movlt	r0, r3
 80059ac:	e7a6      	b.n	80058fc <_printf_i+0x160>
 80059ae:	2301      	movs	r3, #1
 80059b0:	4632      	mov	r2, r6
 80059b2:	4649      	mov	r1, r9
 80059b4:	4640      	mov	r0, r8
 80059b6:	47d0      	blx	sl
 80059b8:	3001      	adds	r0, #1
 80059ba:	d09d      	beq.n	80058f8 <_printf_i+0x15c>
 80059bc:	3501      	adds	r5, #1
 80059be:	68e3      	ldr	r3, [r4, #12]
 80059c0:	9903      	ldr	r1, [sp, #12]
 80059c2:	1a5b      	subs	r3, r3, r1
 80059c4:	42ab      	cmp	r3, r5
 80059c6:	dcf2      	bgt.n	80059ae <_printf_i+0x212>
 80059c8:	e7eb      	b.n	80059a2 <_printf_i+0x206>
 80059ca:	2500      	movs	r5, #0
 80059cc:	f104 0619 	add.w	r6, r4, #25
 80059d0:	e7f5      	b.n	80059be <_printf_i+0x222>
 80059d2:	bf00      	nop
 80059d4:	08005c1d 	.word	0x08005c1d
 80059d8:	08005c2e 	.word	0x08005c2e

080059dc <memmove>:
 80059dc:	4288      	cmp	r0, r1
 80059de:	b510      	push	{r4, lr}
 80059e0:	eb01 0402 	add.w	r4, r1, r2
 80059e4:	d902      	bls.n	80059ec <memmove+0x10>
 80059e6:	4284      	cmp	r4, r0
 80059e8:	4623      	mov	r3, r4
 80059ea:	d807      	bhi.n	80059fc <memmove+0x20>
 80059ec:	1e43      	subs	r3, r0, #1
 80059ee:	42a1      	cmp	r1, r4
 80059f0:	d008      	beq.n	8005a04 <memmove+0x28>
 80059f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059fa:	e7f8      	b.n	80059ee <memmove+0x12>
 80059fc:	4402      	add	r2, r0
 80059fe:	4601      	mov	r1, r0
 8005a00:	428a      	cmp	r2, r1
 8005a02:	d100      	bne.n	8005a06 <memmove+0x2a>
 8005a04:	bd10      	pop	{r4, pc}
 8005a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a0e:	e7f7      	b.n	8005a00 <memmove+0x24>

08005a10 <_sbrk_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4d06      	ldr	r5, [pc, #24]	@ (8005a2c <_sbrk_r+0x1c>)
 8005a14:	2300      	movs	r3, #0
 8005a16:	4604      	mov	r4, r0
 8005a18:	4608      	mov	r0, r1
 8005a1a:	602b      	str	r3, [r5, #0]
 8005a1c:	f7fb f93c 	bl	8000c98 <_sbrk>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_sbrk_r+0x1a>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_sbrk_r+0x1a>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20001504 	.word	0x20001504

08005a30 <_realloc_r>:
 8005a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a34:	4680      	mov	r8, r0
 8005a36:	4615      	mov	r5, r2
 8005a38:	460c      	mov	r4, r1
 8005a3a:	b921      	cbnz	r1, 8005a46 <_realloc_r+0x16>
 8005a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a40:	4611      	mov	r1, r2
 8005a42:	f7ff bc59 	b.w	80052f8 <_malloc_r>
 8005a46:	b92a      	cbnz	r2, 8005a54 <_realloc_r+0x24>
 8005a48:	f7ff fbea 	bl	8005220 <_free_r>
 8005a4c:	2400      	movs	r4, #0
 8005a4e:	4620      	mov	r0, r4
 8005a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a54:	f000 f81a 	bl	8005a8c <_malloc_usable_size_r>
 8005a58:	4285      	cmp	r5, r0
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	d802      	bhi.n	8005a64 <_realloc_r+0x34>
 8005a5e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a62:	d8f4      	bhi.n	8005a4e <_realloc_r+0x1e>
 8005a64:	4629      	mov	r1, r5
 8005a66:	4640      	mov	r0, r8
 8005a68:	f7ff fc46 	bl	80052f8 <_malloc_r>
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d0ec      	beq.n	8005a4c <_realloc_r+0x1c>
 8005a72:	42b5      	cmp	r5, r6
 8005a74:	462a      	mov	r2, r5
 8005a76:	4621      	mov	r1, r4
 8005a78:	bf28      	it	cs
 8005a7a:	4632      	movcs	r2, r6
 8005a7c:	f7ff fbc2 	bl	8005204 <memcpy>
 8005a80:	4621      	mov	r1, r4
 8005a82:	4640      	mov	r0, r8
 8005a84:	f7ff fbcc 	bl	8005220 <_free_r>
 8005a88:	463c      	mov	r4, r7
 8005a8a:	e7e0      	b.n	8005a4e <_realloc_r+0x1e>

08005a8c <_malloc_usable_size_r>:
 8005a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a90:	1f18      	subs	r0, r3, #4
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	bfbc      	itt	lt
 8005a96:	580b      	ldrlt	r3, [r1, r0]
 8005a98:	18c0      	addlt	r0, r0, r3
 8005a9a:	4770      	bx	lr

08005a9c <_init>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	bf00      	nop
 8005aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa2:	bc08      	pop	{r3}
 8005aa4:	469e      	mov	lr, r3
 8005aa6:	4770      	bx	lr

08005aa8 <_fini>:
 8005aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aaa:	bf00      	nop
 8005aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aae:	bc08      	pop	{r3}
 8005ab0:	469e      	mov	lr, r3
 8005ab2:	4770      	bx	lr
