
TPaudio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08005db4  08005db4  00006db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f8c  08005f8c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005f8c  08005f8c  00006f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f94  08005f94  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f94  08005f94  00006f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f98  08005f98  00006f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005f9c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  20000068  08006004  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  08006004  00007724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c9f  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003372  00000000  00000000  0001cd37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  000200b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb4  00000000  00000000  000214f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291e6  00000000  00000000  000224ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019031  00000000  00000000  0004b692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe2fd  00000000  00000000  000646c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001629c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d0c  00000000  00000000  00162a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00168710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d9c 	.word	0x08005d9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005d9c 	.word	0x08005d9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <drv_uart1_receive>:

#include "usart.h"
#include "gpio.h"

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart2, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 800056c:	887a      	ldrh	r2, [r7, #2]
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	4803      	ldr	r0, [pc, #12]	@ (8000584 <drv_uart1_receive+0x24>)
 8000576:	f003 fb0a 	bl	8003b8e <HAL_UART_Receive>
	//HAL_UART_Receive_IT(&huart2, (uint8_t*)(pData), size);
	return 0;	// Life's too short for error management
 800057a:	2300      	movs	r3, #0
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000498 	.word	0x20000498

08000588 <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8000594:	887a      	ldrh	r2, [r7, #2]
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	4803      	ldr	r0, [pc, #12]	@ (80005ac <drv_uart1_transmit+0x24>)
 800059e:	f003 fa6d 	bl	8003a7c <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000498 	.word	0x20000498

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	4b35      	ldr	r3, [pc, #212]	@ (800069c <MX_GPIO_Init+0xec>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	4a34      	ldr	r2, [pc, #208]	@ (800069c <MX_GPIO_Init+0xec>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d2:	4b32      	ldr	r3, [pc, #200]	@ (800069c <MX_GPIO_Init+0xec>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005de:	4b2f      	ldr	r3, [pc, #188]	@ (800069c <MX_GPIO_Init+0xec>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e2:	4a2e      	ldr	r2, [pc, #184]	@ (800069c <MX_GPIO_Init+0xec>)
 80005e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ea:	4b2c      	ldr	r3, [pc, #176]	@ (800069c <MX_GPIO_Init+0xec>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b29      	ldr	r3, [pc, #164]	@ (800069c <MX_GPIO_Init+0xec>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	4a28      	ldr	r2, [pc, #160]	@ (800069c <MX_GPIO_Init+0xec>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000602:	4b26      	ldr	r3, [pc, #152]	@ (800069c <MX_GPIO_Init+0xec>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b23      	ldr	r3, [pc, #140]	@ (800069c <MX_GPIO_Init+0xec>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	4a22      	ldr	r2, [pc, #136]	@ (800069c <MX_GPIO_Init+0xec>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <MX_GPIO_Init+0xec>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Vu_Reset_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2121      	movs	r1, #33	@ 0x21
 800062a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062e:	f001 f829 	bl	8001684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2180      	movs	r1, #128	@ 0x80
 8000636:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 8000638:	f001 f824 	bl	8001684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800063c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000642:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4814      	ldr	r0, [pc, #80]	@ (80006a4 <MX_GPIO_Init+0xf4>)
 8000654:	f000 fe6c 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Vu_Reset_Pin|LD2_Pin;
 8000658:	2321      	movs	r3, #33	@ 0x21
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000672:	f000 fe5d 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000676:	2380      	movs	r3, #128	@ 0x80
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 800068e:	f000 fe4f 	bl	8001330 <HAL_GPIO_Init>

}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	@ 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000
 80006a0:	48000400 	.word	0x48000400
 80006a4:	48000800 	.word	0x48000800

080006a8 <__io_putchar>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
int __io_putchar(int ch) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	2201      	movs	r2, #1
 80006b8:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <__io_putchar+0x20>)
 80006ba:	f003 f9df 	bl	8003a7c <HAL_UART_Transmit>
	return ch;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000498 	.word	0x20000498

080006cc <fonction>:

int fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80006de:	4a0a      	ldr	r2, [pc, #40]	@ (8000708 <fonction+0x3c>)
 80006e0:	2128      	movs	r1, #40	@ 0x28
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 fb14 	bl	8004d10 <sniprintf>
 80006e8:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80006f6:	6979      	ldr	r1, [r7, #20]
 80006f8:	b289      	uxth	r1, r1
 80006fa:	4610      	mov	r0, r2
 80006fc:	4798      	blx	r3

	return 0;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	08005db4 	.word	0x08005db4

0800070c <MCP23S17_Init>:



void MCP23S17_Init(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    // Configurer tous les pins comme sortie (IODIRA)
    HAL_GPIO_WritePin(Vu_Reset_GPIO_Port, Vu_Reset_Pin, GPIO_PIN_SET); // Réinitialiser le MCP23S17
 8000710:	2201      	movs	r2, #1
 8000712:	2101      	movs	r1, #1
 8000714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000718:	f000 ffb4 	bl	8001684 <HAL_GPIO_WritePin>
    HAL_Delay(1); // Attendre un peu après la réinitialisation
 800071c:	2001      	movs	r0, #1
 800071e:	f000 fd01 	bl	8001124 <HAL_Delay>
    MCP23S17_Write(0x00, 0x00); // Configurer tous les pins comme sortie
 8000722:	2100      	movs	r1, #0
 8000724:	2000      	movs	r0, #0
 8000726:	f000 f80b 	bl	8000740 <MCP23S17_Write>
    MCP23S17_Write(0x01, 0x00);
 800072a:	2100      	movs	r1, #0
 800072c:	2001      	movs	r0, #1
 800072e:	f000 f807 	bl	8000740 <MCP23S17_Write>
    printf("TestInit SPI\r\n");
 8000732:	4802      	ldr	r0, [pc, #8]	@ (800073c <MCP23S17_Init+0x30>)
 8000734:	f004 fae4 	bl	8004d00 <puts>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08005dd4 	.word	0x08005dd4

08000740 <MCP23S17_Write>:

void MCP23S17_Write(uint8_t reg, uint8_t data) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	460a      	mov	r2, r1
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	4613      	mov	r3, r2
 800074e:	71bb      	strb	r3, [r7, #6]
    uint8_t spiData[3];
    spiData[0] = MCP23S17_WRITE; // Code d'écriture
 8000750:	2340      	movs	r3, #64	@ 0x40
 8000752:	733b      	strb	r3, [r7, #12]
    spiData[1] = reg;                     // Registre
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	737b      	strb	r3, [r7, #13]
    spiData[2] = data;                    // Valeur à écrire
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // Activer CS
 800075c:	2200      	movs	r2, #0
 800075e:	2180      	movs	r1, #128	@ 0x80
 8000760:	4810      	ldr	r0, [pc, #64]	@ (80007a4 <MCP23S17_Write+0x64>)
 8000762:	f000 ff8f 	bl	8001684 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(&hspi3, spiData, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000766:	f107 010c 	add.w	r1, r7, #12
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	2203      	movs	r2, #3
 8000770:	480d      	ldr	r0, [pc, #52]	@ (80007a8 <MCP23S17_Write+0x68>)
 8000772:	f002 fb94 	bl	8002e9e <HAL_SPI_Transmit>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d008      	beq.n	800078e <MCP23S17_Write+0x4e>
        HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); // Désactiver CS
 800077c:	2201      	movs	r2, #1
 800077e:	2180      	movs	r1, #128	@ 0x80
 8000780:	4808      	ldr	r0, [pc, #32]	@ (80007a4 <MCP23S17_Write+0x64>)
 8000782:	f000 ff7f 	bl	8001684 <HAL_GPIO_WritePin>
        printf("Erreur de transmission SPI\r\n");
 8000786:	4809      	ldr	r0, [pc, #36]	@ (80007ac <MCP23S17_Write+0x6c>)
 8000788:	f004 faba 	bl	8004d00 <puts>
 800078c:	e007      	b.n	800079e <MCP23S17_Write+0x5e>
        return 0; // Sortir en cas d'erreur
    }
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); // Désactiver CS
 800078e:	2201      	movs	r2, #1
 8000790:	2180      	movs	r1, #128	@ 0x80
 8000792:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <MCP23S17_Write+0x64>)
 8000794:	f000 ff76 	bl	8001684 <HAL_GPIO_WritePin>
    printf("TestWrite SPI\r\n");
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MCP23S17_Write+0x70>)
 800079a:	f004 fab1 	bl	8004d00 <puts>
}
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	48000400 	.word	0x48000400
 80007a8:	200003e4 	.word	0x200003e4
 80007ac:	08005de4 	.word	0x08005de4
 80007b0:	08005e00 	.word	0x08005e00

080007b4 <chenillard>:
*/




void chenillard(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
    // Supposons que vous avez 8 LEDs (A0 à A7 sur le MCP23S17)
    for (int i = 0; i < 8; i++) {
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	e025      	b.n	800080c <chenillard+0x58>
        // Allumer la LED correspondante (i)
        MCP23S17_Write(0x12, ~(1 << i)); // Éteindre toutes les autres LEDs
 80007c0:	2201      	movs	r2, #1
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	4619      	mov	r1, r3
 80007d0:	2012      	movs	r0, #18
 80007d2:	f7ff ffb5 	bl	8000740 <MCP23S17_Write>
        MCP23S17_Write(0x13, ~(1 << i));
 80007d6:	2201      	movs	r2, #1
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	43db      	mvns	r3, r3
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	4619      	mov	r1, r3
 80007e6:	2013      	movs	r0, #19
 80007e8:	f7ff ffaa 	bl	8000740 <MCP23S17_Write>
        printf("LED %d allumée\r\n", i + 1);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3301      	adds	r3, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	480a      	ldr	r0, [pc, #40]	@ (800081c <chenillard+0x68>)
 80007f4:	f004 fa1c 	bl	8004c30 <iprintf>
        HAL_Delay(100); // Attendre 100 ms
 80007f8:	2064      	movs	r0, #100	@ 0x64
 80007fa:	f000 fc93 	bl	8001124 <HAL_Delay>

        // Éteindre la LED actuelle avant de passer à la suivante
        MCP23S17_Write(0x12, 0xFF); // Éteindre toutes les LEDs
 80007fe:	21ff      	movs	r1, #255	@ 0xff
 8000800:	2012      	movs	r0, #18
 8000802:	f7ff ff9d 	bl	8000740 <MCP23S17_Write>
    for (int i = 0; i < 8; i++) {
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3301      	adds	r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b07      	cmp	r3, #7
 8000810:	ddd6      	ble.n	80007c0 <chenillard+0xc>
    }
}
 8000812:	bf00      	nop
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	08005e24 	.word	0x08005e24

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b5b0      	push	{r4, r5, r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000826:	f000 fc3d 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082a:	f000 f83f 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082e:	f7ff febf 	bl	80005b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000832:	f000 fb81 	bl	8000f38 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000836:	f000 f961 	bl	8000afc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	char msg[] = "USART2 Test OK\r\n";
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <main+0x68>)
 800083c:	1d3c      	adds	r4, r7, #4
 800083e:	461d      	mov	r5, r3
 8000840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000844:	682b      	ldr	r3, [r5, #0]
 8000846:	7023      	strb	r3, [r4, #0]
	//printf("TestStatus SPI: %i\r\n", status);

	h_shell.drv.receive = drv_uart1_receive;
 8000848:	4b10      	ldr	r3, [pc, #64]	@ (800088c <main+0x6c>)
 800084a:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <main+0x70>)
 800084c:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
	h_shell.drv.transmit = drv_uart1_transmit;
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <main+0x6c>)
 8000852:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <main+0x74>)
 8000854:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

	shell_init(&h_shell);
 8000858:	480c      	ldr	r0, [pc, #48]	@ (800088c <main+0x6c>)
 800085a:	f000 f8d1 	bl	8000a00 <shell_init>
	shell_add(&h_shell, 'f', fonction, "Une fonction inutile");
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <main+0x78>)
 8000860:	4a0e      	ldr	r2, [pc, #56]	@ (800089c <main+0x7c>)
 8000862:	2166      	movs	r1, #102	@ 0x66
 8000864:	4809      	ldr	r0, [pc, #36]	@ (800088c <main+0x6c>)
 8000866:	f000 f90d 	bl	8000a84 <shell_add>
	//shell_run(&h_shell);
	printf("Test1Status SPI: %i\r\n", status);
 800086a:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <main+0x80>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	4619      	mov	r1, r3
 8000870:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <main+0x84>)
 8000872:	f004 f9dd 	bl	8004c30 <iprintf>
	spiData[2] = 0x12;
	spiData[3] = 0x01;
	*/
	//xTaskCreate(TAskLed, "Task1", 128, NULL, 1, NULL);

	MCP23S17_Init();
 8000876:	f7ff ff49 	bl	800070c <MCP23S17_Init>

    /* USER CODE BEGIN 3 */


		  //HAL_Delay(1000); // Attendre 1 seconde
          printf("Test1Status:\r\n");
 800087a:	480b      	ldr	r0, [pc, #44]	@ (80008a8 <main+0x88>)
 800087c:	f004 fa40 	bl	8004d00 <puts>

          chenillard(); // Appeler la fonction chenillard
 8000880:	f7ff ff98 	bl	80007b4 <chenillard>
          printf("Test1Status:\r\n");
 8000884:	bf00      	nop
 8000886:	e7f8      	b.n	800087a <main+0x5a>
 8000888:	08005e78 	.word	0x08005e78
 800088c:	20000084 	.word	0x20000084
 8000890:	08000561 	.word	0x08000561
 8000894:	08000589 	.word	0x08000589
 8000898:	08005e38 	.word	0x08005e38
 800089c:	080006cd 	.word	0x080006cd
 80008a0:	200003e0 	.word	0x200003e0
 80008a4:	08005e50 	.word	0x08005e50
 80008a8:	08005e68 	.word	0x08005e68

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b096      	sub	sp, #88	@ 0x58
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	2244      	movs	r2, #68	@ 0x44
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f004 fb34 	bl	8004f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008d2:	f000 fefd 	bl	80016d0 <HAL_PWREx_ControlVoltageScaling>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008dc:	f000 f84a 	bl	8000974 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e0:	2302      	movs	r3, #2
 80008e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ea:	2310      	movs	r3, #16
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f2:	2302      	movs	r3, #2
 80008f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008f6:	2301      	movs	r3, #1
 80008f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008fa:	230a      	movs	r3, #10
 80008fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008fe:	2307      	movs	r3, #7
 8000900:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000902:	2302      	movs	r3, #2
 8000904:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000906:	2302      	movs	r3, #2
 8000908:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4618      	mov	r0, r3
 8000910:	f000 ff34 	bl	800177c <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800091a:	f000 f82b 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	230f      	movs	r3, #15
 8000920:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2303      	movs	r3, #3
 8000924:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	2104      	movs	r1, #4
 8000936:	4618      	mov	r0, r3
 8000938:	f001 fafc 	bl	8001f34 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000942:	f000 f817 	bl	8000974 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3758      	adds	r7, #88	@ 0x58
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000962:	f000 fbbf 	bl	80010e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40001000 	.word	0x40001000

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <Error_Handler+0x8>

08000980 <sh_help>:

#include "shell.h"

#include <stdio.h>

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b089      	sub	sp, #36	@ 0x24
 8000984:	af02      	add	r7, sp, #8
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	e029      	b.n	80009e6 <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000998:	68f9      	ldr	r1, [r7, #12]
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	4613      	mov	r3, r2
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4413      	add	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	440b      	add	r3, r1
 80009a6:	3304      	adds	r3, #4
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461c      	mov	r4, r3
 80009ac:	68f9      	ldr	r1, [r7, #12]
 80009ae:	697a      	ldr	r2, [r7, #20]
 80009b0:	4613      	mov	r3, r2
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4413      	add	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	440b      	add	r3, r1
 80009ba:	330c      	adds	r3, #12
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	4623      	mov	r3, r4
 80009c2:	4a0e      	ldr	r2, [pc, #56]	@ (80009fc <sh_help+0x7c>)
 80009c4:	2128      	movs	r1, #40	@ 0x28
 80009c6:	f004 f9a3 	bl	8004d10 <sniprintf>
 80009ca:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80009d8:	6939      	ldr	r1, [r7, #16]
 80009da:	b289      	uxth	r1, r1
 80009dc:	4610      	mov	r0, r2
 80009de:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3301      	adds	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbd0      	blt.n	8000992 <sh_help+0x12>
	}

	return 0;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	371c      	adds	r7, #28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08005e8c 	.word	0x08005e8c

08000a00 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	int size = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000a18:	4a16      	ldr	r2, [pc, #88]	@ (8000a74 <shell_init+0x74>)
 8000a1a:	2128      	movs	r1, #40	@ 0x28
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f004 f977 	bl	8004d10 <sniprintf>
 8000a22:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000a30:	68f9      	ldr	r1, [r7, #12]
 8000a32:	b289      	uxth	r1, r1
 8000a34:	4610      	mov	r0, r2
 8000a36:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a78 <shell_init+0x78>)
 8000a40:	2128      	movs	r1, #40	@ 0x28
 8000a42:	4618      	mov	r0, r3
 8000a44:	f004 f964 	bl	8004d10 <sniprintf>
 8000a48:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000a56:	68f9      	ldr	r1, [r7, #12]
 8000a58:	b289      	uxth	r1, r1
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 8000a5e:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <shell_init+0x7c>)
 8000a60:	4a07      	ldr	r2, [pc, #28]	@ (8000a80 <shell_init+0x80>)
 8000a62:	2168      	movs	r1, #104	@ 0x68
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 f80d 	bl	8000a84 <shell_add>
}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	08005e98 	.word	0x08005e98
 8000a78:	08005ec0 	.word	0x08005ec0
 8000a7c:	08005ee4 	.word	0x08005ee4
 8000a80:	08000981 	.word	0x08000981

08000a84 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	460b      	mov	r3, r1
 8000a92:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a9a:	dc27      	bgt.n	8000aec <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	68f9      	ldr	r1, [r7, #12]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	440b      	add	r3, r1
 8000aac:	3304      	adds	r3, #4
 8000aae:	7afa      	ldrb	r2, [r7, #11]
 8000ab0:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	68f9      	ldr	r1, [r7, #12]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	3308      	adds	r3, #8
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	68f9      	ldr	r1, [r7, #12]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	330c      	adds	r3, #12
 8000ada:	683a      	ldr	r2, [r7, #0]
 8000adc:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	601a      	str	r2, [r3, #0]
		return 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e001      	b.n	8000af0 <shell_add+0x6c>
	}

	return -1;
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b02:	4a1c      	ldr	r2, [pc, #112]	@ (8000b74 <MX_SPI3_Init+0x78>)
 8000b04:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b0c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b14:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b16:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b1a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b2e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b32:	2218      	movs	r2, #24
 8000b34:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b4a:	2207      	movs	r2, #7
 8000b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b56:	2208      	movs	r2, #8
 8000b58:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_SPI3_Init+0x74>)
 8000b5c:	f002 f8fc 	bl	8002d58 <HAL_SPI_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b66:	f7ff ff05 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200003e4 	.word	0x200003e4
 8000b74:	40003c00 	.word	0x40003c00

08000b78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a25      	ldr	r2, [pc, #148]	@ (8000c2c <HAL_SPI_MspInit+0xb4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d144      	bne.n	8000c24 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b9a:	4b25      	ldr	r3, [pc, #148]	@ (8000c30 <HAL_SPI_MspInit+0xb8>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9e:	4a24      	ldr	r2, [pc, #144]	@ (8000c30 <HAL_SPI_MspInit+0xb8>)
 8000ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba6:	4b22      	ldr	r3, [pc, #136]	@ (8000c30 <HAL_SPI_MspInit+0xb8>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000baa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <HAL_SPI_MspInit+0xb8>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c30 <HAL_SPI_MspInit+0xb8>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <HAL_SPI_MspInit+0xb8>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <HAL_SPI_MspInit+0xb8>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bce:	4a18      	ldr	r2, [pc, #96]	@ (8000c30 <HAL_SPI_MspInit+0xb8>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd6:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <HAL_SPI_MspInit+0xb8>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000be2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <HAL_SPI_MspInit+0xbc>)
 8000c00:	f000 fb96 	bl	8001330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c04:	2320      	movs	r3, #32
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c14:	2306      	movs	r3, #6
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <HAL_SPI_MspInit+0xc0>)
 8000c20:	f000 fb86 	bl	8001330 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	@ 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40003c00 	.word	0x40003c00
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48000800 	.word	0x48000800
 8000c38:	48000400 	.word	0x48000400

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c46:	4a10      	ldr	r2, [pc, #64]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c66:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	210f      	movs	r1, #15
 8000c76:	f06f 0001 	mvn.w	r0, #1
 8000c7a:	f000 fb2f 	bl	80012dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	@ 0x38
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c9a:	4b34      	ldr	r3, [pc, #208]	@ (8000d6c <HAL_InitTick+0xe0>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9e:	4a33      	ldr	r2, [pc, #204]	@ (8000d6c <HAL_InitTick+0xe0>)
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ca6:	4b31      	ldr	r3, [pc, #196]	@ (8000d6c <HAL_InitTick+0xe0>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb2:	f107 0210 	add.w	r2, r7, #16
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fafd 	bl	80022bc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d103      	bne.n	8000cd4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ccc:	f001 faca 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8000cd0:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cd2:	e004      	b.n	8000cde <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cd4:	f001 fac6 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ce0:	4a23      	ldr	r2, [pc, #140]	@ (8000d70 <HAL_InitTick+0xe4>)
 8000ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce6:	0c9b      	lsrs	r3, r3, #18
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cec:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <HAL_InitTick+0xe8>)
 8000cee:	4a22      	ldr	r2, [pc, #136]	@ (8000d78 <HAL_InitTick+0xec>)
 8000cf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cf2:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <HAL_InitTick+0xe8>)
 8000cf4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cf8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8000d74 <HAL_InitTick+0xe8>)
 8000cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cfe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d00:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <HAL_InitTick+0xe8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d06:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <HAL_InitTick+0xe8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_InitTick+0xe8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d12:	4818      	ldr	r0, [pc, #96]	@ (8000d74 <HAL_InitTick+0xe8>)
 8000d14:	f002 fb9e 	bl	8003454 <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d1e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d11b      	bne.n	8000d5e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d26:	4813      	ldr	r0, [pc, #76]	@ (8000d74 <HAL_InitTick+0xe8>)
 8000d28:	f002 fbf6 	bl	8003518 <HAL_TIM_Base_Start_IT>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d32:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d111      	bne.n	8000d5e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d3a:	2036      	movs	r0, #54	@ 0x36
 8000d3c:	f000 faea 	bl	8001314 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b0f      	cmp	r3, #15
 8000d44:	d808      	bhi.n	8000d58 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d46:	2200      	movs	r2, #0
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	2036      	movs	r0, #54	@ 0x36
 8000d4c:	f000 fac6 	bl	80012dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d50:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <HAL_InitTick+0xf0>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e002      	b.n	8000d5e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3738      	adds	r7, #56	@ 0x38
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	431bde83 	.word	0x431bde83
 8000d74:	20000448 	.word	0x20000448
 8000d78:	40001000 	.word	0x40001000
 8000d7c:	20000004 	.word	0x20000004

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <NMI_Handler+0x4>

08000d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <MemManage_Handler+0x4>

08000d98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <TIM6_DAC_IRQHandler+0x10>)
 8000dbe:	f002 fc1b 	bl	80035f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000448 	.word	0x20000448

08000dcc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	e00a      	b.n	8000df4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dde:	f3af 8000 	nop.w
 8000de2:	4601      	mov	r1, r0
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	b2ca      	uxtb	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf0      	blt.n	8000dde <_read+0x12>
  }

  return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e009      	b.n	8000e2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	60ba      	str	r2, [r7, #8]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fc41 	bl	80006a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbf1      	blt.n	8000e18 <_write+0x12>
  }
  return len;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_close>:

int _close(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e66:	605a      	str	r2, [r3, #4]
  return 0;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <_isatty>:

int _isatty(int file)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb0:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <_sbrk+0x5c>)
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <_sbrk+0x60>)
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <_sbrk+0x64>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	@ (8000f10 <_sbrk+0x68>)
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eca:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d207      	bcs.n	8000ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed8:	f004 f874 	bl	8004fc4 <__errno>
 8000edc:	4603      	mov	r3, r0
 8000ede:	220c      	movs	r2, #12
 8000ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	e009      	b.n	8000efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eee:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a05      	ldr	r2, [pc, #20]	@ (8000f0c <_sbrk+0x64>)
 8000ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20018000 	.word	0x20018000
 8000f08:	00000400 	.word	0x00000400
 8000f0c:	20000494 	.word	0x20000494
 8000f10:	20000728 	.word	0x20000728

08000f14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	@ (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f3e:	4a15      	ldr	r2, [pc, #84]	@ (8000f94 <MX_USART2_UART_Init+0x5c>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f42:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f7c:	f002 fd30 	bl	80039e0 <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f86:	f7ff fcf5 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000498 	.word	0x20000498
 8000f94:	40004400 	.word	0x40004400

08000f98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0ac      	sub	sp, #176	@ 0xb0
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2288      	movs	r2, #136	@ 0x88
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f003 ffb5 	bl	8004f28 <memset>
  if(uartHandle->Instance==USART2)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a21      	ldr	r2, [pc, #132]	@ (8001048 <HAL_UART_MspInit+0xb0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d13b      	bne.n	8001040 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fa03 	bl	80023e0 <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fe0:	f7ff fcc8 	bl	8000974 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe4:	4b19      	ldr	r3, [pc, #100]	@ (800104c <HAL_UART_MspInit+0xb4>)
 8000fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe8:	4a18      	ldr	r2, [pc, #96]	@ (800104c <HAL_UART_MspInit+0xb4>)
 8000fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fee:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ff0:	4b16      	ldr	r3, [pc, #88]	@ (800104c <HAL_UART_MspInit+0xb4>)
 8000ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <HAL_UART_MspInit+0xb4>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001000:	4a12      	ldr	r2, [pc, #72]	@ (800104c <HAL_UART_MspInit+0xb4>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001008:	4b10      	ldr	r3, [pc, #64]	@ (800104c <HAL_UART_MspInit+0xb4>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001014:	230c      	movs	r3, #12
 8001016:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800102c:	2307      	movs	r3, #7
 800102e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103c:	f000 f978 	bl	8001330 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001040:	bf00      	nop
 8001042:	37b0      	adds	r7, #176	@ 0xb0
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40004400 	.word	0x40004400
 800104c:	40021000 	.word	0x40021000

08001050 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001050:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001088 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001054:	f7ff ff5e 	bl	8000f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001058:	480c      	ldr	r0, [pc, #48]	@ (800108c <LoopForever+0x6>)
  ldr r1, =_edata
 800105a:	490d      	ldr	r1, [pc, #52]	@ (8001090 <LoopForever+0xa>)
  ldr r2, =_sidata
 800105c:	4a0d      	ldr	r2, [pc, #52]	@ (8001094 <LoopForever+0xe>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001070:	4c0a      	ldr	r4, [pc, #40]	@ (800109c <LoopForever+0x16>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107e:	f003 ffa7 	bl	8004fd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001082:	f7ff fbcd 	bl	8000820 <main>

08001086 <LoopForever>:

LoopForever:
    b LoopForever
 8001086:	e7fe      	b.n	8001086 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001088:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001094:	08005f9c 	.word	0x08005f9c
  ldr r2, =_sbss
 8001098:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800109c:	20000724 	.word	0x20000724

080010a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC1_2_IRQHandler>
	...

080010a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <HAL_Init+0x3c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a0b      	ldr	r2, [pc, #44]	@ (80010e0 <HAL_Init+0x3c>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f000 f903 	bl	80012c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c0:	200f      	movs	r0, #15
 80010c2:	f7ff fde3 	bl	8000c8c <HAL_InitTick>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	e001      	b.n	80010d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010d2:	f7ff fdb3 	bl	8000c3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40022000 	.word	0x40022000

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008
 8001108:	20000520 	.word	0x20000520

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000520 	.word	0x20000520

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffde 	bl	800110c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4907      	ldr	r1, [pc, #28]	@ (8001208 <__NVIC_EnableIRQ+0x38>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	@ (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	@ (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	@ 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	@ 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ff4c 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ee:	f7ff ff61 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 80012f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	6978      	ldr	r0, [r7, #20]
 80012fa:	f7ff ffb1 	bl	8001260 <NVIC_EncodePriority>
 80012fe:	4602      	mov	r2, r0
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff80 	bl	800120c <__NVIC_SetPriority>
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff54 	bl	80011d0 <__NVIC_EnableIRQ>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133e:	e17f      	b.n	8001640 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2101      	movs	r1, #1
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8171 	beq.w	800163a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d005      	beq.n	8001370 <HAL_GPIO_Init+0x40>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d130      	bne.n	80013d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013a6:	2201      	movs	r2, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f003 0201 	and.w	r2, r3, #1
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d118      	bne.n	8001410 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013e4:	2201      	movs	r2, #1
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	f003 0201 	and.w	r2, r3, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b03      	cmp	r3, #3
 800141a:	d017      	beq.n	800144c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d123      	bne.n	80014a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	6939      	ldr	r1, [r7, #16]
 800149c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80ac 	beq.w	800163a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001660 <HAL_GPIO_Init+0x330>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001660 <HAL_GPIO_Init+0x330>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001660 <HAL_GPIO_Init+0x330>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014fa:	4a5a      	ldr	r2, [pc, #360]	@ (8001664 <HAL_GPIO_Init+0x334>)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001524:	d025      	beq.n	8001572 <HAL_GPIO_Init+0x242>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4f      	ldr	r2, [pc, #316]	@ (8001668 <HAL_GPIO_Init+0x338>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d01f      	beq.n	800156e <HAL_GPIO_Init+0x23e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4e      	ldr	r2, [pc, #312]	@ (800166c <HAL_GPIO_Init+0x33c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d019      	beq.n	800156a <HAL_GPIO_Init+0x23a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4d      	ldr	r2, [pc, #308]	@ (8001670 <HAL_GPIO_Init+0x340>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x236>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4c      	ldr	r2, [pc, #304]	@ (8001674 <HAL_GPIO_Init+0x344>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x232>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4b      	ldr	r2, [pc, #300]	@ (8001678 <HAL_GPIO_Init+0x348>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x22e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4a      	ldr	r2, [pc, #296]	@ (800167c <HAL_GPIO_Init+0x34c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x22a>
 8001556:	2306      	movs	r3, #6
 8001558:	e00c      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800155a:	2307      	movs	r3, #7
 800155c:	e00a      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800155e:	2305      	movs	r3, #5
 8001560:	e008      	b.n	8001574 <HAL_GPIO_Init+0x244>
 8001562:	2304      	movs	r3, #4
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x244>
 8001566:	2303      	movs	r3, #3
 8001568:	e004      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800156a:	2302      	movs	r3, #2
 800156c:	e002      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x244>
 8001572:	2300      	movs	r3, #0
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	f002 0203 	and.w	r2, r2, #3
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	4093      	lsls	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001584:	4937      	ldr	r1, [pc, #220]	@ (8001664 <HAL_GPIO_Init+0x334>)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001592:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <HAL_GPIO_Init+0x350>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b6:	4a32      	ldr	r2, [pc, #200]	@ (8001680 <HAL_GPIO_Init+0x350>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015bc:	4b30      	ldr	r3, [pc, #192]	@ (8001680 <HAL_GPIO_Init+0x350>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e0:	4a27      	ldr	r2, [pc, #156]	@ (8001680 <HAL_GPIO_Init+0x350>)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015e6:	4b26      	ldr	r3, [pc, #152]	@ (8001680 <HAL_GPIO_Init+0x350>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800160a:	4a1d      	ldr	r2, [pc, #116]	@ (8001680 <HAL_GPIO_Init+0x350>)
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <HAL_GPIO_Init+0x350>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001634:	4a12      	ldr	r2, [pc, #72]	@ (8001680 <HAL_GPIO_Init+0x350>)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa22 f303 	lsr.w	r3, r2, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	f47f ae78 	bne.w	8001340 <HAL_GPIO_Init+0x10>
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000
 8001668:	48000400 	.word	0x48000400
 800166c:	48000800 	.word	0x48000800
 8001670:	48000c00 	.word	0x48000c00
 8001674:	48001000 	.word	0x48001000
 8001678:	48001400 	.word	0x48001400
 800167c:	48001800 	.word	0x48001800
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
 8001690:	4613      	mov	r3, r2
 8001692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001694:	787b      	ldrb	r3, [r7, #1]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016b8:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <HAL_PWREx_GetVoltageRange+0x18>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40007000 	.word	0x40007000

080016d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016de:	d130      	bne.n	8001742 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e0:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016ec:	d038      	beq.n	8001760 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ee:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2232      	movs	r2, #50	@ 0x32
 8001704:	fb02 f303 	mul.w	r3, r2, r3
 8001708:	4a1b      	ldr	r2, [pc, #108]	@ (8001778 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	0c9b      	lsrs	r3, r3, #18
 8001710:	3301      	adds	r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001714:	e002      	b.n	800171c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3b01      	subs	r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800171c:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001728:	d102      	bne.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x60>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f2      	bne.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001730:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800173c:	d110      	bne.n	8001760 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e00f      	b.n	8001762 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001742:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800174a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800174e:	d007      	beq.n	8001760 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001758:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800175e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40007000 	.word	0x40007000
 8001774:	20000000 	.word	0x20000000
 8001778:	431bde83 	.word	0x431bde83

0800177c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e3ca      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178e:	4b97      	ldr	r3, [pc, #604]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001798:	4b94      	ldr	r3, [pc, #592]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 80e4 	beq.w	8001978 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d007      	beq.n	80017c6 <HAL_RCC_OscConfig+0x4a>
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	2b0c      	cmp	r3, #12
 80017ba:	f040 808b 	bne.w	80018d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	f040 8087 	bne.w	80018d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017c6:	4b89      	ldr	r3, [pc, #548]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <HAL_RCC_OscConfig+0x62>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e3a2      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1a      	ldr	r2, [r3, #32]
 80017e2:	4b82      	ldr	r3, [pc, #520]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d004      	beq.n	80017f8 <HAL_RCC_OscConfig+0x7c>
 80017ee:	4b7f      	ldr	r3, [pc, #508]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017f6:	e005      	b.n	8001804 <HAL_RCC_OscConfig+0x88>
 80017f8:	4b7c      	ldr	r3, [pc, #496]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 80017fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001804:	4293      	cmp	r3, r2
 8001806:	d223      	bcs.n	8001850 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fd87 	bl	8002320 <RCC_SetFlashLatencyFromMSIRange>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e383      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800181c:	4b73      	ldr	r3, [pc, #460]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a72      	ldr	r2, [pc, #456]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b70      	ldr	r3, [pc, #448]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	496d      	ldr	r1, [pc, #436]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183a:	4b6c      	ldr	r3, [pc, #432]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	4968      	ldr	r1, [pc, #416]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]
 800184e:	e025      	b.n	800189c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001850:	4b66      	ldr	r3, [pc, #408]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a65      	ldr	r2, [pc, #404]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b63      	ldr	r3, [pc, #396]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4960      	ldr	r1, [pc, #384]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800186e:	4b5f      	ldr	r3, [pc, #380]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	495b      	ldr	r1, [pc, #364]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fd47 	bl	8002320 <RCC_SetFlashLatencyFromMSIRange>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e343      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800189c:	f000 fc4a 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b52      	ldr	r3, [pc, #328]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	4950      	ldr	r1, [pc, #320]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018ae:	5ccb      	ldrb	r3, [r1, r3]
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
 80018b8:	4a4e      	ldr	r2, [pc, #312]	@ (80019f4 <HAL_RCC_OscConfig+0x278>)
 80018ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018bc:	4b4e      	ldr	r3, [pc, #312]	@ (80019f8 <HAL_RCC_OscConfig+0x27c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff f9e3 	bl	8000c8c <HAL_InitTick>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d052      	beq.n	8001976 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	e327      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d032      	beq.n	8001942 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018dc:	4b43      	ldr	r3, [pc, #268]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a42      	ldr	r2, [pc, #264]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fc10 	bl	800110c <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f0:	f7ff fc0c 	bl	800110c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e310      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001902:	4b3a      	ldr	r3, [pc, #232]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800190e:	4b37      	ldr	r3, [pc, #220]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a36      	ldr	r2, [pc, #216]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 8001914:	f043 0308 	orr.w	r3, r3, #8
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b34      	ldr	r3, [pc, #208]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4931      	ldr	r1, [pc, #196]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800192c:	4b2f      	ldr	r3, [pc, #188]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	492c      	ldr	r1, [pc, #176]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
 8001940:	e01a      	b.n	8001978 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001942:	4b2a      	ldr	r3, [pc, #168]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a29      	ldr	r2, [pc, #164]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800194e:	f7ff fbdd 	bl	800110c <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001956:	f7ff fbd9 	bl	800110c <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e2dd      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001968:	4b20      	ldr	r3, [pc, #128]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x1da>
 8001974:	e000      	b.n	8001978 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001976:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d074      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b08      	cmp	r3, #8
 8001988:	d005      	beq.n	8001996 <HAL_RCC_OscConfig+0x21a>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b0c      	cmp	r3, #12
 800198e:	d10e      	bne.n	80019ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d10b      	bne.n	80019ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d064      	beq.n	8001a6c <HAL_RCC_OscConfig+0x2f0>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d160      	bne.n	8001a6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e2ba      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x24a>
 80019b8:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0b      	ldr	r2, [pc, #44]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 80019be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e026      	b.n	8001a14 <HAL_RCC_OscConfig+0x298>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019ce:	d115      	bne.n	80019fc <HAL_RCC_OscConfig+0x280>
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 80019d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b03      	ldr	r3, [pc, #12]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a02      	ldr	r2, [pc, #8]	@ (80019ec <HAL_RCC_OscConfig+0x270>)
 80019e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	e014      	b.n	8001a14 <HAL_RCC_OscConfig+0x298>
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	08005f10 	.word	0x08005f10
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000004 	.word	0x20000004
 80019fc:	4ba0      	ldr	r3, [pc, #640]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a9f      	ldr	r2, [pc, #636]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b9d      	ldr	r3, [pc, #628]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a9c      	ldr	r2, [pc, #624]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d013      	beq.n	8001a44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fb76 	bl	800110c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff fb72 	bl	800110c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	@ 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e276      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a36:	4b92      	ldr	r3, [pc, #584]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x2a8>
 8001a42:	e014      	b.n	8001a6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff fb62 	bl	800110c <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fb5e 	bl	800110c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	@ 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e262      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a5e:	4b88      	ldr	r3, [pc, #544]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x2d0>
 8001a6a:	e000      	b.n	8001a6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d060      	beq.n	8001b3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_OscConfig+0x310>
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d119      	bne.n	8001aba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d116      	bne.n	8001aba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a8c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x328>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e23f      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	4b76      	ldr	r3, [pc, #472]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	061b      	lsls	r3, r3, #24
 8001ab2:	4973      	ldr	r1, [pc, #460]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab8:	e040      	b.n	8001b3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d023      	beq.n	8001b0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac2:	4b6f      	ldr	r3, [pc, #444]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a6e      	ldr	r2, [pc, #440]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7ff fb1d 	bl	800110c <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad6:	f7ff fb19 	bl	800110c <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e21d      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae8:	4b65      	ldr	r3, [pc, #404]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af4:	4b62      	ldr	r3, [pc, #392]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	061b      	lsls	r3, r3, #24
 8001b02:	495f      	ldr	r1, [pc, #380]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
 8001b08:	e018      	b.n	8001b3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a5c      	ldr	r2, [pc, #368]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff faf9 	bl	800110c <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1e:	f7ff faf5 	bl	800110c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e1f9      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b30:	4b53      	ldr	r3, [pc, #332]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d03c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01c      	beq.n	8001b8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b50:	4b4b      	ldr	r3, [pc, #300]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b56:	4a4a      	ldr	r2, [pc, #296]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff fad4 	bl	800110c <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b68:	f7ff fad0 	bl	800110c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e1d4      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b7a:	4b41      	ldr	r3, [pc, #260]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0ef      	beq.n	8001b68 <HAL_RCC_OscConfig+0x3ec>
 8001b88:	e01b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b90:	4a3b      	ldr	r2, [pc, #236]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fab7 	bl	800110c <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba2:	f7ff fab3 	bl	800110c <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1b7      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb4:	4b32      	ldr	r3, [pc, #200]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1ef      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80a6 	beq.w	8001d1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10d      	bne.n	8001bfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be4:	4a26      	ldr	r2, [pc, #152]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bec:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfc:	4b21      	ldr	r3, [pc, #132]	@ (8001c84 <HAL_RCC_OscConfig+0x508>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d118      	bne.n	8001c3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c08:	4b1e      	ldr	r3, [pc, #120]	@ (8001c84 <HAL_RCC_OscConfig+0x508>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c84 <HAL_RCC_OscConfig+0x508>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c14:	f7ff fa7a 	bl	800110c <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1c:	f7ff fa76 	bl	800110c <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e17a      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_RCC_OscConfig+0x508>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d108      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4d8>
 8001c42:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c48:	4a0d      	ldr	r2, [pc, #52]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c52:	e029      	b.n	8001ca8 <HAL_RCC_OscConfig+0x52c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d115      	bne.n	8001c88 <HAL_RCC_OscConfig+0x50c>
 8001c5c:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c62:	4a07      	ldr	r2, [pc, #28]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c72:	4a03      	ldr	r2, [pc, #12]	@ (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c7c:	e014      	b.n	8001ca8 <HAL_RCC_OscConfig+0x52c>
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40007000 	.word	0x40007000
 8001c88:	4b9c      	ldr	r3, [pc, #624]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8e:	4a9b      	ldr	r2, [pc, #620]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c98:	4b98      	ldr	r3, [pc, #608]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c9e:	4a97      	ldr	r2, [pc, #604]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001ca0:	f023 0304 	bic.w	r3, r3, #4
 8001ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d016      	beq.n	8001cde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb0:	f7ff fa2c 	bl	800110c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fa28 	bl	800110c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e12a      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cce:	4b8b      	ldr	r3, [pc, #556]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ed      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x53c>
 8001cdc:	e015      	b.n	8001d0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7ff fa15 	bl	800110c <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7ff fa11 	bl	800110c <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e113      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cfc:	4b7f      	ldr	r3, [pc, #508]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1ed      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d0a:	7ffb      	ldrb	r3, [r7, #31]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d105      	bne.n	8001d1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d10:	4b7a      	ldr	r3, [pc, #488]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d14:	4a79      	ldr	r2, [pc, #484]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80fe 	beq.w	8001f22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	f040 80d0 	bne.w	8001ed0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d30:	4b72      	ldr	r3, [pc, #456]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 0203 	and.w	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d130      	bne.n	8001da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d127      	bne.n	8001da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d11f      	bne.n	8001da6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d70:	2a07      	cmp	r2, #7
 8001d72:	bf14      	ite	ne
 8001d74:	2201      	movne	r2, #1
 8001d76:	2200      	moveq	r2, #0
 8001d78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d113      	bne.n	8001da6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d88:	085b      	lsrs	r3, r3, #1
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d109      	bne.n	8001da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	085b      	lsrs	r3, r3, #1
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d06e      	beq.n	8001e84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	2b0c      	cmp	r3, #12
 8001daa:	d069      	beq.n	8001e80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dac:	4b53      	ldr	r3, [pc, #332]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d105      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001db8:	4b50      	ldr	r3, [pc, #320]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0ad      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dc8:	4b4c      	ldr	r3, [pc, #304]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001dce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dd2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dd4:	f7ff f99a 	bl	800110c <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7ff f996 	bl	800110c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e09a      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dee:	4b43      	ldr	r3, [pc, #268]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dfa:	4b40      	ldr	r3, [pc, #256]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	4b40      	ldr	r3, [pc, #256]	@ (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e0a:	3a01      	subs	r2, #1
 8001e0c:	0112      	lsls	r2, r2, #4
 8001e0e:	4311      	orrs	r1, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e14:	0212      	lsls	r2, r2, #8
 8001e16:	4311      	orrs	r1, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e1c:	0852      	lsrs	r2, r2, #1
 8001e1e:	3a01      	subs	r2, #1
 8001e20:	0552      	lsls	r2, r2, #21
 8001e22:	4311      	orrs	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e28:	0852      	lsrs	r2, r2, #1
 8001e2a:	3a01      	subs	r2, #1
 8001e2c:	0652      	lsls	r2, r2, #25
 8001e2e:	4311      	orrs	r1, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e34:	0912      	lsrs	r2, r2, #4
 8001e36:	0452      	lsls	r2, r2, #17
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	4930      	ldr	r1, [pc, #192]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e40:	4b2e      	ldr	r3, [pc, #184]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2d      	ldr	r2, [pc, #180]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4a2a      	ldr	r2, [pc, #168]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e58:	f7ff f958 	bl	800110c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7ff f954 	bl	800110c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e058      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	4b22      	ldr	r3, [pc, #136]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e7e:	e050      	b.n	8001f22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e04f      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e84:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d148      	bne.n	8001f22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e90:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a19      	ldr	r2, [pc, #100]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001e96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e9c:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4a16      	ldr	r2, [pc, #88]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001ea2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ea6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ea8:	f7ff f930 	bl	800110c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7ff f92c 	bl	800110c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e030      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x734>
 8001ece:	e028      	b.n	8001f22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d023      	beq.n	8001f1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a08      	ldr	r2, [pc, #32]	@ (8001efc <HAL_RCC_OscConfig+0x780>)
 8001edc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7ff f913 	bl	800110c <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee8:	e00c      	b.n	8001f04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eea:	f7ff f90f 	bl	800110c <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d905      	bls.n	8001f04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e013      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
 8001efc:	40021000 	.word	0x40021000
 8001f00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f04:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <HAL_RCC_OscConfig+0x7b0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1ec      	bne.n	8001eea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_RCC_OscConfig+0x7b0>)
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	4905      	ldr	r1, [pc, #20]	@ (8001f2c <HAL_RCC_OscConfig+0x7b0>)
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_RCC_OscConfig+0x7b4>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60cb      	str	r3, [r1, #12]
 8001f1c:	e001      	b.n	8001f22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	feeefffc 	.word	0xfeeefffc

08001f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0e7      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f48:	4b75      	ldr	r3, [pc, #468]	@ (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d910      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b72      	ldr	r3, [pc, #456]	@ (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 0207 	bic.w	r2, r3, #7
 8001f5e:	4970      	ldr	r1, [pc, #448]	@ (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b6e      	ldr	r3, [pc, #440]	@ (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0cf      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d010      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	4b66      	ldr	r3, [pc, #408]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d908      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f94:	4b63      	ldr	r3, [pc, #396]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4960      	ldr	r1, [pc, #384]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d04c      	beq.n	800204c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d107      	bne.n	8001fca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fba:	4b5a      	ldr	r3, [pc, #360]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d121      	bne.n	800200a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e0a6      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d107      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd2:	4b54      	ldr	r3, [pc, #336]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d115      	bne.n	800200a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e09a      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fea:	4b4e      	ldr	r3, [pc, #312]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e08e      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e086      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800200a:	4b46      	ldr	r3, [pc, #280]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 0203 	bic.w	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4943      	ldr	r1, [pc, #268]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800201c:	f7ff f876 	bl	800110c <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	e00a      	b.n	800203a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002024:	f7ff f872 	bl	800110c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e06e      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	4b3a      	ldr	r3, [pc, #232]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 020c 	and.w	r2, r3, #12
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d1eb      	bne.n	8002024 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d010      	beq.n	800207a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	4b31      	ldr	r3, [pc, #196]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002064:	429a      	cmp	r2, r3
 8002066:	d208      	bcs.n	800207a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b2e      	ldr	r3, [pc, #184]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	492b      	ldr	r1, [pc, #172]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800207a:	4b29      	ldr	r3, [pc, #164]	@ (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d210      	bcs.n	80020aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002088:	4b25      	ldr	r3, [pc, #148]	@ (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 0207 	bic.w	r2, r3, #7
 8002090:	4923      	ldr	r1, [pc, #140]	@ (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002098:	4b21      	ldr	r3, [pc, #132]	@ (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e036      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	4918      	ldr	r1, [pc, #96]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d4:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4910      	ldr	r1, [pc, #64]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020e8:	f000 f824 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	490b      	ldr	r1, [pc, #44]	@ (8002128 <HAL_RCC_ClockConfig+0x1f4>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	4a09      	ldr	r2, [pc, #36]	@ (800212c <HAL_RCC_ClockConfig+0x1f8>)
 8002106:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002108:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <HAL_RCC_ClockConfig+0x1fc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fdbd 	bl	8000c8c <HAL_InitTick>
 8002112:	4603      	mov	r3, r0
 8002114:	72fb      	strb	r3, [r7, #11]

  return status;
 8002116:	7afb      	ldrb	r3, [r7, #11]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40022000 	.word	0x40022000
 8002124:	40021000 	.word	0x40021000
 8002128:	08005f10 	.word	0x08005f10
 800212c:	20000000 	.word	0x20000000
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	@ 0x24
 8002138:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002142:	4b3e      	ldr	r3, [pc, #248]	@ (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800214c:	4b3b      	ldr	r3, [pc, #236]	@ (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x34>
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d121      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d11e      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002168:	4b34      	ldr	r3, [pc, #208]	@ (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002174:	4b31      	ldr	r3, [pc, #196]	@ (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 8002176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	e005      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002184:	4b2d      	ldr	r3, [pc, #180]	@ (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002190:	4a2b      	ldr	r2, [pc, #172]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002198:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10d      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d102      	bne.n	80021b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021ac:	4b25      	ldr	r3, [pc, #148]	@ (8002244 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ae:	61bb      	str	r3, [r7, #24]
 80021b0:	e004      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021b8:	4b23      	ldr	r3, [pc, #140]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	d134      	bne.n	800222c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021c2:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d003      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0xa6>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d003      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0xac>
 80021d8:	e005      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021da:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <HAL_RCC_GetSysClockFreq+0x110>)
 80021dc:	617b      	str	r3, [r7, #20]
      break;
 80021de:	e005      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021e0:	4b19      	ldr	r3, [pc, #100]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x114>)
 80021e2:	617b      	str	r3, [r7, #20]
      break;
 80021e4:	e002      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	617b      	str	r3, [r7, #20]
      break;
 80021ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ec:	4b13      	ldr	r3, [pc, #76]	@ (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	3301      	adds	r3, #1
 80021f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	fb03 f202 	mul.w	r2, r3, r2
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002212:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	0e5b      	lsrs	r3, r3, #25
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	3301      	adds	r3, #1
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800222c:	69bb      	ldr	r3, [r7, #24]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3724      	adds	r7, #36	@ 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	08005f28 	.word	0x08005f28
 8002244:	00f42400 	.word	0x00f42400
 8002248:	007a1200 	.word	0x007a1200

0800224c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002250:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <HAL_RCC_GetHCLKFreq+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000000 	.word	0x20000000

08002264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002268:	f7ff fff0 	bl	800224c <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4904      	ldr	r1, [pc, #16]	@ (800228c <HAL_RCC_GetPCLK1Freq+0x28>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	08005f20 	.word	0x08005f20

08002290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002294:	f7ff ffda 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	0adb      	lsrs	r3, r3, #11
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	4904      	ldr	r1, [pc, #16]	@ (80022b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	08005f20 	.word	0x08005f20

080022bc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	220f      	movs	r2, #15
 80022ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80022cc:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <HAL_RCC_GetClockConfig+0x5c>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0203 	and.w	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80022d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <HAL_RCC_GetClockConfig+0x5c>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80022e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002318 <HAL_RCC_GetClockConfig+0x5c>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80022f0:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <HAL_RCC_GetClockConfig+0x5c>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	08db      	lsrs	r3, r3, #3
 80022f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80022fe:	4b07      	ldr	r3, [pc, #28]	@ (800231c <HAL_RCC_GetClockConfig+0x60>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0207 	and.w	r2, r3, #7
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	601a      	str	r2, [r3, #0]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	40022000 	.word	0x40022000

08002320 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800232c:	4b2a      	ldr	r3, [pc, #168]	@ (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002338:	f7ff f9bc 	bl	80016b4 <HAL_PWREx_GetVoltageRange>
 800233c:	6178      	str	r0, [r7, #20]
 800233e:	e014      	b.n	800236a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002340:	4b25      	ldr	r3, [pc, #148]	@ (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002344:	4a24      	ldr	r2, [pc, #144]	@ (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800234a:	6593      	str	r3, [r2, #88]	@ 0x58
 800234c:	4b22      	ldr	r3, [pc, #136]	@ (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002358:	f7ff f9ac 	bl	80016b4 <HAL_PWREx_GetVoltageRange>
 800235c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800235e:	4b1e      	ldr	r3, [pc, #120]	@ (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002362:	4a1d      	ldr	r2, [pc, #116]	@ (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002364:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002368:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002370:	d10b      	bne.n	800238a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b80      	cmp	r3, #128	@ 0x80
 8002376:	d919      	bls.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2ba0      	cmp	r3, #160	@ 0xa0
 800237c:	d902      	bls.n	8002384 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800237e:	2302      	movs	r3, #2
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	e013      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002384:	2301      	movs	r3, #1
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	e010      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b80      	cmp	r3, #128	@ 0x80
 800238e:	d902      	bls.n	8002396 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002390:	2303      	movs	r3, #3
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	e00a      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b80      	cmp	r3, #128	@ 0x80
 800239a:	d102      	bne.n	80023a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800239c:	2302      	movs	r3, #2
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	e004      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b70      	cmp	r3, #112	@ 0x70
 80023a6:	d101      	bne.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023a8:	2301      	movs	r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023ac:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 0207 	bic.w	r2, r3, #7
 80023b4:	4909      	ldr	r1, [pc, #36]	@ (80023dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023bc:	4b07      	ldr	r3, [pc, #28]	@ (80023dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d001      	beq.n	80023ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40022000 	.word	0x40022000

080023e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023e8:	2300      	movs	r3, #0
 80023ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023ec:	2300      	movs	r3, #0
 80023ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d041      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002400:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002404:	d02a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002406:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800240a:	d824      	bhi.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800240c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002410:	d008      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002412:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002416:	d81e      	bhi.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800241c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002420:	d010      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002422:	e018      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002424:	4b86      	ldr	r3, [pc, #536]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a85      	ldr	r2, [pc, #532]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002430:	e015      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fabb 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 800243e:	4603      	mov	r3, r0
 8002440:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002442:	e00c      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3320      	adds	r3, #32
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fba6 	bl	8002b9c <RCCEx_PLLSAI2_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002454:	e003      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	74fb      	strb	r3, [r7, #19]
      break;
 800245a:	e000      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800245c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10b      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002464:	4b76      	ldr	r3, [pc, #472]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002472:	4973      	ldr	r1, [pc, #460]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800247a:	e001      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d041      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002490:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002494:	d02a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002496:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800249a:	d824      	bhi.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800249c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024a0:	d008      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024a6:	d81e      	bhi.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b0:	d010      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024b2:	e018      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024b4:	4b62      	ldr	r3, [pc, #392]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a61      	ldr	r2, [pc, #388]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024c0:	e015      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fa73 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 80024ce:	4603      	mov	r3, r0
 80024d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024d2:	e00c      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3320      	adds	r3, #32
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fb5e 	bl	8002b9c <RCCEx_PLLSAI2_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024e4:	e003      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	74fb      	strb	r3, [r7, #19]
      break;
 80024ea:	e000      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024f4:	4b52      	ldr	r3, [pc, #328]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002502:	494f      	ldr	r1, [pc, #316]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800250a:	e001      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800250c:	7cfb      	ldrb	r3, [r7, #19]
 800250e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80a0 	beq.w	800265e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002522:	4b47      	ldr	r3, [pc, #284]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002532:	2300      	movs	r3, #0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00d      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	4b41      	ldr	r3, [pc, #260]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253c:	4a40      	ldr	r2, [pc, #256]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002542:	6593      	str	r3, [r2, #88]	@ 0x58
 8002544:	4b3e      	ldr	r3, [pc, #248]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002550:	2301      	movs	r3, #1
 8002552:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002554:	4b3b      	ldr	r3, [pc, #236]	@ (8002644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3a      	ldr	r2, [pc, #232]	@ (8002644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002560:	f7fe fdd4 	bl	800110c <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002566:	e009      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7fe fdd0 	bl	800110c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d902      	bls.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	74fb      	strb	r3, [r7, #19]
        break;
 800257a:	e005      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800257c:	4b31      	ldr	r3, [pc, #196]	@ (8002644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ef      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d15c      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800258e:	4b2c      	ldr	r3, [pc, #176]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002594:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002598:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01f      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d019      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025ac:	4b24      	ldr	r3, [pc, #144]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025b8:	4b21      	ldr	r3, [pc, #132]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025be:	4a20      	ldr	r2, [pc, #128]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025d8:	4a19      	ldr	r2, [pc, #100]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe fd8f 	bl	800110c <HAL_GetTick>
 80025ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f0:	e00b      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7fe fd8b 	bl	800110c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d902      	bls.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	74fb      	strb	r3, [r7, #19]
            break;
 8002608:	e006      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260a:	4b0d      	ldr	r3, [pc, #52]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ec      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800261e:	4b08      	ldr	r3, [pc, #32]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002624:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800262e:	4904      	ldr	r1, [pc, #16]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002636:	e009      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	74bb      	strb	r3, [r7, #18]
 800263c:	e006      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264c:	7c7b      	ldrb	r3, [r7, #17]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002652:	4b9e      	ldr	r3, [pc, #632]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002656:	4a9d      	ldr	r2, [pc, #628]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800265c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800266a:	4b98      	ldr	r3, [pc, #608]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002670:	f023 0203 	bic.w	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002678:	4994      	ldr	r1, [pc, #592]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800268c:	4b8f      	ldr	r3, [pc, #572]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002692:	f023 020c 	bic.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269a:	498c      	ldr	r1, [pc, #560]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ae:	4b87      	ldr	r3, [pc, #540]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026bc:	4983      	ldr	r1, [pc, #524]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026d0:	4b7e      	ldr	r3, [pc, #504]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	497b      	ldr	r1, [pc, #492]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026f2:	4b76      	ldr	r3, [pc, #472]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002700:	4972      	ldr	r1, [pc, #456]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002714:	4b6d      	ldr	r3, [pc, #436]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	496a      	ldr	r1, [pc, #424]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002736:	4b65      	ldr	r3, [pc, #404]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002744:	4961      	ldr	r1, [pc, #388]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002758:	4b5c      	ldr	r3, [pc, #368]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002766:	4959      	ldr	r1, [pc, #356]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800277a:	4b54      	ldr	r3, [pc, #336]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002780:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002788:	4950      	ldr	r1, [pc, #320]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800279c:	4b4b      	ldr	r3, [pc, #300]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027aa:	4948      	ldr	r1, [pc, #288]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027be:	4b43      	ldr	r3, [pc, #268]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027cc:	493f      	ldr	r1, [pc, #252]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d028      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027e0:	4b3a      	ldr	r3, [pc, #232]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ee:	4937      	ldr	r1, [pc, #220]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027fe:	d106      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002800:	4b32      	ldr	r3, [pc, #200]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4a31      	ldr	r2, [pc, #196]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800280a:	60d3      	str	r3, [r2, #12]
 800280c:	e011      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002812:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002816:	d10c      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	2101      	movs	r1, #1
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f8c8 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 8002824:	4603      	mov	r3, r0
 8002826:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800282e:	7cfb      	ldrb	r3, [r7, #19]
 8002830:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d028      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800283e:	4b23      	ldr	r3, [pc, #140]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002844:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284c:	491f      	ldr	r1, [pc, #124]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002858:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800285c:	d106      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	4a1a      	ldr	r2, [pc, #104]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002868:	60d3      	str	r3, [r2, #12]
 800286a:	e011      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002870:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002874:	d10c      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3304      	adds	r3, #4
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f000 f899 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 8002882:	4603      	mov	r3, r0
 8002884:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002886:	7cfb      	ldrb	r3, [r7, #19]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d02b      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800289c:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028aa:	4908      	ldr	r1, [pc, #32]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028ba:	d109      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028bc:	4b03      	ldr	r3, [pc, #12]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a02      	ldr	r2, [pc, #8]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028c6:	60d3      	str	r3, [r2, #12]
 80028c8:	e014      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3304      	adds	r3, #4
 80028de:	2101      	movs	r1, #1
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 f867 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 80028e6:	4603      	mov	r3, r0
 80028e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ea:	7cfb      	ldrb	r3, [r7, #19]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d02f      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002900:	4b2b      	ldr	r3, [pc, #172]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002906:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800290e:	4928      	ldr	r1, [pc, #160]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800291a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800291e:	d10d      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	2102      	movs	r1, #2
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f844 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d014      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	74bb      	strb	r3, [r7, #18]
 800293a:	e011      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002944:	d10c      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3320      	adds	r3, #32
 800294a:	2102      	movs	r1, #2
 800294c:	4618      	mov	r0, r3
 800294e:	f000 f925 	bl	8002b9c <RCCEx_PLLSAI2_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800296c:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002972:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800297a:	490d      	ldr	r1, [pc, #52]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800298e:	4b08      	ldr	r3, [pc, #32]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002994:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800299e:	4904      	ldr	r1, [pc, #16]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000

080029b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029c2:	4b75      	ldr	r3, [pc, #468]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d018      	beq.n	8002a00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029ce:	4b72      	ldr	r3, [pc, #456]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0203 	and.w	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d10d      	bne.n	80029fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
       ||
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
       ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d047      	beq.n	8002a8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
 80029fe:	e044      	b.n	8002a8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d018      	beq.n	8002a3a <RCCEx_PLLSAI1_Config+0x86>
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d825      	bhi.n	8002a58 <RCCEx_PLLSAI1_Config+0xa4>
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d002      	beq.n	8002a16 <RCCEx_PLLSAI1_Config+0x62>
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d009      	beq.n	8002a28 <RCCEx_PLLSAI1_Config+0x74>
 8002a14:	e020      	b.n	8002a58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a16:	4b60      	ldr	r3, [pc, #384]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d11d      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a26:	e01a      	b.n	8002a5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a28:	4b5b      	ldr	r3, [pc, #364]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d116      	bne.n	8002a62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a38:	e013      	b.n	8002a62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a3a:	4b57      	ldr	r3, [pc, #348]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a46:	4b54      	ldr	r3, [pc, #336]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a56:	e006      	b.n	8002a66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5c:	e004      	b.n	8002a68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e002      	b.n	8002a68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a62:	bf00      	nop
 8002a64:	e000      	b.n	8002a68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a66:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10d      	bne.n	8002a8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6819      	ldr	r1, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	430b      	orrs	r3, r1
 8002a84:	4944      	ldr	r1, [pc, #272]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d17d      	bne.n	8002b8c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a90:	4b41      	ldr	r3, [pc, #260]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a40      	ldr	r2, [pc, #256]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9c:	f7fe fb36 	bl	800110c <HAL_GetTick>
 8002aa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aa2:	e009      	b.n	8002ab8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aa4:	f7fe fb32 	bl	800110c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d902      	bls.n	8002ab8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ab6:	e005      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ab8:	4b37      	ldr	r3, [pc, #220]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1ef      	bne.n	8002aa4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d160      	bne.n	8002b8c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d111      	bne.n	8002af4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ad0:	4b31      	ldr	r3, [pc, #196]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6892      	ldr	r2, [r2, #8]
 8002ae0:	0211      	lsls	r1, r2, #8
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68d2      	ldr	r2, [r2, #12]
 8002ae6:	0912      	lsrs	r2, r2, #4
 8002ae8:	0452      	lsls	r2, r2, #17
 8002aea:	430a      	orrs	r2, r1
 8002aec:	492a      	ldr	r1, [pc, #168]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	610b      	str	r3, [r1, #16]
 8002af2:	e027      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d112      	bne.n	8002b20 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002afa:	4b27      	ldr	r3, [pc, #156]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b02:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6892      	ldr	r2, [r2, #8]
 8002b0a:	0211      	lsls	r1, r2, #8
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6912      	ldr	r2, [r2, #16]
 8002b10:	0852      	lsrs	r2, r2, #1
 8002b12:	3a01      	subs	r2, #1
 8002b14:	0552      	lsls	r2, r2, #21
 8002b16:	430a      	orrs	r2, r1
 8002b18:	491f      	ldr	r1, [pc, #124]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	610b      	str	r3, [r1, #16]
 8002b1e:	e011      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b20:	4b1d      	ldr	r3, [pc, #116]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b28:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6892      	ldr	r2, [r2, #8]
 8002b30:	0211      	lsls	r1, r2, #8
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6952      	ldr	r2, [r2, #20]
 8002b36:	0852      	lsrs	r2, r2, #1
 8002b38:	3a01      	subs	r2, #1
 8002b3a:	0652      	lsls	r2, r2, #25
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	4916      	ldr	r1, [pc, #88]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b44:	4b14      	ldr	r3, [pc, #80]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a13      	ldr	r2, [pc, #76]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe fadc 	bl	800110c <HAL_GetTick>
 8002b54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b56:	e009      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b58:	f7fe fad8 	bl	800110c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d902      	bls.n	8002b6c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	73fb      	strb	r3, [r7, #15]
          break;
 8002b6a:	e005      	b.n	8002b78 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ef      	beq.n	8002b58 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b7e:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	4904      	ldr	r1, [pc, #16]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000

08002b9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002baa:	4b6a      	ldr	r3, [pc, #424]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d018      	beq.n	8002be8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bb6:	4b67      	ldr	r3, [pc, #412]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0203 	and.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d10d      	bne.n	8002be2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bce:	4b61      	ldr	r3, [pc, #388]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d047      	beq.n	8002c72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
 8002be6:	e044      	b.n	8002c72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d018      	beq.n	8002c22 <RCCEx_PLLSAI2_Config+0x86>
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d825      	bhi.n	8002c40 <RCCEx_PLLSAI2_Config+0xa4>
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d002      	beq.n	8002bfe <RCCEx_PLLSAI2_Config+0x62>
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d009      	beq.n	8002c10 <RCCEx_PLLSAI2_Config+0x74>
 8002bfc:	e020      	b.n	8002c40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bfe:	4b55      	ldr	r3, [pc, #340]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d11d      	bne.n	8002c46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0e:	e01a      	b.n	8002c46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c10:	4b50      	ldr	r3, [pc, #320]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d116      	bne.n	8002c4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c20:	e013      	b.n	8002c4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c22:	4b4c      	ldr	r3, [pc, #304]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10f      	bne.n	8002c4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c2e:	4b49      	ldr	r3, [pc, #292]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c3e:	e006      	b.n	8002c4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      break;
 8002c44:	e004      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10d      	bne.n	8002c72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c56:	4b3f      	ldr	r3, [pc, #252]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	4939      	ldr	r1, [pc, #228]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d167      	bne.n	8002d48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c78:	4b36      	ldr	r3, [pc, #216]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a35      	ldr	r2, [pc, #212]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c84:	f7fe fa42 	bl	800110c <HAL_GetTick>
 8002c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c8a:	e009      	b.n	8002ca0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c8c:	f7fe fa3e 	bl	800110c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d902      	bls.n	8002ca0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c9e:	e005      	b.n	8002cac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ef      	bne.n	8002c8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d14a      	bne.n	8002d48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d111      	bne.n	8002cdc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cb8:	4b26      	ldr	r3, [pc, #152]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6892      	ldr	r2, [r2, #8]
 8002cc8:	0211      	lsls	r1, r2, #8
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68d2      	ldr	r2, [r2, #12]
 8002cce:	0912      	lsrs	r2, r2, #4
 8002cd0:	0452      	lsls	r2, r2, #17
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	491f      	ldr	r1, [pc, #124]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	614b      	str	r3, [r1, #20]
 8002cda:	e011      	b.n	8002d00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ce4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6892      	ldr	r2, [r2, #8]
 8002cec:	0211      	lsls	r1, r2, #8
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6912      	ldr	r2, [r2, #16]
 8002cf2:	0852      	lsrs	r2, r2, #1
 8002cf4:	3a01      	subs	r2, #1
 8002cf6:	0652      	lsls	r2, r2, #25
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	4916      	ldr	r1, [pc, #88]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d00:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a13      	ldr	r2, [pc, #76]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fe f9fe 	bl	800110c <HAL_GetTick>
 8002d10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d12:	e009      	b.n	8002d28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d14:	f7fe f9fa 	bl	800110c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d902      	bls.n	8002d28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	73fb      	strb	r3, [r7, #15]
          break;
 8002d26:	e005      	b.n	8002d34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d28:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ef      	beq.n	8002d14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d3a:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	4904      	ldr	r1, [pc, #16]	@ (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000

08002d58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e095      	b.n	8002e96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d108      	bne.n	8002d84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d7a:	d009      	beq.n	8002d90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61da      	str	r2, [r3, #28]
 8002d82:	e005      	b.n	8002d90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fd fee4 	bl	8000b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dd0:	d902      	bls.n	8002dd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	e002      	b.n	8002dde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ddc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002de6:	d007      	beq.n	8002df8 <HAL_SPI_Init+0xa0>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002df0:	d002      	beq.n	8002df8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3a:	ea42 0103 	orr.w	r1, r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e42:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	0c1b      	lsrs	r3, r3, #16
 8002e54:	f003 0204 	and.w	r2, r3, #4
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002e74:	ea42 0103 	orr.w	r1, r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b088      	sub	sp, #32
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eae:	f7fe f92d 	bl	800110c <HAL_GetTick>
 8002eb2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d001      	beq.n	8002ec8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e15c      	b.n	8003182 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SPI_Transmit+0x36>
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e154      	b.n	8003182 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_SPI_Transmit+0x48>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e14d      	b.n	8003182 <HAL_SPI_Transmit+0x2e4>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	88fa      	ldrh	r2, [r7, #6]
 8002f06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	88fa      	ldrh	r2, [r7, #6]
 8002f0c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f38:	d10f      	bne.n	8002f5a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f64:	2b40      	cmp	r3, #64	@ 0x40
 8002f66:	d007      	beq.n	8002f78 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f80:	d952      	bls.n	8003028 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_SPI_Transmit+0xf2>
 8002f8a:	8b7b      	ldrh	r3, [r7, #26]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d145      	bne.n	800301c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f94:	881a      	ldrh	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa0:	1c9a      	adds	r2, r3, #2
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fb4:	e032      	b.n	800301c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d112      	bne.n	8002fea <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc8:	881a      	ldrh	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd4:	1c9a      	adds	r2, r3, #2
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fe8:	e018      	b.n	800301c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fea:	f7fe f88f 	bl	800110c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d803      	bhi.n	8003002 <HAL_SPI_Transmit+0x164>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d102      	bne.n	8003008 <HAL_SPI_Transmit+0x16a>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e0b2      	b.n	8003182 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1c7      	bne.n	8002fb6 <HAL_SPI_Transmit+0x118>
 8003026:	e083      	b.n	8003130 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_SPI_Transmit+0x198>
 8003030:	8b7b      	ldrh	r3, [r7, #26]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d177      	bne.n	8003126 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d912      	bls.n	8003066 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003044:	881a      	ldrh	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003050:	1c9a      	adds	r2, r3, #2
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b02      	subs	r3, #2
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003064:	e05f      	b.n	8003126 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	330c      	adds	r3, #12
 8003070:	7812      	ldrb	r2, [r2, #0]
 8003072:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800308c:	e04b      	b.n	8003126 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b02      	cmp	r3, #2
 800309a:	d12b      	bne.n	80030f4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d912      	bls.n	80030cc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030aa:	881a      	ldrh	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b6:	1c9a      	adds	r2, r3, #2
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b02      	subs	r3, #2
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030ca:	e02c      	b.n	8003126 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	7812      	ldrb	r2, [r2, #0]
 80030d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030f2:	e018      	b.n	8003126 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030f4:	f7fe f80a 	bl	800110c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d803      	bhi.n	800310c <HAL_SPI_Transmit+0x26e>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d102      	bne.n	8003112 <HAL_SPI_Transmit+0x274>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e02d      	b.n	8003182 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ae      	bne.n	800308e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	6839      	ldr	r1, [r7, #0]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f947 	bl	80033c8 <SPI_EndRxTxTransaction>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10a      	bne.n	8003164 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003180:	2300      	movs	r3, #0
  }
}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800319c:	f7fd ffb6 	bl	800110c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	4413      	add	r3, r2
 80031aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031ac:	f7fd ffae 	bl	800110c <HAL_GetTick>
 80031b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031b2:	4b39      	ldr	r3, [pc, #228]	@ (8003298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	015b      	lsls	r3, r3, #5
 80031b8:	0d1b      	lsrs	r3, r3, #20
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031c2:	e054      	b.n	800326e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	d050      	beq.n	800326e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031cc:	f7fd ff9e 	bl	800110c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d902      	bls.n	80031e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d13d      	bne.n	800325e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031fa:	d111      	bne.n	8003220 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003204:	d004      	beq.n	8003210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800320e:	d107      	bne.n	8003220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800321e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003228:	d10f      	bne.n	800324a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e017      	b.n	800328e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	3b01      	subs	r3, #1
 800326c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4013      	ands	r3, r2
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	429a      	cmp	r2, r3
 800327c:	bf0c      	ite	eq
 800327e:	2301      	moveq	r3, #1
 8003280:	2300      	movne	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	429a      	cmp	r2, r3
 800328a:	d19b      	bne.n	80031c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000000 	.word	0x20000000

0800329c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	@ 0x28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032ae:	f7fd ff2d 	bl	800110c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	4413      	add	r3, r2
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80032be:	f7fd ff25 	bl	800110c <HAL_GetTick>
 80032c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	330c      	adds	r3, #12
 80032ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032cc:	4b3d      	ldr	r3, [pc, #244]	@ (80033c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00da      	lsls	r2, r3, #3
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	0d1b      	lsrs	r3, r3, #20
 80032dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032e4:	e060      	b.n	80033a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80032ec:	d107      	bne.n	80032fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d104      	bne.n	80032fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d050      	beq.n	80033a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003306:	f7fd ff01 	bl	800110c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003312:	429a      	cmp	r2, r3
 8003314:	d902      	bls.n	800331c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	2b00      	cmp	r3, #0
 800331a:	d13d      	bne.n	8003398 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800332a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003334:	d111      	bne.n	800335a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800333e:	d004      	beq.n	800334a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003348:	d107      	bne.n	800335a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003358:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003362:	d10f      	bne.n	8003384 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003382:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e010      	b.n	80033ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	4013      	ands	r3, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d196      	bne.n	80032e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3728      	adds	r7, #40	@ 0x28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000000 	.word	0x20000000

080033c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2200      	movs	r2, #0
 80033dc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7ff ff5b 	bl	800329c <SPI_WaitFifoStateUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e027      	b.n	800344c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2200      	movs	r2, #0
 8003404:	2180      	movs	r1, #128	@ 0x80
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7ff fec0 	bl	800318c <SPI_WaitFlagStateUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003416:	f043 0220 	orr.w	r2, r3, #32
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e014      	b.n	800344c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2200      	movs	r2, #0
 800342a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff ff34 	bl	800329c <SPI_WaitFifoStateUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343e:	f043 0220 	orr.w	r2, r3, #32
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e000      	b.n	800344c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e049      	b.n	80034fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f841 	bl	8003502 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	4619      	mov	r1, r3
 8003492:	4610      	mov	r0, r2
 8003494:	f000 f9e0 	bl	8003858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d001      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e04f      	b.n	80035d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a23      	ldr	r2, [pc, #140]	@ (80035dc <HAL_TIM_Base_Start_IT+0xc4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d01d      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x76>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800355a:	d018      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x76>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1f      	ldr	r2, [pc, #124]	@ (80035e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x76>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1e      	ldr	r2, [pc, #120]	@ (80035e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00e      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x76>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1c      	ldr	r2, [pc, #112]	@ (80035e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d009      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x76>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1b      	ldr	r2, [pc, #108]	@ (80035ec <HAL_TIM_Base_Start_IT+0xd4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x76>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a19      	ldr	r2, [pc, #100]	@ (80035f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d115      	bne.n	80035ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	4b17      	ldr	r3, [pc, #92]	@ (80035f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003596:	4013      	ands	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b06      	cmp	r3, #6
 800359e:	d015      	beq.n	80035cc <HAL_TIM_Base_Start_IT+0xb4>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a6:	d011      	beq.n	80035cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b8:	e008      	b.n	80035cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	e000      	b.n	80035ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	40000400 	.word	0x40000400
 80035e4:	40000800 	.word	0x40000800
 80035e8:	40000c00 	.word	0x40000c00
 80035ec:	40013400 	.word	0x40013400
 80035f0:	40014000 	.word	0x40014000
 80035f4:	00010007 	.word	0x00010007

080035f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d020      	beq.n	800365c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01b      	beq.n	800365c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0202 	mvn.w	r2, #2
 800362c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8e9 	bl	800381a <HAL_TIM_IC_CaptureCallback>
 8003648:	e005      	b.n	8003656 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f8db 	bl	8003806 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f8ec 	bl	800382e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	d020      	beq.n	80036a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d01b      	beq.n	80036a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0204 	mvn.w	r2, #4
 8003678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8c3 	bl	800381a <HAL_TIM_IC_CaptureCallback>
 8003694:	e005      	b.n	80036a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f8b5 	bl	8003806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f8c6 	bl	800382e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d020      	beq.n	80036f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01b      	beq.n	80036f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0208 	mvn.w	r2, #8
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2204      	movs	r2, #4
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f89d 	bl	800381a <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f88f 	bl	8003806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8a0 	bl	800382e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d020      	beq.n	8003740 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01b      	beq.n	8003740 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0210 	mvn.w	r2, #16
 8003710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2208      	movs	r2, #8
 8003716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f877 	bl	800381a <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f869 	bl	8003806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f87a 	bl	800382e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0201 	mvn.w	r2, #1
 800375c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fd f8f6 	bl	8000950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376a:	2b00      	cmp	r3, #0
 800376c:	d104      	bne.n	8003778 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00c      	beq.n	8003792 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800378a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f913 	bl	80039b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00c      	beq.n	80037b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d007      	beq.n	80037b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80037ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f90b 	bl	80039cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00c      	beq.n	80037da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f834 	bl	8003842 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00c      	beq.n	80037fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f06f 0220 	mvn.w	r2, #32
 80037f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f8d3 	bl	80039a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a46      	ldr	r2, [pc, #280]	@ (8003984 <TIM_Base_SetConfig+0x12c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d013      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003876:	d00f      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a43      	ldr	r2, [pc, #268]	@ (8003988 <TIM_Base_SetConfig+0x130>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00b      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a42      	ldr	r2, [pc, #264]	@ (800398c <TIM_Base_SetConfig+0x134>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d007      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a41      	ldr	r2, [pc, #260]	@ (8003990 <TIM_Base_SetConfig+0x138>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d003      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a40      	ldr	r2, [pc, #256]	@ (8003994 <TIM_Base_SetConfig+0x13c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d108      	bne.n	80038aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a35      	ldr	r2, [pc, #212]	@ (8003984 <TIM_Base_SetConfig+0x12c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01f      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b8:	d01b      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a32      	ldr	r2, [pc, #200]	@ (8003988 <TIM_Base_SetConfig+0x130>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d017      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a31      	ldr	r2, [pc, #196]	@ (800398c <TIM_Base_SetConfig+0x134>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a30      	ldr	r2, [pc, #192]	@ (8003990 <TIM_Base_SetConfig+0x138>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00f      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2f      	ldr	r2, [pc, #188]	@ (8003994 <TIM_Base_SetConfig+0x13c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003998 <TIM_Base_SetConfig+0x140>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2d      	ldr	r2, [pc, #180]	@ (800399c <TIM_Base_SetConfig+0x144>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2c      	ldr	r2, [pc, #176]	@ (80039a0 <TIM_Base_SetConfig+0x148>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a16      	ldr	r2, [pc, #88]	@ (8003984 <TIM_Base_SetConfig+0x12c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00f      	beq.n	8003950 <TIM_Base_SetConfig+0xf8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a18      	ldr	r2, [pc, #96]	@ (8003994 <TIM_Base_SetConfig+0x13c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00b      	beq.n	8003950 <TIM_Base_SetConfig+0xf8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a17      	ldr	r2, [pc, #92]	@ (8003998 <TIM_Base_SetConfig+0x140>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_Base_SetConfig+0xf8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a16      	ldr	r2, [pc, #88]	@ (800399c <TIM_Base_SetConfig+0x144>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_Base_SetConfig+0xf8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a15      	ldr	r2, [pc, #84]	@ (80039a0 <TIM_Base_SetConfig+0x148>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d103      	bne.n	8003958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b01      	cmp	r3, #1
 8003968:	d105      	bne.n	8003976 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f023 0201 	bic.w	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	611a      	str	r2, [r3, #16]
  }
}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800
 8003990:	40000c00 	.word	0x40000c00
 8003994:	40013400 	.word	0x40013400
 8003998:	40014000 	.word	0x40014000
 800399c:	40014400 	.word	0x40014400
 80039a0:	40014800 	.word	0x40014800

080039a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e040      	b.n	8003a74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fd fac8 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	@ 0x24
 8003a0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fc32 	bl	8004290 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f977 	bl	8003d20 <UART_SetConfig>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e01b      	b.n	8003a74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fcb1 	bl	80043d4 <UART_CheckIdleState>
 8003a72:	4603      	mov	r3, r0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	@ 0x28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d177      	bne.n	8003b84 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_UART_Transmit+0x24>
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e070      	b.n	8003b86 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2221      	movs	r2, #33	@ 0x21
 8003ab0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ab2:	f7fd fb2b 	bl	800110c <HAL_GetTick>
 8003ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	88fa      	ldrh	r2, [r7, #6]
 8003abc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	88fa      	ldrh	r2, [r7, #6]
 8003ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad0:	d108      	bne.n	8003ae4 <HAL_UART_Transmit+0x68>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d104      	bne.n	8003ae4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	e003      	b.n	8003aec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003aec:	e02f      	b.n	8003b4e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2200      	movs	r2, #0
 8003af6:	2180      	movs	r1, #128	@ 0x80
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fd13 	bl	8004524 <UART_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e03b      	b.n	8003b86 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10b      	bne.n	8003b2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b20:	b292      	uxth	r2, r2
 8003b22:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	3302      	adds	r3, #2
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	e007      	b.n	8003b3c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1c9      	bne.n	8003aee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2200      	movs	r2, #0
 8003b62:	2140      	movs	r1, #64	@ 0x40
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fcdd 	bl	8004524 <UART_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e005      	b.n	8003b86 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b08a      	sub	sp, #40	@ 0x28
 8003b92:	af02      	add	r7, sp, #8
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	f040 80b6 	bne.w	8003d16 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_UART_Receive+0x28>
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e0ae      	b.n	8003d18 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2222      	movs	r2, #34	@ 0x22
 8003bc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bd0:	f7fd fa9c 	bl	800110c <HAL_GetTick>
 8003bd4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	88fa      	ldrh	r2, [r7, #6]
 8003bda:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	88fa      	ldrh	r2, [r7, #6]
 8003be2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bee:	d10e      	bne.n	8003c0e <HAL_UART_Receive+0x80>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <HAL_UART_Receive+0x76>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003bfe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c02:	e02d      	b.n	8003c60 <HAL_UART_Receive+0xd2>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	22ff      	movs	r2, #255	@ 0xff
 8003c08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c0c:	e028      	b.n	8003c60 <HAL_UART_Receive+0xd2>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10d      	bne.n	8003c32 <HAL_UART_Receive+0xa4>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d104      	bne.n	8003c28 <HAL_UART_Receive+0x9a>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	22ff      	movs	r2, #255	@ 0xff
 8003c22:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c26:	e01b      	b.n	8003c60 <HAL_UART_Receive+0xd2>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	227f      	movs	r2, #127	@ 0x7f
 8003c2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c30:	e016      	b.n	8003c60 <HAL_UART_Receive+0xd2>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c3a:	d10d      	bne.n	8003c58 <HAL_UART_Receive+0xca>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d104      	bne.n	8003c4e <HAL_UART_Receive+0xc0>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	227f      	movs	r2, #127	@ 0x7f
 8003c48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c4c:	e008      	b.n	8003c60 <HAL_UART_Receive+0xd2>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	223f      	movs	r2, #63	@ 0x3f
 8003c52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c56:	e003      	b.n	8003c60 <HAL_UART_Receive+0xd2>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c66:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c70:	d108      	bne.n	8003c84 <HAL_UART_Receive+0xf6>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d104      	bne.n	8003c84 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	e003      	b.n	8003c8c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003c8c:	e037      	b.n	8003cfe <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2200      	movs	r2, #0
 8003c96:	2120      	movs	r1, #32
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fc43 	bl	8004524 <UART_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e033      	b.n	8003d18 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	8a7b      	ldrh	r3, [r7, #18]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	3302      	adds	r3, #2
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	e00d      	b.n	8003cec <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	8a7b      	ldrh	r3, [r7, #18]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	4013      	ands	r3, r2
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1c1      	bne.n	8003c8e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
  }
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3720      	adds	r7, #32
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d24:	b08a      	sub	sp, #40	@ 0x28
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4ba4      	ldr	r3, [pc, #656]	@ (8003fe0 <UART_SetConfig+0x2c0>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a99      	ldr	r2, [pc, #612]	@ (8003fe4 <UART_SetConfig+0x2c4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d004      	beq.n	8003d8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a90      	ldr	r2, [pc, #576]	@ (8003fe8 <UART_SetConfig+0x2c8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d126      	bne.n	8003df8 <UART_SetConfig+0xd8>
 8003daa:	4b90      	ldr	r3, [pc, #576]	@ (8003fec <UART_SetConfig+0x2cc>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d81b      	bhi.n	8003df0 <UART_SetConfig+0xd0>
 8003db8:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc0 <UART_SetConfig+0xa0>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003dd1 	.word	0x08003dd1
 8003dc4:	08003de1 	.word	0x08003de1
 8003dc8:	08003dd9 	.word	0x08003dd9
 8003dcc:	08003de9 	.word	0x08003de9
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd6:	e116      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dde:	e112      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003de0:	2304      	movs	r3, #4
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de6:	e10e      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003de8:	2308      	movs	r3, #8
 8003dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dee:	e10a      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003df0:	2310      	movs	r3, #16
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df6:	e106      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a7c      	ldr	r2, [pc, #496]	@ (8003ff0 <UART_SetConfig+0x2d0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d138      	bne.n	8003e74 <UART_SetConfig+0x154>
 8003e02:	4b7a      	ldr	r3, [pc, #488]	@ (8003fec <UART_SetConfig+0x2cc>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	d82d      	bhi.n	8003e6c <UART_SetConfig+0x14c>
 8003e10:	a201      	add	r2, pc, #4	@ (adr r2, 8003e18 <UART_SetConfig+0xf8>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e4d 	.word	0x08003e4d
 8003e1c:	08003e6d 	.word	0x08003e6d
 8003e20:	08003e6d 	.word	0x08003e6d
 8003e24:	08003e6d 	.word	0x08003e6d
 8003e28:	08003e5d 	.word	0x08003e5d
 8003e2c:	08003e6d 	.word	0x08003e6d
 8003e30:	08003e6d 	.word	0x08003e6d
 8003e34:	08003e6d 	.word	0x08003e6d
 8003e38:	08003e55 	.word	0x08003e55
 8003e3c:	08003e6d 	.word	0x08003e6d
 8003e40:	08003e6d 	.word	0x08003e6d
 8003e44:	08003e6d 	.word	0x08003e6d
 8003e48:	08003e65 	.word	0x08003e65
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e52:	e0d8      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003e54:	2302      	movs	r3, #2
 8003e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5a:	e0d4      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e62:	e0d0      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003e64:	2308      	movs	r3, #8
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6a:	e0cc      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e72:	e0c8      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a5e      	ldr	r2, [pc, #376]	@ (8003ff4 <UART_SetConfig+0x2d4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d125      	bne.n	8003eca <UART_SetConfig+0x1aa>
 8003e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8003fec <UART_SetConfig+0x2cc>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e88:	2b30      	cmp	r3, #48	@ 0x30
 8003e8a:	d016      	beq.n	8003eba <UART_SetConfig+0x19a>
 8003e8c:	2b30      	cmp	r3, #48	@ 0x30
 8003e8e:	d818      	bhi.n	8003ec2 <UART_SetConfig+0x1a2>
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d00a      	beq.n	8003eaa <UART_SetConfig+0x18a>
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d814      	bhi.n	8003ec2 <UART_SetConfig+0x1a2>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <UART_SetConfig+0x182>
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d008      	beq.n	8003eb2 <UART_SetConfig+0x192>
 8003ea0:	e00f      	b.n	8003ec2 <UART_SetConfig+0x1a2>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea8:	e0ad      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb0:	e0a9      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb8:	e0a5      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003eba:	2308      	movs	r3, #8
 8003ebc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec0:	e0a1      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003ec2:	2310      	movs	r3, #16
 8003ec4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec8:	e09d      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a4a      	ldr	r2, [pc, #296]	@ (8003ff8 <UART_SetConfig+0x2d8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d125      	bne.n	8003f20 <UART_SetConfig+0x200>
 8003ed4:	4b45      	ldr	r3, [pc, #276]	@ (8003fec <UART_SetConfig+0x2cc>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ede:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ee0:	d016      	beq.n	8003f10 <UART_SetConfig+0x1f0>
 8003ee2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ee4:	d818      	bhi.n	8003f18 <UART_SetConfig+0x1f8>
 8003ee6:	2b80      	cmp	r3, #128	@ 0x80
 8003ee8:	d00a      	beq.n	8003f00 <UART_SetConfig+0x1e0>
 8003eea:	2b80      	cmp	r3, #128	@ 0x80
 8003eec:	d814      	bhi.n	8003f18 <UART_SetConfig+0x1f8>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <UART_SetConfig+0x1d8>
 8003ef2:	2b40      	cmp	r3, #64	@ 0x40
 8003ef4:	d008      	beq.n	8003f08 <UART_SetConfig+0x1e8>
 8003ef6:	e00f      	b.n	8003f18 <UART_SetConfig+0x1f8>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003efe:	e082      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f00:	2302      	movs	r3, #2
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f06:	e07e      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0e:	e07a      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f10:	2308      	movs	r3, #8
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f16:	e076      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f18:	2310      	movs	r3, #16
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1e:	e072      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a35      	ldr	r2, [pc, #212]	@ (8003ffc <UART_SetConfig+0x2dc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d12a      	bne.n	8003f80 <UART_SetConfig+0x260>
 8003f2a:	4b30      	ldr	r3, [pc, #192]	@ (8003fec <UART_SetConfig+0x2cc>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f38:	d01a      	beq.n	8003f70 <UART_SetConfig+0x250>
 8003f3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f3e:	d81b      	bhi.n	8003f78 <UART_SetConfig+0x258>
 8003f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f44:	d00c      	beq.n	8003f60 <UART_SetConfig+0x240>
 8003f46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f4a:	d815      	bhi.n	8003f78 <UART_SetConfig+0x258>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <UART_SetConfig+0x238>
 8003f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f54:	d008      	beq.n	8003f68 <UART_SetConfig+0x248>
 8003f56:	e00f      	b.n	8003f78 <UART_SetConfig+0x258>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f5e:	e052      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f60:	2302      	movs	r3, #2
 8003f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f66:	e04e      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f6e:	e04a      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f70:	2308      	movs	r3, #8
 8003f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f76:	e046      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f78:	2310      	movs	r3, #16
 8003f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f7e:	e042      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a17      	ldr	r2, [pc, #92]	@ (8003fe4 <UART_SetConfig+0x2c4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d13a      	bne.n	8004000 <UART_SetConfig+0x2e0>
 8003f8a:	4b18      	ldr	r3, [pc, #96]	@ (8003fec <UART_SetConfig+0x2cc>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f98:	d01a      	beq.n	8003fd0 <UART_SetConfig+0x2b0>
 8003f9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f9e:	d81b      	bhi.n	8003fd8 <UART_SetConfig+0x2b8>
 8003fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fa4:	d00c      	beq.n	8003fc0 <UART_SetConfig+0x2a0>
 8003fa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003faa:	d815      	bhi.n	8003fd8 <UART_SetConfig+0x2b8>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <UART_SetConfig+0x298>
 8003fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb4:	d008      	beq.n	8003fc8 <UART_SetConfig+0x2a8>
 8003fb6:	e00f      	b.n	8003fd8 <UART_SetConfig+0x2b8>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fbe:	e022      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc6:	e01e      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fce:	e01a      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003fd0:	2308      	movs	r3, #8
 8003fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd6:	e016      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fde:	e012      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003fe0:	efff69f3 	.word	0xefff69f3
 8003fe4:	40008000 	.word	0x40008000
 8003fe8:	40013800 	.word	0x40013800
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40004400 	.word	0x40004400
 8003ff4:	40004800 	.word	0x40004800
 8003ff8:	40004c00 	.word	0x40004c00
 8003ffc:	40005000 	.word	0x40005000
 8004000:	2310      	movs	r3, #16
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a9f      	ldr	r2, [pc, #636]	@ (8004288 <UART_SetConfig+0x568>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d17a      	bne.n	8004106 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004010:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004014:	2b08      	cmp	r3, #8
 8004016:	d824      	bhi.n	8004062 <UART_SetConfig+0x342>
 8004018:	a201      	add	r2, pc, #4	@ (adr r2, 8004020 <UART_SetConfig+0x300>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	08004045 	.word	0x08004045
 8004024:	08004063 	.word	0x08004063
 8004028:	0800404d 	.word	0x0800404d
 800402c:	08004063 	.word	0x08004063
 8004030:	08004053 	.word	0x08004053
 8004034:	08004063 	.word	0x08004063
 8004038:	08004063 	.word	0x08004063
 800403c:	08004063 	.word	0x08004063
 8004040:	0800405b 	.word	0x0800405b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004044:	f7fe f90e 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8004048:	61f8      	str	r0, [r7, #28]
        break;
 800404a:	e010      	b.n	800406e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800404c:	4b8f      	ldr	r3, [pc, #572]	@ (800428c <UART_SetConfig+0x56c>)
 800404e:	61fb      	str	r3, [r7, #28]
        break;
 8004050:	e00d      	b.n	800406e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004052:	f7fe f86f 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8004056:	61f8      	str	r0, [r7, #28]
        break;
 8004058:	e009      	b.n	800406e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800405a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800405e:	61fb      	str	r3, [r7, #28]
        break;
 8004060:	e005      	b.n	800406e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800406c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80fb 	beq.w	800426c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4413      	add	r3, r2
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	429a      	cmp	r2, r3
 8004084:	d305      	bcc.n	8004092 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	429a      	cmp	r2, r3
 8004090:	d903      	bls.n	800409a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004098:	e0e8      	b.n	800426c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	2200      	movs	r2, #0
 800409e:	461c      	mov	r4, r3
 80040a0:	4615      	mov	r5, r2
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	022b      	lsls	r3, r5, #8
 80040ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040b0:	0222      	lsls	r2, r4, #8
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	6849      	ldr	r1, [r1, #4]
 80040b6:	0849      	lsrs	r1, r1, #1
 80040b8:	2000      	movs	r0, #0
 80040ba:	4688      	mov	r8, r1
 80040bc:	4681      	mov	r9, r0
 80040be:	eb12 0a08 	adds.w	sl, r2, r8
 80040c2:	eb43 0b09 	adc.w	fp, r3, r9
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	603b      	str	r3, [r7, #0]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040d4:	4650      	mov	r0, sl
 80040d6:	4659      	mov	r1, fp
 80040d8:	f7fc f8ca 	bl	8000270 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4613      	mov	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ea:	d308      	bcc.n	80040fe <UART_SetConfig+0x3de>
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040f2:	d204      	bcs.n	80040fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	e0b6      	b.n	800426c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004104:	e0b2      	b.n	800426c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800410e:	d15e      	bne.n	80041ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004110:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004114:	2b08      	cmp	r3, #8
 8004116:	d828      	bhi.n	800416a <UART_SetConfig+0x44a>
 8004118:	a201      	add	r2, pc, #4	@ (adr r2, 8004120 <UART_SetConfig+0x400>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004145 	.word	0x08004145
 8004124:	0800414d 	.word	0x0800414d
 8004128:	08004155 	.word	0x08004155
 800412c:	0800416b 	.word	0x0800416b
 8004130:	0800415b 	.word	0x0800415b
 8004134:	0800416b 	.word	0x0800416b
 8004138:	0800416b 	.word	0x0800416b
 800413c:	0800416b 	.word	0x0800416b
 8004140:	08004163 	.word	0x08004163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004144:	f7fe f88e 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8004148:	61f8      	str	r0, [r7, #28]
        break;
 800414a:	e014      	b.n	8004176 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800414c:	f7fe f8a0 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 8004150:	61f8      	str	r0, [r7, #28]
        break;
 8004152:	e010      	b.n	8004176 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004154:	4b4d      	ldr	r3, [pc, #308]	@ (800428c <UART_SetConfig+0x56c>)
 8004156:	61fb      	str	r3, [r7, #28]
        break;
 8004158:	e00d      	b.n	8004176 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415a:	f7fd ffeb 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 800415e:	61f8      	str	r0, [r7, #28]
        break;
 8004160:	e009      	b.n	8004176 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004166:	61fb      	str	r3, [r7, #28]
        break;
 8004168:	e005      	b.n	8004176 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004174:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d077      	beq.n	800426c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	005a      	lsls	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	085b      	lsrs	r3, r3, #1
 8004186:	441a      	add	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b0f      	cmp	r3, #15
 8004196:	d916      	bls.n	80041c6 <UART_SetConfig+0x4a6>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800419e:	d212      	bcs.n	80041c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f023 030f 	bic.w	r3, r3, #15
 80041a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	8afb      	ldrh	r3, [r7, #22]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	8afa      	ldrh	r2, [r7, #22]
 80041c2:	60da      	str	r2, [r3, #12]
 80041c4:	e052      	b.n	800426c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041cc:	e04e      	b.n	800426c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d827      	bhi.n	8004226 <UART_SetConfig+0x506>
 80041d6:	a201      	add	r2, pc, #4	@ (adr r2, 80041dc <UART_SetConfig+0x4bc>)
 80041d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041dc:	08004201 	.word	0x08004201
 80041e0:	08004209 	.word	0x08004209
 80041e4:	08004211 	.word	0x08004211
 80041e8:	08004227 	.word	0x08004227
 80041ec:	08004217 	.word	0x08004217
 80041f0:	08004227 	.word	0x08004227
 80041f4:	08004227 	.word	0x08004227
 80041f8:	08004227 	.word	0x08004227
 80041fc:	0800421f 	.word	0x0800421f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004200:	f7fe f830 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8004204:	61f8      	str	r0, [r7, #28]
        break;
 8004206:	e014      	b.n	8004232 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004208:	f7fe f842 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 800420c:	61f8      	str	r0, [r7, #28]
        break;
 800420e:	e010      	b.n	8004232 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004210:	4b1e      	ldr	r3, [pc, #120]	@ (800428c <UART_SetConfig+0x56c>)
 8004212:	61fb      	str	r3, [r7, #28]
        break;
 8004214:	e00d      	b.n	8004232 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004216:	f7fd ff8d 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 800421a:	61f8      	str	r0, [r7, #28]
        break;
 800421c:	e009      	b.n	8004232 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004222:	61fb      	str	r3, [r7, #28]
        break;
 8004224:	e005      	b.n	8004232 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004230:	bf00      	nop
    }

    if (pclk != 0U)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d019      	beq.n	800426c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	085a      	lsrs	r2, r3, #1
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	441a      	add	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	fbb2 f3f3 	udiv	r3, r2, r3
 800424a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b0f      	cmp	r3, #15
 8004250:	d909      	bls.n	8004266 <UART_SetConfig+0x546>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004258:	d205      	bcs.n	8004266 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60da      	str	r2, [r3, #12]
 8004264:	e002      	b.n	800426c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004278:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800427c:	4618      	mov	r0, r3
 800427e:	3728      	adds	r7, #40	@ 0x28
 8004280:	46bd      	mov	sp, r7
 8004282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004286:	bf00      	nop
 8004288:	40008000 	.word	0x40008000
 800428c:	00f42400 	.word	0x00f42400

08004290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01a      	beq.n	80043a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800438e:	d10a      	bne.n	80043a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]
  }
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b098      	sub	sp, #96	@ 0x60
 80043d8:	af02      	add	r7, sp, #8
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043e4:	f7fc fe92 	bl	800110c <HAL_GetTick>
 80043e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d12e      	bne.n	8004456 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004400:	2200      	movs	r2, #0
 8004402:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f88c 	bl	8004524 <UART_WaitOnFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d021      	beq.n	8004456 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004426:	653b      	str	r3, [r7, #80]	@ 0x50
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004430:	647b      	str	r3, [r7, #68]	@ 0x44
 8004432:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800443e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e6      	bne.n	8004412 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e062      	b.n	800451c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b04      	cmp	r3, #4
 8004462:	d149      	bne.n	80044f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004464:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800446c:	2200      	movs	r2, #0
 800446e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f856 	bl	8004524 <UART_WaitOnFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d03c      	beq.n	80044f8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	623b      	str	r3, [r7, #32]
   return(result);
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800449c:	633b      	str	r3, [r7, #48]	@ 0x30
 800449e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e6      	bne.n	800447e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3308      	adds	r3, #8
 80044b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	60fb      	str	r3, [r7, #12]
   return(result);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3308      	adds	r3, #8
 80044ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044d0:	61fa      	str	r2, [r7, #28]
 80044d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	69b9      	ldr	r1, [r7, #24]
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	617b      	str	r3, [r7, #20]
   return(result);
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e5      	bne.n	80044b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e011      	b.n	800451c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3758      	adds	r7, #88	@ 0x58
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	4613      	mov	r3, r2
 8004532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004534:	e04f      	b.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453c:	d04b      	beq.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453e:	f7fc fde5 	bl	800110c <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	429a      	cmp	r2, r3
 800454c:	d302      	bcc.n	8004554 <UART_WaitOnFlagUntilTimeout+0x30>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e04e      	b.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d037      	beq.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b80      	cmp	r3, #128	@ 0x80
 800456a:	d034      	beq.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b40      	cmp	r3, #64	@ 0x40
 8004570:	d031      	beq.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b08      	cmp	r3, #8
 800457e:	d110      	bne.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2208      	movs	r2, #8
 8004586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f838 	bl	80045fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2208      	movs	r2, #8
 8004592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e029      	b.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045b0:	d111      	bne.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f81e 	bl	80045fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e00f      	b.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69da      	ldr	r2, [r3, #28]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4013      	ands	r3, r2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	bf0c      	ite	eq
 80045e6:	2301      	moveq	r3, #1
 80045e8:	2300      	movne	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d0a0      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045fe:	b480      	push	{r7}
 8004600:	b095      	sub	sp, #84	@ 0x54
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004616:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800461a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004624:	643b      	str	r3, [r7, #64]	@ 0x40
 8004626:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800462a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e6      	bne.n	8004606 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3308      	adds	r3, #8
 800463e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	61fb      	str	r3, [r7, #28]
   return(result);
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3308      	adds	r3, #8
 8004656:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004658:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800465a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800465e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e5      	bne.n	8004638 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004670:	2b01      	cmp	r3, #1
 8004672:	d118      	bne.n	80046a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	60bb      	str	r3, [r7, #8]
   return(result);
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f023 0310 	bic.w	r3, r3, #16
 8004688:	647b      	str	r3, [r7, #68]	@ 0x44
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	6979      	ldr	r1, [r7, #20]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	613b      	str	r3, [r7, #16]
   return(result);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e6      	bne.n	8004674 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046ba:	bf00      	nop
 80046bc:	3754      	adds	r7, #84	@ 0x54
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6892      	ldr	r2, [r2, #8]
 8004724:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6852      	ldr	r2, [r2, #4]
 800472e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	429a      	cmp	r2, r3
 8004738:	d103      	bne.n	8004742 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	1e5a      	subs	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800476e:	4b4f      	ldr	r3, [pc, #316]	@ (80048ac <xTaskIncrementTick+0x148>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f040 808f 	bne.w	8004896 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004778:	4b4d      	ldr	r3, [pc, #308]	@ (80048b0 <xTaskIncrementTick+0x14c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3301      	adds	r3, #1
 800477e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004780:	4a4b      	ldr	r2, [pc, #300]	@ (80048b0 <xTaskIncrementTick+0x14c>)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d121      	bne.n	80047d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800478c:	4b49      	ldr	r3, [pc, #292]	@ (80048b4 <xTaskIncrementTick+0x150>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	e7fd      	b.n	80047aa <xTaskIncrementTick+0x46>
 80047ae:	4b41      	ldr	r3, [pc, #260]	@ (80048b4 <xTaskIncrementTick+0x150>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	4b40      	ldr	r3, [pc, #256]	@ (80048b8 <xTaskIncrementTick+0x154>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3e      	ldr	r2, [pc, #248]	@ (80048b4 <xTaskIncrementTick+0x150>)
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	4a3e      	ldr	r2, [pc, #248]	@ (80048b8 <xTaskIncrementTick+0x154>)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	4b3e      	ldr	r3, [pc, #248]	@ (80048bc <xTaskIncrementTick+0x158>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3301      	adds	r3, #1
 80047c8:	4a3c      	ldr	r2, [pc, #240]	@ (80048bc <xTaskIncrementTick+0x158>)
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	f000 f8e0 	bl	8004990 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047d0:	4b3b      	ldr	r3, [pc, #236]	@ (80048c0 <xTaskIncrementTick+0x15c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d348      	bcc.n	800486c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047da:	4b36      	ldr	r3, [pc, #216]	@ (80048b4 <xTaskIncrementTick+0x150>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d104      	bne.n	80047ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e4:	4b36      	ldr	r3, [pc, #216]	@ (80048c0 <xTaskIncrementTick+0x15c>)
 80047e6:	f04f 32ff 	mov.w	r2, #4294967295
 80047ea:	601a      	str	r2, [r3, #0]
					break;
 80047ec:	e03e      	b.n	800486c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ee:	4b31      	ldr	r3, [pc, #196]	@ (80048b4 <xTaskIncrementTick+0x150>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	429a      	cmp	r2, r3
 8004804:	d203      	bcs.n	800480e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004806:	4a2e      	ldr	r2, [pc, #184]	@ (80048c0 <xTaskIncrementTick+0x15c>)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800480c:	e02e      	b.n	800486c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	3304      	adds	r3, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff ff7b 	bl	800470e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	3318      	adds	r3, #24
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff ff72 	bl	800470e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482e:	2201      	movs	r2, #1
 8004830:	409a      	lsls	r2, r3
 8004832:	4b24      	ldr	r3, [pc, #144]	@ (80048c4 <xTaskIncrementTick+0x160>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	4a22      	ldr	r2, [pc, #136]	@ (80048c4 <xTaskIncrementTick+0x160>)
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4a1f      	ldr	r2, [pc, #124]	@ (80048c8 <xTaskIncrementTick+0x164>)
 800484a:	441a      	add	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	3304      	adds	r3, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f7ff ff37 	bl	80046c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485c:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <xTaskIncrementTick+0x168>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004862:	429a      	cmp	r2, r3
 8004864:	d3b9      	bcc.n	80047da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004866:	2301      	movs	r3, #1
 8004868:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800486a:	e7b6      	b.n	80047da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800486c:	4b17      	ldr	r3, [pc, #92]	@ (80048cc <xTaskIncrementTick+0x168>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004872:	4915      	ldr	r1, [pc, #84]	@ (80048c8 <xTaskIncrementTick+0x164>)
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d901      	bls.n	8004888 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004884:	2301      	movs	r3, #1
 8004886:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004888:	4b11      	ldr	r3, [pc, #68]	@ (80048d0 <xTaskIncrementTick+0x16c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	e004      	b.n	80048a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004896:	4b0f      	ldr	r3, [pc, #60]	@ (80048d4 <xTaskIncrementTick+0x170>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3301      	adds	r3, #1
 800489c:	4a0d      	ldr	r2, [pc, #52]	@ (80048d4 <xTaskIncrementTick+0x170>)
 800489e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80048a0:	697b      	ldr	r3, [r7, #20]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	200005d4 	.word	0x200005d4
 80048b0:	200005bc 	.word	0x200005bc
 80048b4:	200005b4 	.word	0x200005b4
 80048b8:	200005b8 	.word	0x200005b8
 80048bc:	200005cc 	.word	0x200005cc
 80048c0:	200005d0 	.word	0x200005d0
 80048c4:	200005c0 	.word	0x200005c0
 80048c8:	20000528 	.word	0x20000528
 80048cc:	20000524 	.word	0x20000524
 80048d0:	200005c8 	.word	0x200005c8
 80048d4:	200005c4 	.word	0x200005c4

080048d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048de:	4b27      	ldr	r3, [pc, #156]	@ (800497c <vTaskSwitchContext+0xa4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048e6:	4b26      	ldr	r3, [pc, #152]	@ (8004980 <vTaskSwitchContext+0xa8>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048ec:	e040      	b.n	8004970 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80048ee:	4b24      	ldr	r3, [pc, #144]	@ (8004980 <vTaskSwitchContext+0xa8>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f4:	4b23      	ldr	r3, [pc, #140]	@ (8004984 <vTaskSwitchContext+0xac>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	fab3 f383 	clz	r3, r3
 8004900:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004902:	7afb      	ldrb	r3, [r7, #11]
 8004904:	f1c3 031f 	rsb	r3, r3, #31
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	491f      	ldr	r1, [pc, #124]	@ (8004988 <vTaskSwitchContext+0xb0>)
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10b      	bne.n	8004936 <vTaskSwitchContext+0x5e>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	607b      	str	r3, [r7, #4]
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	e7fd      	b.n	8004932 <vTaskSwitchContext+0x5a>
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4a11      	ldr	r2, [pc, #68]	@ (8004988 <vTaskSwitchContext+0xb0>)
 8004942:	4413      	add	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	605a      	str	r2, [r3, #4]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	3308      	adds	r3, #8
 8004958:	429a      	cmp	r2, r3
 800495a:	d104      	bne.n	8004966 <vTaskSwitchContext+0x8e>
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4a07      	ldr	r2, [pc, #28]	@ (800498c <vTaskSwitchContext+0xb4>)
 800496e:	6013      	str	r3, [r2, #0]
}
 8004970:	bf00      	nop
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	200005d4 	.word	0x200005d4
 8004980:	200005c8 	.word	0x200005c8
 8004984:	200005c0 	.word	0x200005c0
 8004988:	20000528 	.word	0x20000528
 800498c:	20000524 	.word	0x20000524

08004990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004996:	4b0c      	ldr	r3, [pc, #48]	@ (80049c8 <prvResetNextTaskUnblockTime+0x38>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d104      	bne.n	80049aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049a0:	4b0a      	ldr	r3, [pc, #40]	@ (80049cc <prvResetNextTaskUnblockTime+0x3c>)
 80049a2:	f04f 32ff 	mov.w	r2, #4294967295
 80049a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049a8:	e008      	b.n	80049bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049aa:	4b07      	ldr	r3, [pc, #28]	@ (80049c8 <prvResetNextTaskUnblockTime+0x38>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4a04      	ldr	r2, [pc, #16]	@ (80049cc <prvResetNextTaskUnblockTime+0x3c>)
 80049ba:	6013      	str	r3, [r2, #0]
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	200005b4 	.word	0x200005b4
 80049cc:	200005d0 	.word	0x200005d0

080049d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049d0:	4b07      	ldr	r3, [pc, #28]	@ (80049f0 <pxCurrentTCBConst2>)
 80049d2:	6819      	ldr	r1, [r3, #0]
 80049d4:	6808      	ldr	r0, [r1, #0]
 80049d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049da:	f380 8809 	msr	PSP, r0
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f04f 0000 	mov.w	r0, #0
 80049e6:	f380 8811 	msr	BASEPRI, r0
 80049ea:	4770      	bx	lr
 80049ec:	f3af 8000 	nop.w

080049f0 <pxCurrentTCBConst2>:
 80049f0:	20000524 	.word	0x20000524
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
	...

08004a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a00:	f3ef 8009 	mrs	r0, PSP
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	4b15      	ldr	r3, [pc, #84]	@ (8004a60 <pxCurrentTCBConst>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	f01e 0f10 	tst.w	lr, #16
 8004a10:	bf08      	it	eq
 8004a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a1a:	6010      	str	r0, [r2, #0]
 8004a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004a24:	f380 8811 	msr	BASEPRI, r0
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f7ff ff52 	bl	80048d8 <vTaskSwitchContext>
 8004a34:	f04f 0000 	mov.w	r0, #0
 8004a38:	f380 8811 	msr	BASEPRI, r0
 8004a3c:	bc09      	pop	{r0, r3}
 8004a3e:	6819      	ldr	r1, [r3, #0]
 8004a40:	6808      	ldr	r0, [r1, #0]
 8004a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a46:	f01e 0f10 	tst.w	lr, #16
 8004a4a:	bf08      	it	eq
 8004a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a50:	f380 8809 	msr	PSP, r0
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	f3af 8000 	nop.w

08004a60 <pxCurrentTCBConst>:
 8004a60:	20000524 	.word	0x20000524
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop

08004a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	607b      	str	r3, [r7, #4]
}
 8004a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a82:	f7ff fe6f 	bl	8004764 <xTaskIncrementTick>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a8c:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <SysTick_Handler+0x40>)
 8004a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	2300      	movs	r3, #0
 8004a96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	e000ed04 	.word	0xe000ed04

08004aac <std>:
 8004aac:	2300      	movs	r3, #0
 8004aae:	b510      	push	{r4, lr}
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aba:	6083      	str	r3, [r0, #8]
 8004abc:	8181      	strh	r1, [r0, #12]
 8004abe:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ac0:	81c2      	strh	r2, [r0, #14]
 8004ac2:	6183      	str	r3, [r0, #24]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	2208      	movs	r2, #8
 8004ac8:	305c      	adds	r0, #92	@ 0x5c
 8004aca:	f000 fa2d 	bl	8004f28 <memset>
 8004ace:	4b0d      	ldr	r3, [pc, #52]	@ (8004b04 <std+0x58>)
 8004ad0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b08 <std+0x5c>)
 8004ad4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b0c <std+0x60>)
 8004ad8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ada:	4b0d      	ldr	r3, [pc, #52]	@ (8004b10 <std+0x64>)
 8004adc:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ade:	4b0d      	ldr	r3, [pc, #52]	@ (8004b14 <std+0x68>)
 8004ae0:	6224      	str	r4, [r4, #32]
 8004ae2:	429c      	cmp	r4, r3
 8004ae4:	d006      	beq.n	8004af4 <std+0x48>
 8004ae6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004aea:	4294      	cmp	r4, r2
 8004aec:	d002      	beq.n	8004af4 <std+0x48>
 8004aee:	33d0      	adds	r3, #208	@ 0xd0
 8004af0:	429c      	cmp	r4, r3
 8004af2:	d105      	bne.n	8004b00 <std+0x54>
 8004af4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004afc:	f000 ba8c 	b.w	8005018 <__retarget_lock_init_recursive>
 8004b00:	bd10      	pop	{r4, pc}
 8004b02:	bf00      	nop
 8004b04:	08004d79 	.word	0x08004d79
 8004b08:	08004d9b 	.word	0x08004d9b
 8004b0c:	08004dd3 	.word	0x08004dd3
 8004b10:	08004df7 	.word	0x08004df7
 8004b14:	200005d8 	.word	0x200005d8

08004b18 <stdio_exit_handler>:
 8004b18:	4a02      	ldr	r2, [pc, #8]	@ (8004b24 <stdio_exit_handler+0xc>)
 8004b1a:	4903      	ldr	r1, [pc, #12]	@ (8004b28 <stdio_exit_handler+0x10>)
 8004b1c:	4803      	ldr	r0, [pc, #12]	@ (8004b2c <stdio_exit_handler+0x14>)
 8004b1e:	f000 b869 	b.w	8004bf4 <_fwalk_sglue>
 8004b22:	bf00      	nop
 8004b24:	2000000c 	.word	0x2000000c
 8004b28:	08005b85 	.word	0x08005b85
 8004b2c:	2000001c 	.word	0x2000001c

08004b30 <cleanup_stdio>:
 8004b30:	6841      	ldr	r1, [r0, #4]
 8004b32:	4b0c      	ldr	r3, [pc, #48]	@ (8004b64 <cleanup_stdio+0x34>)
 8004b34:	4299      	cmp	r1, r3
 8004b36:	b510      	push	{r4, lr}
 8004b38:	4604      	mov	r4, r0
 8004b3a:	d001      	beq.n	8004b40 <cleanup_stdio+0x10>
 8004b3c:	f001 f822 	bl	8005b84 <_fflush_r>
 8004b40:	68a1      	ldr	r1, [r4, #8]
 8004b42:	4b09      	ldr	r3, [pc, #36]	@ (8004b68 <cleanup_stdio+0x38>)
 8004b44:	4299      	cmp	r1, r3
 8004b46:	d002      	beq.n	8004b4e <cleanup_stdio+0x1e>
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f001 f81b 	bl	8005b84 <_fflush_r>
 8004b4e:	68e1      	ldr	r1, [r4, #12]
 8004b50:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <cleanup_stdio+0x3c>)
 8004b52:	4299      	cmp	r1, r3
 8004b54:	d004      	beq.n	8004b60 <cleanup_stdio+0x30>
 8004b56:	4620      	mov	r0, r4
 8004b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b5c:	f001 b812 	b.w	8005b84 <_fflush_r>
 8004b60:	bd10      	pop	{r4, pc}
 8004b62:	bf00      	nop
 8004b64:	200005d8 	.word	0x200005d8
 8004b68:	20000640 	.word	0x20000640
 8004b6c:	200006a8 	.word	0x200006a8

08004b70 <global_stdio_init.part.0>:
 8004b70:	b510      	push	{r4, lr}
 8004b72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba0 <global_stdio_init.part.0+0x30>)
 8004b74:	4c0b      	ldr	r4, [pc, #44]	@ (8004ba4 <global_stdio_init.part.0+0x34>)
 8004b76:	4a0c      	ldr	r2, [pc, #48]	@ (8004ba8 <global_stdio_init.part.0+0x38>)
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2104      	movs	r1, #4
 8004b80:	f7ff ff94 	bl	8004aac <std>
 8004b84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b88:	2201      	movs	r2, #1
 8004b8a:	2109      	movs	r1, #9
 8004b8c:	f7ff ff8e 	bl	8004aac <std>
 8004b90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b94:	2202      	movs	r2, #2
 8004b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b9a:	2112      	movs	r1, #18
 8004b9c:	f7ff bf86 	b.w	8004aac <std>
 8004ba0:	20000710 	.word	0x20000710
 8004ba4:	200005d8 	.word	0x200005d8
 8004ba8:	08004b19 	.word	0x08004b19

08004bac <__sfp_lock_acquire>:
 8004bac:	4801      	ldr	r0, [pc, #4]	@ (8004bb4 <__sfp_lock_acquire+0x8>)
 8004bae:	f000 ba34 	b.w	800501a <__retarget_lock_acquire_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	20000719 	.word	0x20000719

08004bb8 <__sfp_lock_release>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	@ (8004bc0 <__sfp_lock_release+0x8>)
 8004bba:	f000 ba2f 	b.w	800501c <__retarget_lock_release_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	20000719 	.word	0x20000719

08004bc4 <__sinit>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	f7ff fff0 	bl	8004bac <__sfp_lock_acquire>
 8004bcc:	6a23      	ldr	r3, [r4, #32]
 8004bce:	b11b      	cbz	r3, 8004bd8 <__sinit+0x14>
 8004bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd4:	f7ff bff0 	b.w	8004bb8 <__sfp_lock_release>
 8004bd8:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <__sinit+0x28>)
 8004bda:	6223      	str	r3, [r4, #32]
 8004bdc:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <__sinit+0x2c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f5      	bne.n	8004bd0 <__sinit+0xc>
 8004be4:	f7ff ffc4 	bl	8004b70 <global_stdio_init.part.0>
 8004be8:	e7f2      	b.n	8004bd0 <__sinit+0xc>
 8004bea:	bf00      	nop
 8004bec:	08004b31 	.word	0x08004b31
 8004bf0:	20000710 	.word	0x20000710

08004bf4 <_fwalk_sglue>:
 8004bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bf8:	4607      	mov	r7, r0
 8004bfa:	4688      	mov	r8, r1
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	2600      	movs	r6, #0
 8004c00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c04:	f1b9 0901 	subs.w	r9, r9, #1
 8004c08:	d505      	bpl.n	8004c16 <_fwalk_sglue+0x22>
 8004c0a:	6824      	ldr	r4, [r4, #0]
 8004c0c:	2c00      	cmp	r4, #0
 8004c0e:	d1f7      	bne.n	8004c00 <_fwalk_sglue+0xc>
 8004c10:	4630      	mov	r0, r6
 8004c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c16:	89ab      	ldrh	r3, [r5, #12]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d907      	bls.n	8004c2c <_fwalk_sglue+0x38>
 8004c1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c20:	3301      	adds	r3, #1
 8004c22:	d003      	beq.n	8004c2c <_fwalk_sglue+0x38>
 8004c24:	4629      	mov	r1, r5
 8004c26:	4638      	mov	r0, r7
 8004c28:	47c0      	blx	r8
 8004c2a:	4306      	orrs	r6, r0
 8004c2c:	3568      	adds	r5, #104	@ 0x68
 8004c2e:	e7e9      	b.n	8004c04 <_fwalk_sglue+0x10>

08004c30 <iprintf>:
 8004c30:	b40f      	push	{r0, r1, r2, r3}
 8004c32:	b507      	push	{r0, r1, r2, lr}
 8004c34:	4906      	ldr	r1, [pc, #24]	@ (8004c50 <iprintf+0x20>)
 8004c36:	ab04      	add	r3, sp, #16
 8004c38:	6808      	ldr	r0, [r1, #0]
 8004c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c3e:	6881      	ldr	r1, [r0, #8]
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	f000 fc75 	bl	8005530 <_vfiprintf_r>
 8004c46:	b003      	add	sp, #12
 8004c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c4c:	b004      	add	sp, #16
 8004c4e:	4770      	bx	lr
 8004c50:	20000018 	.word	0x20000018

08004c54 <_puts_r>:
 8004c54:	6a03      	ldr	r3, [r0, #32]
 8004c56:	b570      	push	{r4, r5, r6, lr}
 8004c58:	6884      	ldr	r4, [r0, #8]
 8004c5a:	4605      	mov	r5, r0
 8004c5c:	460e      	mov	r6, r1
 8004c5e:	b90b      	cbnz	r3, 8004c64 <_puts_r+0x10>
 8004c60:	f7ff ffb0 	bl	8004bc4 <__sinit>
 8004c64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c66:	07db      	lsls	r3, r3, #31
 8004c68:	d405      	bmi.n	8004c76 <_puts_r+0x22>
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	0598      	lsls	r0, r3, #22
 8004c6e:	d402      	bmi.n	8004c76 <_puts_r+0x22>
 8004c70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c72:	f000 f9d2 	bl	800501a <__retarget_lock_acquire_recursive>
 8004c76:	89a3      	ldrh	r3, [r4, #12]
 8004c78:	0719      	lsls	r1, r3, #28
 8004c7a:	d502      	bpl.n	8004c82 <_puts_r+0x2e>
 8004c7c:	6923      	ldr	r3, [r4, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d135      	bne.n	8004cee <_puts_r+0x9a>
 8004c82:	4621      	mov	r1, r4
 8004c84:	4628      	mov	r0, r5
 8004c86:	f000 f8f9 	bl	8004e7c <__swsetup_r>
 8004c8a:	b380      	cbz	r0, 8004cee <_puts_r+0x9a>
 8004c8c:	f04f 35ff 	mov.w	r5, #4294967295
 8004c90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c92:	07da      	lsls	r2, r3, #31
 8004c94:	d405      	bmi.n	8004ca2 <_puts_r+0x4e>
 8004c96:	89a3      	ldrh	r3, [r4, #12]
 8004c98:	059b      	lsls	r3, r3, #22
 8004c9a:	d402      	bmi.n	8004ca2 <_puts_r+0x4e>
 8004c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c9e:	f000 f9bd 	bl	800501c <__retarget_lock_release_recursive>
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	bd70      	pop	{r4, r5, r6, pc}
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	da04      	bge.n	8004cb4 <_puts_r+0x60>
 8004caa:	69a2      	ldr	r2, [r4, #24]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	dc17      	bgt.n	8004ce0 <_puts_r+0x8c>
 8004cb0:	290a      	cmp	r1, #10
 8004cb2:	d015      	beq.n	8004ce0 <_puts_r+0x8c>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	6022      	str	r2, [r4, #0]
 8004cba:	7019      	strb	r1, [r3, #0]
 8004cbc:	68a3      	ldr	r3, [r4, #8]
 8004cbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	60a3      	str	r3, [r4, #8]
 8004cc6:	2900      	cmp	r1, #0
 8004cc8:	d1ed      	bne.n	8004ca6 <_puts_r+0x52>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	da11      	bge.n	8004cf2 <_puts_r+0x9e>
 8004cce:	4622      	mov	r2, r4
 8004cd0:	210a      	movs	r1, #10
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f000 f893 	bl	8004dfe <__swbuf_r>
 8004cd8:	3001      	adds	r0, #1
 8004cda:	d0d7      	beq.n	8004c8c <_puts_r+0x38>
 8004cdc:	250a      	movs	r5, #10
 8004cde:	e7d7      	b.n	8004c90 <_puts_r+0x3c>
 8004ce0:	4622      	mov	r2, r4
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f000 f88b 	bl	8004dfe <__swbuf_r>
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d1e7      	bne.n	8004cbc <_puts_r+0x68>
 8004cec:	e7ce      	b.n	8004c8c <_puts_r+0x38>
 8004cee:	3e01      	subs	r6, #1
 8004cf0:	e7e4      	b.n	8004cbc <_puts_r+0x68>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	6022      	str	r2, [r4, #0]
 8004cf8:	220a      	movs	r2, #10
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	e7ee      	b.n	8004cdc <_puts_r+0x88>
	...

08004d00 <puts>:
 8004d00:	4b02      	ldr	r3, [pc, #8]	@ (8004d0c <puts+0xc>)
 8004d02:	4601      	mov	r1, r0
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	f7ff bfa5 	b.w	8004c54 <_puts_r>
 8004d0a:	bf00      	nop
 8004d0c:	20000018 	.word	0x20000018

08004d10 <sniprintf>:
 8004d10:	b40c      	push	{r2, r3}
 8004d12:	b530      	push	{r4, r5, lr}
 8004d14:	4b17      	ldr	r3, [pc, #92]	@ (8004d74 <sniprintf+0x64>)
 8004d16:	1e0c      	subs	r4, r1, #0
 8004d18:	681d      	ldr	r5, [r3, #0]
 8004d1a:	b09d      	sub	sp, #116	@ 0x74
 8004d1c:	da08      	bge.n	8004d30 <sniprintf+0x20>
 8004d1e:	238b      	movs	r3, #139	@ 0x8b
 8004d20:	602b      	str	r3, [r5, #0]
 8004d22:	f04f 30ff 	mov.w	r0, #4294967295
 8004d26:	b01d      	add	sp, #116	@ 0x74
 8004d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d2c:	b002      	add	sp, #8
 8004d2e:	4770      	bx	lr
 8004d30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004d34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d38:	bf14      	ite	ne
 8004d3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004d3e:	4623      	moveq	r3, r4
 8004d40:	9304      	str	r3, [sp, #16]
 8004d42:	9307      	str	r3, [sp, #28]
 8004d44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d48:	9002      	str	r0, [sp, #8]
 8004d4a:	9006      	str	r0, [sp, #24]
 8004d4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004d52:	ab21      	add	r3, sp, #132	@ 0x84
 8004d54:	a902      	add	r1, sp, #8
 8004d56:	4628      	mov	r0, r5
 8004d58:	9301      	str	r3, [sp, #4]
 8004d5a:	f000 fac3 	bl	80052e4 <_svfiprintf_r>
 8004d5e:	1c43      	adds	r3, r0, #1
 8004d60:	bfbc      	itt	lt
 8004d62:	238b      	movlt	r3, #139	@ 0x8b
 8004d64:	602b      	strlt	r3, [r5, #0]
 8004d66:	2c00      	cmp	r4, #0
 8004d68:	d0dd      	beq.n	8004d26 <sniprintf+0x16>
 8004d6a:	9b02      	ldr	r3, [sp, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	e7d9      	b.n	8004d26 <sniprintf+0x16>
 8004d72:	bf00      	nop
 8004d74:	20000018 	.word	0x20000018

08004d78 <__sread>:
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d80:	f000 f8fc 	bl	8004f7c <_read_r>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	bfab      	itete	ge
 8004d88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d8c:	181b      	addge	r3, r3, r0
 8004d8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d92:	bfac      	ite	ge
 8004d94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d96:	81a3      	strhlt	r3, [r4, #12]
 8004d98:	bd10      	pop	{r4, pc}

08004d9a <__swrite>:
 8004d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9e:	461f      	mov	r7, r3
 8004da0:	898b      	ldrh	r3, [r1, #12]
 8004da2:	05db      	lsls	r3, r3, #23
 8004da4:	4605      	mov	r5, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	4616      	mov	r6, r2
 8004daa:	d505      	bpl.n	8004db8 <__swrite+0x1e>
 8004dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db0:	2302      	movs	r3, #2
 8004db2:	2200      	movs	r2, #0
 8004db4:	f000 f8d0 	bl	8004f58 <_lseek_r>
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	4632      	mov	r2, r6
 8004dc6:	463b      	mov	r3, r7
 8004dc8:	4628      	mov	r0, r5
 8004dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dce:	f000 b8e7 	b.w	8004fa0 <_write_r>

08004dd2 <__sseek>:
 8004dd2:	b510      	push	{r4, lr}
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dda:	f000 f8bd 	bl	8004f58 <_lseek_r>
 8004dde:	1c43      	adds	r3, r0, #1
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	bf15      	itete	ne
 8004de4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004de6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004dea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004dee:	81a3      	strheq	r3, [r4, #12]
 8004df0:	bf18      	it	ne
 8004df2:	81a3      	strhne	r3, [r4, #12]
 8004df4:	bd10      	pop	{r4, pc}

08004df6 <__sclose>:
 8004df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dfa:	f000 b89d 	b.w	8004f38 <_close_r>

08004dfe <__swbuf_r>:
 8004dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e00:	460e      	mov	r6, r1
 8004e02:	4614      	mov	r4, r2
 8004e04:	4605      	mov	r5, r0
 8004e06:	b118      	cbz	r0, 8004e10 <__swbuf_r+0x12>
 8004e08:	6a03      	ldr	r3, [r0, #32]
 8004e0a:	b90b      	cbnz	r3, 8004e10 <__swbuf_r+0x12>
 8004e0c:	f7ff feda 	bl	8004bc4 <__sinit>
 8004e10:	69a3      	ldr	r3, [r4, #24]
 8004e12:	60a3      	str	r3, [r4, #8]
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	071a      	lsls	r2, r3, #28
 8004e18:	d501      	bpl.n	8004e1e <__swbuf_r+0x20>
 8004e1a:	6923      	ldr	r3, [r4, #16]
 8004e1c:	b943      	cbnz	r3, 8004e30 <__swbuf_r+0x32>
 8004e1e:	4621      	mov	r1, r4
 8004e20:	4628      	mov	r0, r5
 8004e22:	f000 f82b 	bl	8004e7c <__swsetup_r>
 8004e26:	b118      	cbz	r0, 8004e30 <__swbuf_r+0x32>
 8004e28:	f04f 37ff 	mov.w	r7, #4294967295
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	6922      	ldr	r2, [r4, #16]
 8004e34:	1a98      	subs	r0, r3, r2
 8004e36:	6963      	ldr	r3, [r4, #20]
 8004e38:	b2f6      	uxtb	r6, r6
 8004e3a:	4283      	cmp	r3, r0
 8004e3c:	4637      	mov	r7, r6
 8004e3e:	dc05      	bgt.n	8004e4c <__swbuf_r+0x4e>
 8004e40:	4621      	mov	r1, r4
 8004e42:	4628      	mov	r0, r5
 8004e44:	f000 fe9e 	bl	8005b84 <_fflush_r>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d1ed      	bne.n	8004e28 <__swbuf_r+0x2a>
 8004e4c:	68a3      	ldr	r3, [r4, #8]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	60a3      	str	r3, [r4, #8]
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	6022      	str	r2, [r4, #0]
 8004e58:	701e      	strb	r6, [r3, #0]
 8004e5a:	6962      	ldr	r2, [r4, #20]
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d004      	beq.n	8004e6c <__swbuf_r+0x6e>
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	07db      	lsls	r3, r3, #31
 8004e66:	d5e1      	bpl.n	8004e2c <__swbuf_r+0x2e>
 8004e68:	2e0a      	cmp	r6, #10
 8004e6a:	d1df      	bne.n	8004e2c <__swbuf_r+0x2e>
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f000 fe88 	bl	8005b84 <_fflush_r>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d0d9      	beq.n	8004e2c <__swbuf_r+0x2e>
 8004e78:	e7d6      	b.n	8004e28 <__swbuf_r+0x2a>
	...

08004e7c <__swsetup_r>:
 8004e7c:	b538      	push	{r3, r4, r5, lr}
 8004e7e:	4b29      	ldr	r3, [pc, #164]	@ (8004f24 <__swsetup_r+0xa8>)
 8004e80:	4605      	mov	r5, r0
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	460c      	mov	r4, r1
 8004e86:	b118      	cbz	r0, 8004e90 <__swsetup_r+0x14>
 8004e88:	6a03      	ldr	r3, [r0, #32]
 8004e8a:	b90b      	cbnz	r3, 8004e90 <__swsetup_r+0x14>
 8004e8c:	f7ff fe9a 	bl	8004bc4 <__sinit>
 8004e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e94:	0719      	lsls	r1, r3, #28
 8004e96:	d422      	bmi.n	8004ede <__swsetup_r+0x62>
 8004e98:	06da      	lsls	r2, r3, #27
 8004e9a:	d407      	bmi.n	8004eac <__swsetup_r+0x30>
 8004e9c:	2209      	movs	r2, #9
 8004e9e:	602a      	str	r2, [r5, #0]
 8004ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ea4:	81a3      	strh	r3, [r4, #12]
 8004ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eaa:	e033      	b.n	8004f14 <__swsetup_r+0x98>
 8004eac:	0758      	lsls	r0, r3, #29
 8004eae:	d512      	bpl.n	8004ed6 <__swsetup_r+0x5a>
 8004eb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004eb2:	b141      	cbz	r1, 8004ec6 <__swsetup_r+0x4a>
 8004eb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004eb8:	4299      	cmp	r1, r3
 8004eba:	d002      	beq.n	8004ec2 <__swsetup_r+0x46>
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f000 f8bd 	bl	800503c <_free_r>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ecc:	81a3      	strh	r3, [r4, #12]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	6063      	str	r3, [r4, #4]
 8004ed2:	6923      	ldr	r3, [r4, #16]
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	f043 0308 	orr.w	r3, r3, #8
 8004edc:	81a3      	strh	r3, [r4, #12]
 8004ede:	6923      	ldr	r3, [r4, #16]
 8004ee0:	b94b      	cbnz	r3, 8004ef6 <__swsetup_r+0x7a>
 8004ee2:	89a3      	ldrh	r3, [r4, #12]
 8004ee4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eec:	d003      	beq.n	8004ef6 <__swsetup_r+0x7a>
 8004eee:	4621      	mov	r1, r4
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f000 fe95 	bl	8005c20 <__smakebuf_r>
 8004ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004efa:	f013 0201 	ands.w	r2, r3, #1
 8004efe:	d00a      	beq.n	8004f16 <__swsetup_r+0x9a>
 8004f00:	2200      	movs	r2, #0
 8004f02:	60a2      	str	r2, [r4, #8]
 8004f04:	6962      	ldr	r2, [r4, #20]
 8004f06:	4252      	negs	r2, r2
 8004f08:	61a2      	str	r2, [r4, #24]
 8004f0a:	6922      	ldr	r2, [r4, #16]
 8004f0c:	b942      	cbnz	r2, 8004f20 <__swsetup_r+0xa4>
 8004f0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f12:	d1c5      	bne.n	8004ea0 <__swsetup_r+0x24>
 8004f14:	bd38      	pop	{r3, r4, r5, pc}
 8004f16:	0799      	lsls	r1, r3, #30
 8004f18:	bf58      	it	pl
 8004f1a:	6962      	ldrpl	r2, [r4, #20]
 8004f1c:	60a2      	str	r2, [r4, #8]
 8004f1e:	e7f4      	b.n	8004f0a <__swsetup_r+0x8e>
 8004f20:	2000      	movs	r0, #0
 8004f22:	e7f7      	b.n	8004f14 <__swsetup_r+0x98>
 8004f24:	20000018 	.word	0x20000018

08004f28 <memset>:
 8004f28:	4402      	add	r2, r0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d100      	bne.n	8004f32 <memset+0xa>
 8004f30:	4770      	bx	lr
 8004f32:	f803 1b01 	strb.w	r1, [r3], #1
 8004f36:	e7f9      	b.n	8004f2c <memset+0x4>

08004f38 <_close_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4d06      	ldr	r5, [pc, #24]	@ (8004f54 <_close_r+0x1c>)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4604      	mov	r4, r0
 8004f40:	4608      	mov	r0, r1
 8004f42:	602b      	str	r3, [r5, #0]
 8004f44:	f7fb ff7b 	bl	8000e3e <_close>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_close_r+0x1a>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_close_r+0x1a>
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	20000714 	.word	0x20000714

08004f58 <_lseek_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4d07      	ldr	r5, [pc, #28]	@ (8004f78 <_lseek_r+0x20>)
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	4608      	mov	r0, r1
 8004f60:	4611      	mov	r1, r2
 8004f62:	2200      	movs	r2, #0
 8004f64:	602a      	str	r2, [r5, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	f7fb ff90 	bl	8000e8c <_lseek>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_lseek_r+0x1e>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_lseek_r+0x1e>
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	20000714 	.word	0x20000714

08004f7c <_read_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4d07      	ldr	r5, [pc, #28]	@ (8004f9c <_read_r+0x20>)
 8004f80:	4604      	mov	r4, r0
 8004f82:	4608      	mov	r0, r1
 8004f84:	4611      	mov	r1, r2
 8004f86:	2200      	movs	r2, #0
 8004f88:	602a      	str	r2, [r5, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f7fb ff1e 	bl	8000dcc <_read>
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	d102      	bne.n	8004f9a <_read_r+0x1e>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	b103      	cbz	r3, 8004f9a <_read_r+0x1e>
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	20000714 	.word	0x20000714

08004fa0 <_write_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	4d07      	ldr	r5, [pc, #28]	@ (8004fc0 <_write_r+0x20>)
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	4608      	mov	r0, r1
 8004fa8:	4611      	mov	r1, r2
 8004faa:	2200      	movs	r2, #0
 8004fac:	602a      	str	r2, [r5, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f7fb ff29 	bl	8000e06 <_write>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d102      	bne.n	8004fbe <_write_r+0x1e>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	b103      	cbz	r3, 8004fbe <_write_r+0x1e>
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	20000714 	.word	0x20000714

08004fc4 <__errno>:
 8004fc4:	4b01      	ldr	r3, [pc, #4]	@ (8004fcc <__errno+0x8>)
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	20000018 	.word	0x20000018

08004fd0 <__libc_init_array>:
 8004fd0:	b570      	push	{r4, r5, r6, lr}
 8004fd2:	4d0d      	ldr	r5, [pc, #52]	@ (8005008 <__libc_init_array+0x38>)
 8004fd4:	4c0d      	ldr	r4, [pc, #52]	@ (800500c <__libc_init_array+0x3c>)
 8004fd6:	1b64      	subs	r4, r4, r5
 8004fd8:	10a4      	asrs	r4, r4, #2
 8004fda:	2600      	movs	r6, #0
 8004fdc:	42a6      	cmp	r6, r4
 8004fde:	d109      	bne.n	8004ff4 <__libc_init_array+0x24>
 8004fe0:	4d0b      	ldr	r5, [pc, #44]	@ (8005010 <__libc_init_array+0x40>)
 8004fe2:	4c0c      	ldr	r4, [pc, #48]	@ (8005014 <__libc_init_array+0x44>)
 8004fe4:	f000 feda 	bl	8005d9c <_init>
 8004fe8:	1b64      	subs	r4, r4, r5
 8004fea:	10a4      	asrs	r4, r4, #2
 8004fec:	2600      	movs	r6, #0
 8004fee:	42a6      	cmp	r6, r4
 8004ff0:	d105      	bne.n	8004ffe <__libc_init_array+0x2e>
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}
 8004ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff8:	4798      	blx	r3
 8004ffa:	3601      	adds	r6, #1
 8004ffc:	e7ee      	b.n	8004fdc <__libc_init_array+0xc>
 8004ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005002:	4798      	blx	r3
 8005004:	3601      	adds	r6, #1
 8005006:	e7f2      	b.n	8004fee <__libc_init_array+0x1e>
 8005008:	08005f94 	.word	0x08005f94
 800500c:	08005f94 	.word	0x08005f94
 8005010:	08005f94 	.word	0x08005f94
 8005014:	08005f98 	.word	0x08005f98

08005018 <__retarget_lock_init_recursive>:
 8005018:	4770      	bx	lr

0800501a <__retarget_lock_acquire_recursive>:
 800501a:	4770      	bx	lr

0800501c <__retarget_lock_release_recursive>:
 800501c:	4770      	bx	lr

0800501e <memcpy>:
 800501e:	440a      	add	r2, r1
 8005020:	4291      	cmp	r1, r2
 8005022:	f100 33ff 	add.w	r3, r0, #4294967295
 8005026:	d100      	bne.n	800502a <memcpy+0xc>
 8005028:	4770      	bx	lr
 800502a:	b510      	push	{r4, lr}
 800502c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005030:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005034:	4291      	cmp	r1, r2
 8005036:	d1f9      	bne.n	800502c <memcpy+0xe>
 8005038:	bd10      	pop	{r4, pc}
	...

0800503c <_free_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4605      	mov	r5, r0
 8005040:	2900      	cmp	r1, #0
 8005042:	d041      	beq.n	80050c8 <_free_r+0x8c>
 8005044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005048:	1f0c      	subs	r4, r1, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	bfb8      	it	lt
 800504e:	18e4      	addlt	r4, r4, r3
 8005050:	f000 f8e0 	bl	8005214 <__malloc_lock>
 8005054:	4a1d      	ldr	r2, [pc, #116]	@ (80050cc <_free_r+0x90>)
 8005056:	6813      	ldr	r3, [r2, #0]
 8005058:	b933      	cbnz	r3, 8005068 <_free_r+0x2c>
 800505a:	6063      	str	r3, [r4, #4]
 800505c:	6014      	str	r4, [r2, #0]
 800505e:	4628      	mov	r0, r5
 8005060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005064:	f000 b8dc 	b.w	8005220 <__malloc_unlock>
 8005068:	42a3      	cmp	r3, r4
 800506a:	d908      	bls.n	800507e <_free_r+0x42>
 800506c:	6820      	ldr	r0, [r4, #0]
 800506e:	1821      	adds	r1, r4, r0
 8005070:	428b      	cmp	r3, r1
 8005072:	bf01      	itttt	eq
 8005074:	6819      	ldreq	r1, [r3, #0]
 8005076:	685b      	ldreq	r3, [r3, #4]
 8005078:	1809      	addeq	r1, r1, r0
 800507a:	6021      	streq	r1, [r4, #0]
 800507c:	e7ed      	b.n	800505a <_free_r+0x1e>
 800507e:	461a      	mov	r2, r3
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	b10b      	cbz	r3, 8005088 <_free_r+0x4c>
 8005084:	42a3      	cmp	r3, r4
 8005086:	d9fa      	bls.n	800507e <_free_r+0x42>
 8005088:	6811      	ldr	r1, [r2, #0]
 800508a:	1850      	adds	r0, r2, r1
 800508c:	42a0      	cmp	r0, r4
 800508e:	d10b      	bne.n	80050a8 <_free_r+0x6c>
 8005090:	6820      	ldr	r0, [r4, #0]
 8005092:	4401      	add	r1, r0
 8005094:	1850      	adds	r0, r2, r1
 8005096:	4283      	cmp	r3, r0
 8005098:	6011      	str	r1, [r2, #0]
 800509a:	d1e0      	bne.n	800505e <_free_r+0x22>
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	6053      	str	r3, [r2, #4]
 80050a2:	4408      	add	r0, r1
 80050a4:	6010      	str	r0, [r2, #0]
 80050a6:	e7da      	b.n	800505e <_free_r+0x22>
 80050a8:	d902      	bls.n	80050b0 <_free_r+0x74>
 80050aa:	230c      	movs	r3, #12
 80050ac:	602b      	str	r3, [r5, #0]
 80050ae:	e7d6      	b.n	800505e <_free_r+0x22>
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	1821      	adds	r1, r4, r0
 80050b4:	428b      	cmp	r3, r1
 80050b6:	bf04      	itt	eq
 80050b8:	6819      	ldreq	r1, [r3, #0]
 80050ba:	685b      	ldreq	r3, [r3, #4]
 80050bc:	6063      	str	r3, [r4, #4]
 80050be:	bf04      	itt	eq
 80050c0:	1809      	addeq	r1, r1, r0
 80050c2:	6021      	streq	r1, [r4, #0]
 80050c4:	6054      	str	r4, [r2, #4]
 80050c6:	e7ca      	b.n	800505e <_free_r+0x22>
 80050c8:	bd38      	pop	{r3, r4, r5, pc}
 80050ca:	bf00      	nop
 80050cc:	20000720 	.word	0x20000720

080050d0 <sbrk_aligned>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005110 <sbrk_aligned+0x40>)
 80050d4:	460c      	mov	r4, r1
 80050d6:	6831      	ldr	r1, [r6, #0]
 80050d8:	4605      	mov	r5, r0
 80050da:	b911      	cbnz	r1, 80050e2 <sbrk_aligned+0x12>
 80050dc:	f000 fe18 	bl	8005d10 <_sbrk_r>
 80050e0:	6030      	str	r0, [r6, #0]
 80050e2:	4621      	mov	r1, r4
 80050e4:	4628      	mov	r0, r5
 80050e6:	f000 fe13 	bl	8005d10 <_sbrk_r>
 80050ea:	1c43      	adds	r3, r0, #1
 80050ec:	d103      	bne.n	80050f6 <sbrk_aligned+0x26>
 80050ee:	f04f 34ff 	mov.w	r4, #4294967295
 80050f2:	4620      	mov	r0, r4
 80050f4:	bd70      	pop	{r4, r5, r6, pc}
 80050f6:	1cc4      	adds	r4, r0, #3
 80050f8:	f024 0403 	bic.w	r4, r4, #3
 80050fc:	42a0      	cmp	r0, r4
 80050fe:	d0f8      	beq.n	80050f2 <sbrk_aligned+0x22>
 8005100:	1a21      	subs	r1, r4, r0
 8005102:	4628      	mov	r0, r5
 8005104:	f000 fe04 	bl	8005d10 <_sbrk_r>
 8005108:	3001      	adds	r0, #1
 800510a:	d1f2      	bne.n	80050f2 <sbrk_aligned+0x22>
 800510c:	e7ef      	b.n	80050ee <sbrk_aligned+0x1e>
 800510e:	bf00      	nop
 8005110:	2000071c 	.word	0x2000071c

08005114 <_malloc_r>:
 8005114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005118:	1ccd      	adds	r5, r1, #3
 800511a:	f025 0503 	bic.w	r5, r5, #3
 800511e:	3508      	adds	r5, #8
 8005120:	2d0c      	cmp	r5, #12
 8005122:	bf38      	it	cc
 8005124:	250c      	movcc	r5, #12
 8005126:	2d00      	cmp	r5, #0
 8005128:	4606      	mov	r6, r0
 800512a:	db01      	blt.n	8005130 <_malloc_r+0x1c>
 800512c:	42a9      	cmp	r1, r5
 800512e:	d904      	bls.n	800513a <_malloc_r+0x26>
 8005130:	230c      	movs	r3, #12
 8005132:	6033      	str	r3, [r6, #0]
 8005134:	2000      	movs	r0, #0
 8005136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800513a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005210 <_malloc_r+0xfc>
 800513e:	f000 f869 	bl	8005214 <__malloc_lock>
 8005142:	f8d8 3000 	ldr.w	r3, [r8]
 8005146:	461c      	mov	r4, r3
 8005148:	bb44      	cbnz	r4, 800519c <_malloc_r+0x88>
 800514a:	4629      	mov	r1, r5
 800514c:	4630      	mov	r0, r6
 800514e:	f7ff ffbf 	bl	80050d0 <sbrk_aligned>
 8005152:	1c43      	adds	r3, r0, #1
 8005154:	4604      	mov	r4, r0
 8005156:	d158      	bne.n	800520a <_malloc_r+0xf6>
 8005158:	f8d8 4000 	ldr.w	r4, [r8]
 800515c:	4627      	mov	r7, r4
 800515e:	2f00      	cmp	r7, #0
 8005160:	d143      	bne.n	80051ea <_malloc_r+0xd6>
 8005162:	2c00      	cmp	r4, #0
 8005164:	d04b      	beq.n	80051fe <_malloc_r+0xea>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	4639      	mov	r1, r7
 800516a:	4630      	mov	r0, r6
 800516c:	eb04 0903 	add.w	r9, r4, r3
 8005170:	f000 fdce 	bl	8005d10 <_sbrk_r>
 8005174:	4581      	cmp	r9, r0
 8005176:	d142      	bne.n	80051fe <_malloc_r+0xea>
 8005178:	6821      	ldr	r1, [r4, #0]
 800517a:	1a6d      	subs	r5, r5, r1
 800517c:	4629      	mov	r1, r5
 800517e:	4630      	mov	r0, r6
 8005180:	f7ff ffa6 	bl	80050d0 <sbrk_aligned>
 8005184:	3001      	adds	r0, #1
 8005186:	d03a      	beq.n	80051fe <_malloc_r+0xea>
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	442b      	add	r3, r5
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	f8d8 3000 	ldr.w	r3, [r8]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	bb62      	cbnz	r2, 80051f0 <_malloc_r+0xdc>
 8005196:	f8c8 7000 	str.w	r7, [r8]
 800519a:	e00f      	b.n	80051bc <_malloc_r+0xa8>
 800519c:	6822      	ldr	r2, [r4, #0]
 800519e:	1b52      	subs	r2, r2, r5
 80051a0:	d420      	bmi.n	80051e4 <_malloc_r+0xd0>
 80051a2:	2a0b      	cmp	r2, #11
 80051a4:	d917      	bls.n	80051d6 <_malloc_r+0xc2>
 80051a6:	1961      	adds	r1, r4, r5
 80051a8:	42a3      	cmp	r3, r4
 80051aa:	6025      	str	r5, [r4, #0]
 80051ac:	bf18      	it	ne
 80051ae:	6059      	strne	r1, [r3, #4]
 80051b0:	6863      	ldr	r3, [r4, #4]
 80051b2:	bf08      	it	eq
 80051b4:	f8c8 1000 	streq.w	r1, [r8]
 80051b8:	5162      	str	r2, [r4, r5]
 80051ba:	604b      	str	r3, [r1, #4]
 80051bc:	4630      	mov	r0, r6
 80051be:	f000 f82f 	bl	8005220 <__malloc_unlock>
 80051c2:	f104 000b 	add.w	r0, r4, #11
 80051c6:	1d23      	adds	r3, r4, #4
 80051c8:	f020 0007 	bic.w	r0, r0, #7
 80051cc:	1ac2      	subs	r2, r0, r3
 80051ce:	bf1c      	itt	ne
 80051d0:	1a1b      	subne	r3, r3, r0
 80051d2:	50a3      	strne	r3, [r4, r2]
 80051d4:	e7af      	b.n	8005136 <_malloc_r+0x22>
 80051d6:	6862      	ldr	r2, [r4, #4]
 80051d8:	42a3      	cmp	r3, r4
 80051da:	bf0c      	ite	eq
 80051dc:	f8c8 2000 	streq.w	r2, [r8]
 80051e0:	605a      	strne	r2, [r3, #4]
 80051e2:	e7eb      	b.n	80051bc <_malloc_r+0xa8>
 80051e4:	4623      	mov	r3, r4
 80051e6:	6864      	ldr	r4, [r4, #4]
 80051e8:	e7ae      	b.n	8005148 <_malloc_r+0x34>
 80051ea:	463c      	mov	r4, r7
 80051ec:	687f      	ldr	r7, [r7, #4]
 80051ee:	e7b6      	b.n	800515e <_malloc_r+0x4a>
 80051f0:	461a      	mov	r2, r3
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	42a3      	cmp	r3, r4
 80051f6:	d1fb      	bne.n	80051f0 <_malloc_r+0xdc>
 80051f8:	2300      	movs	r3, #0
 80051fa:	6053      	str	r3, [r2, #4]
 80051fc:	e7de      	b.n	80051bc <_malloc_r+0xa8>
 80051fe:	230c      	movs	r3, #12
 8005200:	6033      	str	r3, [r6, #0]
 8005202:	4630      	mov	r0, r6
 8005204:	f000 f80c 	bl	8005220 <__malloc_unlock>
 8005208:	e794      	b.n	8005134 <_malloc_r+0x20>
 800520a:	6005      	str	r5, [r0, #0]
 800520c:	e7d6      	b.n	80051bc <_malloc_r+0xa8>
 800520e:	bf00      	nop
 8005210:	20000720 	.word	0x20000720

08005214 <__malloc_lock>:
 8005214:	4801      	ldr	r0, [pc, #4]	@ (800521c <__malloc_lock+0x8>)
 8005216:	f7ff bf00 	b.w	800501a <__retarget_lock_acquire_recursive>
 800521a:	bf00      	nop
 800521c:	20000718 	.word	0x20000718

08005220 <__malloc_unlock>:
 8005220:	4801      	ldr	r0, [pc, #4]	@ (8005228 <__malloc_unlock+0x8>)
 8005222:	f7ff befb 	b.w	800501c <__retarget_lock_release_recursive>
 8005226:	bf00      	nop
 8005228:	20000718 	.word	0x20000718

0800522c <__ssputs_r>:
 800522c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005230:	688e      	ldr	r6, [r1, #8]
 8005232:	461f      	mov	r7, r3
 8005234:	42be      	cmp	r6, r7
 8005236:	680b      	ldr	r3, [r1, #0]
 8005238:	4682      	mov	sl, r0
 800523a:	460c      	mov	r4, r1
 800523c:	4690      	mov	r8, r2
 800523e:	d82d      	bhi.n	800529c <__ssputs_r+0x70>
 8005240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005244:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005248:	d026      	beq.n	8005298 <__ssputs_r+0x6c>
 800524a:	6965      	ldr	r5, [r4, #20]
 800524c:	6909      	ldr	r1, [r1, #16]
 800524e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005252:	eba3 0901 	sub.w	r9, r3, r1
 8005256:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800525a:	1c7b      	adds	r3, r7, #1
 800525c:	444b      	add	r3, r9
 800525e:	106d      	asrs	r5, r5, #1
 8005260:	429d      	cmp	r5, r3
 8005262:	bf38      	it	cc
 8005264:	461d      	movcc	r5, r3
 8005266:	0553      	lsls	r3, r2, #21
 8005268:	d527      	bpl.n	80052ba <__ssputs_r+0x8e>
 800526a:	4629      	mov	r1, r5
 800526c:	f7ff ff52 	bl	8005114 <_malloc_r>
 8005270:	4606      	mov	r6, r0
 8005272:	b360      	cbz	r0, 80052ce <__ssputs_r+0xa2>
 8005274:	6921      	ldr	r1, [r4, #16]
 8005276:	464a      	mov	r2, r9
 8005278:	f7ff fed1 	bl	800501e <memcpy>
 800527c:	89a3      	ldrh	r3, [r4, #12]
 800527e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005286:	81a3      	strh	r3, [r4, #12]
 8005288:	6126      	str	r6, [r4, #16]
 800528a:	6165      	str	r5, [r4, #20]
 800528c:	444e      	add	r6, r9
 800528e:	eba5 0509 	sub.w	r5, r5, r9
 8005292:	6026      	str	r6, [r4, #0]
 8005294:	60a5      	str	r5, [r4, #8]
 8005296:	463e      	mov	r6, r7
 8005298:	42be      	cmp	r6, r7
 800529a:	d900      	bls.n	800529e <__ssputs_r+0x72>
 800529c:	463e      	mov	r6, r7
 800529e:	6820      	ldr	r0, [r4, #0]
 80052a0:	4632      	mov	r2, r6
 80052a2:	4641      	mov	r1, r8
 80052a4:	f000 fcf8 	bl	8005c98 <memmove>
 80052a8:	68a3      	ldr	r3, [r4, #8]
 80052aa:	1b9b      	subs	r3, r3, r6
 80052ac:	60a3      	str	r3, [r4, #8]
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	4433      	add	r3, r6
 80052b2:	6023      	str	r3, [r4, #0]
 80052b4:	2000      	movs	r0, #0
 80052b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ba:	462a      	mov	r2, r5
 80052bc:	f000 fd38 	bl	8005d30 <_realloc_r>
 80052c0:	4606      	mov	r6, r0
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d1e0      	bne.n	8005288 <__ssputs_r+0x5c>
 80052c6:	6921      	ldr	r1, [r4, #16]
 80052c8:	4650      	mov	r0, sl
 80052ca:	f7ff feb7 	bl	800503c <_free_r>
 80052ce:	230c      	movs	r3, #12
 80052d0:	f8ca 3000 	str.w	r3, [sl]
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052da:	81a3      	strh	r3, [r4, #12]
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295
 80052e0:	e7e9      	b.n	80052b6 <__ssputs_r+0x8a>
	...

080052e4 <_svfiprintf_r>:
 80052e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e8:	4698      	mov	r8, r3
 80052ea:	898b      	ldrh	r3, [r1, #12]
 80052ec:	061b      	lsls	r3, r3, #24
 80052ee:	b09d      	sub	sp, #116	@ 0x74
 80052f0:	4607      	mov	r7, r0
 80052f2:	460d      	mov	r5, r1
 80052f4:	4614      	mov	r4, r2
 80052f6:	d510      	bpl.n	800531a <_svfiprintf_r+0x36>
 80052f8:	690b      	ldr	r3, [r1, #16]
 80052fa:	b973      	cbnz	r3, 800531a <_svfiprintf_r+0x36>
 80052fc:	2140      	movs	r1, #64	@ 0x40
 80052fe:	f7ff ff09 	bl	8005114 <_malloc_r>
 8005302:	6028      	str	r0, [r5, #0]
 8005304:	6128      	str	r0, [r5, #16]
 8005306:	b930      	cbnz	r0, 8005316 <_svfiprintf_r+0x32>
 8005308:	230c      	movs	r3, #12
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	f04f 30ff 	mov.w	r0, #4294967295
 8005310:	b01d      	add	sp, #116	@ 0x74
 8005312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005316:	2340      	movs	r3, #64	@ 0x40
 8005318:	616b      	str	r3, [r5, #20]
 800531a:	2300      	movs	r3, #0
 800531c:	9309      	str	r3, [sp, #36]	@ 0x24
 800531e:	2320      	movs	r3, #32
 8005320:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005324:	f8cd 800c 	str.w	r8, [sp, #12]
 8005328:	2330      	movs	r3, #48	@ 0x30
 800532a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80054c8 <_svfiprintf_r+0x1e4>
 800532e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005332:	f04f 0901 	mov.w	r9, #1
 8005336:	4623      	mov	r3, r4
 8005338:	469a      	mov	sl, r3
 800533a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800533e:	b10a      	cbz	r2, 8005344 <_svfiprintf_r+0x60>
 8005340:	2a25      	cmp	r2, #37	@ 0x25
 8005342:	d1f9      	bne.n	8005338 <_svfiprintf_r+0x54>
 8005344:	ebba 0b04 	subs.w	fp, sl, r4
 8005348:	d00b      	beq.n	8005362 <_svfiprintf_r+0x7e>
 800534a:	465b      	mov	r3, fp
 800534c:	4622      	mov	r2, r4
 800534e:	4629      	mov	r1, r5
 8005350:	4638      	mov	r0, r7
 8005352:	f7ff ff6b 	bl	800522c <__ssputs_r>
 8005356:	3001      	adds	r0, #1
 8005358:	f000 80a7 	beq.w	80054aa <_svfiprintf_r+0x1c6>
 800535c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800535e:	445a      	add	r2, fp
 8005360:	9209      	str	r2, [sp, #36]	@ 0x24
 8005362:	f89a 3000 	ldrb.w	r3, [sl]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 809f 	beq.w	80054aa <_svfiprintf_r+0x1c6>
 800536c:	2300      	movs	r3, #0
 800536e:	f04f 32ff 	mov.w	r2, #4294967295
 8005372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005376:	f10a 0a01 	add.w	sl, sl, #1
 800537a:	9304      	str	r3, [sp, #16]
 800537c:	9307      	str	r3, [sp, #28]
 800537e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005382:	931a      	str	r3, [sp, #104]	@ 0x68
 8005384:	4654      	mov	r4, sl
 8005386:	2205      	movs	r2, #5
 8005388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800538c:	484e      	ldr	r0, [pc, #312]	@ (80054c8 <_svfiprintf_r+0x1e4>)
 800538e:	f7fa ff1f 	bl	80001d0 <memchr>
 8005392:	9a04      	ldr	r2, [sp, #16]
 8005394:	b9d8      	cbnz	r0, 80053ce <_svfiprintf_r+0xea>
 8005396:	06d0      	lsls	r0, r2, #27
 8005398:	bf44      	itt	mi
 800539a:	2320      	movmi	r3, #32
 800539c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053a0:	0711      	lsls	r1, r2, #28
 80053a2:	bf44      	itt	mi
 80053a4:	232b      	movmi	r3, #43	@ 0x2b
 80053a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053aa:	f89a 3000 	ldrb.w	r3, [sl]
 80053ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80053b0:	d015      	beq.n	80053de <_svfiprintf_r+0xfa>
 80053b2:	9a07      	ldr	r2, [sp, #28]
 80053b4:	4654      	mov	r4, sl
 80053b6:	2000      	movs	r0, #0
 80053b8:	f04f 0c0a 	mov.w	ip, #10
 80053bc:	4621      	mov	r1, r4
 80053be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053c2:	3b30      	subs	r3, #48	@ 0x30
 80053c4:	2b09      	cmp	r3, #9
 80053c6:	d94b      	bls.n	8005460 <_svfiprintf_r+0x17c>
 80053c8:	b1b0      	cbz	r0, 80053f8 <_svfiprintf_r+0x114>
 80053ca:	9207      	str	r2, [sp, #28]
 80053cc:	e014      	b.n	80053f8 <_svfiprintf_r+0x114>
 80053ce:	eba0 0308 	sub.w	r3, r0, r8
 80053d2:	fa09 f303 	lsl.w	r3, r9, r3
 80053d6:	4313      	orrs	r3, r2
 80053d8:	9304      	str	r3, [sp, #16]
 80053da:	46a2      	mov	sl, r4
 80053dc:	e7d2      	b.n	8005384 <_svfiprintf_r+0xa0>
 80053de:	9b03      	ldr	r3, [sp, #12]
 80053e0:	1d19      	adds	r1, r3, #4
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	9103      	str	r1, [sp, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bfbb      	ittet	lt
 80053ea:	425b      	neglt	r3, r3
 80053ec:	f042 0202 	orrlt.w	r2, r2, #2
 80053f0:	9307      	strge	r3, [sp, #28]
 80053f2:	9307      	strlt	r3, [sp, #28]
 80053f4:	bfb8      	it	lt
 80053f6:	9204      	strlt	r2, [sp, #16]
 80053f8:	7823      	ldrb	r3, [r4, #0]
 80053fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80053fc:	d10a      	bne.n	8005414 <_svfiprintf_r+0x130>
 80053fe:	7863      	ldrb	r3, [r4, #1]
 8005400:	2b2a      	cmp	r3, #42	@ 0x2a
 8005402:	d132      	bne.n	800546a <_svfiprintf_r+0x186>
 8005404:	9b03      	ldr	r3, [sp, #12]
 8005406:	1d1a      	adds	r2, r3, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	9203      	str	r2, [sp, #12]
 800540c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005410:	3402      	adds	r4, #2
 8005412:	9305      	str	r3, [sp, #20]
 8005414:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80054d8 <_svfiprintf_r+0x1f4>
 8005418:	7821      	ldrb	r1, [r4, #0]
 800541a:	2203      	movs	r2, #3
 800541c:	4650      	mov	r0, sl
 800541e:	f7fa fed7 	bl	80001d0 <memchr>
 8005422:	b138      	cbz	r0, 8005434 <_svfiprintf_r+0x150>
 8005424:	9b04      	ldr	r3, [sp, #16]
 8005426:	eba0 000a 	sub.w	r0, r0, sl
 800542a:	2240      	movs	r2, #64	@ 0x40
 800542c:	4082      	lsls	r2, r0
 800542e:	4313      	orrs	r3, r2
 8005430:	3401      	adds	r4, #1
 8005432:	9304      	str	r3, [sp, #16]
 8005434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005438:	4824      	ldr	r0, [pc, #144]	@ (80054cc <_svfiprintf_r+0x1e8>)
 800543a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800543e:	2206      	movs	r2, #6
 8005440:	f7fa fec6 	bl	80001d0 <memchr>
 8005444:	2800      	cmp	r0, #0
 8005446:	d036      	beq.n	80054b6 <_svfiprintf_r+0x1d2>
 8005448:	4b21      	ldr	r3, [pc, #132]	@ (80054d0 <_svfiprintf_r+0x1ec>)
 800544a:	bb1b      	cbnz	r3, 8005494 <_svfiprintf_r+0x1b0>
 800544c:	9b03      	ldr	r3, [sp, #12]
 800544e:	3307      	adds	r3, #7
 8005450:	f023 0307 	bic.w	r3, r3, #7
 8005454:	3308      	adds	r3, #8
 8005456:	9303      	str	r3, [sp, #12]
 8005458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800545a:	4433      	add	r3, r6
 800545c:	9309      	str	r3, [sp, #36]	@ 0x24
 800545e:	e76a      	b.n	8005336 <_svfiprintf_r+0x52>
 8005460:	fb0c 3202 	mla	r2, ip, r2, r3
 8005464:	460c      	mov	r4, r1
 8005466:	2001      	movs	r0, #1
 8005468:	e7a8      	b.n	80053bc <_svfiprintf_r+0xd8>
 800546a:	2300      	movs	r3, #0
 800546c:	3401      	adds	r4, #1
 800546e:	9305      	str	r3, [sp, #20]
 8005470:	4619      	mov	r1, r3
 8005472:	f04f 0c0a 	mov.w	ip, #10
 8005476:	4620      	mov	r0, r4
 8005478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800547c:	3a30      	subs	r2, #48	@ 0x30
 800547e:	2a09      	cmp	r2, #9
 8005480:	d903      	bls.n	800548a <_svfiprintf_r+0x1a6>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0c6      	beq.n	8005414 <_svfiprintf_r+0x130>
 8005486:	9105      	str	r1, [sp, #20]
 8005488:	e7c4      	b.n	8005414 <_svfiprintf_r+0x130>
 800548a:	fb0c 2101 	mla	r1, ip, r1, r2
 800548e:	4604      	mov	r4, r0
 8005490:	2301      	movs	r3, #1
 8005492:	e7f0      	b.n	8005476 <_svfiprintf_r+0x192>
 8005494:	ab03      	add	r3, sp, #12
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	462a      	mov	r2, r5
 800549a:	4b0e      	ldr	r3, [pc, #56]	@ (80054d4 <_svfiprintf_r+0x1f0>)
 800549c:	a904      	add	r1, sp, #16
 800549e:	4638      	mov	r0, r7
 80054a0:	f3af 8000 	nop.w
 80054a4:	1c42      	adds	r2, r0, #1
 80054a6:	4606      	mov	r6, r0
 80054a8:	d1d6      	bne.n	8005458 <_svfiprintf_r+0x174>
 80054aa:	89ab      	ldrh	r3, [r5, #12]
 80054ac:	065b      	lsls	r3, r3, #25
 80054ae:	f53f af2d 	bmi.w	800530c <_svfiprintf_r+0x28>
 80054b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054b4:	e72c      	b.n	8005310 <_svfiprintf_r+0x2c>
 80054b6:	ab03      	add	r3, sp, #12
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	462a      	mov	r2, r5
 80054bc:	4b05      	ldr	r3, [pc, #20]	@ (80054d4 <_svfiprintf_r+0x1f0>)
 80054be:	a904      	add	r1, sp, #16
 80054c0:	4638      	mov	r0, r7
 80054c2:	f000 f9bb 	bl	800583c <_printf_i>
 80054c6:	e7ed      	b.n	80054a4 <_svfiprintf_r+0x1c0>
 80054c8:	08005f58 	.word	0x08005f58
 80054cc:	08005f62 	.word	0x08005f62
 80054d0:	00000000 	.word	0x00000000
 80054d4:	0800522d 	.word	0x0800522d
 80054d8:	08005f5e 	.word	0x08005f5e

080054dc <__sfputc_r>:
 80054dc:	6893      	ldr	r3, [r2, #8]
 80054de:	3b01      	subs	r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	b410      	push	{r4}
 80054e4:	6093      	str	r3, [r2, #8]
 80054e6:	da08      	bge.n	80054fa <__sfputc_r+0x1e>
 80054e8:	6994      	ldr	r4, [r2, #24]
 80054ea:	42a3      	cmp	r3, r4
 80054ec:	db01      	blt.n	80054f2 <__sfputc_r+0x16>
 80054ee:	290a      	cmp	r1, #10
 80054f0:	d103      	bne.n	80054fa <__sfputc_r+0x1e>
 80054f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054f6:	f7ff bc82 	b.w	8004dfe <__swbuf_r>
 80054fa:	6813      	ldr	r3, [r2, #0]
 80054fc:	1c58      	adds	r0, r3, #1
 80054fe:	6010      	str	r0, [r2, #0]
 8005500:	7019      	strb	r1, [r3, #0]
 8005502:	4608      	mov	r0, r1
 8005504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005508:	4770      	bx	lr

0800550a <__sfputs_r>:
 800550a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550c:	4606      	mov	r6, r0
 800550e:	460f      	mov	r7, r1
 8005510:	4614      	mov	r4, r2
 8005512:	18d5      	adds	r5, r2, r3
 8005514:	42ac      	cmp	r4, r5
 8005516:	d101      	bne.n	800551c <__sfputs_r+0x12>
 8005518:	2000      	movs	r0, #0
 800551a:	e007      	b.n	800552c <__sfputs_r+0x22>
 800551c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005520:	463a      	mov	r2, r7
 8005522:	4630      	mov	r0, r6
 8005524:	f7ff ffda 	bl	80054dc <__sfputc_r>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d1f3      	bne.n	8005514 <__sfputs_r+0xa>
 800552c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005530 <_vfiprintf_r>:
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	460d      	mov	r5, r1
 8005536:	b09d      	sub	sp, #116	@ 0x74
 8005538:	4614      	mov	r4, r2
 800553a:	4698      	mov	r8, r3
 800553c:	4606      	mov	r6, r0
 800553e:	b118      	cbz	r0, 8005548 <_vfiprintf_r+0x18>
 8005540:	6a03      	ldr	r3, [r0, #32]
 8005542:	b90b      	cbnz	r3, 8005548 <_vfiprintf_r+0x18>
 8005544:	f7ff fb3e 	bl	8004bc4 <__sinit>
 8005548:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800554a:	07d9      	lsls	r1, r3, #31
 800554c:	d405      	bmi.n	800555a <_vfiprintf_r+0x2a>
 800554e:	89ab      	ldrh	r3, [r5, #12]
 8005550:	059a      	lsls	r2, r3, #22
 8005552:	d402      	bmi.n	800555a <_vfiprintf_r+0x2a>
 8005554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005556:	f7ff fd60 	bl	800501a <__retarget_lock_acquire_recursive>
 800555a:	89ab      	ldrh	r3, [r5, #12]
 800555c:	071b      	lsls	r3, r3, #28
 800555e:	d501      	bpl.n	8005564 <_vfiprintf_r+0x34>
 8005560:	692b      	ldr	r3, [r5, #16]
 8005562:	b99b      	cbnz	r3, 800558c <_vfiprintf_r+0x5c>
 8005564:	4629      	mov	r1, r5
 8005566:	4630      	mov	r0, r6
 8005568:	f7ff fc88 	bl	8004e7c <__swsetup_r>
 800556c:	b170      	cbz	r0, 800558c <_vfiprintf_r+0x5c>
 800556e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005570:	07dc      	lsls	r4, r3, #31
 8005572:	d504      	bpl.n	800557e <_vfiprintf_r+0x4e>
 8005574:	f04f 30ff 	mov.w	r0, #4294967295
 8005578:	b01d      	add	sp, #116	@ 0x74
 800557a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557e:	89ab      	ldrh	r3, [r5, #12]
 8005580:	0598      	lsls	r0, r3, #22
 8005582:	d4f7      	bmi.n	8005574 <_vfiprintf_r+0x44>
 8005584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005586:	f7ff fd49 	bl	800501c <__retarget_lock_release_recursive>
 800558a:	e7f3      	b.n	8005574 <_vfiprintf_r+0x44>
 800558c:	2300      	movs	r3, #0
 800558e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005590:	2320      	movs	r3, #32
 8005592:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005596:	f8cd 800c 	str.w	r8, [sp, #12]
 800559a:	2330      	movs	r3, #48	@ 0x30
 800559c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800574c <_vfiprintf_r+0x21c>
 80055a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055a4:	f04f 0901 	mov.w	r9, #1
 80055a8:	4623      	mov	r3, r4
 80055aa:	469a      	mov	sl, r3
 80055ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055b0:	b10a      	cbz	r2, 80055b6 <_vfiprintf_r+0x86>
 80055b2:	2a25      	cmp	r2, #37	@ 0x25
 80055b4:	d1f9      	bne.n	80055aa <_vfiprintf_r+0x7a>
 80055b6:	ebba 0b04 	subs.w	fp, sl, r4
 80055ba:	d00b      	beq.n	80055d4 <_vfiprintf_r+0xa4>
 80055bc:	465b      	mov	r3, fp
 80055be:	4622      	mov	r2, r4
 80055c0:	4629      	mov	r1, r5
 80055c2:	4630      	mov	r0, r6
 80055c4:	f7ff ffa1 	bl	800550a <__sfputs_r>
 80055c8:	3001      	adds	r0, #1
 80055ca:	f000 80a7 	beq.w	800571c <_vfiprintf_r+0x1ec>
 80055ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055d0:	445a      	add	r2, fp
 80055d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80055d4:	f89a 3000 	ldrb.w	r3, [sl]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 809f 	beq.w	800571c <_vfiprintf_r+0x1ec>
 80055de:	2300      	movs	r3, #0
 80055e0:	f04f 32ff 	mov.w	r2, #4294967295
 80055e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055e8:	f10a 0a01 	add.w	sl, sl, #1
 80055ec:	9304      	str	r3, [sp, #16]
 80055ee:	9307      	str	r3, [sp, #28]
 80055f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80055f6:	4654      	mov	r4, sl
 80055f8:	2205      	movs	r2, #5
 80055fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055fe:	4853      	ldr	r0, [pc, #332]	@ (800574c <_vfiprintf_r+0x21c>)
 8005600:	f7fa fde6 	bl	80001d0 <memchr>
 8005604:	9a04      	ldr	r2, [sp, #16]
 8005606:	b9d8      	cbnz	r0, 8005640 <_vfiprintf_r+0x110>
 8005608:	06d1      	lsls	r1, r2, #27
 800560a:	bf44      	itt	mi
 800560c:	2320      	movmi	r3, #32
 800560e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005612:	0713      	lsls	r3, r2, #28
 8005614:	bf44      	itt	mi
 8005616:	232b      	movmi	r3, #43	@ 0x2b
 8005618:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800561c:	f89a 3000 	ldrb.w	r3, [sl]
 8005620:	2b2a      	cmp	r3, #42	@ 0x2a
 8005622:	d015      	beq.n	8005650 <_vfiprintf_r+0x120>
 8005624:	9a07      	ldr	r2, [sp, #28]
 8005626:	4654      	mov	r4, sl
 8005628:	2000      	movs	r0, #0
 800562a:	f04f 0c0a 	mov.w	ip, #10
 800562e:	4621      	mov	r1, r4
 8005630:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005634:	3b30      	subs	r3, #48	@ 0x30
 8005636:	2b09      	cmp	r3, #9
 8005638:	d94b      	bls.n	80056d2 <_vfiprintf_r+0x1a2>
 800563a:	b1b0      	cbz	r0, 800566a <_vfiprintf_r+0x13a>
 800563c:	9207      	str	r2, [sp, #28]
 800563e:	e014      	b.n	800566a <_vfiprintf_r+0x13a>
 8005640:	eba0 0308 	sub.w	r3, r0, r8
 8005644:	fa09 f303 	lsl.w	r3, r9, r3
 8005648:	4313      	orrs	r3, r2
 800564a:	9304      	str	r3, [sp, #16]
 800564c:	46a2      	mov	sl, r4
 800564e:	e7d2      	b.n	80055f6 <_vfiprintf_r+0xc6>
 8005650:	9b03      	ldr	r3, [sp, #12]
 8005652:	1d19      	adds	r1, r3, #4
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	9103      	str	r1, [sp, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	bfbb      	ittet	lt
 800565c:	425b      	neglt	r3, r3
 800565e:	f042 0202 	orrlt.w	r2, r2, #2
 8005662:	9307      	strge	r3, [sp, #28]
 8005664:	9307      	strlt	r3, [sp, #28]
 8005666:	bfb8      	it	lt
 8005668:	9204      	strlt	r2, [sp, #16]
 800566a:	7823      	ldrb	r3, [r4, #0]
 800566c:	2b2e      	cmp	r3, #46	@ 0x2e
 800566e:	d10a      	bne.n	8005686 <_vfiprintf_r+0x156>
 8005670:	7863      	ldrb	r3, [r4, #1]
 8005672:	2b2a      	cmp	r3, #42	@ 0x2a
 8005674:	d132      	bne.n	80056dc <_vfiprintf_r+0x1ac>
 8005676:	9b03      	ldr	r3, [sp, #12]
 8005678:	1d1a      	adds	r2, r3, #4
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	9203      	str	r2, [sp, #12]
 800567e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005682:	3402      	adds	r4, #2
 8005684:	9305      	str	r3, [sp, #20]
 8005686:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800575c <_vfiprintf_r+0x22c>
 800568a:	7821      	ldrb	r1, [r4, #0]
 800568c:	2203      	movs	r2, #3
 800568e:	4650      	mov	r0, sl
 8005690:	f7fa fd9e 	bl	80001d0 <memchr>
 8005694:	b138      	cbz	r0, 80056a6 <_vfiprintf_r+0x176>
 8005696:	9b04      	ldr	r3, [sp, #16]
 8005698:	eba0 000a 	sub.w	r0, r0, sl
 800569c:	2240      	movs	r2, #64	@ 0x40
 800569e:	4082      	lsls	r2, r0
 80056a0:	4313      	orrs	r3, r2
 80056a2:	3401      	adds	r4, #1
 80056a4:	9304      	str	r3, [sp, #16]
 80056a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056aa:	4829      	ldr	r0, [pc, #164]	@ (8005750 <_vfiprintf_r+0x220>)
 80056ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056b0:	2206      	movs	r2, #6
 80056b2:	f7fa fd8d 	bl	80001d0 <memchr>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d03f      	beq.n	800573a <_vfiprintf_r+0x20a>
 80056ba:	4b26      	ldr	r3, [pc, #152]	@ (8005754 <_vfiprintf_r+0x224>)
 80056bc:	bb1b      	cbnz	r3, 8005706 <_vfiprintf_r+0x1d6>
 80056be:	9b03      	ldr	r3, [sp, #12]
 80056c0:	3307      	adds	r3, #7
 80056c2:	f023 0307 	bic.w	r3, r3, #7
 80056c6:	3308      	adds	r3, #8
 80056c8:	9303      	str	r3, [sp, #12]
 80056ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056cc:	443b      	add	r3, r7
 80056ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80056d0:	e76a      	b.n	80055a8 <_vfiprintf_r+0x78>
 80056d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80056d6:	460c      	mov	r4, r1
 80056d8:	2001      	movs	r0, #1
 80056da:	e7a8      	b.n	800562e <_vfiprintf_r+0xfe>
 80056dc:	2300      	movs	r3, #0
 80056de:	3401      	adds	r4, #1
 80056e0:	9305      	str	r3, [sp, #20]
 80056e2:	4619      	mov	r1, r3
 80056e4:	f04f 0c0a 	mov.w	ip, #10
 80056e8:	4620      	mov	r0, r4
 80056ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056ee:	3a30      	subs	r2, #48	@ 0x30
 80056f0:	2a09      	cmp	r2, #9
 80056f2:	d903      	bls.n	80056fc <_vfiprintf_r+0x1cc>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0c6      	beq.n	8005686 <_vfiprintf_r+0x156>
 80056f8:	9105      	str	r1, [sp, #20]
 80056fa:	e7c4      	b.n	8005686 <_vfiprintf_r+0x156>
 80056fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005700:	4604      	mov	r4, r0
 8005702:	2301      	movs	r3, #1
 8005704:	e7f0      	b.n	80056e8 <_vfiprintf_r+0x1b8>
 8005706:	ab03      	add	r3, sp, #12
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	462a      	mov	r2, r5
 800570c:	4b12      	ldr	r3, [pc, #72]	@ (8005758 <_vfiprintf_r+0x228>)
 800570e:	a904      	add	r1, sp, #16
 8005710:	4630      	mov	r0, r6
 8005712:	f3af 8000 	nop.w
 8005716:	4607      	mov	r7, r0
 8005718:	1c78      	adds	r0, r7, #1
 800571a:	d1d6      	bne.n	80056ca <_vfiprintf_r+0x19a>
 800571c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800571e:	07d9      	lsls	r1, r3, #31
 8005720:	d405      	bmi.n	800572e <_vfiprintf_r+0x1fe>
 8005722:	89ab      	ldrh	r3, [r5, #12]
 8005724:	059a      	lsls	r2, r3, #22
 8005726:	d402      	bmi.n	800572e <_vfiprintf_r+0x1fe>
 8005728:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800572a:	f7ff fc77 	bl	800501c <__retarget_lock_release_recursive>
 800572e:	89ab      	ldrh	r3, [r5, #12]
 8005730:	065b      	lsls	r3, r3, #25
 8005732:	f53f af1f 	bmi.w	8005574 <_vfiprintf_r+0x44>
 8005736:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005738:	e71e      	b.n	8005578 <_vfiprintf_r+0x48>
 800573a:	ab03      	add	r3, sp, #12
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	462a      	mov	r2, r5
 8005740:	4b05      	ldr	r3, [pc, #20]	@ (8005758 <_vfiprintf_r+0x228>)
 8005742:	a904      	add	r1, sp, #16
 8005744:	4630      	mov	r0, r6
 8005746:	f000 f879 	bl	800583c <_printf_i>
 800574a:	e7e4      	b.n	8005716 <_vfiprintf_r+0x1e6>
 800574c:	08005f58 	.word	0x08005f58
 8005750:	08005f62 	.word	0x08005f62
 8005754:	00000000 	.word	0x00000000
 8005758:	0800550b 	.word	0x0800550b
 800575c:	08005f5e 	.word	0x08005f5e

08005760 <_printf_common>:
 8005760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005764:	4616      	mov	r6, r2
 8005766:	4698      	mov	r8, r3
 8005768:	688a      	ldr	r2, [r1, #8]
 800576a:	690b      	ldr	r3, [r1, #16]
 800576c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005770:	4293      	cmp	r3, r2
 8005772:	bfb8      	it	lt
 8005774:	4613      	movlt	r3, r2
 8005776:	6033      	str	r3, [r6, #0]
 8005778:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800577c:	4607      	mov	r7, r0
 800577e:	460c      	mov	r4, r1
 8005780:	b10a      	cbz	r2, 8005786 <_printf_common+0x26>
 8005782:	3301      	adds	r3, #1
 8005784:	6033      	str	r3, [r6, #0]
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	0699      	lsls	r1, r3, #26
 800578a:	bf42      	ittt	mi
 800578c:	6833      	ldrmi	r3, [r6, #0]
 800578e:	3302      	addmi	r3, #2
 8005790:	6033      	strmi	r3, [r6, #0]
 8005792:	6825      	ldr	r5, [r4, #0]
 8005794:	f015 0506 	ands.w	r5, r5, #6
 8005798:	d106      	bne.n	80057a8 <_printf_common+0x48>
 800579a:	f104 0a19 	add.w	sl, r4, #25
 800579e:	68e3      	ldr	r3, [r4, #12]
 80057a0:	6832      	ldr	r2, [r6, #0]
 80057a2:	1a9b      	subs	r3, r3, r2
 80057a4:	42ab      	cmp	r3, r5
 80057a6:	dc26      	bgt.n	80057f6 <_printf_common+0x96>
 80057a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057ac:	6822      	ldr	r2, [r4, #0]
 80057ae:	3b00      	subs	r3, #0
 80057b0:	bf18      	it	ne
 80057b2:	2301      	movne	r3, #1
 80057b4:	0692      	lsls	r2, r2, #26
 80057b6:	d42b      	bmi.n	8005810 <_printf_common+0xb0>
 80057b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057bc:	4641      	mov	r1, r8
 80057be:	4638      	mov	r0, r7
 80057c0:	47c8      	blx	r9
 80057c2:	3001      	adds	r0, #1
 80057c4:	d01e      	beq.n	8005804 <_printf_common+0xa4>
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	6922      	ldr	r2, [r4, #16]
 80057ca:	f003 0306 	and.w	r3, r3, #6
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	bf02      	ittt	eq
 80057d2:	68e5      	ldreq	r5, [r4, #12]
 80057d4:	6833      	ldreq	r3, [r6, #0]
 80057d6:	1aed      	subeq	r5, r5, r3
 80057d8:	68a3      	ldr	r3, [r4, #8]
 80057da:	bf0c      	ite	eq
 80057dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057e0:	2500      	movne	r5, #0
 80057e2:	4293      	cmp	r3, r2
 80057e4:	bfc4      	itt	gt
 80057e6:	1a9b      	subgt	r3, r3, r2
 80057e8:	18ed      	addgt	r5, r5, r3
 80057ea:	2600      	movs	r6, #0
 80057ec:	341a      	adds	r4, #26
 80057ee:	42b5      	cmp	r5, r6
 80057f0:	d11a      	bne.n	8005828 <_printf_common+0xc8>
 80057f2:	2000      	movs	r0, #0
 80057f4:	e008      	b.n	8005808 <_printf_common+0xa8>
 80057f6:	2301      	movs	r3, #1
 80057f8:	4652      	mov	r2, sl
 80057fa:	4641      	mov	r1, r8
 80057fc:	4638      	mov	r0, r7
 80057fe:	47c8      	blx	r9
 8005800:	3001      	adds	r0, #1
 8005802:	d103      	bne.n	800580c <_printf_common+0xac>
 8005804:	f04f 30ff 	mov.w	r0, #4294967295
 8005808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580c:	3501      	adds	r5, #1
 800580e:	e7c6      	b.n	800579e <_printf_common+0x3e>
 8005810:	18e1      	adds	r1, r4, r3
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	2030      	movs	r0, #48	@ 0x30
 8005816:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800581a:	4422      	add	r2, r4
 800581c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005820:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005824:	3302      	adds	r3, #2
 8005826:	e7c7      	b.n	80057b8 <_printf_common+0x58>
 8005828:	2301      	movs	r3, #1
 800582a:	4622      	mov	r2, r4
 800582c:	4641      	mov	r1, r8
 800582e:	4638      	mov	r0, r7
 8005830:	47c8      	blx	r9
 8005832:	3001      	adds	r0, #1
 8005834:	d0e6      	beq.n	8005804 <_printf_common+0xa4>
 8005836:	3601      	adds	r6, #1
 8005838:	e7d9      	b.n	80057ee <_printf_common+0x8e>
	...

0800583c <_printf_i>:
 800583c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005840:	7e0f      	ldrb	r7, [r1, #24]
 8005842:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005844:	2f78      	cmp	r7, #120	@ 0x78
 8005846:	4691      	mov	r9, r2
 8005848:	4680      	mov	r8, r0
 800584a:	460c      	mov	r4, r1
 800584c:	469a      	mov	sl, r3
 800584e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005852:	d807      	bhi.n	8005864 <_printf_i+0x28>
 8005854:	2f62      	cmp	r7, #98	@ 0x62
 8005856:	d80a      	bhi.n	800586e <_printf_i+0x32>
 8005858:	2f00      	cmp	r7, #0
 800585a:	f000 80d2 	beq.w	8005a02 <_printf_i+0x1c6>
 800585e:	2f58      	cmp	r7, #88	@ 0x58
 8005860:	f000 80b9 	beq.w	80059d6 <_printf_i+0x19a>
 8005864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005868:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800586c:	e03a      	b.n	80058e4 <_printf_i+0xa8>
 800586e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005872:	2b15      	cmp	r3, #21
 8005874:	d8f6      	bhi.n	8005864 <_printf_i+0x28>
 8005876:	a101      	add	r1, pc, #4	@ (adr r1, 800587c <_printf_i+0x40>)
 8005878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800587c:	080058d5 	.word	0x080058d5
 8005880:	080058e9 	.word	0x080058e9
 8005884:	08005865 	.word	0x08005865
 8005888:	08005865 	.word	0x08005865
 800588c:	08005865 	.word	0x08005865
 8005890:	08005865 	.word	0x08005865
 8005894:	080058e9 	.word	0x080058e9
 8005898:	08005865 	.word	0x08005865
 800589c:	08005865 	.word	0x08005865
 80058a0:	08005865 	.word	0x08005865
 80058a4:	08005865 	.word	0x08005865
 80058a8:	080059e9 	.word	0x080059e9
 80058ac:	08005913 	.word	0x08005913
 80058b0:	080059a3 	.word	0x080059a3
 80058b4:	08005865 	.word	0x08005865
 80058b8:	08005865 	.word	0x08005865
 80058bc:	08005a0b 	.word	0x08005a0b
 80058c0:	08005865 	.word	0x08005865
 80058c4:	08005913 	.word	0x08005913
 80058c8:	08005865 	.word	0x08005865
 80058cc:	08005865 	.word	0x08005865
 80058d0:	080059ab 	.word	0x080059ab
 80058d4:	6833      	ldr	r3, [r6, #0]
 80058d6:	1d1a      	adds	r2, r3, #4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6032      	str	r2, [r6, #0]
 80058dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058e4:	2301      	movs	r3, #1
 80058e6:	e09d      	b.n	8005a24 <_printf_i+0x1e8>
 80058e8:	6833      	ldr	r3, [r6, #0]
 80058ea:	6820      	ldr	r0, [r4, #0]
 80058ec:	1d19      	adds	r1, r3, #4
 80058ee:	6031      	str	r1, [r6, #0]
 80058f0:	0606      	lsls	r6, r0, #24
 80058f2:	d501      	bpl.n	80058f8 <_printf_i+0xbc>
 80058f4:	681d      	ldr	r5, [r3, #0]
 80058f6:	e003      	b.n	8005900 <_printf_i+0xc4>
 80058f8:	0645      	lsls	r5, r0, #25
 80058fa:	d5fb      	bpl.n	80058f4 <_printf_i+0xb8>
 80058fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005900:	2d00      	cmp	r5, #0
 8005902:	da03      	bge.n	800590c <_printf_i+0xd0>
 8005904:	232d      	movs	r3, #45	@ 0x2d
 8005906:	426d      	negs	r5, r5
 8005908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800590c:	4859      	ldr	r0, [pc, #356]	@ (8005a74 <_printf_i+0x238>)
 800590e:	230a      	movs	r3, #10
 8005910:	e011      	b.n	8005936 <_printf_i+0xfa>
 8005912:	6821      	ldr	r1, [r4, #0]
 8005914:	6833      	ldr	r3, [r6, #0]
 8005916:	0608      	lsls	r0, r1, #24
 8005918:	f853 5b04 	ldr.w	r5, [r3], #4
 800591c:	d402      	bmi.n	8005924 <_printf_i+0xe8>
 800591e:	0649      	lsls	r1, r1, #25
 8005920:	bf48      	it	mi
 8005922:	b2ad      	uxthmi	r5, r5
 8005924:	2f6f      	cmp	r7, #111	@ 0x6f
 8005926:	4853      	ldr	r0, [pc, #332]	@ (8005a74 <_printf_i+0x238>)
 8005928:	6033      	str	r3, [r6, #0]
 800592a:	bf14      	ite	ne
 800592c:	230a      	movne	r3, #10
 800592e:	2308      	moveq	r3, #8
 8005930:	2100      	movs	r1, #0
 8005932:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005936:	6866      	ldr	r6, [r4, #4]
 8005938:	60a6      	str	r6, [r4, #8]
 800593a:	2e00      	cmp	r6, #0
 800593c:	bfa2      	ittt	ge
 800593e:	6821      	ldrge	r1, [r4, #0]
 8005940:	f021 0104 	bicge.w	r1, r1, #4
 8005944:	6021      	strge	r1, [r4, #0]
 8005946:	b90d      	cbnz	r5, 800594c <_printf_i+0x110>
 8005948:	2e00      	cmp	r6, #0
 800594a:	d04b      	beq.n	80059e4 <_printf_i+0x1a8>
 800594c:	4616      	mov	r6, r2
 800594e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005952:	fb03 5711 	mls	r7, r3, r1, r5
 8005956:	5dc7      	ldrb	r7, [r0, r7]
 8005958:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800595c:	462f      	mov	r7, r5
 800595e:	42bb      	cmp	r3, r7
 8005960:	460d      	mov	r5, r1
 8005962:	d9f4      	bls.n	800594e <_printf_i+0x112>
 8005964:	2b08      	cmp	r3, #8
 8005966:	d10b      	bne.n	8005980 <_printf_i+0x144>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	07df      	lsls	r7, r3, #31
 800596c:	d508      	bpl.n	8005980 <_printf_i+0x144>
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	6861      	ldr	r1, [r4, #4]
 8005972:	4299      	cmp	r1, r3
 8005974:	bfde      	ittt	le
 8005976:	2330      	movle	r3, #48	@ 0x30
 8005978:	f806 3c01 	strble.w	r3, [r6, #-1]
 800597c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005980:	1b92      	subs	r2, r2, r6
 8005982:	6122      	str	r2, [r4, #16]
 8005984:	f8cd a000 	str.w	sl, [sp]
 8005988:	464b      	mov	r3, r9
 800598a:	aa03      	add	r2, sp, #12
 800598c:	4621      	mov	r1, r4
 800598e:	4640      	mov	r0, r8
 8005990:	f7ff fee6 	bl	8005760 <_printf_common>
 8005994:	3001      	adds	r0, #1
 8005996:	d14a      	bne.n	8005a2e <_printf_i+0x1f2>
 8005998:	f04f 30ff 	mov.w	r0, #4294967295
 800599c:	b004      	add	sp, #16
 800599e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	f043 0320 	orr.w	r3, r3, #32
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	4833      	ldr	r0, [pc, #204]	@ (8005a78 <_printf_i+0x23c>)
 80059ac:	2778      	movs	r7, #120	@ 0x78
 80059ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	6831      	ldr	r1, [r6, #0]
 80059b6:	061f      	lsls	r7, r3, #24
 80059b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80059bc:	d402      	bmi.n	80059c4 <_printf_i+0x188>
 80059be:	065f      	lsls	r7, r3, #25
 80059c0:	bf48      	it	mi
 80059c2:	b2ad      	uxthmi	r5, r5
 80059c4:	6031      	str	r1, [r6, #0]
 80059c6:	07d9      	lsls	r1, r3, #31
 80059c8:	bf44      	itt	mi
 80059ca:	f043 0320 	orrmi.w	r3, r3, #32
 80059ce:	6023      	strmi	r3, [r4, #0]
 80059d0:	b11d      	cbz	r5, 80059da <_printf_i+0x19e>
 80059d2:	2310      	movs	r3, #16
 80059d4:	e7ac      	b.n	8005930 <_printf_i+0xf4>
 80059d6:	4827      	ldr	r0, [pc, #156]	@ (8005a74 <_printf_i+0x238>)
 80059d8:	e7e9      	b.n	80059ae <_printf_i+0x172>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	f023 0320 	bic.w	r3, r3, #32
 80059e0:	6023      	str	r3, [r4, #0]
 80059e2:	e7f6      	b.n	80059d2 <_printf_i+0x196>
 80059e4:	4616      	mov	r6, r2
 80059e6:	e7bd      	b.n	8005964 <_printf_i+0x128>
 80059e8:	6833      	ldr	r3, [r6, #0]
 80059ea:	6825      	ldr	r5, [r4, #0]
 80059ec:	6961      	ldr	r1, [r4, #20]
 80059ee:	1d18      	adds	r0, r3, #4
 80059f0:	6030      	str	r0, [r6, #0]
 80059f2:	062e      	lsls	r6, r5, #24
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	d501      	bpl.n	80059fc <_printf_i+0x1c0>
 80059f8:	6019      	str	r1, [r3, #0]
 80059fa:	e002      	b.n	8005a02 <_printf_i+0x1c6>
 80059fc:	0668      	lsls	r0, r5, #25
 80059fe:	d5fb      	bpl.n	80059f8 <_printf_i+0x1bc>
 8005a00:	8019      	strh	r1, [r3, #0]
 8005a02:	2300      	movs	r3, #0
 8005a04:	6123      	str	r3, [r4, #16]
 8005a06:	4616      	mov	r6, r2
 8005a08:	e7bc      	b.n	8005984 <_printf_i+0x148>
 8005a0a:	6833      	ldr	r3, [r6, #0]
 8005a0c:	1d1a      	adds	r2, r3, #4
 8005a0e:	6032      	str	r2, [r6, #0]
 8005a10:	681e      	ldr	r6, [r3, #0]
 8005a12:	6862      	ldr	r2, [r4, #4]
 8005a14:	2100      	movs	r1, #0
 8005a16:	4630      	mov	r0, r6
 8005a18:	f7fa fbda 	bl	80001d0 <memchr>
 8005a1c:	b108      	cbz	r0, 8005a22 <_printf_i+0x1e6>
 8005a1e:	1b80      	subs	r0, r0, r6
 8005a20:	6060      	str	r0, [r4, #4]
 8005a22:	6863      	ldr	r3, [r4, #4]
 8005a24:	6123      	str	r3, [r4, #16]
 8005a26:	2300      	movs	r3, #0
 8005a28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a2c:	e7aa      	b.n	8005984 <_printf_i+0x148>
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	4632      	mov	r2, r6
 8005a32:	4649      	mov	r1, r9
 8005a34:	4640      	mov	r0, r8
 8005a36:	47d0      	blx	sl
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d0ad      	beq.n	8005998 <_printf_i+0x15c>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	079b      	lsls	r3, r3, #30
 8005a40:	d413      	bmi.n	8005a6a <_printf_i+0x22e>
 8005a42:	68e0      	ldr	r0, [r4, #12]
 8005a44:	9b03      	ldr	r3, [sp, #12]
 8005a46:	4298      	cmp	r0, r3
 8005a48:	bfb8      	it	lt
 8005a4a:	4618      	movlt	r0, r3
 8005a4c:	e7a6      	b.n	800599c <_printf_i+0x160>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4632      	mov	r2, r6
 8005a52:	4649      	mov	r1, r9
 8005a54:	4640      	mov	r0, r8
 8005a56:	47d0      	blx	sl
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d09d      	beq.n	8005998 <_printf_i+0x15c>
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	68e3      	ldr	r3, [r4, #12]
 8005a60:	9903      	ldr	r1, [sp, #12]
 8005a62:	1a5b      	subs	r3, r3, r1
 8005a64:	42ab      	cmp	r3, r5
 8005a66:	dcf2      	bgt.n	8005a4e <_printf_i+0x212>
 8005a68:	e7eb      	b.n	8005a42 <_printf_i+0x206>
 8005a6a:	2500      	movs	r5, #0
 8005a6c:	f104 0619 	add.w	r6, r4, #25
 8005a70:	e7f5      	b.n	8005a5e <_printf_i+0x222>
 8005a72:	bf00      	nop
 8005a74:	08005f69 	.word	0x08005f69
 8005a78:	08005f7a 	.word	0x08005f7a

08005a7c <__sflush_r>:
 8005a7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a84:	0716      	lsls	r6, r2, #28
 8005a86:	4605      	mov	r5, r0
 8005a88:	460c      	mov	r4, r1
 8005a8a:	d454      	bmi.n	8005b36 <__sflush_r+0xba>
 8005a8c:	684b      	ldr	r3, [r1, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	dc02      	bgt.n	8005a98 <__sflush_r+0x1c>
 8005a92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	dd48      	ble.n	8005b2a <__sflush_r+0xae>
 8005a98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a9a:	2e00      	cmp	r6, #0
 8005a9c:	d045      	beq.n	8005b2a <__sflush_r+0xae>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005aa4:	682f      	ldr	r7, [r5, #0]
 8005aa6:	6a21      	ldr	r1, [r4, #32]
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	d030      	beq.n	8005b0e <__sflush_r+0x92>
 8005aac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005aae:	89a3      	ldrh	r3, [r4, #12]
 8005ab0:	0759      	lsls	r1, r3, #29
 8005ab2:	d505      	bpl.n	8005ac0 <__sflush_r+0x44>
 8005ab4:	6863      	ldr	r3, [r4, #4]
 8005ab6:	1ad2      	subs	r2, r2, r3
 8005ab8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005aba:	b10b      	cbz	r3, 8005ac0 <__sflush_r+0x44>
 8005abc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005abe:	1ad2      	subs	r2, r2, r3
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ac4:	6a21      	ldr	r1, [r4, #32]
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	47b0      	blx	r6
 8005aca:	1c43      	adds	r3, r0, #1
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	d106      	bne.n	8005ade <__sflush_r+0x62>
 8005ad0:	6829      	ldr	r1, [r5, #0]
 8005ad2:	291d      	cmp	r1, #29
 8005ad4:	d82b      	bhi.n	8005b2e <__sflush_r+0xb2>
 8005ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8005b80 <__sflush_r+0x104>)
 8005ad8:	410a      	asrs	r2, r1
 8005ada:	07d6      	lsls	r6, r2, #31
 8005adc:	d427      	bmi.n	8005b2e <__sflush_r+0xb2>
 8005ade:	2200      	movs	r2, #0
 8005ae0:	6062      	str	r2, [r4, #4]
 8005ae2:	04d9      	lsls	r1, r3, #19
 8005ae4:	6922      	ldr	r2, [r4, #16]
 8005ae6:	6022      	str	r2, [r4, #0]
 8005ae8:	d504      	bpl.n	8005af4 <__sflush_r+0x78>
 8005aea:	1c42      	adds	r2, r0, #1
 8005aec:	d101      	bne.n	8005af2 <__sflush_r+0x76>
 8005aee:	682b      	ldr	r3, [r5, #0]
 8005af0:	b903      	cbnz	r3, 8005af4 <__sflush_r+0x78>
 8005af2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005af4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005af6:	602f      	str	r7, [r5, #0]
 8005af8:	b1b9      	cbz	r1, 8005b2a <__sflush_r+0xae>
 8005afa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005afe:	4299      	cmp	r1, r3
 8005b00:	d002      	beq.n	8005b08 <__sflush_r+0x8c>
 8005b02:	4628      	mov	r0, r5
 8005b04:	f7ff fa9a 	bl	800503c <_free_r>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b0c:	e00d      	b.n	8005b2a <__sflush_r+0xae>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b0      	blx	r6
 8005b14:	4602      	mov	r2, r0
 8005b16:	1c50      	adds	r0, r2, #1
 8005b18:	d1c9      	bne.n	8005aae <__sflush_r+0x32>
 8005b1a:	682b      	ldr	r3, [r5, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0c6      	beq.n	8005aae <__sflush_r+0x32>
 8005b20:	2b1d      	cmp	r3, #29
 8005b22:	d001      	beq.n	8005b28 <__sflush_r+0xac>
 8005b24:	2b16      	cmp	r3, #22
 8005b26:	d11e      	bne.n	8005b66 <__sflush_r+0xea>
 8005b28:	602f      	str	r7, [r5, #0]
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	e022      	b.n	8005b74 <__sflush_r+0xf8>
 8005b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b32:	b21b      	sxth	r3, r3
 8005b34:	e01b      	b.n	8005b6e <__sflush_r+0xf2>
 8005b36:	690f      	ldr	r7, [r1, #16]
 8005b38:	2f00      	cmp	r7, #0
 8005b3a:	d0f6      	beq.n	8005b2a <__sflush_r+0xae>
 8005b3c:	0793      	lsls	r3, r2, #30
 8005b3e:	680e      	ldr	r6, [r1, #0]
 8005b40:	bf08      	it	eq
 8005b42:	694b      	ldreq	r3, [r1, #20]
 8005b44:	600f      	str	r7, [r1, #0]
 8005b46:	bf18      	it	ne
 8005b48:	2300      	movne	r3, #0
 8005b4a:	eba6 0807 	sub.w	r8, r6, r7
 8005b4e:	608b      	str	r3, [r1, #8]
 8005b50:	f1b8 0f00 	cmp.w	r8, #0
 8005b54:	dde9      	ble.n	8005b2a <__sflush_r+0xae>
 8005b56:	6a21      	ldr	r1, [r4, #32]
 8005b58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b5a:	4643      	mov	r3, r8
 8005b5c:	463a      	mov	r2, r7
 8005b5e:	4628      	mov	r0, r5
 8005b60:	47b0      	blx	r6
 8005b62:	2800      	cmp	r0, #0
 8005b64:	dc08      	bgt.n	8005b78 <__sflush_r+0xfc>
 8005b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b6e:	81a3      	strh	r3, [r4, #12]
 8005b70:	f04f 30ff 	mov.w	r0, #4294967295
 8005b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b78:	4407      	add	r7, r0
 8005b7a:	eba8 0800 	sub.w	r8, r8, r0
 8005b7e:	e7e7      	b.n	8005b50 <__sflush_r+0xd4>
 8005b80:	dfbffffe 	.word	0xdfbffffe

08005b84 <_fflush_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	690b      	ldr	r3, [r1, #16]
 8005b88:	4605      	mov	r5, r0
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	b913      	cbnz	r3, 8005b94 <_fflush_r+0x10>
 8005b8e:	2500      	movs	r5, #0
 8005b90:	4628      	mov	r0, r5
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	b118      	cbz	r0, 8005b9e <_fflush_r+0x1a>
 8005b96:	6a03      	ldr	r3, [r0, #32]
 8005b98:	b90b      	cbnz	r3, 8005b9e <_fflush_r+0x1a>
 8005b9a:	f7ff f813 	bl	8004bc4 <__sinit>
 8005b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0f3      	beq.n	8005b8e <_fflush_r+0xa>
 8005ba6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ba8:	07d0      	lsls	r0, r2, #31
 8005baa:	d404      	bmi.n	8005bb6 <_fflush_r+0x32>
 8005bac:	0599      	lsls	r1, r3, #22
 8005bae:	d402      	bmi.n	8005bb6 <_fflush_r+0x32>
 8005bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bb2:	f7ff fa32 	bl	800501a <__retarget_lock_acquire_recursive>
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	4621      	mov	r1, r4
 8005bba:	f7ff ff5f 	bl	8005a7c <__sflush_r>
 8005bbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bc0:	07da      	lsls	r2, r3, #31
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	d4e4      	bmi.n	8005b90 <_fflush_r+0xc>
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	059b      	lsls	r3, r3, #22
 8005bca:	d4e1      	bmi.n	8005b90 <_fflush_r+0xc>
 8005bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bce:	f7ff fa25 	bl	800501c <__retarget_lock_release_recursive>
 8005bd2:	e7dd      	b.n	8005b90 <_fflush_r+0xc>

08005bd4 <__swhatbuf_r>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	b096      	sub	sp, #88	@ 0x58
 8005be0:	4615      	mov	r5, r2
 8005be2:	461e      	mov	r6, r3
 8005be4:	da0d      	bge.n	8005c02 <__swhatbuf_r+0x2e>
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005bec:	f04f 0100 	mov.w	r1, #0
 8005bf0:	bf14      	ite	ne
 8005bf2:	2340      	movne	r3, #64	@ 0x40
 8005bf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	6031      	str	r1, [r6, #0]
 8005bfc:	602b      	str	r3, [r5, #0]
 8005bfe:	b016      	add	sp, #88	@ 0x58
 8005c00:	bd70      	pop	{r4, r5, r6, pc}
 8005c02:	466a      	mov	r2, sp
 8005c04:	f000 f862 	bl	8005ccc <_fstat_r>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	dbec      	blt.n	8005be6 <__swhatbuf_r+0x12>
 8005c0c:	9901      	ldr	r1, [sp, #4]
 8005c0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c16:	4259      	negs	r1, r3
 8005c18:	4159      	adcs	r1, r3
 8005c1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c1e:	e7eb      	b.n	8005bf8 <__swhatbuf_r+0x24>

08005c20 <__smakebuf_r>:
 8005c20:	898b      	ldrh	r3, [r1, #12]
 8005c22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c24:	079d      	lsls	r5, r3, #30
 8005c26:	4606      	mov	r6, r0
 8005c28:	460c      	mov	r4, r1
 8005c2a:	d507      	bpl.n	8005c3c <__smakebuf_r+0x1c>
 8005c2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	6123      	str	r3, [r4, #16]
 8005c34:	2301      	movs	r3, #1
 8005c36:	6163      	str	r3, [r4, #20]
 8005c38:	b003      	add	sp, #12
 8005c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c3c:	ab01      	add	r3, sp, #4
 8005c3e:	466a      	mov	r2, sp
 8005c40:	f7ff ffc8 	bl	8005bd4 <__swhatbuf_r>
 8005c44:	9f00      	ldr	r7, [sp, #0]
 8005c46:	4605      	mov	r5, r0
 8005c48:	4639      	mov	r1, r7
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f7ff fa62 	bl	8005114 <_malloc_r>
 8005c50:	b948      	cbnz	r0, 8005c66 <__smakebuf_r+0x46>
 8005c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c56:	059a      	lsls	r2, r3, #22
 8005c58:	d4ee      	bmi.n	8005c38 <__smakebuf_r+0x18>
 8005c5a:	f023 0303 	bic.w	r3, r3, #3
 8005c5e:	f043 0302 	orr.w	r3, r3, #2
 8005c62:	81a3      	strh	r3, [r4, #12]
 8005c64:	e7e2      	b.n	8005c2c <__smakebuf_r+0xc>
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	6020      	str	r0, [r4, #0]
 8005c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	9b01      	ldr	r3, [sp, #4]
 8005c72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c76:	b15b      	cbz	r3, 8005c90 <__smakebuf_r+0x70>
 8005c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f000 f837 	bl	8005cf0 <_isatty_r>
 8005c82:	b128      	cbz	r0, 8005c90 <__smakebuf_r+0x70>
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	f023 0303 	bic.w	r3, r3, #3
 8005c8a:	f043 0301 	orr.w	r3, r3, #1
 8005c8e:	81a3      	strh	r3, [r4, #12]
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	431d      	orrs	r5, r3
 8005c94:	81a5      	strh	r5, [r4, #12]
 8005c96:	e7cf      	b.n	8005c38 <__smakebuf_r+0x18>

08005c98 <memmove>:
 8005c98:	4288      	cmp	r0, r1
 8005c9a:	b510      	push	{r4, lr}
 8005c9c:	eb01 0402 	add.w	r4, r1, r2
 8005ca0:	d902      	bls.n	8005ca8 <memmove+0x10>
 8005ca2:	4284      	cmp	r4, r0
 8005ca4:	4623      	mov	r3, r4
 8005ca6:	d807      	bhi.n	8005cb8 <memmove+0x20>
 8005ca8:	1e43      	subs	r3, r0, #1
 8005caa:	42a1      	cmp	r1, r4
 8005cac:	d008      	beq.n	8005cc0 <memmove+0x28>
 8005cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cb6:	e7f8      	b.n	8005caa <memmove+0x12>
 8005cb8:	4402      	add	r2, r0
 8005cba:	4601      	mov	r1, r0
 8005cbc:	428a      	cmp	r2, r1
 8005cbe:	d100      	bne.n	8005cc2 <memmove+0x2a>
 8005cc0:	bd10      	pop	{r4, pc}
 8005cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cca:	e7f7      	b.n	8005cbc <memmove+0x24>

08005ccc <_fstat_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	4d07      	ldr	r5, [pc, #28]	@ (8005cec <_fstat_r+0x20>)
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	4608      	mov	r0, r1
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	602b      	str	r3, [r5, #0]
 8005cda:	f7fb f8bc 	bl	8000e56 <_fstat>
 8005cde:	1c43      	adds	r3, r0, #1
 8005ce0:	d102      	bne.n	8005ce8 <_fstat_r+0x1c>
 8005ce2:	682b      	ldr	r3, [r5, #0]
 8005ce4:	b103      	cbz	r3, 8005ce8 <_fstat_r+0x1c>
 8005ce6:	6023      	str	r3, [r4, #0]
 8005ce8:	bd38      	pop	{r3, r4, r5, pc}
 8005cea:	bf00      	nop
 8005cec:	20000714 	.word	0x20000714

08005cf0 <_isatty_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4d06      	ldr	r5, [pc, #24]	@ (8005d0c <_isatty_r+0x1c>)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	4608      	mov	r0, r1
 8005cfa:	602b      	str	r3, [r5, #0]
 8005cfc:	f7fb f8bb 	bl	8000e76 <_isatty>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	d102      	bne.n	8005d0a <_isatty_r+0x1a>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	b103      	cbz	r3, 8005d0a <_isatty_r+0x1a>
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	bd38      	pop	{r3, r4, r5, pc}
 8005d0c:	20000714 	.word	0x20000714

08005d10 <_sbrk_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4d06      	ldr	r5, [pc, #24]	@ (8005d2c <_sbrk_r+0x1c>)
 8005d14:	2300      	movs	r3, #0
 8005d16:	4604      	mov	r4, r0
 8005d18:	4608      	mov	r0, r1
 8005d1a:	602b      	str	r3, [r5, #0]
 8005d1c:	f7fb f8c4 	bl	8000ea8 <_sbrk>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_sbrk_r+0x1a>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_sbrk_r+0x1a>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	20000714 	.word	0x20000714

08005d30 <_realloc_r>:
 8005d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d34:	4680      	mov	r8, r0
 8005d36:	4615      	mov	r5, r2
 8005d38:	460c      	mov	r4, r1
 8005d3a:	b921      	cbnz	r1, 8005d46 <_realloc_r+0x16>
 8005d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d40:	4611      	mov	r1, r2
 8005d42:	f7ff b9e7 	b.w	8005114 <_malloc_r>
 8005d46:	b92a      	cbnz	r2, 8005d54 <_realloc_r+0x24>
 8005d48:	f7ff f978 	bl	800503c <_free_r>
 8005d4c:	2400      	movs	r4, #0
 8005d4e:	4620      	mov	r0, r4
 8005d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d54:	f000 f81a 	bl	8005d8c <_malloc_usable_size_r>
 8005d58:	4285      	cmp	r5, r0
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	d802      	bhi.n	8005d64 <_realloc_r+0x34>
 8005d5e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005d62:	d8f4      	bhi.n	8005d4e <_realloc_r+0x1e>
 8005d64:	4629      	mov	r1, r5
 8005d66:	4640      	mov	r0, r8
 8005d68:	f7ff f9d4 	bl	8005114 <_malloc_r>
 8005d6c:	4607      	mov	r7, r0
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	d0ec      	beq.n	8005d4c <_realloc_r+0x1c>
 8005d72:	42b5      	cmp	r5, r6
 8005d74:	462a      	mov	r2, r5
 8005d76:	4621      	mov	r1, r4
 8005d78:	bf28      	it	cs
 8005d7a:	4632      	movcs	r2, r6
 8005d7c:	f7ff f94f 	bl	800501e <memcpy>
 8005d80:	4621      	mov	r1, r4
 8005d82:	4640      	mov	r0, r8
 8005d84:	f7ff f95a 	bl	800503c <_free_r>
 8005d88:	463c      	mov	r4, r7
 8005d8a:	e7e0      	b.n	8005d4e <_realloc_r+0x1e>

08005d8c <_malloc_usable_size_r>:
 8005d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d90:	1f18      	subs	r0, r3, #4
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	bfbc      	itt	lt
 8005d96:	580b      	ldrlt	r3, [r1, r0]
 8005d98:	18c0      	addlt	r0, r0, r3
 8005d9a:	4770      	bx	lr

08005d9c <_init>:
 8005d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9e:	bf00      	nop
 8005da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da2:	bc08      	pop	{r3}
 8005da4:	469e      	mov	lr, r3
 8005da6:	4770      	bx	lr

08005da8 <_fini>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	bf00      	nop
 8005dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dae:	bc08      	pop	{r3}
 8005db0:	469e      	mov	lr, r3
 8005db2:	4770      	bx	lr
