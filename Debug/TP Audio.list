
TP Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ec4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08009054  08009054  0000a054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800935c  0800935c  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800935c  0800935c  0000a35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009364  08009364  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009364  08009364  0000a364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009368  08009368  0000a368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800936c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001410  2000006c  080093d8  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000147c  080093d8  0000b47c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a901  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043f9  00000000  00000000  0002599d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  00029d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116b  00000000  00000000  0002b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bbc7  00000000  00000000  0002c5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0e9  00000000  00000000  00058172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9ee7  00000000  00000000  0007625b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170142  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006714  00000000  00000000  00170188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0017689c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800903c 	.word	0x0800903c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800903c 	.word	0x0800903c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MCP23S17_ToggleAllPins>:
	return ret;

}

void MCP23S17_ToggleAllPins(SPI_HandleTypeDef *hspi)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    uint8_t tx_data[3];

    // Pull CS pin low to start transmission
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2180      	movs	r1, #128	@ 0x80
 800058c:	4810      	ldr	r0, [pc, #64]	@ (80005d0 <MCP23S17_ToggleAllPins+0x50>)
 800058e:	f001 fe67 	bl	8002260 <HAL_GPIO_WritePin>

    // Write to OLATA - Set all PORTA pins high
    tx_data[0] = MCP23S17_OPCODE;      // Opcode for write
 8000592:	2340      	movs	r3, #64	@ 0x40
 8000594:	733b      	strb	r3, [r7, #12]
    tx_data[1] = MCP23S17_OLATA;       // Register address
 8000596:	2314      	movs	r3, #20
 8000598:	737b      	strb	r3, [r7, #13]
    tx_data[2] = 0xFF;                 // Data - all pins high
 800059a:	23ff      	movs	r3, #255	@ 0xff
 800059c:	73bb      	strb	r3, [r7, #14]
    HAL_SPI_Transmit(hspi, tx_data, 3, 100);
 800059e:	f107 010c 	add.w	r1, r7, #12
 80005a2:	2364      	movs	r3, #100	@ 0x64
 80005a4:	2203      	movs	r2, #3
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f004 ff3c 	bl	8005424 <HAL_SPI_Transmit>

    // Write to OLATB - Set all PORTB pins high
    tx_data[1] = MCP23S17_OLATB;       // Change register to OLATB
 80005ac:	2315      	movs	r3, #21
 80005ae:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(hspi, tx_data, 3, 100);
 80005b0:	f107 010c 	add.w	r1, r7, #12
 80005b4:	2364      	movs	r3, #100	@ 0x64
 80005b6:	2203      	movs	r2, #3
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f004 ff33 	bl	8005424 <HAL_SPI_Transmit>

    // Pull CS pin high to end transmission
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2180      	movs	r1, #128	@ 0x80
 80005c2:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <MCP23S17_ToggleAllPins+0x50>)
 80005c4:	f001 fe4c 	bl	8002260 <HAL_GPIO_WritePin>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	48000400 	.word	0x48000400

080005d4 <MCP23S17_Init_And_Test>:

void MCP23S17_Init_And_Test(SPI_HandleTypeDef *hspi)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    uint8_t tx_data[3];

    // Configure all pins as outputs
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2180      	movs	r1, #128	@ 0x80
 80005e0:	4829      	ldr	r0, [pc, #164]	@ (8000688 <MCP23S17_Init_And_Test+0xb4>)
 80005e2:	f001 fe3d 	bl	8002260 <HAL_GPIO_WritePin>
    tx_data[0] = MCP23S17_OPCODE;
 80005e6:	2340      	movs	r3, #64	@ 0x40
 80005e8:	733b      	strb	r3, [r7, #12]
    tx_data[1] = IODIRA_Addr;
 80005ea:	2300      	movs	r3, #0
 80005ec:	737b      	strb	r3, [r7, #13]
    tx_data[2] = 0x00;  // All pins as outputs
 80005ee:	2300      	movs	r3, #0
 80005f0:	73bb      	strb	r3, [r7, #14]
    HAL_SPI_Transmit(hspi, tx_data, 3, 100);
 80005f2:	f107 010c 	add.w	r1, r7, #12
 80005f6:	2364      	movs	r3, #100	@ 0x64
 80005f8:	2203      	movs	r2, #3
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f004 ff12 	bl	8005424 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2180      	movs	r1, #128	@ 0x80
 8000604:	4820      	ldr	r0, [pc, #128]	@ (8000688 <MCP23S17_Init_And_Test+0xb4>)
 8000606:	f001 fe2b 	bl	8002260 <HAL_GPIO_WritePin>

    // Configure PORTB as outputs
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	481e      	ldr	r0, [pc, #120]	@ (8000688 <MCP23S17_Init_And_Test+0xb4>)
 8000610:	f001 fe26 	bl	8002260 <HAL_GPIO_WritePin>
    tx_data[1] = IODIRB_Addr;
 8000614:	2310      	movs	r3, #16
 8000616:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(hspi, tx_data, 3, 100);
 8000618:	f107 010c 	add.w	r1, r7, #12
 800061c:	2364      	movs	r3, #100	@ 0x64
 800061e:	2203      	movs	r2, #3
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f004 feff 	bl	8005424 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2180      	movs	r1, #128	@ 0x80
 800062a:	4817      	ldr	r0, [pc, #92]	@ (8000688 <MCP23S17_Init_And_Test+0xb4>)
 800062c:	f001 fe18 	bl	8002260 <HAL_GPIO_WritePin>

    // Toggle outputs on/off every second
    while(1) {
    	MCP23S17_ToggleAllPins(hspi);  // Turn all on
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff ffa5 	bl	8000580 <MCP23S17_ToggleAllPins>
        HAL_Delay(1000);
 8000636:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063a:	f001 f94b 	bl	80018d4 <HAL_Delay>

        // Turn all off
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2180      	movs	r1, #128	@ 0x80
 8000642:	4811      	ldr	r0, [pc, #68]	@ (8000688 <MCP23S17_Init_And_Test+0xb4>)
 8000644:	f001 fe0c 	bl	8002260 <HAL_GPIO_WritePin>
        tx_data[1] = MCP23S17_OLATA;
 8000648:	2314      	movs	r3, #20
 800064a:	737b      	strb	r3, [r7, #13]
        tx_data[2] = 0x00;
 800064c:	2300      	movs	r3, #0
 800064e:	73bb      	strb	r3, [r7, #14]
        HAL_SPI_Transmit(hspi, tx_data, 3, 100);
 8000650:	f107 010c 	add.w	r1, r7, #12
 8000654:	2364      	movs	r3, #100	@ 0x64
 8000656:	2203      	movs	r2, #3
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f004 fee3 	bl	8005424 <HAL_SPI_Transmit>
        tx_data[1] = MCP23S17_OLATB;
 800065e:	2315      	movs	r3, #21
 8000660:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(hspi, tx_data, 3, 100);
 8000662:	f107 010c 	add.w	r1, r7, #12
 8000666:	2364      	movs	r3, #100	@ 0x64
 8000668:	2203      	movs	r2, #3
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f004 feda 	bl	8005424 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2180      	movs	r1, #128	@ 0x80
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <MCP23S17_Init_And_Test+0xb4>)
 8000676:	f001 fdf3 	bl	8002260 <HAL_GPIO_WritePin>

        HAL_Delay(1000);
 800067a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800067e:	f001 f929 	bl	80018d4 <HAL_Delay>
    	MCP23S17_ToggleAllPins(hspi);  // Turn all on
 8000682:	bf00      	nop
 8000684:	e7d4      	b.n	8000630 <MCP23S17_Init_And_Test+0x5c>
 8000686:	bf00      	nop
 8000688:	48000400 	.word	0x48000400

0800068c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_DMA_Init+0x48>)
 8000694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000696:	4a0f      	ldr	r2, [pc, #60]	@ (80006d4 <MX_DMA_Init+0x48>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6493      	str	r3, [r2, #72]	@ 0x48
 800069e:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <MX_DMA_Init+0x48>)
 80006a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2105      	movs	r1, #5
 80006ae:	2010      	movs	r0, #16
 80006b0:	f001 fa0f 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006b4:	2010      	movs	r0, #16
 80006b6:	f001 fa28 	bl	8001b0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2105      	movs	r1, #5
 80006be:	2011      	movs	r0, #17
 80006c0:	f001 fa07 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006c4:	2011      	movs	r0, #17
 80006c6:	f001 fa20 	bl	8001b0a <HAL_NVIC_EnableIRQ>

}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <drv_uart2_receive>:

#include "usart.h"
#include "gpio.h"

uint8_t drv_uart2_receive(char * pData, uint16_t size)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart2, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 80006e4:	887a      	ldrh	r2, [r7, #2]
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	4803      	ldr	r0, [pc, #12]	@ (80006fc <drv_uart2_receive+0x24>)
 80006ee:	f005 fa4a 	bl	8005b86 <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000598 	.word	0x20000598

08000700 <drv_uart2_transmit>:

uint8_t drv_uart2_transmit(const char * pData, uint16_t size)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 800070c:	887a      	ldrh	r2, [r7, #2]
 800070e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	4803      	ldr	r0, [pc, #12]	@ (8000724 <drv_uart2_transmit+0x24>)
 8000716:	f005 f9ad 	bl	8005a74 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000598 	.word	0x20000598

08000728 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4a07      	ldr	r2, [pc, #28]	@ (8000754 <vApplicationGetIdleTaskMemory+0x2c>)
 8000738:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	4a06      	ldr	r2, [pc, #24]	@ (8000758 <vApplicationGetIdleTaskMemory+0x30>)
 800073e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2280      	movs	r2, #128	@ 0x80
 8000744:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	2000008c 	.word	0x2000008c
 8000758:	200000e0 	.word	0x200000e0

0800075c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800075c:	b5b0      	push	{r4, r5, r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000762:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <MX_FREERTOS_Init+0x30>)
 8000764:	1d3c      	adds	r4, r7, #4
 8000766:	461d      	mov	r5, r3
 8000768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f005 ffbf 	bl	80066fc <osThreadCreate>
 800077e:	4603      	mov	r3, r0
 8000780:	4a03      	ldr	r2, [pc, #12]	@ (8000790 <MX_FREERTOS_Init+0x34>)
 8000782:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bdb0      	pop	{r4, r5, r7, pc}
 800078c:	08009060 	.word	0x08009060
 8000790:	20000088 	.word	0x20000088

08000794 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f005 fff9 	bl	8006794 <osDelay>
 80007a2:	e7fb      	b.n	800079c <StartDefaultTask+0x8>

080007a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b35      	ldr	r3, [pc, #212]	@ (8000890 <MX_GPIO_Init+0xec>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a34      	ldr	r2, [pc, #208]	@ (8000890 <MX_GPIO_Init+0xec>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b32      	ldr	r3, [pc, #200]	@ (8000890 <MX_GPIO_Init+0xec>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000890 <MX_GPIO_Init+0xec>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000890 <MX_GPIO_Init+0xec>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007de:	4b2c      	ldr	r3, [pc, #176]	@ (8000890 <MX_GPIO_Init+0xec>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <MX_GPIO_Init+0xec>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a28      	ldr	r2, [pc, #160]	@ (8000890 <MX_GPIO_Init+0xec>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f6:	4b26      	ldr	r3, [pc, #152]	@ (8000890 <MX_GPIO_Init+0xec>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b23      	ldr	r3, [pc, #140]	@ (8000890 <MX_GPIO_Init+0xec>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	4a22      	ldr	r2, [pc, #136]	@ (8000890 <MX_GPIO_Init+0xec>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080e:	4b20      	ldr	r3, [pc, #128]	@ (8000890 <MX_GPIO_Init+0xec>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2120      	movs	r1, #32
 800081e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000822:	f001 fd1d 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_Vu_GPIO_Port, CS_Vu_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2180      	movs	r1, #128	@ 0x80
 800082a:	481a      	ldr	r0, [pc, #104]	@ (8000894 <MX_GPIO_Init+0xf0>)
 800082c:	f001 fd18 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000836:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4814      	ldr	r0, [pc, #80]	@ (8000898 <MX_GPIO_Init+0xf4>)
 8000848:	f001 fb60 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800084c:	2320      	movs	r3, #32
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000866:	f001 fb51 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Vu_Pin;
 800086a:	2380      	movs	r3, #128	@ 0x80
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_Vu_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4804      	ldr	r0, [pc, #16]	@ (8000894 <MX_GPIO_Init+0xf0>)
 8000882:	f001 fb43 	bl	8001f0c <HAL_GPIO_Init>

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	@ 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000
 8000894:	48000400 	.word	0x48000400
 8000898:	48000800 	.word	0x48000800

0800089c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <MX_I2C2_Init+0x74>)
 80008a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000914 <MX_I2C2_Init+0x78>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_I2C2_Init+0x74>)
 80008a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000918 <MX_I2C2_Init+0x7c>)
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008ac:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <MX_I2C2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <MX_I2C2_Init+0x74>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008be:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <MX_I2C2_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <MX_I2C2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ca:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <MX_I2C2_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_I2C2_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008d6:	480e      	ldr	r0, [pc, #56]	@ (8000910 <MX_I2C2_Init+0x74>)
 80008d8:	f001 fcf4 	bl	80022c4 <HAL_I2C_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008e2:	f000 f938 	bl	8000b56 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4809      	ldr	r0, [pc, #36]	@ (8000910 <MX_I2C2_Init+0x74>)
 80008ea:	f001 fd86 	bl	80023fa <HAL_I2CEx_ConfigAnalogFilter>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008f4:	f000 f92f 	bl	8000b56 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <MX_I2C2_Init+0x74>)
 80008fc:	f001 fdc8 	bl	8002490 <HAL_I2CEx_ConfigDigitalFilter>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000906:	f000 f926 	bl	8000b56 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200002e0 	.word	0x200002e0
 8000914:	40005800 	.word	0x40005800
 8000918:	10d19ce4 	.word	0x10d19ce4

0800091c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b0ac      	sub	sp, #176	@ 0xb0
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2288      	movs	r2, #136	@ 0x88
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f007 fb65 	bl	800800c <memset>
  if(i2cHandle->Instance==I2C2)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a21      	ldr	r2, [pc, #132]	@ (80009cc <HAL_I2C_MspInit+0xb0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d13b      	bne.n	80009c4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000950:	2300      	movs	r3, #0
 8000952:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fc49 	bl	80031f0 <HAL_RCCEx_PeriphCLKConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000964:	f000 f8f7 	bl	8000b56 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <HAL_I2C_MspInit+0xb4>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096c:	4a18      	ldr	r2, [pc, #96]	@ (80009d0 <HAL_I2C_MspInit+0xb4>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000974:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <HAL_I2C_MspInit+0xb4>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000978:	f003 0302 	and.w	r3, r3, #2
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000980:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000984:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800099a:	2304      	movs	r3, #4
 800099c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009a4:	4619      	mov	r1, r3
 80009a6:	480b      	ldr	r0, [pc, #44]	@ (80009d4 <HAL_I2C_MspInit+0xb8>)
 80009a8:	f001 fab0 	bl	8001f0c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <HAL_I2C_MspInit+0xb4>)
 80009ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b0:	4a07      	ldr	r2, [pc, #28]	@ (80009d0 <HAL_I2C_MspInit+0xb4>)
 80009b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <HAL_I2C_MspInit+0xb4>)
 80009ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80009c4:	bf00      	nop
 80009c6:	37b0      	adds	r7, #176	@ 0xb0
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40005800 	.word	0x40005800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	48000400 	.word	0x48000400

080009d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009dc:	f000 fefe 	bl	80017dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009e0:	f000 f83e 	bl	8000a60 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80009e4:	f000 f88d 	bl	8000b02 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009e8:	f7ff fedc 	bl	80007a4 <MX_GPIO_Init>
	MX_DMA_Init();
 80009ec:	f7ff fe4e 	bl	800068c <MX_DMA_Init>
	MX_USART2_UART_Init();
 80009f0:	f000 fe3e 	bl	8001670 <MX_USART2_UART_Init>
	MX_SPI3_Init();
 80009f4:	f000 fc40 	bl	8001278 <MX_SPI3_Init>
	MX_I2C2_Init();
 80009f8:	f7ff ff50 	bl	800089c <MX_I2C2_Init>
	MX_SAI2_Init();
 80009fc:	f000 f8b2 	bl	8000b64 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <main+0x74>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <main+0x74>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000a0e:	601a      	str	r2, [r3, #0]

	h_shell.drv.receive = drv_uart2_receive;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <main+0x78>)
 8000a12:	4a10      	ldr	r2, [pc, #64]	@ (8000a54 <main+0x7c>)
 8000a14:	65da      	str	r2, [r3, #92]	@ 0x5c
	h_shell.drv.transmit = drv_uart2_transmit;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <main+0x78>)
 8000a18:	4a0f      	ldr	r2, [pc, #60]	@ (8000a58 <main+0x80>)
 8000a1a:	659a      	str	r2, [r3, #88]	@ 0x58


	shell_init(&h_shell);
 8000a1c:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <main+0x78>)
 8000a1e:	f000 fb29 	bl	8001074 <shell_init>
	shell_run(&h_shell);
 8000a22:	480b      	ldr	r0, [pc, #44]	@ (8000a50 <main+0x78>)
 8000a24:	f000 fbca 	bl	80011bc <shell_run>
	/* USER CODE END 2 */

	MX_FREERTOS_Init();
 8000a28:	f7ff fe98 	bl	800075c <MX_FREERTOS_Init>
	osKernelStart();
 8000a2c:	f005 fe5f 	bl	80066ee <osKernelStart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		printf("Toggle Led... \r\n");
 8000a30:	480a      	ldr	r0, [pc, #40]	@ (8000a5c <main+0x84>)
 8000a32:	f007 f9d7 	bl	8007de4 <puts>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a36:	2120      	movs	r1, #32
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3c:	f001 fc28 	bl	8002290 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a44:	f000 ff46 	bl	80018d4 <HAL_Delay>
		printf("Toggle Led... \r\n");
 8000a48:	bf00      	nop
 8000a4a:	e7f1      	b.n	8000a30 <main+0x58>
 8000a4c:	20000394 	.word	0x20000394
 8000a50:	20000334 	.word	0x20000334
 8000a54:	080006d9 	.word	0x080006d9
 8000a58:	08000701 	.word	0x08000701
 8000a5c:	0800907c 	.word	0x0800907c

08000a60 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b096      	sub	sp, #88	@ 0x58
 8000a64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2244      	movs	r2, #68	@ 0x44
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f007 facc 	bl	800800c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	463b      	mov	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a82:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a86:	f001 fd5d 	bl	8002544 <HAL_PWREx_ControlVoltageScaling>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000a90:	f000 f861 	bl	8000b56 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a94:	2302      	movs	r3, #2
 8000a96:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a9c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000aae:	230a      	movs	r3, #10
 8000ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fd94 	bl	80025f0 <HAL_RCC_OscConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000ace:	f000 f842 	bl	8000b56 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 f95c 	bl	8002da8 <HAL_RCC_ClockConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000af6:	f000 f82e 	bl	8000b56 <Error_Handler>
	}
}
 8000afa:	bf00      	nop
 8000afc:	3758      	adds	r7, #88	@ 0x58
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b0a2      	sub	sp, #136	@ 0x88
 8000b06:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2288      	movs	r2, #136	@ 0x88
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f007 fa7c 	bl	800800c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000b14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b18:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b26:	2308      	movs	r3, #8
 8000b28:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000b36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b3a:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 fb56 	bl	80031f0 <HAL_RCCEx_PeriphCLKConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 8000b4a:	f000 f804 	bl	8000b56 <Error_Handler>
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3788      	adds	r7, #136	@ 0x88
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5a:	b672      	cpsid	i
}
 8000b5c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b5e:	bf00      	nop
 8000b60:	e7fd      	b.n	8000b5e <Error_Handler+0x8>
	...

08000b64 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000b68:	4b2a      	ldr	r3, [pc, #168]	@ (8000c14 <MX_SAI2_Init+0xb0>)
 8000b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c18 <MX_SAI2_Init+0xb4>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b6e:	4b29      	ldr	r3, [pc, #164]	@ (8000c14 <MX_SAI2_Init+0xb0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b74:	4b27      	ldr	r3, [pc, #156]	@ (8000c14 <MX_SAI2_Init+0xb0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b7a:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <MX_SAI2_Init+0xb0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b80:	4b24      	ldr	r3, [pc, #144]	@ (8000c14 <MX_SAI2_Init+0xb0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b86:	4b23      	ldr	r3, [pc, #140]	@ (8000c14 <MX_SAI2_Init+0xb0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000b8c:	4b21      	ldr	r3, [pc, #132]	@ (8000c14 <MX_SAI2_Init+0xb0>)
 8000b8e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b92:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <MX_SAI2_Init+0xb0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <MX_SAI2_Init+0xb0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <MX_SAI2_Init+0xb0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c14 <MX_SAI2_Init+0xb0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000bac:	2302      	movs	r3, #2
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4818      	ldr	r0, [pc, #96]	@ (8000c14 <MX_SAI2_Init+0xb0>)
 8000bb4:	f003 fe36 	bl	8004824 <HAL_SAI_InitProtocol>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000bbe:	f7ff ffca 	bl	8000b56 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <MX_SAI2_Init+0xb8>)
 8000bc4:	4a16      	ldr	r2, [pc, #88]	@ (8000c20 <MX_SAI2_Init+0xbc>)
 8000bc6:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_SAI2_Init+0xb8>)
 8000bca:	2203      	movs	r2, #3
 8000bcc:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_SAI2_Init+0xb8>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_SAI2_Init+0xb8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <MX_SAI2_Init+0xb8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_SAI2_Init+0xb8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <MX_SAI2_Init+0xb8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000bec:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <MX_SAI2_Init+0xb8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <MX_SAI2_Init+0xb8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <MX_SAI2_Init+0xb8>)
 8000c00:	f003 fe10 	bl	8004824 <HAL_SAI_InitProtocol>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000c0a:	f7ff ffa4 	bl	8000b56 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000394 	.word	0x20000394
 8000c18:	40015804 	.word	0x40015804
 8000c1c:	20000418 	.word	0x20000418
 8000c20:	40015824 	.word	0x40015824

08000c24 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a64      	ldr	r2, [pc, #400]	@ (8000dc4 <HAL_SAI_MspInit+0x1a0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d15e      	bne.n	8000cf4 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000c36:	4b64      	ldr	r3, [pc, #400]	@ (8000dc8 <HAL_SAI_MspInit+0x1a4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d113      	bne.n	8000c66 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000c3e:	4b63      	ldr	r3, [pc, #396]	@ (8000dcc <HAL_SAI_MspInit+0x1a8>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c42:	4a62      	ldr	r2, [pc, #392]	@ (8000dcc <HAL_SAI_MspInit+0x1a8>)
 8000c44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c4a:	4b60      	ldr	r3, [pc, #384]	@ (8000dcc <HAL_SAI_MspInit+0x1a8>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2105      	movs	r1, #5
 8000c5a:	204b      	movs	r0, #75	@ 0x4b
 8000c5c:	f000 ff39 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000c60:	204b      	movs	r0, #75	@ 0x4b
 8000c62:	f000 ff52 	bl	8001b0a <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000c66:	4b58      	ldr	r3, [pc, #352]	@ (8000dc8 <HAL_SAI_MspInit+0x1a4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	4a56      	ldr	r2, [pc, #344]	@ (8000dc8 <HAL_SAI_MspInit+0x1a4>)
 8000c6e:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c70:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000c82:	230d      	movs	r3, #13
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4850      	ldr	r0, [pc, #320]	@ (8000dd0 <HAL_SAI_MspInit+0x1ac>)
 8000c8e:	f001 f93d 	bl	8001f0c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000c92:	4b50      	ldr	r3, [pc, #320]	@ (8000dd4 <HAL_SAI_MspInit+0x1b0>)
 8000c94:	4a50      	ldr	r2, [pc, #320]	@ (8000dd8 <HAL_SAI_MspInit+0x1b4>)
 8000c96:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000c98:	4b4e      	ldr	r3, [pc, #312]	@ (8000dd4 <HAL_SAI_MspInit+0x1b0>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c9e:	4b4d      	ldr	r3, [pc, #308]	@ (8000dd4 <HAL_SAI_MspInit+0x1b0>)
 8000ca0:	2210      	movs	r2, #16
 8000ca2:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd4 <HAL_SAI_MspInit+0x1b0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000caa:	4b4a      	ldr	r3, [pc, #296]	@ (8000dd4 <HAL_SAI_MspInit+0x1b0>)
 8000cac:	2280      	movs	r2, #128	@ 0x80
 8000cae:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cb0:	4b48      	ldr	r3, [pc, #288]	@ (8000dd4 <HAL_SAI_MspInit+0x1b0>)
 8000cb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cb6:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cb8:	4b46      	ldr	r3, [pc, #280]	@ (8000dd4 <HAL_SAI_MspInit+0x1b0>)
 8000cba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cbe:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000cc0:	4b44      	ldr	r3, [pc, #272]	@ (8000dd4 <HAL_SAI_MspInit+0x1b0>)
 8000cc2:	2220      	movs	r2, #32
 8000cc4:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000cc6:	4b43      	ldr	r3, [pc, #268]	@ (8000dd4 <HAL_SAI_MspInit+0x1b0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000ccc:	4841      	ldr	r0, [pc, #260]	@ (8000dd4 <HAL_SAI_MspInit+0x1b0>)
 8000cce:	f000 ff37 	bl	8001b40 <HAL_DMA_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000cd8:	f7ff ff3d 	bl	8000b56 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a3d      	ldr	r2, [pc, #244]	@ (8000dd4 <HAL_SAI_MspInit+0x1b0>)
 8000ce0:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ce2:	4a3c      	ldr	r2, [pc, #240]	@ (8000dd4 <HAL_SAI_MspInit+0x1b0>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a3a      	ldr	r2, [pc, #232]	@ (8000dd4 <HAL_SAI_MspInit+0x1b0>)
 8000cec:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000cee:	4a39      	ldr	r2, [pc, #228]	@ (8000dd4 <HAL_SAI_MspInit+0x1b0>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a38      	ldr	r2, [pc, #224]	@ (8000ddc <HAL_SAI_MspInit+0x1b8>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d15e      	bne.n	8000dbc <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000cfe:	4b32      	ldr	r3, [pc, #200]	@ (8000dc8 <HAL_SAI_MspInit+0x1a4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d113      	bne.n	8000d2e <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000d06:	4b31      	ldr	r3, [pc, #196]	@ (8000dcc <HAL_SAI_MspInit+0x1a8>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0a:	4a30      	ldr	r2, [pc, #192]	@ (8000dcc <HAL_SAI_MspInit+0x1a8>)
 8000d0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d12:	4b2e      	ldr	r3, [pc, #184]	@ (8000dcc <HAL_SAI_MspInit+0x1a8>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2105      	movs	r1, #5
 8000d22:	204b      	movs	r0, #75	@ 0x4b
 8000d24:	f000 fed5 	bl	8001ad2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000d28:	204b      	movs	r0, #75	@ 0x4b
 8000d2a:	f000 feee 	bl	8001b0a <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000d2e:	4b26      	ldr	r3, [pc, #152]	@ (8000dc8 <HAL_SAI_MspInit+0x1a4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a24      	ldr	r2, [pc, #144]	@ (8000dc8 <HAL_SAI_MspInit+0x1a4>)
 8000d36:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000d4a:	230d      	movs	r3, #13
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4822      	ldr	r0, [pc, #136]	@ (8000de0 <HAL_SAI_MspInit+0x1bc>)
 8000d56:	f001 f8d9 	bl	8001f0c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000d5a:	4b22      	ldr	r3, [pc, #136]	@ (8000de4 <HAL_SAI_MspInit+0x1c0>)
 8000d5c:	4a22      	ldr	r2, [pc, #136]	@ (8000de8 <HAL_SAI_MspInit+0x1c4>)
 8000d5e:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000d60:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <HAL_SAI_MspInit+0x1c0>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d66:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <HAL_SAI_MspInit+0x1c0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <HAL_SAI_MspInit+0x1c0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <HAL_SAI_MspInit+0x1c0>)
 8000d74:	2280      	movs	r2, #128	@ 0x80
 8000d76:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <HAL_SAI_MspInit+0x1c0>)
 8000d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d7e:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <HAL_SAI_MspInit+0x1c0>)
 8000d82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d86:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000d88:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <HAL_SAI_MspInit+0x1c0>)
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <HAL_SAI_MspInit+0x1c0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000d94:	4813      	ldr	r0, [pc, #76]	@ (8000de4 <HAL_SAI_MspInit+0x1c0>)
 8000d96:	f000 fed3 	bl	8001b40 <HAL_DMA_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000da0:	f7ff fed9 	bl	8000b56 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a0f      	ldr	r2, [pc, #60]	@ (8000de4 <HAL_SAI_MspInit+0x1c0>)
 8000da8:	671a      	str	r2, [r3, #112]	@ 0x70
 8000daa:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <HAL_SAI_MspInit+0x1c0>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a0c      	ldr	r2, [pc, #48]	@ (8000de4 <HAL_SAI_MspInit+0x1c0>)
 8000db4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000db6:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <HAL_SAI_MspInit+0x1c0>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	@ 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40015804 	.word	0x40015804
 8000dc8:	2000052c 	.word	0x2000052c
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000400 	.word	0x48000400
 8000dd4:	2000049c 	.word	0x2000049c
 8000dd8:	4002006c 	.word	0x4002006c
 8000ddc:	40015824 	.word	0x40015824
 8000de0:	48000800 	.word	0x48000800
 8000de4:	200004e4 	.word	0x200004e4
 8000de8:	40020080 	.word	0x40020080

08000dec <sh_pins>:
#include "components/MCP23S17.h"




static int sh_pins(h_shell_t * h_shell, int argc, char ** argv) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
	MCP23S17_Init_And_Test(&hspi3);
 8000df8:	4803      	ldr	r0, [pc, #12]	@ (8000e08 <sh_pins+0x1c>)
 8000dfa:	f7ff fbeb 	bl	80005d4 <MCP23S17_Init_And_Test>
	//MCP23S17_ToggleAllPins(&hspi3);
	return 0;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000530 	.word	0x20000530

08000e0c <sh_status>:
static int sh_status(h_shell_t * h_shell, int argc, char ** argv) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
	int size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3308      	adds	r3, #8
 8000e1c:	4a09      	ldr	r2, [pc, #36]	@ (8000e44 <sh_status+0x38>)
 8000e1e:	2128      	movs	r1, #40	@ 0x28
 8000e20:	4618      	mov	r0, r3
 8000e22:	f006 ffe7 	bl	8007df4 <sniprintf>
 8000e26:	6178      	str	r0, [r7, #20]
			"System status: OK\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	6979      	ldr	r1, [r7, #20]
 8000e32:	b289      	uxth	r1, r1
 8000e34:	4610      	mov	r0, r2
 8000e36:	4798      	blx	r3
	return 0;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	0800908c 	.word	0x0800908c

08000e48 <sh_led>:

static int sh_led(h_shell_t * h_shell, int argc, char ** argv) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	int size;

	if (argc != 2) {
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d012      	beq.n	8000e80 <sh_led+0x38>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	4a31      	ldr	r2, [pc, #196]	@ (8000f24 <sh_led+0xdc>)
 8000e60:	2128      	movs	r1, #40	@ 0x28
 8000e62:	4618      	mov	r0, r3
 8000e64:	f006 ffc6 	bl	8007df4 <sniprintf>
 8000e68:	6178      	str	r0, [r7, #20]
				"Usage: led <0|1>\r\n");
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	3208      	adds	r2, #8
 8000e72:	6979      	ldr	r1, [r7, #20]
 8000e74:	b289      	uxth	r1, r1
 8000e76:	4610      	mov	r0, r2
 8000e78:	4798      	blx	r3
		return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e7e:	e04d      	b.n	8000f1c <sh_led+0xd4>
	}

	if (strcmp(argv[1], "0") == 0) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3304      	adds	r3, #4
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4928      	ldr	r1, [pc, #160]	@ (8000f28 <sh_led+0xe0>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff f9a1 	bl	80001d0 <strcmp>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10e      	bne.n	8000eb2 <sh_led+0x6a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2120      	movs	r1, #32
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e9c:	f001 f9e0 	bl	8002260 <HAL_GPIO_WritePin>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "LED turned OFF\r\n");
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3308      	adds	r3, #8
 8000ea4:	4a21      	ldr	r2, [pc, #132]	@ (8000f2c <sh_led+0xe4>)
 8000ea6:	2128      	movs	r1, #40	@ 0x28
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 ffa3 	bl	8007df4 <sniprintf>
 8000eae:	6178      	str	r0, [r7, #20]
 8000eb0:	e02b      	b.n	8000f0a <sh_led+0xc2>
	}
	else if (strcmp(argv[1], "1") == 0) {
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	491d      	ldr	r1, [pc, #116]	@ (8000f30 <sh_led+0xe8>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff f988 	bl	80001d0 <strcmp>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10e      	bne.n	8000ee4 <sh_led+0x9c>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2120      	movs	r1, #32
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ece:	f001 f9c7 	bl	8002260 <HAL_GPIO_WritePin>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "LED turned ON\r\n");
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	3308      	adds	r3, #8
 8000ed6:	4a17      	ldr	r2, [pc, #92]	@ (8000f34 <sh_led+0xec>)
 8000ed8:	2128      	movs	r1, #40	@ 0x28
 8000eda:	4618      	mov	r0, r3
 8000edc:	f006 ff8a 	bl	8007df4 <sniprintf>
 8000ee0:	6178      	str	r0, [r7, #20]
 8000ee2:	e012      	b.n	8000f0a <sh_led+0xc2>
	}
	else {
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	3308      	adds	r3, #8
 8000ee8:	4a13      	ldr	r2, [pc, #76]	@ (8000f38 <sh_led+0xf0>)
 8000eea:	2128      	movs	r1, #40	@ 0x28
 8000eec:	4618      	mov	r0, r3
 8000eee:	f006 ff81 	bl	8007df4 <sniprintf>
 8000ef2:	6178      	str	r0, [r7, #20]
				"Invalid argument. Use 0 or 1\r\n");
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	3208      	adds	r2, #8
 8000efc:	6979      	ldr	r1, [r7, #20]
 8000efe:	b289      	uxth	r1, r1
 8000f00:	4610      	mov	r0, r2
 8000f02:	4798      	blx	r3
		return -1;
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f08:	e008      	b.n	8000f1c <sh_led+0xd4>
	}

	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	3208      	adds	r2, #8
 8000f12:	6979      	ldr	r1, [r7, #20]
 8000f14:	b289      	uxth	r1, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4798      	blx	r3
	return 0;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	080090a0 	.word	0x080090a0
 8000f28:	080090b4 	.word	0x080090b4
 8000f2c:	080090b8 	.word	0x080090b8
 8000f30:	080090cc 	.word	0x080090cc
 8000f34:	080090d0 	.word	0x080090d0
 8000f38:	080090e0 	.word	0x080090e0

08000f3c <sh_help>:

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b089      	sub	sp, #36	@ 0x24
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
	int i;
	int size;

	if (argc > 1) {
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	dd59      	ble.n	8001002 <sh_help+0xc6>
		for (i = 0; i < h_shell->func_list_size; i++) {
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e03b      	b.n	8000fcc <sh_help+0x90>
			if (strcmp(h_shell->func_list[i].cmd_name, argv[1]) == 0) {
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6819      	ldr	r1, [r3, #0]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	440b      	add	r3, r1
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4610      	mov	r0, r2
 8000f70:	f7ff f92e 	bl	80001d0 <strcmp>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d125      	bne.n	8000fc6 <sh_help+0x8a>
				size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f103 0008 	add.w	r0, r3, #8
						"%s: %s\r\n", h_shell->func_list[i].cmd_name,
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6819      	ldr	r1, [r3, #0]
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	681c      	ldr	r4, [r3, #0]
						h_shell->func_list[i].description);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6819      	ldr	r1, [r3, #0]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	689b      	ldr	r3, [r3, #8]
				size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4a30      	ldr	r2, [pc, #192]	@ (800106c <sh_help+0x130>)
 8000faa:	2128      	movs	r1, #40	@ 0x28
 8000fac:	f006 ff22 	bl	8007df4 <sniprintf>
 8000fb0:	6138      	str	r0, [r7, #16]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	6939      	ldr	r1, [r7, #16]
 8000fbc:	b289      	uxth	r1, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4798      	blx	r3
				return 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e04d      	b.n	8001062 <sh_help+0x126>
		for (i = 0; i < h_shell->func_list_size; i++) {
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	dbbe      	blt.n	8000f54 <sh_help+0x18>
			}
		}
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f103 0008 	add.w	r0, r3, #8
				"Unknown command: %s\r\n", argv[1]);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3304      	adds	r3, #4
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a23      	ldr	r2, [pc, #140]	@ (8001070 <sh_help+0x134>)
 8000fe4:	2128      	movs	r1, #40	@ 0x28
 8000fe6:	f006 ff05 	bl	8007df4 <sniprintf>
 8000fea:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	6939      	ldr	r1, [r7, #16]
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4798      	blx	r3
		return -1;
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001000:	e02f      	b.n	8001062 <sh_help+0x126>
	}

	for(i = 0; i < h_shell->func_list_size; i++) {
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e026      	b.n	8001056 <sh_help+0x11a>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f103 0008 	add.w	r0, r3, #8
				"%s: %s\r\n", h_shell->func_list[i].cmd_name,
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6819      	ldr	r1, [r3, #0]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	681c      	ldr	r4, [r3, #0]
				h_shell->func_list[i].description);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6819      	ldr	r1, [r3, #0]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	4613      	mov	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	689b      	ldr	r3, [r3, #8]
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	4623      	mov	r3, r4
 8001036:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <sh_help+0x130>)
 8001038:	2128      	movs	r1, #40	@ 0x28
 800103a:	f006 fedb 	bl	8007df4 <sniprintf>
 800103e:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	3208      	adds	r2, #8
 8001048:	6939      	ldr	r1, [r7, #16]
 800104a:	b289      	uxth	r1, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4798      	blx	r3
	for(i = 0; i < h_shell->func_list_size; i++) {
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	dbd3      	blt.n	8001008 <sh_help+0xcc>
	}

	return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	371c      	adds	r7, #28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	08009100 	.word	0x08009100
 8001070:	0800910c 	.word	0x0800910c

08001074 <shell_init>:



};

void shell_init(h_shell_t * h_shell) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	int size = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]

	h_shell->func_list = shell_functions;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <shell_init+0x60>)
 8001084:	601a      	str	r2, [r3, #0]
	h_shell->func_list_size = sizeof(shell_functions) / sizeof(shell_functions[0]);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2204      	movs	r2, #4
 800108a:	605a      	str	r2, [r3, #4]

	size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3308      	adds	r3, #8
 8001090:	4a11      	ldr	r2, [pc, #68]	@ (80010d8 <shell_init+0x64>)
 8001092:	2128      	movs	r1, #40	@ 0x28
 8001094:	4618      	mov	r0, r3
 8001096:	f006 fead 	bl	8007df4 <sniprintf>
 800109a:	60f8      	str	r0, [r7, #12]
			"\r\n\r\n===== Super auto radio v1.0 =====\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	68f9      	ldr	r1, [r7, #12]
 80010a6:	b289      	uxth	r1, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4798      	blx	r3

	size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3308      	adds	r3, #8
 80010b0:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <shell_init+0x68>)
 80010b2:	2128      	movs	r1, #40	@ 0x28
 80010b4:	4618      	mov	r0, r3
 80010b6:	f006 fe9d 	bl	8007df4 <sniprintf>
 80010ba:	60f8      	str	r0, [r7, #12]
			"Type 'help' for available commands\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	3208      	adds	r2, #8
 80010c4:	68f9      	ldr	r1, [r7, #12]
 80010c6:	b289      	uxth	r1, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4798      	blx	r3
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	080091f0 	.word	0x080091f0
 80010d8:	08009190 	.word	0x08009190
 80010dc:	080091b8 	.word	0x080091b8

080010e0 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	@ 0x38
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	int i;
	int argc = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	633b      	str	r3, [r7, #48]	@ 0x30
	char *argv[ARGC_MAX];
	char *token;

	token = strtok(buf, " ");
 80010ee:	4931      	ldr	r1, [pc, #196]	@ (80011b4 <shell_exec+0xd4>)
 80010f0:	6838      	ldr	r0, [r7, #0]
 80010f2:	f006 ff93 	bl	800801c <strtok>
 80010f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
	while (token != NULL && argc < ARGC_MAX) {
 80010f8:	e00d      	b.n	8001116 <shell_exec+0x36>
		argv[argc++] = token;
 80010fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	3338      	adds	r3, #56	@ 0x38
 8001104:	443b      	add	r3, r7
 8001106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001108:	f843 2c30 	str.w	r2, [r3, #-48]
		token = strtok(NULL, " ");
 800110c:	4929      	ldr	r1, [pc, #164]	@ (80011b4 <shell_exec+0xd4>)
 800110e:	2000      	movs	r0, #0
 8001110:	f006 ff84 	bl	800801c <strtok>
 8001114:	62f8      	str	r0, [r7, #44]	@ 0x2c
	while (token != NULL && argc < ARGC_MAX) {
 8001116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <shell_exec+0x42>
 800111c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800111e:	2b07      	cmp	r3, #7
 8001120:	ddeb      	ble.n	80010fa <shell_exec+0x1a>
	}

	if (argc == 0) return 0;
 8001122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <shell_exec+0x4c>
 8001128:	2300      	movs	r3, #0
 800112a:	e03e      	b.n	80011aa <shell_exec+0xca>

	for (i = 0; i < h_shell->func_list_size; i++) {
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001130:	e023      	b.n	800117a <shell_exec+0x9a>
		if (strcmp(h_shell->func_list[i].cmd_name, argv[0]) == 0) {
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6819      	ldr	r1, [r3, #0]
 8001136:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f841 	bl	80001d0 <strcmp>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10f      	bne.n	8001174 <shell_exec+0x94>
			return h_shell->func_list[i].func(h_shell, argc, argv);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6819      	ldr	r1, [r3, #0]
 8001158:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	4798      	blx	r3
 8001170:	4603      	mov	r3, r0
 8001172:	e01a      	b.n	80011aa <shell_exec+0xca>
	for (i = 0; i < h_shell->func_list_size; i++) {
 8001174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001176:	3301      	adds	r3, #1
 8001178:	637b      	str	r3, [r7, #52]	@ 0x34
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001180:	429a      	cmp	r2, r3
 8001182:	dbd6      	blt.n	8001132 <shell_exec+0x52>
		}
	}


	int size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f103 0008 	add.w	r0, r3, #8
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <shell_exec+0xd8>)
 800118e:	2128      	movs	r1, #40	@ 0x28
 8001190:	f006 fe30 	bl	8007df4 <sniprintf>
 8001194:	62b8      	str	r0, [r7, #40]	@ 0x28
			"Unknown command: %s\r\n", argv[0]);
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011a0:	b289      	uxth	r1, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4798      	blx	r3
	return -1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3738      	adds	r7, #56	@ 0x38
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	080091e0 	.word	0x080091e0
 80011b8:	0800910c 	.word	0x0800910c

080011bc <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "shell@radio>> ";

int shell_run(h_shell_t * h_shell) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	int reading = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
	int pos = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, strlen(prompt));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d0:	210e      	movs	r1, #14
 80011d2:	4826      	ldr	r0, [pc, #152]	@ (800126c <shell_run+0xb0>)
 80011d4:	4798      	blx	r3
		reading = 1;
 80011d6:	2301      	movs	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]

		while(reading) {
 80011da:	e03a      	b.n	8001252 <shell_run+0x96>
			char c;
			h_shell->drv.receive(&c, 1);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011e0:	f107 020f 	add.w	r2, r7, #15
 80011e4:	2101      	movs	r1, #1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4798      	blx	r3

			switch (c) {
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d00f      	beq.n	8001210 <shell_run+0x54>
 80011f0:	2b0d      	cmp	r3, #13
 80011f2:	d119      	bne.n	8001228 <shell_run+0x6c>
			case '\r':
				h_shell->drv.transmit("\r\n", 2);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f8:	2102      	movs	r1, #2
 80011fa:	481d      	ldr	r0, [pc, #116]	@ (8001270 <shell_run+0xb4>)
 80011fc:	4798      	blx	r3
				h_shell->cmd_buffer[pos] = 0;
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4413      	add	r3, r2
 8001204:	3330      	adds	r3, #48	@ 0x30
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
				reading = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
				break;
 800120e:	e020      	b.n	8001252 <shell_run+0x96>

			case '\b':
				if (pos > 0) {
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	2b00      	cmp	r3, #0
 8001214:	dd1c      	ble.n	8001250 <shell_run+0x94>
					pos--;
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	3b01      	subs	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
					h_shell->drv.transmit(backspace, 3);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001220:	2103      	movs	r1, #3
 8001222:	4814      	ldr	r0, [pc, #80]	@ (8001274 <shell_run+0xb8>)
 8001224:	4798      	blx	r3
				}
				break;
 8001226:	e013      	b.n	8001250 <shell_run+0x94>

			default:
				if (pos < BUFFER_SIZE - 1) {
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	2b26      	cmp	r3, #38	@ 0x26
 800122c:	dc11      	bgt.n	8001252 <shell_run+0x96>
					h_shell->drv.transmit(&c, 1);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001232:	f107 020f 	add.w	r2, r7, #15
 8001236:	2101      	movs	r1, #1
 8001238:	4610      	mov	r0, r2
 800123a:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c;
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	613a      	str	r2, [r7, #16]
 8001242:	7bf9      	ldrb	r1, [r7, #15]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	460a      	mov	r2, r1
 800124a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800124e:	e000      	b.n	8001252 <shell_run+0x96>
				break;
 8001250:	bf00      	nop
		while(reading) {
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1c1      	bne.n	80011dc <shell_run+0x20>
				}
			}
		}

		shell_exec(h_shell, h_shell->cmd_buffer);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3330      	adds	r3, #48	@ 0x30
 800125c:	4619      	mov	r1, r3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff3e 	bl	80010e0 <shell_exec>
		pos = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
		h_shell->drv.transmit(prompt, strlen(prompt));
 8001268:	e7b0      	b.n	80011cc <shell_run+0x10>
 800126a:	bf00      	nop
 800126c:	08009224 	.word	0x08009224
 8001270:	080091e4 	.word	0x080091e4
 8001274:	08009220 	.word	0x08009220

08001278 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800127c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <MX_SPI3_Init+0x74>)
 800127e:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <MX_SPI3_Init+0x78>)
 8001280:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001282:	4b1a      	ldr	r3, [pc, #104]	@ (80012ec <MX_SPI3_Init+0x74>)
 8001284:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001288:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800128a:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <MX_SPI3_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001290:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <MX_SPI3_Init+0x74>)
 8001292:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001296:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <MX_SPI3_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800129e:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012a4:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012ae:	2210      	movs	r2, #16
 80012b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012c4:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012c6:	2207      	movs	r2, #7
 80012c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012d2:	2208      	movs	r2, #8
 80012d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012d8:	f004 f801 	bl	80052de <HAL_SPI_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012e2:	f7ff fc38 	bl	8000b56 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000530 	.word	0x20000530
 80012f0:	40003c00 	.word	0x40003c00

080012f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	@ 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a25      	ldr	r2, [pc, #148]	@ (80013a8 <HAL_SPI_MspInit+0xb4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d144      	bne.n	80013a0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001316:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <HAL_SPI_MspInit+0xb8>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	4a24      	ldr	r2, [pc, #144]	@ (80013ac <HAL_SPI_MspInit+0xb8>)
 800131c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001320:	6593      	str	r3, [r2, #88]	@ 0x58
 8001322:	4b22      	ldr	r3, [pc, #136]	@ (80013ac <HAL_SPI_MspInit+0xb8>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ac <HAL_SPI_MspInit+0xb8>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	4a1e      	ldr	r2, [pc, #120]	@ (80013ac <HAL_SPI_MspInit+0xb8>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <HAL_SPI_MspInit+0xb8>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <HAL_SPI_MspInit+0xb8>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	4a18      	ldr	r2, [pc, #96]	@ (80013ac <HAL_SPI_MspInit+0xb8>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <HAL_SPI_MspInit+0xb8>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800135e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001370:	2306      	movs	r3, #6
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <HAL_SPI_MspInit+0xbc>)
 800137c:	f000 fdc6 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001380:	2320      	movs	r3, #32
 8001382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001390:	2306      	movs	r3, #6
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	@ (80013b4 <HAL_SPI_MspInit+0xc0>)
 800139c:	f000 fdb6 	bl	8001f0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	@ 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40003c00 	.word	0x40003c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	48000800 	.word	0x48000800
 80013b4:	48000400 	.word	0x48000400

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_MspInit+0x4c>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c2:	4a10      	ldr	r2, [pc, #64]	@ (8001404 <HAL_MspInit+0x4c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <HAL_MspInit+0x4c>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <HAL_MspInit+0x4c>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013da:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <HAL_MspInit+0x4c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <HAL_MspInit+0x4c>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	210f      	movs	r1, #15
 80013f2:	f06f 0001 	mvn.w	r0, #1
 80013f6:	f000 fb6c 	bl	8001ad2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000

08001408 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001410:	1d39      	adds	r1, r7, #4
 8001412:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001416:	2201      	movs	r2, #1
 8001418:	4803      	ldr	r0, [pc, #12]	@ (8001428 <__io_putchar+0x20>)
 800141a:	f004 fb2b 	bl	8005a74 <HAL_UART_Transmit>

  return ch;
 800141e:	687b      	ldr	r3, [r7, #4]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000598 	.word	0x20000598

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <NMI_Handler+0x4>

08001434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <MemManage_Handler+0x4>

08001444 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <UsageFault_Handler+0x4>

08001454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001466:	f000 fa15 	bl	8001894 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800146a:	f005 ff23 	bl	80072b4 <xTaskGetSchedulerState>
 800146e:	4603      	mov	r3, r0
 8001470:	2b01      	cmp	r3, #1
 8001472:	d001      	beq.n	8001478 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001474:	f006 f960 	bl	8007738 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <DMA1_Channel6_IRQHandler+0x10>)
 8001482:	f000 fc94 	bl	8001dae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000049c 	.word	0x2000049c

08001490 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <DMA1_Channel7_IRQHandler+0x10>)
 8001496:	f000 fc8a 	bl	8001dae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200004e4 	.word	0x200004e4

080014a4 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80014a8:	4803      	ldr	r0, [pc, #12]	@ (80014b8 <SAI2_IRQHandler+0x14>)
 80014aa:	f003 fbc5 	bl	8004c38 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80014ae:	4803      	ldr	r0, [pc, #12]	@ (80014bc <SAI2_IRQHandler+0x18>)
 80014b0:	f003 fbc2 	bl	8004c38 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000394 	.word	0x20000394
 80014bc:	20000418 	.word	0x20000418

080014c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return 1;
 80014c4:	2301      	movs	r3, #1
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_kill>:

int _kill(int pid, int sig)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014da:	f006 fe41 	bl	8008160 <__errno>
 80014de:	4603      	mov	r3, r0
 80014e0:	2216      	movs	r2, #22
 80014e2:	601a      	str	r2, [r3, #0]
  return -1;
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_exit>:

void _exit (int status)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ffe7 	bl	80014d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001502:	bf00      	nop
 8001504:	e7fd      	b.n	8001502 <_exit+0x12>

08001506 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	e00a      	b.n	800152e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001518:	f3af 8000 	nop.w
 800151c:	4601      	mov	r1, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	60ba      	str	r2, [r7, #8]
 8001524:	b2ca      	uxtb	r2, r1
 8001526:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3301      	adds	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	dbf0      	blt.n	8001518 <_read+0x12>
  }

  return len;
 8001536:	687b      	ldr	r3, [r7, #4]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e009      	b.n	8001566 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	60ba      	str	r2, [r7, #8]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff54 	bl	8001408 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3301      	adds	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	429a      	cmp	r2, r3
 800156c:	dbf1      	blt.n	8001552 <_write+0x12>
  }
  return len;
 800156e:	687b      	ldr	r3, [r7, #4]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_close>:

int _close(int file)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015a0:	605a      	str	r2, [r3, #4]
  return 0;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_isatty>:

int _isatty(int file)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015b8:	2301      	movs	r3, #1
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b085      	sub	sp, #20
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e8:	4a14      	ldr	r2, [pc, #80]	@ (800163c <_sbrk+0x5c>)
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <_sbrk+0x60>)
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f4:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015fc:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <_sbrk+0x64>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <_sbrk+0x68>)
 8001600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	429a      	cmp	r2, r3
 800160e:	d207      	bcs.n	8001620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001610:	f006 fda6 	bl	8008160 <__errno>
 8001614:	4603      	mov	r3, r0
 8001616:	220c      	movs	r2, #12
 8001618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800161e:	e009      	b.n	8001634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001626:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <_sbrk+0x64>)
 8001630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20018000 	.word	0x20018000
 8001640:	00000400 	.word	0x00000400
 8001644:	20000594 	.word	0x20000594
 8001648:	20001480 	.word	0x20001480

0800164c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <SystemInit+0x20>)
 8001652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001656:	4a05      	ldr	r2, [pc, #20]	@ (800166c <SystemInit+0x20>)
 8001658:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800165c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 8001676:	4a15      	ldr	r2, [pc, #84]	@ (80016cc <MX_USART2_UART_Init+0x5c>)
 8001678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <MX_USART2_UART_Init+0x58>)
 80016b4:	f004 f990 	bl	80059d8 <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016be:	f7ff fa4a 	bl	8000b56 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000598 	.word	0x20000598
 80016cc:	40004400 	.word	0x40004400

080016d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b0ac      	sub	sp, #176	@ 0xb0
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2288      	movs	r2, #136	@ 0x88
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f006 fc8b 	bl	800800c <memset>
  if(uartHandle->Instance==USART2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a21      	ldr	r2, [pc, #132]	@ (8001780 <HAL_UART_MspInit+0xb0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d13b      	bne.n	8001778 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001700:	2302      	movs	r3, #2
 8001702:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001704:	2300      	movs	r3, #0
 8001706:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4618      	mov	r0, r3
 800170e:	f001 fd6f 	bl	80031f0 <HAL_RCCEx_PeriphCLKConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001718:	f7ff fa1d 	bl	8000b56 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800171c:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <HAL_UART_MspInit+0xb4>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001720:	4a18      	ldr	r2, [pc, #96]	@ (8001784 <HAL_UART_MspInit+0xb4>)
 8001722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001726:	6593      	str	r3, [r2, #88]	@ 0x58
 8001728:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <HAL_UART_MspInit+0xb4>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <HAL_UART_MspInit+0xb4>)
 8001736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001738:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <HAL_UART_MspInit+0xb4>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001740:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <HAL_UART_MspInit+0xb4>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800174c:	230c      	movs	r3, #12
 800174e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001764:	2307      	movs	r3, #7
 8001766:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800176e:	4619      	mov	r1, r3
 8001770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001774:	f000 fbca 	bl	8001f0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001778:	bf00      	nop
 800177a:	37b0      	adds	r7, #176	@ 0xb0
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40004400 	.word	0x40004400
 8001784:	40021000 	.word	0x40021000

08001788 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001788:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800178c:	f7ff ff5e 	bl	800164c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001790:	480c      	ldr	r0, [pc, #48]	@ (80017c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001792:	490d      	ldr	r1, [pc, #52]	@ (80017c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001794:	4a0d      	ldr	r2, [pc, #52]	@ (80017cc <LoopForever+0xe>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a8:	4c0a      	ldr	r4, [pc, #40]	@ (80017d4 <LoopForever+0x16>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b6:	f006 fcd9 	bl	800816c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ba:	f7ff f90d 	bl	80009d8 <main>

080017be <LoopForever>:

LoopForever:
    b LoopForever
 80017be:	e7fe      	b.n	80017be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80017cc:	0800936c 	.word	0x0800936c
  ldr r2, =_sbss
 80017d0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80017d4:	2000147c 	.word	0x2000147c

080017d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC1_2_IRQHandler>
	...

080017dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <HAL_Init+0x3c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <HAL_Init+0x3c>)
 80017ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f2:	2003      	movs	r0, #3
 80017f4:	f000 f962 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f8:	200f      	movs	r0, #15
 80017fa:	f000 f80f 	bl	800181c <HAL_InitTick>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	71fb      	strb	r3, [r7, #7]
 8001808:	e001      	b.n	800180e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800180a:	f7ff fdd5 	bl	80013b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800180e:	79fb      	ldrb	r3, [r7, #7]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40022000 	.word	0x40022000

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001828:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <HAL_InitTick+0x6c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d023      	beq.n	8001878 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001830:	4b16      	ldr	r3, [pc, #88]	@ (800188c <HAL_InitTick+0x70>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <HAL_InitTick+0x6c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f96d 	bl	8001b26 <HAL_SYSTICK_Config>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d809      	bhi.n	800186c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001860:	f000 f937 	bl	8001ad2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001864:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <HAL_InitTick+0x74>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e007      	b.n	800187c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e004      	b.n	800187c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	e001      	b.n	800187c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008
 800188c:	20000000 	.word	0x20000000
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_IncTick+0x20>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_IncTick+0x24>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <HAL_IncTick+0x24>)
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000008 	.word	0x20000008
 80018b8:	20000620 	.word	0x20000620

080018bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <HAL_GetTick+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000620 	.word	0x20000620

080018d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f7ff ffee 	bl	80018bc <HAL_GetTick>
 80018e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018ec:	d005      	beq.n	80018fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <HAL_Delay+0x44>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018fa:	bf00      	nop
 80018fc:	f7ff ffde 	bl	80018bc <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	429a      	cmp	r2, r3
 800190a:	d8f7      	bhi.n	80018fc <HAL_Delay+0x28>
  {
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000008 	.word	0x20000008

0800191c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	@ (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db0b      	blt.n	80019aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4907      	ldr	r1, [pc, #28]	@ (80019b8 <__NVIC_EnableIRQ+0x38>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	@ (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	@ (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	@ 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff29 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff3e 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff8e 	bl	8001a10 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5d 	bl	80019bc <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff31 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffa2 	bl	8001a78 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e098      	b.n	8001c84 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b4d      	ldr	r3, [pc, #308]	@ (8001c90 <HAL_DMA_Init+0x150>)
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d80f      	bhi.n	8001b7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b4b      	ldr	r3, [pc, #300]	@ (8001c94 <HAL_DMA_Init+0x154>)
 8001b66:	4413      	add	r3, r2
 8001b68:	4a4b      	ldr	r2, [pc, #300]	@ (8001c98 <HAL_DMA_Init+0x158>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	009a      	lsls	r2, r3, #2
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a48      	ldr	r2, [pc, #288]	@ (8001c9c <HAL_DMA_Init+0x15c>)
 8001b7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b7c:	e00e      	b.n	8001b9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b46      	ldr	r3, [pc, #280]	@ (8001ca0 <HAL_DMA_Init+0x160>)
 8001b86:	4413      	add	r3, r2
 8001b88:	4a43      	ldr	r2, [pc, #268]	@ (8001c98 <HAL_DMA_Init+0x158>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	091b      	lsrs	r3, r3, #4
 8001b90:	009a      	lsls	r2, r3, #2
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a42      	ldr	r2, [pc, #264]	@ (8001ca4 <HAL_DMA_Init+0x164>)
 8001b9a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bf6:	d039      	beq.n	8001c6c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	4a27      	ldr	r2, [pc, #156]	@ (8001c9c <HAL_DMA_Init+0x15c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d11a      	bne.n	8001c38 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c02:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <HAL_DMA_Init+0x168>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	f003 031c 	and.w	r3, r3, #28
 8001c0e:	210f      	movs	r1, #15
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	4924      	ldr	r1, [pc, #144]	@ (8001ca8 <HAL_DMA_Init+0x168>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <HAL_DMA_Init+0x168>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6859      	ldr	r1, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c28:	f003 031c 	and.w	r3, r3, #28
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	491d      	ldr	r1, [pc, #116]	@ (8001ca8 <HAL_DMA_Init+0x168>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
 8001c36:	e019      	b.n	8001c6c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c38:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <HAL_DMA_Init+0x16c>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c40:	f003 031c 	and.w	r3, r3, #28
 8001c44:	210f      	movs	r1, #15
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	4917      	ldr	r1, [pc, #92]	@ (8001cac <HAL_DMA_Init+0x16c>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c52:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <HAL_DMA_Init+0x16c>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6859      	ldr	r1, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	f003 031c 	and.w	r3, r3, #28
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	4911      	ldr	r1, [pc, #68]	@ (8001cac <HAL_DMA_Init+0x16c>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40020407 	.word	0x40020407
 8001c94:	bffdfff8 	.word	0xbffdfff8
 8001c98:	cccccccd 	.word	0xcccccccd
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	bffdfbf8 	.word	0xbffdfbf8
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	400200a8 	.word	0x400200a8
 8001cac:	400204a8 	.word	0x400204a8

08001cb0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d008      	beq.n	8001cda <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e022      	b.n	8001d20 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 020e 	bic.w	r2, r2, #14
 8001ce8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0201 	bic.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f003 021c 	and.w	r2, r3, #28
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d005      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2204      	movs	r2, #4
 8001d48:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	e029      	b.n	8001da4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 020e 	bic.w	r2, r2, #14
 8001d5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d74:	f003 021c 	and.w	r2, r3, #28
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d82:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	4798      	blx	r3
    }
  }
  return status;
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	f003 031c 	and.w	r3, r3, #28
 8001dce:	2204      	movs	r2, #4
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d026      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x7a>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d021      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d107      	bne.n	8001e02 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0204 	bic.w	r2, r2, #4
 8001e00:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	f003 021c 	and.w	r2, r3, #28
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	2104      	movs	r1, #4
 8001e10:	fa01 f202 	lsl.w	r2, r1, r2
 8001e14:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d071      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e26:	e06c      	b.n	8001f02 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2c:	f003 031c 	and.w	r3, r3, #28
 8001e30:	2202      	movs	r2, #2
 8001e32:	409a      	lsls	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d02e      	beq.n	8001e9a <HAL_DMA_IRQHandler+0xec>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d029      	beq.n	8001e9a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 020a 	bic.w	r2, r2, #10
 8001e62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e70:	f003 021c 	and.w	r2, r3, #28
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	2102      	movs	r1, #2
 8001e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d038      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001e98:	e033      	b.n	8001f02 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	f003 031c 	and.w	r3, r3, #28
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d02a      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x156>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d025      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 020e 	bic.w	r2, r2, #14
 8001ec6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ecc:	f003 021c 	and.w	r2, r3, #28
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d004      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
}
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1a:	e17f      	b.n	800221c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8171 	beq.w	8002216 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d005      	beq.n	8001f4c <HAL_GPIO_Init+0x40>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d130      	bne.n	8001fae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f82:	2201      	movs	r2, #1
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	f003 0201 	and.w	r2, r3, #1
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d118      	bne.n	8001fec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	08db      	lsrs	r3, r3, #3
 8001fd6:	f003 0201 	and.w	r2, r3, #1
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d017      	beq.n	8002028 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d123      	bne.n	800207c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	08da      	lsrs	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3208      	adds	r2, #8
 800203c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002040:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	220f      	movs	r2, #15
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	08da      	lsrs	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3208      	adds	r2, #8
 8002076:	6939      	ldr	r1, [r7, #16]
 8002078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0203 	and.w	r2, r3, #3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80ac 	beq.w	8002216 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	4b5f      	ldr	r3, [pc, #380]	@ (800223c <HAL_GPIO_Init+0x330>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c2:	4a5e      	ldr	r2, [pc, #376]	@ (800223c <HAL_GPIO_Init+0x330>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ca:	4b5c      	ldr	r3, [pc, #368]	@ (800223c <HAL_GPIO_Init+0x330>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002240 <HAL_GPIO_Init+0x334>)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	3302      	adds	r3, #2
 80020de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002100:	d025      	beq.n	800214e <HAL_GPIO_Init+0x242>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4f      	ldr	r2, [pc, #316]	@ (8002244 <HAL_GPIO_Init+0x338>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01f      	beq.n	800214a <HAL_GPIO_Init+0x23e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4e      	ldr	r2, [pc, #312]	@ (8002248 <HAL_GPIO_Init+0x33c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d019      	beq.n	8002146 <HAL_GPIO_Init+0x23a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4d      	ldr	r2, [pc, #308]	@ (800224c <HAL_GPIO_Init+0x340>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_GPIO_Init+0x236>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4c      	ldr	r2, [pc, #304]	@ (8002250 <HAL_GPIO_Init+0x344>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00d      	beq.n	800213e <HAL_GPIO_Init+0x232>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4b      	ldr	r2, [pc, #300]	@ (8002254 <HAL_GPIO_Init+0x348>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_Init+0x22e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4a      	ldr	r2, [pc, #296]	@ (8002258 <HAL_GPIO_Init+0x34c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_GPIO_Init+0x22a>
 8002132:	2306      	movs	r3, #6
 8002134:	e00c      	b.n	8002150 <HAL_GPIO_Init+0x244>
 8002136:	2307      	movs	r3, #7
 8002138:	e00a      	b.n	8002150 <HAL_GPIO_Init+0x244>
 800213a:	2305      	movs	r3, #5
 800213c:	e008      	b.n	8002150 <HAL_GPIO_Init+0x244>
 800213e:	2304      	movs	r3, #4
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x244>
 8002142:	2303      	movs	r3, #3
 8002144:	e004      	b.n	8002150 <HAL_GPIO_Init+0x244>
 8002146:	2302      	movs	r3, #2
 8002148:	e002      	b.n	8002150 <HAL_GPIO_Init+0x244>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_GPIO_Init+0x244>
 800214e:	2300      	movs	r3, #0
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	f002 0203 	and.w	r2, r2, #3
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	4093      	lsls	r3, r2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002160:	4937      	ldr	r1, [pc, #220]	@ (8002240 <HAL_GPIO_Init+0x334>)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800216e:	4b3b      	ldr	r3, [pc, #236]	@ (800225c <HAL_GPIO_Init+0x350>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002192:	4a32      	ldr	r2, [pc, #200]	@ (800225c <HAL_GPIO_Init+0x350>)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002198:	4b30      	ldr	r3, [pc, #192]	@ (800225c <HAL_GPIO_Init+0x350>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021bc:	4a27      	ldr	r2, [pc, #156]	@ (800225c <HAL_GPIO_Init+0x350>)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021c2:	4b26      	ldr	r3, [pc, #152]	@ (800225c <HAL_GPIO_Init+0x350>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4013      	ands	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021e6:	4a1d      	ldr	r2, [pc, #116]	@ (800225c <HAL_GPIO_Init+0x350>)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	@ (800225c <HAL_GPIO_Init+0x350>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002210:	4a12      	ldr	r2, [pc, #72]	@ (800225c <HAL_GPIO_Init+0x350>)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3301      	adds	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa22 f303 	lsr.w	r3, r2, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	f47f ae78 	bne.w	8001f1c <HAL_GPIO_Init+0x10>
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	40010000 	.word	0x40010000
 8002244:	48000400 	.word	0x48000400
 8002248:	48000800 	.word	0x48000800
 800224c:	48000c00 	.word	0x48000c00
 8002250:	48001000 	.word	0x48001000
 8002254:	48001400 	.word	0x48001400
 8002258:	48001800 	.word	0x48001800
 800225c:	40010400 	.word	0x40010400

08002260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002270:	787b      	ldrb	r3, [r7, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800227c:	e002      	b.n	8002284 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4013      	ands	r3, r2
 80022a8:	041a      	lsls	r2, r3, #16
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	43d9      	mvns	r1, r3
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	400b      	ands	r3, r1
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	619a      	str	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e08d      	b.n	80023f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fb16 	bl	800091c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2224      	movs	r2, #36	@ 0x24
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002314:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002324:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d107      	bne.n	800233e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	e006      	b.n	800234c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800234a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d108      	bne.n	8002366 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	e007      	b.n	8002376 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002374:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002384:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002388:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002398:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69d9      	ldr	r1, [r3, #28]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1a      	ldr	r2, [r3, #32]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b20      	cmp	r3, #32
 800240e:	d138      	bne.n	8002482 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800241a:	2302      	movs	r3, #2
 800241c:	e032      	b.n	8002484 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2224      	movs	r2, #36	@ 0x24
 800242a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800244c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6819      	ldr	r1, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e000      	b.n	8002484 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
  }
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b20      	cmp	r3, #32
 80024a4:	d139      	bne.n	800251a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e033      	b.n	800251c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2224      	movs	r2, #36	@ 0x24
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0201 	orr.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800251a:	2302      	movs	r3, #2
  }
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <HAL_PWREx_GetVoltageRange+0x18>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40007000 	.word	0x40007000

08002544 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002552:	d130      	bne.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002554:	4b23      	ldr	r3, [pc, #140]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800255c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002560:	d038      	beq.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002562:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800256a:	4a1e      	ldr	r2, [pc, #120]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002570:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002572:	4b1d      	ldr	r3, [pc, #116]	@ (80025e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2232      	movs	r2, #50	@ 0x32
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	4a1b      	ldr	r2, [pc, #108]	@ (80025ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0c9b      	lsrs	r3, r3, #18
 8002584:	3301      	adds	r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002588:	e002      	b.n	8002590 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3b01      	subs	r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002590:	4b14      	ldr	r3, [pc, #80]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800259c:	d102      	bne.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f2      	bne.n	800258a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025a4:	4b0f      	ldr	r3, [pc, #60]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b0:	d110      	bne.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e00f      	b.n	80025d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025b6:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c2:	d007      	beq.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025c4:	4b07      	ldr	r3, [pc, #28]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025cc:	4a05      	ldr	r2, [pc, #20]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40007000 	.word	0x40007000
 80025e8:	20000000 	.word	0x20000000
 80025ec:	431bde83 	.word	0x431bde83

080025f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e3ca      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002602:	4b97      	ldr	r3, [pc, #604]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800260c:	4b94      	ldr	r3, [pc, #592]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 80e4 	beq.w	80027ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_RCC_OscConfig+0x4a>
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2b0c      	cmp	r3, #12
 800262e:	f040 808b 	bne.w	8002748 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b01      	cmp	r3, #1
 8002636:	f040 8087 	bne.w	8002748 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800263a:	4b89      	ldr	r3, [pc, #548]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x62>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e3a2      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1a      	ldr	r2, [r3, #32]
 8002656:	4b82      	ldr	r3, [pc, #520]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <HAL_RCC_OscConfig+0x7c>
 8002662:	4b7f      	ldr	r3, [pc, #508]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800266a:	e005      	b.n	8002678 <HAL_RCC_OscConfig+0x88>
 800266c:	4b7c      	ldr	r3, [pc, #496]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800266e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002678:	4293      	cmp	r3, r2
 800267a:	d223      	bcs.n	80026c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fd55 	bl	8003130 <RCC_SetFlashLatencyFromMSIRange>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e383      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002690:	4b73      	ldr	r3, [pc, #460]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a72      	ldr	r2, [pc, #456]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002696:	f043 0308 	orr.w	r3, r3, #8
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b70      	ldr	r3, [pc, #448]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	496d      	ldr	r1, [pc, #436]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	4968      	ldr	r1, [pc, #416]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
 80026c2:	e025      	b.n	8002710 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c4:	4b66      	ldr	r3, [pc, #408]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a65      	ldr	r2, [pc, #404]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026ca:	f043 0308 	orr.w	r3, r3, #8
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b63      	ldr	r3, [pc, #396]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4960      	ldr	r1, [pc, #384]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	495b      	ldr	r1, [pc, #364]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d109      	bne.n	8002710 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fd15 	bl	8003130 <RCC_SetFlashLatencyFromMSIRange>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e343      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002710:	f000 fc4a 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b52      	ldr	r3, [pc, #328]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	4950      	ldr	r1, [pc, #320]	@ (8002864 <HAL_RCC_OscConfig+0x274>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	4a4e      	ldr	r2, [pc, #312]	@ (8002868 <HAL_RCC_OscConfig+0x278>)
 800272e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002730:	4b4e      	ldr	r3, [pc, #312]	@ (800286c <HAL_RCC_OscConfig+0x27c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff f871 	bl	800181c <HAL_InitTick>
 800273a:	4603      	mov	r3, r0
 800273c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d052      	beq.n	80027ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	e327      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d032      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002750:	4b43      	ldr	r3, [pc, #268]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a42      	ldr	r2, [pc, #264]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800275c:	f7ff f8ae 	bl	80018bc <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002764:	f7ff f8aa 	bl	80018bc <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e310      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002776:	4b3a      	ldr	r3, [pc, #232]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002782:	4b37      	ldr	r3, [pc, #220]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a36      	ldr	r2, [pc, #216]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002788:	f043 0308 	orr.w	r3, r3, #8
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b34      	ldr	r3, [pc, #208]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4931      	ldr	r1, [pc, #196]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	492c      	ldr	r1, [pc, #176]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	e01a      	b.n	80027ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a29      	ldr	r2, [pc, #164]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027c2:	f7ff f87b 	bl	80018bc <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ca:	f7ff f877 	bl	80018bc <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e2dd      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027dc:	4b20      	ldr	r3, [pc, #128]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x1da>
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d074      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d005      	beq.n	800280a <HAL_RCC_OscConfig+0x21a>
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	2b0c      	cmp	r3, #12
 8002802:	d10e      	bne.n	8002822 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b03      	cmp	r3, #3
 8002808:	d10b      	bne.n	8002822 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d064      	beq.n	80028e0 <HAL_RCC_OscConfig+0x2f0>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d160      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e2ba      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800282a:	d106      	bne.n	800283a <HAL_RCC_OscConfig+0x24a>
 800282c:	4b0c      	ldr	r3, [pc, #48]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0b      	ldr	r2, [pc, #44]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	e026      	b.n	8002888 <HAL_RCC_OscConfig+0x298>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002842:	d115      	bne.n	8002870 <HAL_RCC_OscConfig+0x280>
 8002844:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a05      	ldr	r2, [pc, #20]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800284a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b03      	ldr	r3, [pc, #12]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a02      	ldr	r2, [pc, #8]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	e014      	b.n	8002888 <HAL_RCC_OscConfig+0x298>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	08009234 	.word	0x08009234
 8002868:	20000000 	.word	0x20000000
 800286c:	20000004 	.word	0x20000004
 8002870:	4ba0      	ldr	r3, [pc, #640]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a9f      	ldr	r2, [pc, #636]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b9d      	ldr	r3, [pc, #628]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a9c      	ldr	r2, [pc, #624]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7ff f814 	bl	80018bc <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002898:	f7ff f810 	bl	80018bc <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	@ 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e276      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028aa:	4b92      	ldr	r3, [pc, #584]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x2a8>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7ff f800 	bl	80018bc <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c0:	f7fe fffc 	bl	80018bc <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	@ 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e262      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028d2:	4b88      	ldr	r3, [pc, #544]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2d0>
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d060      	beq.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_OscConfig+0x310>
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	d119      	bne.n	800292e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d116      	bne.n	800292e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002900:	4b7c      	ldr	r3, [pc, #496]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_OscConfig+0x328>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e23f      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002918:	4b76      	ldr	r3, [pc, #472]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	4973      	ldr	r1, [pc, #460]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800292c:	e040      	b.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d023      	beq.n	800297e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002936:	4b6f      	ldr	r3, [pc, #444]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a6e      	ldr	r2, [pc, #440]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002942:	f7fe ffbb 	bl	80018bc <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294a:	f7fe ffb7 	bl	80018bc <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e21d      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800295c:	4b65      	ldr	r3, [pc, #404]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002968:	4b62      	ldr	r3, [pc, #392]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	495f      	ldr	r1, [pc, #380]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
 800297c:	e018      	b.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297e:	4b5d      	ldr	r3, [pc, #372]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5c      	ldr	r2, [pc, #368]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7fe ff97 	bl	80018bc <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002992:	f7fe ff93 	bl	80018bc <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1f9      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029a4:	4b53      	ldr	r3, [pc, #332]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d03c      	beq.n	8002a36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01c      	beq.n	80029fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c4:	4b4b      	ldr	r3, [pc, #300]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ca:	4a4a      	ldr	r2, [pc, #296]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe ff72 	bl	80018bc <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029dc:	f7fe ff6e 	bl	80018bc <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1d4      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ee:	4b41      	ldr	r3, [pc, #260]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ef      	beq.n	80029dc <HAL_RCC_OscConfig+0x3ec>
 80029fc:	e01b      	b.n	8002a36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fe:	4b3d      	ldr	r3, [pc, #244]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a04:	4a3b      	ldr	r2, [pc, #236]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7fe ff55 	bl	80018bc <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a16:	f7fe ff51 	bl	80018bc <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1b7      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a28:	4b32      	ldr	r3, [pc, #200]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1ef      	bne.n	8002a16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80a6 	beq.w	8002b90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a44:	2300      	movs	r3, #0
 8002a46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a48:	4b2a      	ldr	r3, [pc, #168]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10d      	bne.n	8002a70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a54:	4b27      	ldr	r3, [pc, #156]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a58:	4a26      	ldr	r2, [pc, #152]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a60:	4b24      	ldr	r3, [pc, #144]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a70:	4b21      	ldr	r3, [pc, #132]	@ (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d118      	bne.n	8002aae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1d      	ldr	r2, [pc, #116]	@ (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a88:	f7fe ff18 	bl	80018bc <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7fe ff14 	bl	80018bc <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e17a      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa2:	4b15      	ldr	r3, [pc, #84]	@ (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d108      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4d8>
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002abc:	4a0d      	ldr	r2, [pc, #52]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ac6:	e029      	b.n	8002b1c <HAL_RCC_OscConfig+0x52c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d115      	bne.n	8002afc <HAL_RCC_OscConfig+0x50c>
 8002ad0:	4b08      	ldr	r3, [pc, #32]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad6:	4a07      	ldr	r2, [pc, #28]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ad8:	f043 0304 	orr.w	r3, r3, #4
 8002adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ae0:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae6:	4a03      	ldr	r2, [pc, #12]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002af0:	e014      	b.n	8002b1c <HAL_RCC_OscConfig+0x52c>
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40007000 	.word	0x40007000
 8002afc:	4b9c      	ldr	r3, [pc, #624]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b02:	4a9b      	ldr	r2, [pc, #620]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b0c:	4b98      	ldr	r3, [pc, #608]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b12:	4a97      	ldr	r2, [pc, #604]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b14:	f023 0304 	bic.w	r3, r3, #4
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d016      	beq.n	8002b52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7fe feca 	bl	80018bc <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fec6 	bl	80018bc <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e12a      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b42:	4b8b      	ldr	r3, [pc, #556]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ed      	beq.n	8002b2c <HAL_RCC_OscConfig+0x53c>
 8002b50:	e015      	b.n	8002b7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7fe feb3 	bl	80018bc <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe feaf 	bl	80018bc <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e113      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b70:	4b7f      	ldr	r3, [pc, #508]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1ed      	bne.n	8002b5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7e:	7ffb      	ldrb	r3, [r7, #31]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d105      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b84:	4b7a      	ldr	r3, [pc, #488]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b88:	4a79      	ldr	r2, [pc, #484]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80fe 	beq.w	8002d96 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	f040 80d0 	bne.w	8002d44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ba4:	4b72      	ldr	r3, [pc, #456]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 0203 	and.w	r2, r3, #3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d130      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d127      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d11f      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002be4:	2a07      	cmp	r2, #7
 8002be6:	bf14      	ite	ne
 8002be8:	2201      	movne	r2, #1
 8002bea:	2200      	moveq	r2, #0
 8002bec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d113      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d109      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	3b01      	subs	r3, #1
 8002c14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d06e      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b0c      	cmp	r3, #12
 8002c1e:	d069      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c20:	4b53      	ldr	r3, [pc, #332]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c2c:	4b50      	ldr	r3, [pc, #320]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0ad      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a4b      	ldr	r2, [pc, #300]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c48:	f7fe fe38 	bl	80018bc <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fe fe34 	bl	80018bc <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e09a      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c62:	4b43      	ldr	r3, [pc, #268]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6e:	4b40      	ldr	r3, [pc, #256]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	4b40      	ldr	r3, [pc, #256]	@ (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c7e:	3a01      	subs	r2, #1
 8002c80:	0112      	lsls	r2, r2, #4
 8002c82:	4311      	orrs	r1, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c88:	0212      	lsls	r2, r2, #8
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c90:	0852      	lsrs	r2, r2, #1
 8002c92:	3a01      	subs	r2, #1
 8002c94:	0552      	lsls	r2, r2, #21
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c9c:	0852      	lsrs	r2, r2, #1
 8002c9e:	3a01      	subs	r2, #1
 8002ca0:	0652      	lsls	r2, r2, #25
 8002ca2:	4311      	orrs	r1, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ca8:	0912      	lsrs	r2, r2, #4
 8002caa:	0452      	lsls	r2, r2, #17
 8002cac:	430a      	orrs	r2, r1
 8002cae:	4930      	ldr	r1, [pc, #192]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ccc:	f7fe fdf6 	bl	80018bc <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe fdf2 	bl	80018bc <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e058      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce6:	4b22      	ldr	r3, [pc, #136]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cf2:	e050      	b.n	8002d96 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e04f      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d148      	bne.n	8002d96 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d04:	4b1a      	ldr	r3, [pc, #104]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a19      	ldr	r2, [pc, #100]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d10:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4a16      	ldr	r2, [pc, #88]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d1c:	f7fe fdce 	bl	80018bc <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fe fdca 	bl	80018bc <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e030      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d36:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x734>
 8002d42:	e028      	b.n	8002d96 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d023      	beq.n	8002d92 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a08      	ldr	r2, [pc, #32]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe fdb1 	bl	80018bc <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5c:	e00c      	b.n	8002d78 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7fe fdad 	bl	80018bc <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d905      	bls.n	8002d78 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e013      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
 8002d70:	40021000 	.word	0x40021000
 8002d74:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d78:	4b09      	ldr	r3, [pc, #36]	@ (8002da0 <HAL_RCC_OscConfig+0x7b0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ec      	bne.n	8002d5e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d84:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_RCC_OscConfig+0x7b0>)
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	4905      	ldr	r1, [pc, #20]	@ (8002da0 <HAL_RCC_OscConfig+0x7b0>)
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_RCC_OscConfig+0x7b4>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60cb      	str	r3, [r1, #12]
 8002d90:	e001      	b.n	8002d96 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	feeefffc 	.word	0xfeeefffc

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0e7      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b75      	ldr	r3, [pc, #468]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d910      	bls.n	8002dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b72      	ldr	r3, [pc, #456]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 0207 	bic.w	r2, r3, #7
 8002dd2:	4970      	ldr	r1, [pc, #448]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b6e      	ldr	r3, [pc, #440]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0cf      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d010      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	4b66      	ldr	r3, [pc, #408]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d908      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e08:	4b63      	ldr	r3, [pc, #396]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	4960      	ldr	r1, [pc, #384]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d04c      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2e:	4b5a      	ldr	r3, [pc, #360]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d121      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0a6      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e46:	4b54      	ldr	r3, [pc, #336]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d115      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e09a      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e08e      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e086      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b46      	ldr	r3, [pc, #280]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4943      	ldr	r1, [pc, #268]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e90:	f7fe fd14 	bl	80018bc <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7fe fd10 	bl	80018bc <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e06e      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b3a      	ldr	r3, [pc, #232]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 020c 	and.w	r2, r3, #12
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1eb      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	4b31      	ldr	r3, [pc, #196]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d208      	bcs.n	8002eee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b2e      	ldr	r3, [pc, #184]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	492b      	ldr	r1, [pc, #172]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eee:	4b29      	ldr	r3, [pc, #164]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d210      	bcs.n	8002f1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efc:	4b25      	ldr	r3, [pc, #148]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 0207 	bic.w	r2, r3, #7
 8002f04:	4923      	ldr	r1, [pc, #140]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0c:	4b21      	ldr	r3, [pc, #132]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e036      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4918      	ldr	r1, [pc, #96]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f48:	4b13      	ldr	r3, [pc, #76]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4910      	ldr	r1, [pc, #64]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f5c:	f000 f824 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	490b      	ldr	r1, [pc, #44]	@ (8002f9c <HAL_RCC_ClockConfig+0x1f4>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	4a09      	ldr	r2, [pc, #36]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002f7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f7c:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1fc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe fc4b 	bl	800181c <HAL_InitTick>
 8002f86:	4603      	mov	r3, r0
 8002f88:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40022000 	.word	0x40022000
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	08009234 	.word	0x08009234
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	20000004 	.word	0x20000004

08002fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	@ 0x24
 8002fac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x34>
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d121      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d11e      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fdc:	4b34      	ldr	r3, [pc, #208]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fe8:	4b31      	ldr	r3, [pc, #196]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	e005      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003004:	4a2b      	ldr	r2, [pc, #172]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10d      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b04      	cmp	r3, #4
 800301e:	d102      	bne.n	8003026 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003020:	4b25      	ldr	r3, [pc, #148]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	e004      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d101      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800302c:	4b23      	ldr	r3, [pc, #140]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x114>)
 800302e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d134      	bne.n	80030a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003036:	4b1e      	ldr	r3, [pc, #120]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0xa6>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d003      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0xac>
 800304c:	e005      	b.n	800305a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800304e:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003050:	617b      	str	r3, [r7, #20]
      break;
 8003052:	e005      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003054:	4b19      	ldr	r3, [pc, #100]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x114>)
 8003056:	617b      	str	r3, [r7, #20]
      break;
 8003058:	e002      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	617b      	str	r3, [r7, #20]
      break;
 800305e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003060:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	3301      	adds	r3, #1
 800306c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800306e:	4b10      	ldr	r3, [pc, #64]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	fb03 f202 	mul.w	r2, r3, r2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003086:	4b0a      	ldr	r3, [pc, #40]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	0e5b      	lsrs	r3, r3, #25
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	3301      	adds	r3, #1
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030a0:	69bb      	ldr	r3, [r7, #24]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3724      	adds	r7, #36	@ 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	0800924c 	.word	0x0800924c
 80030b8:	00f42400 	.word	0x00f42400
 80030bc:	007a1200 	.word	0x007a1200

080030c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c4:	4b03      	ldr	r3, [pc, #12]	@ (80030d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20000000 	.word	0x20000000

080030d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030dc:	f7ff fff0 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4904      	ldr	r1, [pc, #16]	@ (8003100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	08009244 	.word	0x08009244

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003108:	f7ff ffda 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0adb      	lsrs	r3, r3, #11
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4904      	ldr	r1, [pc, #16]	@ (800312c <HAL_RCC_GetPCLK2Freq+0x28>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000
 800312c:	08009244 	.word	0x08009244

08003130 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800313c:	4b2a      	ldr	r3, [pc, #168]	@ (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003148:	f7ff f9ee 	bl	8002528 <HAL_PWREx_GetVoltageRange>
 800314c:	6178      	str	r0, [r7, #20]
 800314e:	e014      	b.n	800317a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003150:	4b25      	ldr	r3, [pc, #148]	@ (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	4a24      	ldr	r2, [pc, #144]	@ (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800315a:	6593      	str	r3, [r2, #88]	@ 0x58
 800315c:	4b22      	ldr	r3, [pc, #136]	@ (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003168:	f7ff f9de 	bl	8002528 <HAL_PWREx_GetVoltageRange>
 800316c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800316e:	4b1e      	ldr	r3, [pc, #120]	@ (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003172:	4a1d      	ldr	r2, [pc, #116]	@ (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003174:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003178:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003180:	d10b      	bne.n	800319a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b80      	cmp	r3, #128	@ 0x80
 8003186:	d919      	bls.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2ba0      	cmp	r3, #160	@ 0xa0
 800318c:	d902      	bls.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800318e:	2302      	movs	r3, #2
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	e013      	b.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003194:	2301      	movs	r3, #1
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	e010      	b.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b80      	cmp	r3, #128	@ 0x80
 800319e:	d902      	bls.n	80031a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031a0:	2303      	movs	r3, #3
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	e00a      	b.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b80      	cmp	r3, #128	@ 0x80
 80031aa:	d102      	bne.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ac:	2302      	movs	r3, #2
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	e004      	b.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b70      	cmp	r3, #112	@ 0x70
 80031b6:	d101      	bne.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031b8:	2301      	movs	r3, #1
 80031ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031bc:	4b0b      	ldr	r3, [pc, #44]	@ (80031ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 0207 	bic.w	r2, r3, #7
 80031c4:	4909      	ldr	r1, [pc, #36]	@ (80031ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031cc:	4b07      	ldr	r3, [pc, #28]	@ (80031ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d001      	beq.n	80031de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40022000 	.word	0x40022000

080031f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031f8:	2300      	movs	r3, #0
 80031fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031fc:	2300      	movs	r3, #0
 80031fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003208:	2b00      	cmp	r3, #0
 800320a:	d041      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003210:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003214:	d02a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003216:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800321a:	d824      	bhi.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800321c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003220:	d008      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003222:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003226:	d81e      	bhi.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800322c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003230:	d010      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003232:	e018      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003234:	4b86      	ldr	r3, [pc, #536]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4a85      	ldr	r2, [pc, #532]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800323e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003240:	e015      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3304      	adds	r3, #4
 8003246:	2100      	movs	r1, #0
 8003248:	4618      	mov	r0, r3
 800324a:	f001 f829 	bl	80042a0 <RCCEx_PLLSAI1_Config>
 800324e:	4603      	mov	r3, r0
 8003250:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003252:	e00c      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3320      	adds	r3, #32
 8003258:	2100      	movs	r1, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f001 f914 	bl	8004488 <RCCEx_PLLSAI2_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003264:	e003      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	74fb      	strb	r3, [r7, #19]
      break;
 800326a:	e000      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800326c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800326e:	7cfb      	ldrb	r3, [r7, #19]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10b      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003274:	4b76      	ldr	r3, [pc, #472]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003282:	4973      	ldr	r1, [pc, #460]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800328a:	e001      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328c:	7cfb      	ldrb	r3, [r7, #19]
 800328e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d041      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032a4:	d02a      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032aa:	d824      	bhi.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032b0:	d008      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032b6:	d81e      	bhi.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032c0:	d010      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032c2:	e018      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032c4:	4b62      	ldr	r3, [pc, #392]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4a61      	ldr	r2, [pc, #388]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d0:	e015      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 ffe1 	bl	80042a0 <RCCEx_PLLSAI1_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032e2:	e00c      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3320      	adds	r3, #32
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 f8cc 	bl	8004488 <RCCEx_PLLSAI2_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032f4:	e003      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	74fb      	strb	r3, [r7, #19]
      break;
 80032fa:	e000      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10b      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003304:	4b52      	ldr	r3, [pc, #328]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003312:	494f      	ldr	r1, [pc, #316]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800331a:	e001      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80a0 	beq.w	800346e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003332:	4b47      	ldr	r3, [pc, #284]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003342:	2300      	movs	r3, #0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00d      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003348:	4b41      	ldr	r3, [pc, #260]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334c:	4a40      	ldr	r2, [pc, #256]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003352:	6593      	str	r3, [r2, #88]	@ 0x58
 8003354:	4b3e      	ldr	r3, [pc, #248]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003360:	2301      	movs	r3, #1
 8003362:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003364:	4b3b      	ldr	r3, [pc, #236]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a3a      	ldr	r2, [pc, #232]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800336a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800336e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003370:	f7fe faa4 	bl	80018bc <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003376:	e009      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003378:	f7fe faa0 	bl	80018bc <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d902      	bls.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	74fb      	strb	r3, [r7, #19]
        break;
 800338a:	e005      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800338c:	4b31      	ldr	r3, [pc, #196]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ef      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d15c      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800339e:	4b2c      	ldr	r3, [pc, #176]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d01f      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d019      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033bc:	4b24      	ldr	r3, [pc, #144]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033c8:	4b21      	ldr	r3, [pc, #132]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ce:	4a20      	ldr	r2, [pc, #128]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033de:	4a1c      	ldr	r2, [pc, #112]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033e8:	4a19      	ldr	r2, [pc, #100]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d016      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7fe fa5f 	bl	80018bc <HAL_GetTick>
 80033fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003400:	e00b      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fe fa5b 	bl	80018bc <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d902      	bls.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	74fb      	strb	r3, [r7, #19]
            break;
 8003418:	e006      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341a:	4b0d      	ldr	r3, [pc, #52]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0ec      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10c      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800342e:	4b08      	ldr	r3, [pc, #32]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003434:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800343e:	4904      	ldr	r1, [pc, #16]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003446:	e009      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003448:	7cfb      	ldrb	r3, [r7, #19]
 800344a:	74bb      	strb	r3, [r7, #18]
 800344c:	e006      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800345c:	7c7b      	ldrb	r3, [r7, #17]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003462:	4b9e      	ldr	r3, [pc, #632]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003466:	4a9d      	ldr	r2, [pc, #628]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800347a:	4b98      	ldr	r3, [pc, #608]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003480:	f023 0203 	bic.w	r2, r3, #3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003488:	4994      	ldr	r1, [pc, #592]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800349c:	4b8f      	ldr	r3, [pc, #572]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a2:	f023 020c 	bic.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034aa:	498c      	ldr	r1, [pc, #560]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034be:	4b87      	ldr	r3, [pc, #540]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	4983      	ldr	r1, [pc, #524]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034e0:	4b7e      	ldr	r3, [pc, #504]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ee:	497b      	ldr	r1, [pc, #492]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003502:	4b76      	ldr	r3, [pc, #472]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003508:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003510:	4972      	ldr	r1, [pc, #456]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003524:	4b6d      	ldr	r3, [pc, #436]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003532:	496a      	ldr	r1, [pc, #424]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003546:	4b65      	ldr	r3, [pc, #404]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003554:	4961      	ldr	r1, [pc, #388]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003568:	4b5c      	ldr	r3, [pc, #368]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003576:	4959      	ldr	r1, [pc, #356]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800358a:	4b54      	ldr	r3, [pc, #336]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003590:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003598:	4950      	ldr	r1, [pc, #320]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ac:	4b4b      	ldr	r3, [pc, #300]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	4948      	ldr	r1, [pc, #288]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ce:	4b43      	ldr	r3, [pc, #268]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035dc:	493f      	ldr	r1, [pc, #252]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d028      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035f0:	4b3a      	ldr	r3, [pc, #232]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035fe:	4937      	ldr	r1, [pc, #220]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800360a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800360e:	d106      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003610:	4b32      	ldr	r3, [pc, #200]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a31      	ldr	r2, [pc, #196]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800361a:	60d3      	str	r3, [r2, #12]
 800361c:	e011      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003622:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003626:	d10c      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	2101      	movs	r1, #1
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fe36 	bl	80042a0 <RCCEx_PLLSAI1_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d028      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800364e:	4b23      	ldr	r3, [pc, #140]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003654:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365c:	491f      	ldr	r1, [pc, #124]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003668:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800366c:	d106      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366e:	4b1b      	ldr	r3, [pc, #108]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	4a1a      	ldr	r2, [pc, #104]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003678:	60d3      	str	r3, [r2, #12]
 800367a:	e011      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003680:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003684:	d10c      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3304      	adds	r3, #4
 800368a:	2101      	movs	r1, #1
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fe07 	bl	80042a0 <RCCEx_PLLSAI1_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003696:	7cfb      	ldrb	r3, [r7, #19]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800369c:	7cfb      	ldrb	r3, [r7, #19]
 800369e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d02b      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036ac:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ba:	4908      	ldr	r1, [pc, #32]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036ca:	d109      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036cc:	4b03      	ldr	r3, [pc, #12]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4a02      	ldr	r2, [pc, #8]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036d6:	60d3      	str	r3, [r2, #12]
 80036d8:	e014      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036e8:	d10c      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2101      	movs	r1, #1
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fdd5 	bl	80042a0 <RCCEx_PLLSAI1_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036fa:	7cfb      	ldrb	r3, [r7, #19]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003700:	7cfb      	ldrb	r3, [r7, #19]
 8003702:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d02f      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003710:	4b2b      	ldr	r3, [pc, #172]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003716:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800371e:	4928      	ldr	r1, [pc, #160]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800372a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800372e:	d10d      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3304      	adds	r3, #4
 8003734:	2102      	movs	r1, #2
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fdb2 	bl	80042a0 <RCCEx_PLLSAI1_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d014      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003746:	7cfb      	ldrb	r3, [r7, #19]
 8003748:	74bb      	strb	r3, [r7, #18]
 800374a:	e011      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003754:	d10c      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3320      	adds	r3, #32
 800375a:	2102      	movs	r1, #2
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fe93 	bl	8004488 <RCCEx_PLLSAI2_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003766:	7cfb      	ldrb	r3, [r7, #19]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800377c:	4b10      	ldr	r3, [pc, #64]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003782:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800378a:	490d      	ldr	r1, [pc, #52]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800379e:	4b08      	ldr	r3, [pc, #32]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037ae:	4904      	ldr	r1, [pc, #16]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000

080037c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037d6:	d13e      	bne.n	8003856 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80037d8:	4bb2      	ldr	r3, [pc, #712]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037e2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037ea:	d028      	beq.n	800383e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037f2:	f200 8542 	bhi.w	800427a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037fc:	d005      	beq.n	800380a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003804:	d00e      	beq.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003806:	f000 bd38 	b.w	800427a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800380a:	4ba6      	ldr	r3, [pc, #664]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b02      	cmp	r3, #2
 8003816:	f040 8532 	bne.w	800427e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800381a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800381e:	61fb      	str	r3, [r7, #28]
      break;
 8003820:	f000 bd2d 	b.w	800427e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003824:	4b9f      	ldr	r3, [pc, #636]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b02      	cmp	r3, #2
 8003830:	f040 8527 	bne.w	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003834:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003838:	61fb      	str	r3, [r7, #28]
      break;
 800383a:	f000 bd22 	b.w	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800383e:	4b99      	ldr	r3, [pc, #612]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800384a:	f040 851c 	bne.w	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800384e:	4b96      	ldr	r3, [pc, #600]	@ (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003850:	61fb      	str	r3, [r7, #28]
      break;
 8003852:	f000 bd18 	b.w	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003856:	4b93      	ldr	r3, [pc, #588]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b03      	cmp	r3, #3
 8003864:	d036      	beq.n	80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b03      	cmp	r3, #3
 800386a:	d840      	bhi.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d003      	beq.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d020      	beq.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003878:	e039      	b.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800387a:	4b8a      	ldr	r3, [pc, #552]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b02      	cmp	r3, #2
 8003884:	d116      	bne.n	80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003886:	4b87      	ldr	r3, [pc, #540]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003892:	4b84      	ldr	r3, [pc, #528]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	e005      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800389e:	4b81      	ldr	r3, [pc, #516]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80038a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	4a80      	ldr	r2, [pc, #512]	@ (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80038ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80038b2:	e01f      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61bb      	str	r3, [r7, #24]
      break;
 80038b8:	e01c      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80038ba:	4b7a      	ldr	r3, [pc, #488]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c6:	d102      	bne.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80038c8:	4b79      	ldr	r3, [pc, #484]	@ (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80038ca:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80038cc:	e012      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61bb      	str	r3, [r7, #24]
      break;
 80038d2:	e00f      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80038d4:	4b73      	ldr	r3, [pc, #460]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038e0:	d102      	bne.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80038e2:	4b74      	ldr	r3, [pc, #464]	@ (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80038e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80038e6:	e005      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]
      break;
 80038ec:	e002      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
      break;
 80038f2:	bf00      	nop
    }

    switch(PeriphClk)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038fa:	f000 80dd 	beq.w	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003904:	f200 84c1 	bhi.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800390e:	f000 80d3 	beq.w	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003918:	f200 84b7 	bhi.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003922:	f000 835f 	beq.w	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800392c:	f200 84ad 	bhi.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003936:	f000 847e 	beq.w	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003940:	f200 84a3 	bhi.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800394a:	f000 82cd 	beq.w	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003954:	f200 8499 	bhi.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800395e:	f000 80ab 	beq.w	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003968:	f200 848f 	bhi.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003972:	f000 8090 	beq.w	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800397c:	f200 8485 	bhi.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003986:	d07f      	beq.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800398e:	f200 847c 	bhi.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003998:	f000 8403 	beq.w	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039a2:	f200 8472 	bhi.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039ac:	f000 83af 	beq.w	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039b6:	f200 8468 	bhi.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039c0:	f000 8379 	beq.w	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ca:	f200 845e 	bhi.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b80      	cmp	r3, #128	@ 0x80
 80039d2:	f000 8344 	beq.w	800405e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b80      	cmp	r3, #128	@ 0x80
 80039da:	f200 8456 	bhi.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d84b      	bhi.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 844f 	beq.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	2b1f      	cmp	r3, #31
 80039f2:	f200 844a 	bhi.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80039f6:	a201      	add	r2, pc, #4	@ (adr r2, 80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003be5 	.word	0x08003be5
 8003a00:	08003c53 	.word	0x08003c53
 8003a04:	0800428b 	.word	0x0800428b
 8003a08:	08003ce7 	.word	0x08003ce7
 8003a0c:	0800428b 	.word	0x0800428b
 8003a10:	0800428b 	.word	0x0800428b
 8003a14:	0800428b 	.word	0x0800428b
 8003a18:	08003d6d 	.word	0x08003d6d
 8003a1c:	0800428b 	.word	0x0800428b
 8003a20:	0800428b 	.word	0x0800428b
 8003a24:	0800428b 	.word	0x0800428b
 8003a28:	0800428b 	.word	0x0800428b
 8003a2c:	0800428b 	.word	0x0800428b
 8003a30:	0800428b 	.word	0x0800428b
 8003a34:	0800428b 	.word	0x0800428b
 8003a38:	08003de5 	.word	0x08003de5
 8003a3c:	0800428b 	.word	0x0800428b
 8003a40:	0800428b 	.word	0x0800428b
 8003a44:	0800428b 	.word	0x0800428b
 8003a48:	0800428b 	.word	0x0800428b
 8003a4c:	0800428b 	.word	0x0800428b
 8003a50:	0800428b 	.word	0x0800428b
 8003a54:	0800428b 	.word	0x0800428b
 8003a58:	0800428b 	.word	0x0800428b
 8003a5c:	0800428b 	.word	0x0800428b
 8003a60:	0800428b 	.word	0x0800428b
 8003a64:	0800428b 	.word	0x0800428b
 8003a68:	0800428b 	.word	0x0800428b
 8003a6c:	0800428b 	.word	0x0800428b
 8003a70:	0800428b 	.word	0x0800428b
 8003a74:	0800428b 	.word	0x0800428b
 8003a78:	08003e67 	.word	0x08003e67
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b40      	cmp	r3, #64	@ 0x40
 8003a80:	f000 82c1 	beq.w	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003a84:	f000 bc01 	b.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003a88:	69b9      	ldr	r1, [r7, #24]
 8003a8a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003a8e:	f000 fdd9 	bl	8004644 <RCCEx_GetSAIxPeriphCLKFreq>
 8003a92:	61f8      	str	r0, [r7, #28]
      break;
 8003a94:	e3fa      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003a96:	69b9      	ldr	r1, [r7, #24]
 8003a98:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003a9c:	f000 fdd2 	bl	8004644 <RCCEx_GetSAIxPeriphCLKFreq>
 8003aa0:	61f8      	str	r0, [r7, #28]
      break;
 8003aa2:	e3f3      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	0003d090 	.word	0x0003d090
 8003aac:	0800924c 	.word	0x0800924c
 8003ab0:	00f42400 	.word	0x00f42400
 8003ab4:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003ab8:	4ba9      	ldr	r3, [pc, #676]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abe:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003aca:	d00c      	beq.n	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003ad2:	d87f      	bhi.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ada:	d04e      	beq.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ae2:	d01d      	beq.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003ae4:	e076      	b.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003ae6:	4b9e      	ldr	r3, [pc, #632]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d172      	bne.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003af2:	4b9b      	ldr	r3, [pc, #620]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8003afe:	4b98      	ldr	r3, [pc, #608]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	e005      	b.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8003b0a:	4b95      	ldr	r3, [pc, #596]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	4a93      	ldr	r2, [pc, #588]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1c:	61fb      	str	r3, [r7, #28]
          break;
 8003b1e:	e05b      	b.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003b20:	4b8f      	ldr	r3, [pc, #572]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b2c:	d156      	bne.n	8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003b2e:	4b8c      	ldr	r3, [pc, #560]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b3a:	d14f      	bne.n	8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003b3c:	4b88      	ldr	r3, [pc, #544]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	0a1b      	lsrs	r3, r3, #8
 8003b42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b46:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	fb03 f202 	mul.w	r2, r3, r2
 8003b50:	4b83      	ldr	r3, [pc, #524]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003b62:	4b7f      	ldr	r3, [pc, #508]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	0d5b      	lsrs	r3, r3, #21
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	61fb      	str	r3, [r7, #28]
          break;
 8003b78:	e030      	b.n	8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003b7a:	4b79      	ldr	r3, [pc, #484]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b86:	d12b      	bne.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003b88:	4b75      	ldr	r3, [pc, #468]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b94:	d124      	bne.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003b96:	4b72      	ldr	r3, [pc, #456]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ba0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	fb03 f202 	mul.w	r2, r3, r2
 8003baa:	4b6d      	ldr	r3, [pc, #436]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bba:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003bbc:	4b68      	ldr	r3, [pc, #416]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	0d5b      	lsrs	r3, r3, #21
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	61fb      	str	r3, [r7, #28]
          break;
 8003bd2:	e005      	b.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8003bd4:	bf00      	nop
 8003bd6:	e359      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003bd8:	bf00      	nop
 8003bda:	e357      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003bdc:	bf00      	nop
 8003bde:	e355      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003be0:	bf00      	nop
        break;
 8003be2:	e353      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003be4:	4b5e      	ldr	r3, [pc, #376]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d827      	bhi.n	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8003bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfc:	08003c0d 	.word	0x08003c0d
 8003c00:	08003c15 	.word	0x08003c15
 8003c04:	08003c1d 	.word	0x08003c1d
 8003c08:	08003c31 	.word	0x08003c31
          frequency = HAL_RCC_GetPCLK2Freq();
 8003c0c:	f7ff fa7a 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8003c10:	61f8      	str	r0, [r7, #28]
          break;
 8003c12:	e01d      	b.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003c14:	f7ff f9c8 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8003c18:	61f8      	str	r0, [r7, #28]
          break;
 8003c1a:	e019      	b.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c1c:	4b50      	ldr	r3, [pc, #320]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c28:	d10f      	bne.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8003c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003c2c:	61fb      	str	r3, [r7, #28]
          break;
 8003c2e:	e00c      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003c30:	4b4b      	ldr	r3, [pc, #300]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8003c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c42:	61fb      	str	r3, [r7, #28]
          break;
 8003c44:	e003      	b.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8003c46:	bf00      	nop
 8003c48:	e320      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c4a:	bf00      	nop
 8003c4c:	e31e      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c4e:	bf00      	nop
        break;
 8003c50:	e31c      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003c52:	4b43      	ldr	r3, [pc, #268]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b0c      	cmp	r3, #12
 8003c62:	d83a      	bhi.n	8003cda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003c64:	a201      	add	r2, pc, #4	@ (adr r2, 8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003ca1 	.word	0x08003ca1
 8003c70:	08003cdb 	.word	0x08003cdb
 8003c74:	08003cdb 	.word	0x08003cdb
 8003c78:	08003cdb 	.word	0x08003cdb
 8003c7c:	08003ca9 	.word	0x08003ca9
 8003c80:	08003cdb 	.word	0x08003cdb
 8003c84:	08003cdb 	.word	0x08003cdb
 8003c88:	08003cdb 	.word	0x08003cdb
 8003c8c:	08003cb1 	.word	0x08003cb1
 8003c90:	08003cdb 	.word	0x08003cdb
 8003c94:	08003cdb 	.word	0x08003cdb
 8003c98:	08003cdb 	.word	0x08003cdb
 8003c9c:	08003cc5 	.word	0x08003cc5
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ca0:	f7ff fa1a 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8003ca4:	61f8      	str	r0, [r7, #28]
          break;
 8003ca6:	e01d      	b.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ca8:	f7ff f97e 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8003cac:	61f8      	str	r0, [r7, #28]
          break;
 8003cae:	e019      	b.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cbc:	d10f      	bne.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8003cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003cc0:	61fb      	str	r3, [r7, #28]
          break;
 8003cc2:	e00c      	b.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003cc4:	4b26      	ldr	r3, [pc, #152]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d107      	bne.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8003cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cd6:	61fb      	str	r3, [r7, #28]
          break;
 8003cd8:	e003      	b.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8003cda:	bf00      	nop
 8003cdc:	e2d6      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003cde:	bf00      	nop
 8003ce0:	e2d4      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ce2:	bf00      	nop
        break;
 8003ce4:	e2d2      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b30      	cmp	r3, #48	@ 0x30
 8003cf6:	d021      	beq.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b30      	cmp	r3, #48	@ 0x30
 8003cfc:	d829      	bhi.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d011      	beq.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d823      	bhi.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b10      	cmp	r3, #16
 8003d14:	d004      	beq.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8003d16:	e01c      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d18:	f7ff f9de 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8003d1c:	61f8      	str	r0, [r7, #28]
          break;
 8003d1e:	e01d      	b.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d20:	f7ff f942 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8003d24:	61f8      	str	r0, [r7, #28]
          break;
 8003d26:	e019      	b.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d28:	4b0d      	ldr	r3, [pc, #52]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d34:	d10f      	bne.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8003d36:	4b0c      	ldr	r3, [pc, #48]	@ (8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003d38:	61fb      	str	r3, [r7, #28]
          break;
 8003d3a:	e00c      	b.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d3c:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d107      	bne.n	8003d5a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8003d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d4e:	61fb      	str	r3, [r7, #28]
          break;
 8003d50:	e003      	b.n	8003d5a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8003d52:	bf00      	nop
 8003d54:	e29a      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d56:	bf00      	nop
 8003d58:	e298      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d5a:	bf00      	nop
        break;
 8003d5c:	e296      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	0800924c 	.word	0x0800924c
 8003d68:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003d6c:	4b9b      	ldr	r3, [pc, #620]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d7c:	d021      	beq.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d82:	d829      	bhi.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	2b80      	cmp	r3, #128	@ 0x80
 8003d88:	d011      	beq.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b80      	cmp	r3, #128	@ 0x80
 8003d8e:	d823      	bhi.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b40      	cmp	r3, #64	@ 0x40
 8003d9a:	d004      	beq.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8003d9c:	e01c      	b.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d9e:	f7ff f99b 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8003da2:	61f8      	str	r0, [r7, #28]
          break;
 8003da4:	e01d      	b.n	8003de2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8003da6:	f7ff f8ff 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8003daa:	61f8      	str	r0, [r7, #28]
          break;
 8003dac:	e019      	b.n	8003de2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003dae:	4b8b      	ldr	r3, [pc, #556]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dba:	d10f      	bne.n	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8003dbc:	4b88      	ldr	r3, [pc, #544]	@ (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003dbe:	61fb      	str	r3, [r7, #28]
          break;
 8003dc0:	e00c      	b.n	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003dc2:	4b86      	ldr	r3, [pc, #536]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d107      	bne.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8003dd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dd4:	61fb      	str	r3, [r7, #28]
          break;
 8003dd6:	e003      	b.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8003dd8:	bf00      	nop
 8003dda:	e257      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ddc:	bf00      	nop
 8003dde:	e255      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003de0:	bf00      	nop
        break;
 8003de2:	e253      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003de4:	4b7d      	ldr	r3, [pc, #500]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003df6:	d025      	beq.n	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dfe:	d82c      	bhi.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e06:	d013      	beq.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e0e:	d824      	bhi.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e1c:	d004      	beq.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8003e1e:	e01c      	b.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e20:	f7ff f95a 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8003e24:	61f8      	str	r0, [r7, #28]
          break;
 8003e26:	e01d      	b.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e28:	f7ff f8be 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8003e2c:	61f8      	str	r0, [r7, #28]
          break;
 8003e2e:	e019      	b.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e30:	4b6a      	ldr	r3, [pc, #424]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e3c:	d10f      	bne.n	8003e5e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8003e3e:	4b68      	ldr	r3, [pc, #416]	@ (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003e40:	61fb      	str	r3, [r7, #28]
          break;
 8003e42:	e00c      	b.n	8003e5e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e44:	4b65      	ldr	r3, [pc, #404]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d107      	bne.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8003e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e56:	61fb      	str	r3, [r7, #28]
          break;
 8003e58:	e003      	b.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8003e5a:	bf00      	nop
 8003e5c:	e216      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e5e:	bf00      	nop
 8003e60:	e214      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e62:	bf00      	nop
        break;
 8003e64:	e212      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003e66:	4b5d      	ldr	r3, [pc, #372]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e78:	d025      	beq.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e80:	d82c      	bhi.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e88:	d013      	beq.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e90:	d824      	bhi.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d004      	beq.n	8003ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e9e:	d004      	beq.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8003ea0:	e01c      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ea2:	f7ff f919 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8003ea6:	61f8      	str	r0, [r7, #28]
          break;
 8003ea8:	e01d      	b.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8003eaa:	f7ff f87d 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8003eae:	61f8      	str	r0, [r7, #28]
          break;
 8003eb0:	e019      	b.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ebe:	d10f      	bne.n	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8003ec0:	4b47      	ldr	r3, [pc, #284]	@ (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003ec2:	61fb      	str	r3, [r7, #28]
          break;
 8003ec4:	e00c      	b.n	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ec6:	4b45      	ldr	r3, [pc, #276]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8003ed4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ed8:	61fb      	str	r3, [r7, #28]
          break;
 8003eda:	e003      	b.n	8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8003edc:	bf00      	nop
 8003ede:	e1d5      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ee0:	bf00      	nop
 8003ee2:	e1d3      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ee4:	bf00      	nop
        break;
 8003ee6:	e1d1      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003efa:	d00c      	beq.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f02:	d864      	bhi.n	8003fce <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f12:	d030      	beq.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8003f14:	e05b      	b.n	8003fce <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f16:	f7ff f847 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8003f1a:	61f8      	str	r0, [r7, #28]
          break;
 8003f1c:	e05c      	b.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f2a:	d152      	bne.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8003f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d04c      	beq.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003f38:	4b28      	ldr	r3, [pc, #160]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	0a1b      	lsrs	r3, r3, #8
 8003f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f42:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	fb03 f202 	mul.w	r2, r3, r2
 8003f4c:	4b23      	ldr	r3, [pc, #140]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	3301      	adds	r3, #1
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	0e5b      	lsrs	r3, r3, #25
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	3301      	adds	r3, #1
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f72:	61fb      	str	r3, [r7, #28]
          break;
 8003f74:	e02d      	b.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8003f76:	4b19      	ldr	r3, [pc, #100]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f82:	d128      	bne.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8003f84:	4b15      	ldr	r3, [pc, #84]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d022      	beq.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003f90:	4b12      	ldr	r3, [pc, #72]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	0a1b      	lsrs	r3, r3, #8
 8003f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f9a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	fb03 f202 	mul.w	r2, r3, r2
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	3301      	adds	r3, #1
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003fb6:	4b09      	ldr	r3, [pc, #36]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	0e5b      	lsrs	r3, r3, #25
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fca:	61fb      	str	r3, [r7, #28]
          break;
 8003fcc:	e003      	b.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8003fce:	bf00      	nop
 8003fd0:	e15c      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003fd2:	bf00      	nop
 8003fd4:	e15a      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003fd6:	bf00      	nop
        break;
 8003fd8:	e158      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8003fe4:	4b9d      	ldr	r3, [pc, #628]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fee:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8003ff6:	f7ff f885 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8003ffa:	61f8      	str	r0, [r7, #28]
        break;
 8003ffc:	e146      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ffe:	f7fe ffd3 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8004002:	61f8      	str	r0, [r7, #28]
        break;
 8004004:	e142      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004006:	4b95      	ldr	r3, [pc, #596]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004018:	d013      	beq.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004020:	d819      	bhi.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d004      	beq.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800402e:	d004      	beq.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004030:	e011      	b.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004032:	f7ff f851 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8004036:	61f8      	str	r0, [r7, #28]
          break;
 8004038:	e010      	b.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800403a:	f7fe ffb5 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 800403e:	61f8      	str	r0, [r7, #28]
          break;
 8004040:	e00c      	b.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004042:	4b86      	ldr	r3, [pc, #536]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800404a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404e:	d104      	bne.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004050:	4b83      	ldr	r3, [pc, #524]	@ (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004052:	61fb      	str	r3, [r7, #28]
          break;
 8004054:	e001      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004056:	bf00      	nop
 8004058:	e118      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800405a:	bf00      	nop
        break;
 800405c:	e116      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800405e:	4b7f      	ldr	r3, [pc, #508]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004064:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004070:	d013      	beq.n	800409a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004078:	d819      	bhi.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d004      	beq.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004086:	d004      	beq.n	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004088:	e011      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 800408a:	f7ff f825 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 800408e:	61f8      	str	r0, [r7, #28]
          break;
 8004090:	e010      	b.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004092:	f7fe ff89 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8004096:	61f8      	str	r0, [r7, #28]
          break;
 8004098:	e00c      	b.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800409a:	4b70      	ldr	r3, [pc, #448]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a6:	d104      	bne.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80040a8:	4b6d      	ldr	r3, [pc, #436]	@ (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80040aa:	61fb      	str	r3, [r7, #28]
          break;
 80040ac:	e001      	b.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80040ae:	bf00      	nop
 80040b0:	e0ec      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040b2:	bf00      	nop
        break;
 80040b4:	e0ea      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80040b6:	4b69      	ldr	r3, [pc, #420]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040c8:	d013      	beq.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040d0:	d819      	bhi.n	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d004      	beq.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040de:	d004      	beq.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80040e0:	e011      	b.n	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80040e2:	f7fe fff9 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 80040e6:	61f8      	str	r0, [r7, #28]
          break;
 80040e8:	e010      	b.n	800410c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80040ea:	f7fe ff5d 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 80040ee:	61f8      	str	r0, [r7, #28]
          break;
 80040f0:	e00c      	b.n	800410c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040f2:	4b5a      	ldr	r3, [pc, #360]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fe:	d104      	bne.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004100:	4b57      	ldr	r3, [pc, #348]	@ (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004102:	61fb      	str	r3, [r7, #28]
          break;
 8004104:	e001      	b.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004106:	bf00      	nop
 8004108:	e0c0      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800410a:	bf00      	nop
        break;
 800410c:	e0be      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800410e:	4b53      	ldr	r3, [pc, #332]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004114:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004120:	d02c      	beq.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004128:	d833      	bhi.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004130:	d01a      	beq.n	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004138:	d82b      	bhi.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d004      	beq.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004146:	d004      	beq.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004148:	e023      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800414a:	f7fe ffc5 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 800414e:	61f8      	str	r0, [r7, #28]
          break;
 8004150:	e026      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004152:	4b42      	ldr	r3, [pc, #264]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004154:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d11a      	bne.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004160:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004164:	61fb      	str	r3, [r7, #28]
          break;
 8004166:	e016      	b.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004168:	4b3c      	ldr	r3, [pc, #240]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004174:	d111      	bne.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004176:	4b3a      	ldr	r3, [pc, #232]	@ (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004178:	61fb      	str	r3, [r7, #28]
          break;
 800417a:	e00e      	b.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800417c:	4b37      	ldr	r3, [pc, #220]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b02      	cmp	r3, #2
 8004188:	d109      	bne.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800418a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800418e:	61fb      	str	r3, [r7, #28]
          break;
 8004190:	e005      	b.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8004192:	bf00      	nop
 8004194:	e07a      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004196:	bf00      	nop
 8004198:	e078      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800419a:	bf00      	nop
 800419c:	e076      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800419e:	bf00      	nop
        break;
 80041a0:	e074      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80041a2:	4b2e      	ldr	r3, [pc, #184]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041b4:	d02c      	beq.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041bc:	d833      	bhi.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041c4:	d01a      	beq.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041cc:	d82b      	bhi.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d004      	beq.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041da:	d004      	beq.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80041dc:	e023      	b.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041de:	f7fe ff7b 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 80041e2:	61f8      	str	r0, [r7, #28]
          break;
 80041e4:	e026      	b.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80041e6:	4b1d      	ldr	r3, [pc, #116]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80041e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d11a      	bne.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80041f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80041f8:	61fb      	str	r3, [r7, #28]
          break;
 80041fa:	e016      	b.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041fc:	4b17      	ldr	r3, [pc, #92]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004208:	d111      	bne.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800420a:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800420c:	61fb      	str	r3, [r7, #28]
          break;
 800420e:	e00e      	b.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004210:	4b12      	ldr	r3, [pc, #72]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b02      	cmp	r3, #2
 800421c:	d109      	bne.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800421e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004222:	61fb      	str	r3, [r7, #28]
          break;
 8004224:	e005      	b.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004226:	bf00      	nop
 8004228:	e030      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800422a:	bf00      	nop
 800422c:	e02e      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800422e:	bf00      	nop
 8004230:	e02c      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004232:	bf00      	nop
        break;
 8004234:	e02a      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004236:	4b09      	ldr	r3, [pc, #36]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d004      	beq.n	8004252 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800424e:	d009      	beq.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004250:	e012      	b.n	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004252:	f7fe ff41 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8004256:	61f8      	str	r0, [r7, #28]
          break;
 8004258:	e00e      	b.n	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
 8004260:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004264:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004270:	d101      	bne.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004272:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004274:	61fb      	str	r3, [r7, #28]
          break;
 8004276:	bf00      	nop
        break;
 8004278:	e008      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800427a:	bf00      	nop
 800427c:	e006      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800427e:	bf00      	nop
 8004280:	e004      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004282:	bf00      	nop
 8004284:	e002      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004286:	bf00      	nop
 8004288:	e000      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800428a:	bf00      	nop
    }
  }

  return(frequency);
 800428c:	69fb      	ldr	r3, [r7, #28]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
 800429c:	00f42400 	.word	0x00f42400

080042a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042ae:	4b75      	ldr	r3, [pc, #468]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d018      	beq.n	80042ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042ba:	4b72      	ldr	r3, [pc, #456]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0203 	and.w	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d10d      	bne.n	80042e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
       ||
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042d2:	4b6c      	ldr	r3, [pc, #432]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
       ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d047      	beq.n	8004376 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
 80042ea:	e044      	b.n	8004376 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d018      	beq.n	8004326 <RCCEx_PLLSAI1_Config+0x86>
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d825      	bhi.n	8004344 <RCCEx_PLLSAI1_Config+0xa4>
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d002      	beq.n	8004302 <RCCEx_PLLSAI1_Config+0x62>
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d009      	beq.n	8004314 <RCCEx_PLLSAI1_Config+0x74>
 8004300:	e020      	b.n	8004344 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004302:	4b60      	ldr	r3, [pc, #384]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d11d      	bne.n	800434a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004312:	e01a      	b.n	800434a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004314:	4b5b      	ldr	r3, [pc, #364]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431c:	2b00      	cmp	r3, #0
 800431e:	d116      	bne.n	800434e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004324:	e013      	b.n	800434e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004326:	4b57      	ldr	r3, [pc, #348]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10f      	bne.n	8004352 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004332:	4b54      	ldr	r3, [pc, #336]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004342:	e006      	b.n	8004352 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
      break;
 8004348:	e004      	b.n	8004354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800434a:	bf00      	nop
 800434c:	e002      	b.n	8004354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800434e:	bf00      	nop
 8004350:	e000      	b.n	8004354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004352:	bf00      	nop
    }

    if(status == HAL_OK)
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10d      	bne.n	8004376 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800435a:	4b4a      	ldr	r3, [pc, #296]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6819      	ldr	r1, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	3b01      	subs	r3, #1
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	430b      	orrs	r3, r1
 8004370:	4944      	ldr	r1, [pc, #272]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004372:	4313      	orrs	r3, r2
 8004374:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d17d      	bne.n	8004478 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800437c:	4b41      	ldr	r3, [pc, #260]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a40      	ldr	r2, [pc, #256]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004382:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004388:	f7fd fa98 	bl	80018bc <HAL_GetTick>
 800438c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800438e:	e009      	b.n	80043a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004390:	f7fd fa94 	bl	80018bc <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d902      	bls.n	80043a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	73fb      	strb	r3, [r7, #15]
        break;
 80043a2:	e005      	b.n	80043b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043a4:	4b37      	ldr	r3, [pc, #220]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1ef      	bne.n	8004390 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d160      	bne.n	8004478 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d111      	bne.n	80043e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043bc:	4b31      	ldr	r3, [pc, #196]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80043c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6892      	ldr	r2, [r2, #8]
 80043cc:	0211      	lsls	r1, r2, #8
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	68d2      	ldr	r2, [r2, #12]
 80043d2:	0912      	lsrs	r2, r2, #4
 80043d4:	0452      	lsls	r2, r2, #17
 80043d6:	430a      	orrs	r2, r1
 80043d8:	492a      	ldr	r1, [pc, #168]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	610b      	str	r3, [r1, #16]
 80043de:	e027      	b.n	8004430 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d112      	bne.n	800440c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043e6:	4b27      	ldr	r3, [pc, #156]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80043ee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6892      	ldr	r2, [r2, #8]
 80043f6:	0211      	lsls	r1, r2, #8
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6912      	ldr	r2, [r2, #16]
 80043fc:	0852      	lsrs	r2, r2, #1
 80043fe:	3a01      	subs	r2, #1
 8004400:	0552      	lsls	r2, r2, #21
 8004402:	430a      	orrs	r2, r1
 8004404:	491f      	ldr	r1, [pc, #124]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004406:	4313      	orrs	r3, r2
 8004408:	610b      	str	r3, [r1, #16]
 800440a:	e011      	b.n	8004430 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800440c:	4b1d      	ldr	r3, [pc, #116]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004414:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6892      	ldr	r2, [r2, #8]
 800441c:	0211      	lsls	r1, r2, #8
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6952      	ldr	r2, [r2, #20]
 8004422:	0852      	lsrs	r2, r2, #1
 8004424:	3a01      	subs	r2, #1
 8004426:	0652      	lsls	r2, r2, #25
 8004428:	430a      	orrs	r2, r1
 800442a:	4916      	ldr	r1, [pc, #88]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800442c:	4313      	orrs	r3, r2
 800442e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004430:	4b14      	ldr	r3, [pc, #80]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a13      	ldr	r2, [pc, #76]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004436:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800443a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443c:	f7fd fa3e 	bl	80018bc <HAL_GetTick>
 8004440:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004442:	e009      	b.n	8004458 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004444:	f7fd fa3a 	bl	80018bc <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d902      	bls.n	8004458 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	73fb      	strb	r3, [r7, #15]
          break;
 8004456:	e005      	b.n	8004464 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004458:	4b0a      	ldr	r3, [pc, #40]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0ef      	beq.n	8004444 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800446a:	4b06      	ldr	r3, [pc, #24]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	4904      	ldr	r1, [pc, #16]	@ (8004484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004474:	4313      	orrs	r3, r2
 8004476:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004478:	7bfb      	ldrb	r3, [r7, #15]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40021000 	.word	0x40021000

08004488 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004496:	4b6a      	ldr	r3, [pc, #424]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d018      	beq.n	80044d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044a2:	4b67      	ldr	r3, [pc, #412]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0203 	and.w	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d10d      	bne.n	80044ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
       ||
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044ba:	4b61      	ldr	r3, [pc, #388]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
       ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d047      	beq.n	800455e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
 80044d2:	e044      	b.n	800455e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d018      	beq.n	800450e <RCCEx_PLLSAI2_Config+0x86>
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d825      	bhi.n	800452c <RCCEx_PLLSAI2_Config+0xa4>
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d002      	beq.n	80044ea <RCCEx_PLLSAI2_Config+0x62>
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d009      	beq.n	80044fc <RCCEx_PLLSAI2_Config+0x74>
 80044e8:	e020      	b.n	800452c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ea:	4b55      	ldr	r3, [pc, #340]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d11d      	bne.n	8004532 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044fa:	e01a      	b.n	8004532 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044fc:	4b50      	ldr	r3, [pc, #320]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004504:	2b00      	cmp	r3, #0
 8004506:	d116      	bne.n	8004536 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800450c:	e013      	b.n	8004536 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800450e:	4b4c      	ldr	r3, [pc, #304]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10f      	bne.n	800453a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800451a:	4b49      	ldr	r3, [pc, #292]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800452a:	e006      	b.n	800453a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
      break;
 8004530:	e004      	b.n	800453c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004532:	bf00      	nop
 8004534:	e002      	b.n	800453c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004536:	bf00      	nop
 8004538:	e000      	b.n	800453c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800453a:	bf00      	nop
    }

    if(status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10d      	bne.n	800455e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004542:	4b3f      	ldr	r3, [pc, #252]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6819      	ldr	r1, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	3b01      	subs	r3, #1
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	430b      	orrs	r3, r1
 8004558:	4939      	ldr	r1, [pc, #228]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 800455a:	4313      	orrs	r3, r2
 800455c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d167      	bne.n	8004634 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004564:	4b36      	ldr	r3, [pc, #216]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a35      	ldr	r2, [pc, #212]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 800456a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800456e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004570:	f7fd f9a4 	bl	80018bc <HAL_GetTick>
 8004574:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004576:	e009      	b.n	800458c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004578:	f7fd f9a0 	bl	80018bc <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d902      	bls.n	800458c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	73fb      	strb	r3, [r7, #15]
        break;
 800458a:	e005      	b.n	8004598 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800458c:	4b2c      	ldr	r3, [pc, #176]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1ef      	bne.n	8004578 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d14a      	bne.n	8004634 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d111      	bne.n	80045c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045a4:	4b26      	ldr	r3, [pc, #152]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80045ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6892      	ldr	r2, [r2, #8]
 80045b4:	0211      	lsls	r1, r2, #8
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	68d2      	ldr	r2, [r2, #12]
 80045ba:	0912      	lsrs	r2, r2, #4
 80045bc:	0452      	lsls	r2, r2, #17
 80045be:	430a      	orrs	r2, r1
 80045c0:	491f      	ldr	r1, [pc, #124]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	614b      	str	r3, [r1, #20]
 80045c6:	e011      	b.n	80045ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6892      	ldr	r2, [r2, #8]
 80045d8:	0211      	lsls	r1, r2, #8
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6912      	ldr	r2, [r2, #16]
 80045de:	0852      	lsrs	r2, r2, #1
 80045e0:	3a01      	subs	r2, #1
 80045e2:	0652      	lsls	r2, r2, #25
 80045e4:	430a      	orrs	r2, r1
 80045e6:	4916      	ldr	r1, [pc, #88]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045ec:	4b14      	ldr	r3, [pc, #80]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a13      	ldr	r2, [pc, #76]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f8:	f7fd f960 	bl	80018bc <HAL_GetTick>
 80045fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045fe:	e009      	b.n	8004614 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004600:	f7fd f95c 	bl	80018bc <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d902      	bls.n	8004614 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	73fb      	strb	r3, [r7, #15]
          break;
 8004612:	e005      	b.n	8004620 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004614:	4b0a      	ldr	r3, [pc, #40]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0ef      	beq.n	8004600 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004626:	4b06      	ldr	r3, [pc, #24]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	4904      	ldr	r1, [pc, #16]	@ (8004640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004630:	4313      	orrs	r3, r2
 8004632:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004634:	7bfb      	ldrb	r3, [r7, #15]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000

08004644 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004644:	b480      	push	{r7}
 8004646:	b089      	sub	sp, #36	@ 0x24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004660:	d10c      	bne.n	800467c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004662:	4b6e      	ldr	r3, [pc, #440]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004668:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800466c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004674:	d112      	bne.n	800469c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004676:	4b6a      	ldr	r3, [pc, #424]	@ (8004820 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e00f      	b.n	800469c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004682:	d10b      	bne.n	800469c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004684:	4b65      	ldr	r3, [pc, #404]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800468e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004696:	d101      	bne.n	800469c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004698:	4b61      	ldr	r3, [pc, #388]	@ (8004820 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800469a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f040 80b4 	bne.w	800480c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046ae:	d003      	beq.n	80046b8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046b6:	d135      	bne.n	8004724 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80046b8:	4b58      	ldr	r3, [pc, #352]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046c4:	f040 80a1 	bne.w	800480a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80046c8:	4b54      	ldr	r3, [pc, #336]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 809a 	beq.w	800480a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80046d6:	4b51      	ldr	r3, [pc, #324]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	3301      	adds	r3, #1
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80046ea:	4b4c      	ldr	r3, [pc, #304]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046f4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80046fc:	4b47      	ldr	r3, [pc, #284]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004708:	2311      	movs	r3, #17
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e001      	b.n	8004712 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800470e:	2307      	movs	r3, #7
 8004710:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	fb03 f202 	mul.w	r2, r3, r2
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004722:	e072      	b.n	800480a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d133      	bne.n	8004792 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800472a:	4b3c      	ldr	r3, [pc, #240]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004736:	d169      	bne.n	800480c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004738:	4b38      	ldr	r3, [pc, #224]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d063      	beq.n	800480c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004744:	4b35      	ldr	r3, [pc, #212]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	3301      	adds	r3, #1
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	fbb2 f3f3 	udiv	r3, r2, r3
 8004756:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004758:	4b30      	ldr	r3, [pc, #192]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	0a1b      	lsrs	r3, r3, #8
 800475e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004762:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800476a:	4b2c      	ldr	r3, [pc, #176]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004776:	2311      	movs	r3, #17
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	e001      	b.n	8004780 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800477c:	2307      	movs	r3, #7
 800477e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	fb03 f202 	mul.w	r2, r3, r2
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	fbb2 f3f3 	udiv	r3, r2, r3
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	e03c      	b.n	800480c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004798:	d003      	beq.n	80047a2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047a0:	d134      	bne.n	800480c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80047a2:	4b1e      	ldr	r3, [pc, #120]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047ae:	d12d      	bne.n	800480c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80047b0:	4b1a      	ldr	r3, [pc, #104]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d027      	beq.n	800480c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80047bc:	4b17      	ldr	r3, [pc, #92]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	3301      	adds	r3, #1
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ce:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80047d0:	4b12      	ldr	r3, [pc, #72]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	0a1b      	lsrs	r3, r3, #8
 80047d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047da:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80047e2:	4b0e      	ldr	r3, [pc, #56]	@ (800481c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80047ee:	2311      	movs	r3, #17
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	e001      	b.n	80047f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80047f4:	2307      	movs	r3, #7
 80047f6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	fb03 f202 	mul.w	r2, r3, r2
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	e000      	b.n	800480c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800480a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800480c:	69fb      	ldr	r3, [r7, #28]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3724      	adds	r7, #36	@ 0x24
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000
 8004820:	001fff68 	.word	0x001fff68

08004824 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d904      	bls.n	8004842 <HAL_SAI_InitProtocol+0x1e>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	3b03      	subs	r3, #3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d812      	bhi.n	8004866 <HAL_SAI_InitProtocol+0x42>
 8004840:	e008      	b.n	8004854 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fba3 	bl	8004f94 <SAI_InitI2S>
 800484e:	4603      	mov	r3, r0
 8004850:	75fb      	strb	r3, [r7, #23]
      break;
 8004852:	e00b      	b.n	800486c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fc4c 	bl	80050f8 <SAI_InitPCM>
 8004860:	4603      	mov	r3, r0
 8004862:	75fb      	strb	r3, [r7, #23]
      break;
 8004864:	e002      	b.n	800486c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	75fb      	strb	r3, [r7, #23]
      break;
 800486a:	bf00      	nop
  }

  if (status == HAL_OK)
 800486c:	7dfb      	ldrb	r3, [r7, #23]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d104      	bne.n	800487c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f808 	bl	8004888 <HAL_SAI_Init>
 8004878:	4603      	mov	r3, r0
 800487a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800487c:	7dfb      	ldrb	r3, [r7, #23]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e155      	b.n	8004b46 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fc f9b8 	bl	8000c24 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fca1 	bl	80051fc <SAI_Disable>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e140      	b.n	8004b46 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d00c      	beq.n	80048ee <HAL_SAI_Init+0x66>
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d80d      	bhi.n	80048f4 <HAL_SAI_Init+0x6c>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_SAI_Init+0x5a>
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d003      	beq.n	80048e8 <HAL_SAI_Init+0x60>
 80048e0:	e008      	b.n	80048f4 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
      break;
 80048e6:	e008      	b.n	80048fa <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80048e8:	2310      	movs	r3, #16
 80048ea:	61fb      	str	r3, [r7, #28]
      break;
 80048ec:	e005      	b.n	80048fa <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80048ee:	2320      	movs	r3, #32
 80048f0:	61fb      	str	r3, [r7, #28]
      break;
 80048f2:	e002      	b.n	80048fa <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
      break;
 80048f8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d81d      	bhi.n	800493e <HAL_SAI_Init+0xb6>
 8004902:	a201      	add	r2, pc, #4	@ (adr r2, 8004908 <HAL_SAI_Init+0x80>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	08004919 	.word	0x08004919
 800490c:	0800491f 	.word	0x0800491f
 8004910:	08004927 	.word	0x08004927
 8004914:	0800492f 	.word	0x0800492f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
      break;
 800491c:	e012      	b.n	8004944 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800491e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004922:	617b      	str	r3, [r7, #20]
      break;
 8004924:	e00e      	b.n	8004944 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004926:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800492a:	617b      	str	r3, [r7, #20]
      break;
 800492c:	e00a      	b.n	8004944 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800492e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004932:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	61fb      	str	r3, [r7, #28]
      break;
 800493c:	e002      	b.n	8004944 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
      break;
 8004942:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a81      	ldr	r2, [pc, #516]	@ (8004b50 <HAL_SAI_Init+0x2c8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_SAI_Init+0xd0>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a80      	ldr	r2, [pc, #512]	@ (8004b54 <HAL_SAI_Init+0x2cc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d103      	bne.n	8004960 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004958:	4a7f      	ldr	r2, [pc, #508]	@ (8004b58 <HAL_SAI_Init+0x2d0>)
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e002      	b.n	8004966 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004960:	4a7e      	ldr	r2, [pc, #504]	@ (8004b5c <HAL_SAI_Init+0x2d4>)
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d041      	beq.n	80049f2 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a77      	ldr	r2, [pc, #476]	@ (8004b50 <HAL_SAI_Init+0x2c8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_SAI_Init+0xfa>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a75      	ldr	r2, [pc, #468]	@ (8004b54 <HAL_SAI_Init+0x2cc>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d105      	bne.n	800498e <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004982:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004986:	f7fe ff1d 	bl	80037c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800498a:	6138      	str	r0, [r7, #16]
 800498c:	e004      	b.n	8004998 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800498e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004992:	f7fe ff17 	bl	80037c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004996:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	461a      	mov	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	025b      	lsls	r3, r3, #9
 80049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ae:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4a6b      	ldr	r2, [pc, #428]	@ (8004b60 <HAL_SAI_Init+0x2d8>)
 80049b4:	fba2 2303 	umull	r2, r3, r2, r3
 80049b8:	08da      	lsrs	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80049be:	68f9      	ldr	r1, [r7, #12]
 80049c0:	4b67      	ldr	r3, [pc, #412]	@ (8004b60 <HAL_SAI_Init+0x2d8>)
 80049c2:	fba3 2301 	umull	r2, r3, r3, r1
 80049c6:	08da      	lsrs	r2, r3, #3
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	1aca      	subs	r2, r1, r3
 80049d2:	2a08      	cmp	r2, #8
 80049d4:	d904      	bls.n	80049e0 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d104      	bne.n	80049f2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	085a      	lsrs	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_SAI_Init+0x17a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d109      	bne.n	8004a16 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_SAI_Init+0x186>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e001      	b.n	8004a12 <HAL_SAI_Init+0x18a>
 8004a0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	e008      	b.n	8004a28 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d102      	bne.n	8004a24 <HAL_SAI_Init+0x19c>
 8004a1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a22:	e000      	b.n	8004a26 <HAL_SAI_Init+0x19e>
 8004a24:	2300      	movs	r3, #0
 8004a26:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6819      	ldr	r1, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4b4c      	ldr	r3, [pc, #304]	@ (8004b64 <HAL_SAI_Init+0x2dc>)
 8004a34:	400b      	ands	r3, r1
 8004a36:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6819      	ldr	r1, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a46:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a4c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a52:	431a      	orrs	r2, r3
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8004a60:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004a6c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	051b      	lsls	r3, r3, #20
 8004a74:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004a8c:	f023 030f 	bic.w	r3, r3, #15
 8004a90:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699a      	ldr	r2, [r3, #24]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6899      	ldr	r1, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4b2b      	ldr	r3, [pc, #172]	@ (8004b68 <HAL_SAI_Init+0x2e0>)
 8004abc:	400b      	ands	r3, r1
 8004abe:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6899      	ldr	r1, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ad0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8004ad6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004adc:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004ae6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68d9      	ldr	r1, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8004afe:	400b      	ands	r3, r1
 8004b00:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68d9      	ldr	r1, [r3, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b10:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b16:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004b18:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40015404 	.word	0x40015404
 8004b54:	40015424 	.word	0x40015424
 8004b58:	40015400 	.word	0x40015400
 8004b5c:	40015800 	.word	0x40015800
 8004b60:	cccccccd 	.word	0xcccccccd
 8004b64:	ff05c010 	.word	0xff05c010
 8004b68:	fff88000 	.word	0xfff88000

08004b6c <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d101      	bne.n	8004b86 <HAL_SAI_Abort+0x1a>
 8004b82:	2302      	movs	r3, #2
 8004b84:	e053      	b.n	8004c2e <HAL_SAI_Abort+0xc2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fb34 	bl	80051fc <SAI_Disable>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bac:	d125      	bne.n	8004bfa <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004bbc:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b12      	cmp	r3, #18
 8004bc8:	d108      	bne.n	8004bdc <HAL_SAI_Abort+0x70>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fd f86a 	bl	8001cb0 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b22      	cmp	r3, #34	@ 0x22
 8004be6:	d108      	bne.n	8004bfa <HAL_SAI_Abort+0x8e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d004      	beq.n	8004bfa <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fd f85b 	bl	8001cb0 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c0a:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0208 	orr.w	r2, r2, #8
 8004c1a:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8192 	beq.w	8004f72 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d009      	beq.n	8004c84 <HAL_SAI_IRQHandler+0x4c>
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d004      	beq.n	8004c84 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	4798      	blx	r3
 8004c82:	e176      	b.n	8004f72 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d01e      	beq.n	8004ccc <HAL_SAI_IRQHandler+0x94>
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d019      	beq.n	8004ccc <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b22      	cmp	r3, #34	@ 0x22
 8004caa:	d101      	bne.n	8004cb0 <HAL_SAI_IRQHandler+0x78>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <HAL_SAI_IRQHandler+0x7a>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f95b 	bl	8004f80 <HAL_SAI_ErrorCallback>
 8004cca:	e152      	b.n	8004f72 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d011      	beq.n	8004cfa <HAL_SAI_IRQHandler+0xc2>
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00c      	beq.n	8004cfa <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8140 	beq.w	8004f72 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cf6:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8004cf8:	e13b      	b.n	8004f72 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d055      	beq.n	8004db0 <HAL_SAI_IRQHandler+0x178>
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d050      	beq.n	8004db0 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2220      	movs	r2, #32
 8004d14:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d1c:	f043 0204 	orr.w	r2, r3, #4
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d038      	beq.n	8004da2 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d016      	beq.n	8004d66 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d3c:	4a8f      	ldr	r2, [pc, #572]	@ (8004f7c <HAL_SAI_IRQHandler+0x344>)
 8004d3e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fc fff1 	bl	8001d2c <HAL_DMA_Abort_IT>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f90d 	bl	8004f80 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 80fc 	beq.w	8004f68 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d74:	4a81      	ldr	r2, [pc, #516]	@ (8004f7c <HAL_SAI_IRQHandler+0x344>)
 8004d76:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fc ffd5 	bl	8001d2c <HAL_DMA_Abort_IT>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80ef 	beq.w	8004f68 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d90:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f8f0 	bl	8004f80 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004da0:	e0e2      	b.n	8004f68 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff fee2 	bl	8004b6c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f8e9 	bl	8004f80 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004dae:	e0db      	b.n	8004f68 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d055      	beq.n	8004e66 <HAL_SAI_IRQHandler+0x22e>
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d050      	beq.n	8004e66 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2240      	movs	r2, #64	@ 0x40
 8004dca:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dd2:	f043 0208 	orr.w	r2, r3, #8
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d038      	beq.n	8004e58 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d016      	beq.n	8004e1c <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004df2:	4a62      	ldr	r2, [pc, #392]	@ (8004f7c <HAL_SAI_IRQHandler+0x344>)
 8004df4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fc ff96 	bl	8001d2c <HAL_DMA_Abort_IT>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f8b2 	bl	8004f80 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 80a3 	beq.w	8004f6c <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2a:	4a54      	ldr	r2, [pc, #336]	@ (8004f7c <HAL_SAI_IRQHandler+0x344>)
 8004e2c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fc ff7a 	bl	8001d2c <HAL_DMA_Abort_IT>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 8096 	beq.w	8004f6c <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f895 	bl	8004f80 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004e56:	e089      	b.n	8004f6c <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff fe87 	bl	8004b6c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f88e 	bl	8004f80 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004e64:	e082      	b.n	8004f6c <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d061      	beq.n	8004f34 <HAL_SAI_IRQHandler+0x2fc>
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d05c      	beq.n	8004f34 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2204      	movs	r2, #4
 8004e80:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e88:	f043 0220 	orr.w	r2, r3, #32
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d036      	beq.n	8004f0a <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d016      	beq.n	8004ed2 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ea8:	4a34      	ldr	r2, [pc, #208]	@ (8004f7c <HAL_SAI_IRQHandler+0x344>)
 8004eaa:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fc ff3b 	bl	8001d2c <HAL_DMA_Abort_IT>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ec2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f857 	bl	8004f80 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d04a      	beq.n	8004f70 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ede:	4a27      	ldr	r2, [pc, #156]	@ (8004f7c <HAL_SAI_IRQHandler+0x344>)
 8004ee0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fc ff20 	bl	8001d2c <HAL_DMA_Abort_IT>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d03e      	beq.n	8004f70 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ef8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f83c 	bl	8004f80 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f08:	e032      	b.n	8004f70 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f1a:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f827 	bl	8004f80 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f32:	e01d      	b.n	8004f70 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d019      	beq.n	8004f72 <HAL_SAI_IRQHandler+0x33a>
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d014      	beq.n	8004f72 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f56:	f043 0210 	orr.w	r2, r3, #16
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f80d 	bl	8004f80 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8004f66:	e004      	b.n	8004f72 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f68:	bf00      	nop
 8004f6a:	e002      	b.n	8004f72 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f6c:	bf00      	nop
 8004f6e:	e000      	b.n	8004f72 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f70:	bf00      	nop
}
 8004f72:	bf00      	nop
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	08005271 	.word	0x08005271

08004f80 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <SAI_InitI2S+0x2e>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d103      	bne.n	8004fca <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004fc8:	e002      	b.n	8004fd0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004fd6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fde:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e077      	b.n	80050ea <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d107      	bne.n	8005010 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800500c:	651a      	str	r2, [r3, #80]	@ 0x50
 800500e:	e006      	b.n	800501e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005016:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b03      	cmp	r3, #3
 8005022:	d84f      	bhi.n	80050c4 <SAI_InitI2S+0x130>
 8005024:	a201      	add	r2, pc, #4	@ (adr r2, 800502c <SAI_InitI2S+0x98>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	0800503d 	.word	0x0800503d
 8005030:	0800505f 	.word	0x0800505f
 8005034:	08005081 	.word	0x08005081
 8005038:	080050a3 	.word	0x080050a3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2280      	movs	r2, #128	@ 0x80
 8005040:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	011a      	lsls	r2, r3, #4
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2240      	movs	r2, #64	@ 0x40
 800505a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800505c:	e035      	b.n	80050ca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2280      	movs	r2, #128	@ 0x80
 8005062:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	019a      	lsls	r2, r3, #6
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2280      	movs	r2, #128	@ 0x80
 800507c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800507e:	e024      	b.n	80050ca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	22c0      	movs	r2, #192	@ 0xc0
 8005084:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	019a      	lsls	r2, r3, #6
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	085b      	lsrs	r3, r3, #1
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2280      	movs	r2, #128	@ 0x80
 800509e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80050a0:	e013      	b.n	80050ca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	22e0      	movs	r2, #224	@ 0xe0
 80050a6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	085b      	lsrs	r3, r3, #1
 80050ac:	019a      	lsls	r2, r3, #6
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	085b      	lsrs	r3, r3, #1
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2280      	movs	r2, #128	@ 0x80
 80050c0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80050c2:	e002      	b.n	80050ca <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	75fb      	strb	r3, [r7, #23]
      break;
 80050c8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d10b      	bne.n	80050e8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d102      	bne.n	80050dc <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2210      	movs	r2, #16
 80050da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d102      	bne.n	80050e8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2208      	movs	r2, #8
 80050e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop

080050f8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <SAI_InitPCM+0x2e>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d103      	bne.n	800512e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2201      	movs	r2, #1
 800512a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800512c:	e002      	b.n	8005134 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005140:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005148:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800515c:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b04      	cmp	r3, #4
 8005162:	d103      	bne.n	800516c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	645a      	str	r2, [r3, #68]	@ 0x44
 800516a:	e002      	b.n	8005172 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	220d      	movs	r2, #13
 8005170:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d837      	bhi.n	80051e8 <SAI_InitPCM+0xf0>
 8005178:	a201      	add	r2, pc, #4	@ (adr r2, 8005180 <SAI_InitPCM+0x88>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	08005191 	.word	0x08005191
 8005184:	080051a7 	.word	0x080051a7
 8005188:	080051bd 	.word	0x080051bd
 800518c:	080051d3 	.word	0x080051d3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2280      	movs	r2, #128	@ 0x80
 8005194:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	011a      	lsls	r2, r3, #4
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2240      	movs	r2, #64	@ 0x40
 80051a2:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80051a4:	e023      	b.n	80051ee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2280      	movs	r2, #128	@ 0x80
 80051aa:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2280      	movs	r2, #128	@ 0x80
 80051b8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80051ba:	e018      	b.n	80051ee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	22c0      	movs	r2, #192	@ 0xc0
 80051c0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2280      	movs	r2, #128	@ 0x80
 80051ce:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80051d0:	e00d      	b.n	80051ee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	22e0      	movs	r2, #224	@ 0xe0
 80051d6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2280      	movs	r2, #128	@ 0x80
 80051e4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80051e6:	e002      	b.n	80051ee <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	75fb      	strb	r3, [r7, #23]
      break;
 80051ec:	bf00      	nop
  }

  return status;
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005204:	4b18      	ldr	r3, [pc, #96]	@ (8005268 <SAI_Disable+0x6c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a18      	ldr	r2, [pc, #96]	@ (800526c <SAI_Disable+0x70>)
 800520a:	fba2 2303 	umull	r2, r3, r2, r3
 800520e:	0b1b      	lsrs	r3, r3, #12
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005226:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10a      	bne.n	8005244 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005234:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	72fb      	strb	r3, [r7, #11]
      break;
 8005242:	e009      	b.n	8005258 <SAI_Disable+0x5c>
    }
    count--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3b01      	subs	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e7      	bne.n	8005228 <SAI_Disable+0x2c>

  return status;
 8005258:	7afb      	ldrb	r3, [r7, #11]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000000 	.word	0x20000000
 800526c:	95cbec1b 	.word	0x95cbec1b

08005270 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800528c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2200      	movs	r2, #0
 8005294:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800529e:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d00a      	beq.n	80052c0 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7ff ffa6 	bl	80051fc <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0208 	orr.w	r2, r2, #8
 80052be:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f7ff fe55 	bl	8004f80 <HAL_SAI_ErrorCallback>
#endif
}
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e095      	b.n	800541c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d108      	bne.n	800530a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005300:	d009      	beq.n	8005316 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	61da      	str	r2, [r3, #28]
 8005308:	e005      	b.n	8005316 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d106      	bne.n	8005336 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7fb ffdf 	bl	80012f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2202      	movs	r2, #2
 800533a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800534c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005356:	d902      	bls.n	800535e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e002      	b.n	8005364 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800535e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005362:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800536c:	d007      	beq.n	800537e <HAL_SPI_Init+0xa0>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005376:	d002      	beq.n	800537e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c0:	ea42 0103 	orr.w	r1, r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	0c1b      	lsrs	r3, r3, #16
 80053da:	f003 0204 	and.w	r2, r3, #4
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80053fa:	ea42 0103 	orr.w	r1, r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	4613      	mov	r3, r2
 8005432:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005434:	f7fc fa42 	bl	80018bc <HAL_GetTick>
 8005438:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b01      	cmp	r3, #1
 8005448:	d001      	beq.n	800544e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800544a:	2302      	movs	r3, #2
 800544c:	e15c      	b.n	8005708 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <HAL_SPI_Transmit+0x36>
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e154      	b.n	8005708 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_SPI_Transmit+0x48>
 8005468:	2302      	movs	r3, #2
 800546a:	e14d      	b.n	8005708 <HAL_SPI_Transmit+0x2e4>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2203      	movs	r2, #3
 8005478:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	88fa      	ldrh	r2, [r7, #6]
 800548c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	88fa      	ldrh	r2, [r7, #6]
 8005492:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054be:	d10f      	bne.n	80054e0 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ea:	2b40      	cmp	r3, #64	@ 0x40
 80054ec:	d007      	beq.n	80054fe <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005506:	d952      	bls.n	80055ae <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_SPI_Transmit+0xf2>
 8005510:	8b7b      	ldrh	r3, [r7, #26]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d145      	bne.n	80055a2 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551a:	881a      	ldrh	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005526:	1c9a      	adds	r2, r3, #2
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800553a:	e032      	b.n	80055a2 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	d112      	bne.n	8005570 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554e:	881a      	ldrh	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555a:	1c9a      	adds	r2, r3, #2
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800556e:	e018      	b.n	80055a2 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005570:	f7fc f9a4 	bl	80018bc <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d803      	bhi.n	8005588 <HAL_SPI_Transmit+0x164>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005586:	d102      	bne.n	800558e <HAL_SPI_Transmit+0x16a>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e0b2      	b.n	8005708 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1c7      	bne.n	800553c <HAL_SPI_Transmit+0x118>
 80055ac:	e083      	b.n	80056b6 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_SPI_Transmit+0x198>
 80055b6:	8b7b      	ldrh	r3, [r7, #26]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d177      	bne.n	80056ac <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d912      	bls.n	80055ec <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ca:	881a      	ldrh	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d6:	1c9a      	adds	r2, r3, #2
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	3b02      	subs	r3, #2
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055ea:	e05f      	b.n	80056ac <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	330c      	adds	r3, #12
 80055f6:	7812      	ldrb	r2, [r2, #0]
 80055f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005612:	e04b      	b.n	80056ac <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b02      	cmp	r3, #2
 8005620:	d12b      	bne.n	800567a <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005626:	b29b      	uxth	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	d912      	bls.n	8005652 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005630:	881a      	ldrh	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	1c9a      	adds	r2, r3, #2
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b02      	subs	r3, #2
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005650:	e02c      	b.n	80056ac <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	330c      	adds	r3, #12
 800565c:	7812      	ldrb	r2, [r2, #0]
 800565e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005678:	e018      	b.n	80056ac <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800567a:	f7fc f91f 	bl	80018bc <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d803      	bhi.n	8005692 <HAL_SPI_Transmit+0x26e>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005690:	d102      	bne.n	8005698 <HAL_SPI_Transmit+0x274>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d109      	bne.n	80056ac <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e02d      	b.n	8005708 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1ae      	bne.n	8005614 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	6839      	ldr	r1, [r7, #0]
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f946 	bl	800594c <SPI_EndRxTxTransaction>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10a      	bne.n	80056ea <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005706:	2300      	movs	r3, #0
  }
}
 8005708:	4618      	mov	r0, r3
 800570a:	3720      	adds	r7, #32
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	4613      	mov	r3, r2
 800571e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005720:	f7fc f8cc 	bl	80018bc <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	4413      	add	r3, r2
 800572e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005730:	f7fc f8c4 	bl	80018bc <HAL_GetTick>
 8005734:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005736:	4b39      	ldr	r3, [pc, #228]	@ (800581c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	015b      	lsls	r3, r3, #5
 800573c:	0d1b      	lsrs	r3, r3, #20
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	fb02 f303 	mul.w	r3, r2, r3
 8005744:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005746:	e054      	b.n	80057f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800574e:	d050      	beq.n	80057f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005750:	f7fc f8b4 	bl	80018bc <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	429a      	cmp	r2, r3
 800575e:	d902      	bls.n	8005766 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d13d      	bne.n	80057e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005774:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800577e:	d111      	bne.n	80057a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005788:	d004      	beq.n	8005794 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005792:	d107      	bne.n	80057a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ac:	d10f      	bne.n	80057ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e017      	b.n	8005812 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4013      	ands	r3, r2
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	429a      	cmp	r2, r3
 8005800:	bf0c      	ite	eq
 8005802:	2301      	moveq	r3, #1
 8005804:	2300      	movne	r3, #0
 8005806:	b2db      	uxtb	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	429a      	cmp	r2, r3
 800580e:	d19b      	bne.n	8005748 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000000 	.word	0x20000000

08005820 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08a      	sub	sp, #40	@ 0x28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005832:	f7fc f843 	bl	80018bc <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	4413      	add	r3, r2
 8005840:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005842:	f7fc f83b 	bl	80018bc <HAL_GetTick>
 8005846:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005850:	4b3d      	ldr	r3, [pc, #244]	@ (8005948 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	00da      	lsls	r2, r3, #3
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	0d1b      	lsrs	r3, r3, #20
 8005860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005862:	fb02 f303 	mul.w	r3, r2, r3
 8005866:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005868:	e060      	b.n	800592c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005870:	d107      	bne.n	8005882 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d104      	bne.n	8005882 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005880:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005888:	d050      	beq.n	800592c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800588a:	f7fc f817 	bl	80018bc <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005896:	429a      	cmp	r2, r3
 8005898:	d902      	bls.n	80058a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	d13d      	bne.n	800591c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80058ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058b8:	d111      	bne.n	80058de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058c2:	d004      	beq.n	80058ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058cc:	d107      	bne.n	80058de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058e6:	d10f      	bne.n	8005908 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005906:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e010      	b.n	800593e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	3b01      	subs	r3, #1
 800592a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	4013      	ands	r3, r2
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	429a      	cmp	r2, r3
 800593a:	d196      	bne.n	800586a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3728      	adds	r7, #40	@ 0x28
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000000 	.word	0x20000000

0800594c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af02      	add	r7, sp, #8
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2200      	movs	r2, #0
 8005960:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7ff ff5b 	bl	8005820 <SPI_WaitFifoStateUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d007      	beq.n	8005980 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005974:	f043 0220 	orr.w	r2, r3, #32
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e027      	b.n	80059d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2200      	movs	r2, #0
 8005988:	2180      	movs	r1, #128	@ 0x80
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff fec0 	bl	8005710 <SPI_WaitFlagStateUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800599a:	f043 0220 	orr.w	r2, r3, #32
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e014      	b.n	80059d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff ff34 	bl	8005820 <SPI_WaitFifoStateUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059c2:	f043 0220 	orr.w	r2, r3, #32
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e000      	b.n	80059d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e040      	b.n	8005a6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fb fe68 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2224      	movs	r2, #36	@ 0x24
 8005a04:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0201 	bic.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fc32 	bl	8006288 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f977 	bl	8005d18 <UART_SetConfig>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e01b      	b.n	8005a6c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fcb1 	bl	80063cc <UART_CheckIdleState>
 8005a6a:	4603      	mov	r3, r0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	@ 0x28
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	603b      	str	r3, [r7, #0]
 8005a80:	4613      	mov	r3, r2
 8005a82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d177      	bne.n	8005b7c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_UART_Transmit+0x24>
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e070      	b.n	8005b7e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2221      	movs	r2, #33	@ 0x21
 8005aa8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aaa:	f7fb ff07 	bl	80018bc <HAL_GetTick>
 8005aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	88fa      	ldrh	r2, [r7, #6]
 8005abc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ac8:	d108      	bne.n	8005adc <HAL_UART_Transmit+0x68>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d104      	bne.n	8005adc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	61bb      	str	r3, [r7, #24]
 8005ada:	e003      	b.n	8005ae4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ae4:	e02f      	b.n	8005b46 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2200      	movs	r2, #0
 8005aee:	2180      	movs	r1, #128	@ 0x80
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 fd13 	bl	800651c <UART_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e03b      	b.n	8005b7e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	881a      	ldrh	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b18:	b292      	uxth	r2, r2
 8005b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	3302      	adds	r3, #2
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	e007      	b.n	8005b34 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	781a      	ldrb	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	3301      	adds	r3, #1
 8005b32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1c9      	bne.n	8005ae6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2140      	movs	r1, #64	@ 0x40
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 fcdd 	bl	800651c <UART_WaitOnFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d004      	beq.n	8005b72 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e005      	b.n	8005b7e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2220      	movs	r2, #32
 8005b76:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e000      	b.n	8005b7e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b7c:	2302      	movs	r3, #2
  }
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3720      	adds	r7, #32
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b08a      	sub	sp, #40	@ 0x28
 8005b8a:	af02      	add	r7, sp, #8
 8005b8c:	60f8      	str	r0, [r7, #12]
 8005b8e:	60b9      	str	r1, [r7, #8]
 8005b90:	603b      	str	r3, [r7, #0]
 8005b92:	4613      	mov	r3, r2
 8005b94:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	f040 80b6 	bne.w	8005d0e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <HAL_UART_Receive+0x28>
 8005ba8:	88fb      	ldrh	r3, [r7, #6]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e0ae      	b.n	8005d10 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2222      	movs	r2, #34	@ 0x22
 8005bbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bc8:	f7fb fe78 	bl	80018bc <HAL_GetTick>
 8005bcc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	88fa      	ldrh	r2, [r7, #6]
 8005bd2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	88fa      	ldrh	r2, [r7, #6]
 8005bda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be6:	d10e      	bne.n	8005c06 <HAL_UART_Receive+0x80>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <HAL_UART_Receive+0x76>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005bf6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bfa:	e02d      	b.n	8005c58 <HAL_UART_Receive+0xd2>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	22ff      	movs	r2, #255	@ 0xff
 8005c00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c04:	e028      	b.n	8005c58 <HAL_UART_Receive+0xd2>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10d      	bne.n	8005c2a <HAL_UART_Receive+0xa4>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d104      	bne.n	8005c20 <HAL_UART_Receive+0x9a>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	22ff      	movs	r2, #255	@ 0xff
 8005c1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c1e:	e01b      	b.n	8005c58 <HAL_UART_Receive+0xd2>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	227f      	movs	r2, #127	@ 0x7f
 8005c24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c28:	e016      	b.n	8005c58 <HAL_UART_Receive+0xd2>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c32:	d10d      	bne.n	8005c50 <HAL_UART_Receive+0xca>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d104      	bne.n	8005c46 <HAL_UART_Receive+0xc0>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	227f      	movs	r2, #127	@ 0x7f
 8005c40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c44:	e008      	b.n	8005c58 <HAL_UART_Receive+0xd2>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	223f      	movs	r2, #63	@ 0x3f
 8005c4a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c4e:	e003      	b.n	8005c58 <HAL_UART_Receive+0xd2>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c5e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c68:	d108      	bne.n	8005c7c <HAL_UART_Receive+0xf6>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d104      	bne.n	8005c7c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	61bb      	str	r3, [r7, #24]
 8005c7a:	e003      	b.n	8005c84 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005c84:	e037      	b.n	8005cf6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2120      	movs	r1, #32
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 fc43 	bl	800651c <UART_WaitOnFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e033      	b.n	8005d10 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10c      	bne.n	8005cc8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	8a7b      	ldrh	r3, [r7, #18]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	3302      	adds	r3, #2
 8005cc4:	61bb      	str	r3, [r7, #24]
 8005cc6:	e00d      	b.n	8005ce4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	8a7b      	ldrh	r3, [r7, #18]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	3b01      	subs	r3, #1
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1c1      	bne.n	8005c86 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e000      	b.n	8005d10 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005d0e:	2302      	movs	r3, #2
  }
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3720      	adds	r7, #32
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d1c:	b08a      	sub	sp, #40	@ 0x28
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4ba4      	ldr	r3, [pc, #656]	@ (8005fd8 <UART_SetConfig+0x2c0>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a99      	ldr	r2, [pc, #612]	@ (8005fdc <UART_SetConfig+0x2c4>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d004      	beq.n	8005d84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d80:	4313      	orrs	r3, r2
 8005d82:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d94:	430a      	orrs	r2, r1
 8005d96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a90      	ldr	r2, [pc, #576]	@ (8005fe0 <UART_SetConfig+0x2c8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d126      	bne.n	8005df0 <UART_SetConfig+0xd8>
 8005da2:	4b90      	ldr	r3, [pc, #576]	@ (8005fe4 <UART_SetConfig+0x2cc>)
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da8:	f003 0303 	and.w	r3, r3, #3
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d81b      	bhi.n	8005de8 <UART_SetConfig+0xd0>
 8005db0:	a201      	add	r2, pc, #4	@ (adr r2, 8005db8 <UART_SetConfig+0xa0>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005dc9 	.word	0x08005dc9
 8005dbc:	08005dd9 	.word	0x08005dd9
 8005dc0:	08005dd1 	.word	0x08005dd1
 8005dc4:	08005de1 	.word	0x08005de1
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dce:	e116      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dd6:	e112      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dde:	e10e      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005de0:	2308      	movs	r3, #8
 8005de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de6:	e10a      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005de8:	2310      	movs	r3, #16
 8005dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dee:	e106      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a7c      	ldr	r2, [pc, #496]	@ (8005fe8 <UART_SetConfig+0x2d0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d138      	bne.n	8005e6c <UART_SetConfig+0x154>
 8005dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8005fe4 <UART_SetConfig+0x2cc>)
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e00:	f003 030c 	and.w	r3, r3, #12
 8005e04:	2b0c      	cmp	r3, #12
 8005e06:	d82d      	bhi.n	8005e64 <UART_SetConfig+0x14c>
 8005e08:	a201      	add	r2, pc, #4	@ (adr r2, 8005e10 <UART_SetConfig+0xf8>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e45 	.word	0x08005e45
 8005e14:	08005e65 	.word	0x08005e65
 8005e18:	08005e65 	.word	0x08005e65
 8005e1c:	08005e65 	.word	0x08005e65
 8005e20:	08005e55 	.word	0x08005e55
 8005e24:	08005e65 	.word	0x08005e65
 8005e28:	08005e65 	.word	0x08005e65
 8005e2c:	08005e65 	.word	0x08005e65
 8005e30:	08005e4d 	.word	0x08005e4d
 8005e34:	08005e65 	.word	0x08005e65
 8005e38:	08005e65 	.word	0x08005e65
 8005e3c:	08005e65 	.word	0x08005e65
 8005e40:	08005e5d 	.word	0x08005e5d
 8005e44:	2300      	movs	r3, #0
 8005e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e4a:	e0d8      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e52:	e0d4      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005e54:	2304      	movs	r3, #4
 8005e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e5a:	e0d0      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005e5c:	2308      	movs	r3, #8
 8005e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e62:	e0cc      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005e64:	2310      	movs	r3, #16
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e6a:	e0c8      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a5e      	ldr	r2, [pc, #376]	@ (8005fec <UART_SetConfig+0x2d4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d125      	bne.n	8005ec2 <UART_SetConfig+0x1aa>
 8005e76:	4b5b      	ldr	r3, [pc, #364]	@ (8005fe4 <UART_SetConfig+0x2cc>)
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e80:	2b30      	cmp	r3, #48	@ 0x30
 8005e82:	d016      	beq.n	8005eb2 <UART_SetConfig+0x19a>
 8005e84:	2b30      	cmp	r3, #48	@ 0x30
 8005e86:	d818      	bhi.n	8005eba <UART_SetConfig+0x1a2>
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d00a      	beq.n	8005ea2 <UART_SetConfig+0x18a>
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d814      	bhi.n	8005eba <UART_SetConfig+0x1a2>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <UART_SetConfig+0x182>
 8005e94:	2b10      	cmp	r3, #16
 8005e96:	d008      	beq.n	8005eaa <UART_SetConfig+0x192>
 8005e98:	e00f      	b.n	8005eba <UART_SetConfig+0x1a2>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea0:	e0ad      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea8:	e0a9      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005eaa:	2304      	movs	r3, #4
 8005eac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eb0:	e0a5      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eb8:	e0a1      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005eba:	2310      	movs	r3, #16
 8005ebc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ec0:	e09d      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a4a      	ldr	r2, [pc, #296]	@ (8005ff0 <UART_SetConfig+0x2d8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d125      	bne.n	8005f18 <UART_SetConfig+0x200>
 8005ecc:	4b45      	ldr	r3, [pc, #276]	@ (8005fe4 <UART_SetConfig+0x2cc>)
 8005ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ed8:	d016      	beq.n	8005f08 <UART_SetConfig+0x1f0>
 8005eda:	2bc0      	cmp	r3, #192	@ 0xc0
 8005edc:	d818      	bhi.n	8005f10 <UART_SetConfig+0x1f8>
 8005ede:	2b80      	cmp	r3, #128	@ 0x80
 8005ee0:	d00a      	beq.n	8005ef8 <UART_SetConfig+0x1e0>
 8005ee2:	2b80      	cmp	r3, #128	@ 0x80
 8005ee4:	d814      	bhi.n	8005f10 <UART_SetConfig+0x1f8>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <UART_SetConfig+0x1d8>
 8005eea:	2b40      	cmp	r3, #64	@ 0x40
 8005eec:	d008      	beq.n	8005f00 <UART_SetConfig+0x1e8>
 8005eee:	e00f      	b.n	8005f10 <UART_SetConfig+0x1f8>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ef6:	e082      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005efe:	e07e      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005f00:	2304      	movs	r3, #4
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f06:	e07a      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005f08:	2308      	movs	r3, #8
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f0e:	e076      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005f10:	2310      	movs	r3, #16
 8005f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f16:	e072      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a35      	ldr	r2, [pc, #212]	@ (8005ff4 <UART_SetConfig+0x2dc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d12a      	bne.n	8005f78 <UART_SetConfig+0x260>
 8005f22:	4b30      	ldr	r3, [pc, #192]	@ (8005fe4 <UART_SetConfig+0x2cc>)
 8005f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f30:	d01a      	beq.n	8005f68 <UART_SetConfig+0x250>
 8005f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f36:	d81b      	bhi.n	8005f70 <UART_SetConfig+0x258>
 8005f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f3c:	d00c      	beq.n	8005f58 <UART_SetConfig+0x240>
 8005f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f42:	d815      	bhi.n	8005f70 <UART_SetConfig+0x258>
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <UART_SetConfig+0x238>
 8005f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f4c:	d008      	beq.n	8005f60 <UART_SetConfig+0x248>
 8005f4e:	e00f      	b.n	8005f70 <UART_SetConfig+0x258>
 8005f50:	2300      	movs	r3, #0
 8005f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f56:	e052      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f5e:	e04e      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005f60:	2304      	movs	r3, #4
 8005f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f66:	e04a      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005f68:	2308      	movs	r3, #8
 8005f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f6e:	e046      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005f70:	2310      	movs	r3, #16
 8005f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f76:	e042      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a17      	ldr	r2, [pc, #92]	@ (8005fdc <UART_SetConfig+0x2c4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d13a      	bne.n	8005ff8 <UART_SetConfig+0x2e0>
 8005f82:	4b18      	ldr	r3, [pc, #96]	@ (8005fe4 <UART_SetConfig+0x2cc>)
 8005f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f90:	d01a      	beq.n	8005fc8 <UART_SetConfig+0x2b0>
 8005f92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f96:	d81b      	bhi.n	8005fd0 <UART_SetConfig+0x2b8>
 8005f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f9c:	d00c      	beq.n	8005fb8 <UART_SetConfig+0x2a0>
 8005f9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fa2:	d815      	bhi.n	8005fd0 <UART_SetConfig+0x2b8>
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <UART_SetConfig+0x298>
 8005fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fac:	d008      	beq.n	8005fc0 <UART_SetConfig+0x2a8>
 8005fae:	e00f      	b.n	8005fd0 <UART_SetConfig+0x2b8>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb6:	e022      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fbe:	e01e      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fc6:	e01a      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005fc8:	2308      	movs	r3, #8
 8005fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fce:	e016      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fd6:	e012      	b.n	8005ffe <UART_SetConfig+0x2e6>
 8005fd8:	efff69f3 	.word	0xefff69f3
 8005fdc:	40008000 	.word	0x40008000
 8005fe0:	40013800 	.word	0x40013800
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	40004400 	.word	0x40004400
 8005fec:	40004800 	.word	0x40004800
 8005ff0:	40004c00 	.word	0x40004c00
 8005ff4:	40005000 	.word	0x40005000
 8005ff8:	2310      	movs	r3, #16
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a9f      	ldr	r2, [pc, #636]	@ (8006280 <UART_SetConfig+0x568>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d17a      	bne.n	80060fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006008:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800600c:	2b08      	cmp	r3, #8
 800600e:	d824      	bhi.n	800605a <UART_SetConfig+0x342>
 8006010:	a201      	add	r2, pc, #4	@ (adr r2, 8006018 <UART_SetConfig+0x300>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	0800603d 	.word	0x0800603d
 800601c:	0800605b 	.word	0x0800605b
 8006020:	08006045 	.word	0x08006045
 8006024:	0800605b 	.word	0x0800605b
 8006028:	0800604b 	.word	0x0800604b
 800602c:	0800605b 	.word	0x0800605b
 8006030:	0800605b 	.word	0x0800605b
 8006034:	0800605b 	.word	0x0800605b
 8006038:	08006053 	.word	0x08006053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800603c:	f7fd f84c 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8006040:	61f8      	str	r0, [r7, #28]
        break;
 8006042:	e010      	b.n	8006066 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006044:	4b8f      	ldr	r3, [pc, #572]	@ (8006284 <UART_SetConfig+0x56c>)
 8006046:	61fb      	str	r3, [r7, #28]
        break;
 8006048:	e00d      	b.n	8006066 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800604a:	f7fc ffad 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 800604e:	61f8      	str	r0, [r7, #28]
        break;
 8006050:	e009      	b.n	8006066 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006056:	61fb      	str	r3, [r7, #28]
        break;
 8006058:	e005      	b.n	8006066 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006064:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 80fb 	beq.w	8006264 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	4613      	mov	r3, r2
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	4413      	add	r3, r2
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	429a      	cmp	r2, r3
 800607c:	d305      	bcc.n	800608a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006084:	69fa      	ldr	r2, [r7, #28]
 8006086:	429a      	cmp	r2, r3
 8006088:	d903      	bls.n	8006092 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006090:	e0e8      	b.n	8006264 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	2200      	movs	r2, #0
 8006096:	461c      	mov	r4, r3
 8006098:	4615      	mov	r5, r2
 800609a:	f04f 0200 	mov.w	r2, #0
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	022b      	lsls	r3, r5, #8
 80060a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80060a8:	0222      	lsls	r2, r4, #8
 80060aa:	68f9      	ldr	r1, [r7, #12]
 80060ac:	6849      	ldr	r1, [r1, #4]
 80060ae:	0849      	lsrs	r1, r1, #1
 80060b0:	2000      	movs	r0, #0
 80060b2:	4688      	mov	r8, r1
 80060b4:	4681      	mov	r9, r0
 80060b6:	eb12 0a08 	adds.w	sl, r2, r8
 80060ba:	eb43 0b09 	adc.w	fp, r3, r9
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	603b      	str	r3, [r7, #0]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060cc:	4650      	mov	r0, sl
 80060ce:	4659      	mov	r1, fp
 80060d0:	f7fa f8de 	bl	8000290 <__aeabi_uldivmod>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4613      	mov	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060e2:	d308      	bcc.n	80060f6 <UART_SetConfig+0x3de>
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060ea:	d204      	bcs.n	80060f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	60da      	str	r2, [r3, #12]
 80060f4:	e0b6      	b.n	8006264 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060fc:	e0b2      	b.n	8006264 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006106:	d15e      	bne.n	80061c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006108:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800610c:	2b08      	cmp	r3, #8
 800610e:	d828      	bhi.n	8006162 <UART_SetConfig+0x44a>
 8006110:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <UART_SetConfig+0x400>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	0800613d 	.word	0x0800613d
 800611c:	08006145 	.word	0x08006145
 8006120:	0800614d 	.word	0x0800614d
 8006124:	08006163 	.word	0x08006163
 8006128:	08006153 	.word	0x08006153
 800612c:	08006163 	.word	0x08006163
 8006130:	08006163 	.word	0x08006163
 8006134:	08006163 	.word	0x08006163
 8006138:	0800615b 	.word	0x0800615b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800613c:	f7fc ffcc 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8006140:	61f8      	str	r0, [r7, #28]
        break;
 8006142:	e014      	b.n	800616e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006144:	f7fc ffde 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8006148:	61f8      	str	r0, [r7, #28]
        break;
 800614a:	e010      	b.n	800616e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800614c:	4b4d      	ldr	r3, [pc, #308]	@ (8006284 <UART_SetConfig+0x56c>)
 800614e:	61fb      	str	r3, [r7, #28]
        break;
 8006150:	e00d      	b.n	800616e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006152:	f7fc ff29 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8006156:	61f8      	str	r0, [r7, #28]
        break;
 8006158:	e009      	b.n	800616e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800615a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800615e:	61fb      	str	r3, [r7, #28]
        break;
 8006160:	e005      	b.n	800616e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800616c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d077      	beq.n	8006264 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	005a      	lsls	r2, r3, #1
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	085b      	lsrs	r3, r3, #1
 800617e:	441a      	add	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	fbb2 f3f3 	udiv	r3, r2, r3
 8006188:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	2b0f      	cmp	r3, #15
 800618e:	d916      	bls.n	80061be <UART_SetConfig+0x4a6>
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006196:	d212      	bcs.n	80061be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f023 030f 	bic.w	r3, r3, #15
 80061a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	085b      	lsrs	r3, r3, #1
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	8afb      	ldrh	r3, [r7, #22]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	8afa      	ldrh	r2, [r7, #22]
 80061ba:	60da      	str	r2, [r3, #12]
 80061bc:	e052      	b.n	8006264 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061c4:	e04e      	b.n	8006264 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d827      	bhi.n	800621e <UART_SetConfig+0x506>
 80061ce:	a201      	add	r2, pc, #4	@ (adr r2, 80061d4 <UART_SetConfig+0x4bc>)
 80061d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d4:	080061f9 	.word	0x080061f9
 80061d8:	08006201 	.word	0x08006201
 80061dc:	08006209 	.word	0x08006209
 80061e0:	0800621f 	.word	0x0800621f
 80061e4:	0800620f 	.word	0x0800620f
 80061e8:	0800621f 	.word	0x0800621f
 80061ec:	0800621f 	.word	0x0800621f
 80061f0:	0800621f 	.word	0x0800621f
 80061f4:	08006217 	.word	0x08006217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f8:	f7fc ff6e 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 80061fc:	61f8      	str	r0, [r7, #28]
        break;
 80061fe:	e014      	b.n	800622a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006200:	f7fc ff80 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8006204:	61f8      	str	r0, [r7, #28]
        break;
 8006206:	e010      	b.n	800622a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006208:	4b1e      	ldr	r3, [pc, #120]	@ (8006284 <UART_SetConfig+0x56c>)
 800620a:	61fb      	str	r3, [r7, #28]
        break;
 800620c:	e00d      	b.n	800622a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800620e:	f7fc fecb 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8006212:	61f8      	str	r0, [r7, #28]
        break;
 8006214:	e009      	b.n	800622a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800621a:	61fb      	str	r3, [r7, #28]
        break;
 800621c:	e005      	b.n	800622a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006228:	bf00      	nop
    }

    if (pclk != 0U)
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d019      	beq.n	8006264 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	085a      	lsrs	r2, r3, #1
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	441a      	add	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006242:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b0f      	cmp	r3, #15
 8006248:	d909      	bls.n	800625e <UART_SetConfig+0x546>
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006250:	d205      	bcs.n	800625e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60da      	str	r2, [r3, #12]
 800625c:	e002      	b.n	8006264 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006270:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006274:	4618      	mov	r0, r3
 8006276:	3728      	adds	r7, #40	@ 0x28
 8006278:	46bd      	mov	sp, r7
 800627a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800627e:	bf00      	nop
 8006280:	40008000 	.word	0x40008000
 8006284:	00f42400 	.word	0x00f42400

08006288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00a      	beq.n	80062f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01a      	beq.n	800639e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006386:	d10a      	bne.n	800639e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	605a      	str	r2, [r3, #4]
  }
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b098      	sub	sp, #96	@ 0x60
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063dc:	f7fb fa6e 	bl	80018bc <HAL_GetTick>
 80063e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d12e      	bne.n	800644e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f8:	2200      	movs	r2, #0
 80063fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f88c 	bl	800651c <UART_WaitOnFlagUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d021      	beq.n	800644e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800641a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800641e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006428:	647b      	str	r3, [r7, #68]	@ 0x44
 800642a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800642e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006430:	e841 2300 	strex	r3, r2, [r1]
 8006434:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e6      	bne.n	800640a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e062      	b.n	8006514 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b04      	cmp	r3, #4
 800645a:	d149      	bne.n	80064f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800645c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006464:	2200      	movs	r2, #0
 8006466:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f856 	bl	800651c <UART_WaitOnFlagUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d03c      	beq.n	80064f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	623b      	str	r3, [r7, #32]
   return(result);
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800648a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006494:	633b      	str	r3, [r7, #48]	@ 0x30
 8006496:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006498:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800649a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e6      	bne.n	8006476 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3308      	adds	r3, #8
 80064ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0301 	bic.w	r3, r3, #1
 80064be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3308      	adds	r3, #8
 80064c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064c8:	61fa      	str	r2, [r7, #28]
 80064ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	69b9      	ldr	r1, [r7, #24]
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	e841 2300 	strex	r3, r2, [r1]
 80064d4:	617b      	str	r3, [r7, #20]
   return(result);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e5      	bne.n	80064a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e011      	b.n	8006514 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3758      	adds	r7, #88	@ 0x58
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	603b      	str	r3, [r7, #0]
 8006528:	4613      	mov	r3, r2
 800652a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800652c:	e04f      	b.n	80065ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006534:	d04b      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006536:	f7fb f9c1 	bl	80018bc <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	429a      	cmp	r2, r3
 8006544:	d302      	bcc.n	800654c <UART_WaitOnFlagUntilTimeout+0x30>
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e04e      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	d037      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2b80      	cmp	r3, #128	@ 0x80
 8006562:	d034      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2b40      	cmp	r3, #64	@ 0x40
 8006568:	d031      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b08      	cmp	r3, #8
 8006576:	d110      	bne.n	800659a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2208      	movs	r2, #8
 800657e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 f838 	bl	80065f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2208      	movs	r2, #8
 800658a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e029      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065a8:	d111      	bne.n	80065ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f81e 	bl	80065f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2220      	movs	r2, #32
 80065be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e00f      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4013      	ands	r3, r2
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	429a      	cmp	r2, r3
 80065dc:	bf0c      	ite	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	2300      	movne	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	79fb      	ldrb	r3, [r7, #7]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d0a0      	beq.n	800652e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b095      	sub	sp, #84	@ 0x54
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006606:	e853 3f00 	ldrex	r3, [r3]
 800660a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800661c:	643b      	str	r3, [r7, #64]	@ 0x40
 800661e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006620:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006622:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006624:	e841 2300 	strex	r3, r2, [r1]
 8006628:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800662a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e6      	bne.n	80065fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3308      	adds	r3, #8
 8006636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	f023 0301 	bic.w	r3, r3, #1
 8006646:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3308      	adds	r3, #8
 800664e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006650:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006652:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e5      	bne.n	8006630 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006668:	2b01      	cmp	r3, #1
 800666a:	d118      	bne.n	800669e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	60bb      	str	r3, [r7, #8]
   return(result);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f023 0310 	bic.w	r3, r3, #16
 8006680:	647b      	str	r3, [r7, #68]	@ 0x44
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800668a:	61bb      	str	r3, [r7, #24]
 800668c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	6979      	ldr	r1, [r7, #20]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	613b      	str	r3, [r7, #16]
   return(result);
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e6      	bne.n	800666c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80066b2:	bf00      	nop
 80066b4:	3754      	adds	r7, #84	@ 0x54
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	4603      	mov	r3, r0
 80066c6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80066c8:	2300      	movs	r3, #0
 80066ca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80066cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066d0:	2b84      	cmp	r3, #132	@ 0x84
 80066d2:	d005      	beq.n	80066e0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80066d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4413      	add	r3, r2
 80066dc:	3303      	adds	r3, #3
 80066de:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80066e0:	68fb      	ldr	r3, [r7, #12]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80066f2:	f000 fae5 	bl	8006cc0 <vTaskStartScheduler>
  
  return osOK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	bd80      	pop	{r7, pc}

080066fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80066fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066fe:	b089      	sub	sp, #36	@ 0x24
 8006700:	af04      	add	r7, sp, #16
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d020      	beq.n	8006750 <osThreadCreate+0x54>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01c      	beq.n	8006750 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685c      	ldr	r4, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691e      	ldr	r6, [r3, #16]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff ffc8 	bl	80066be <makeFreeRtosPriority>
 800672e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006738:	9202      	str	r2, [sp, #8]
 800673a:	9301      	str	r3, [sp, #4]
 800673c:	9100      	str	r1, [sp, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	4632      	mov	r2, r6
 8006742:	4629      	mov	r1, r5
 8006744:	4620      	mov	r0, r4
 8006746:	f000 f8ed 	bl	8006924 <xTaskCreateStatic>
 800674a:	4603      	mov	r3, r0
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	e01c      	b.n	800678a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685c      	ldr	r4, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800675c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff ffaa 	bl	80066be <makeFreeRtosPriority>
 800676a:	4602      	mov	r2, r0
 800676c:	f107 030c 	add.w	r3, r7, #12
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	9200      	str	r2, [sp, #0]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	4632      	mov	r2, r6
 8006778:	4629      	mov	r1, r5
 800677a:	4620      	mov	r0, r4
 800677c:	f000 f932 	bl	80069e4 <xTaskCreate>
 8006780:	4603      	mov	r3, r0
 8006782:	2b01      	cmp	r3, #1
 8006784:	d001      	beq.n	800678a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006786:	2300      	movs	r3, #0
 8006788:	e000      	b.n	800678c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800678a:	68fb      	ldr	r3, [r7, #12]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006794 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <osDelay+0x16>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	e000      	b.n	80067ac <osDelay+0x18>
 80067aa:	2301      	movs	r3, #1
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fa51 	bl	8006c54 <vTaskDelay>
  
  return osOK;
 80067b2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f103 0208 	add.w	r2, r3, #8
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f103 0208 	add.w	r2, r3, #8
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f103 0208 	add.w	r2, r3, #8
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006816:	b480      	push	{r7}
 8006818:	b085      	sub	sp, #20
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	601a      	str	r2, [r3, #0]
}
 8006852:	bf00      	nop
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006874:	d103      	bne.n	800687e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	e00c      	b.n	8006898 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3308      	adds	r3, #8
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e002      	b.n	800688c <vListInsert+0x2e>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	d2f6      	bcs.n	8006886 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	601a      	str	r2, [r3, #0]
}
 80068c4:	bf00      	nop
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6892      	ldr	r2, [r2, #8]
 80068e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	6852      	ldr	r2, [r2, #4]
 80068f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d103      	bne.n	8006904 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	1e5a      	subs	r2, r3, #1
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08e      	sub	sp, #56	@ 0x38
 8006928:	af04      	add	r7, sp, #16
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10b      	bne.n	8006950 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800694a:	bf00      	nop
 800694c:	bf00      	nop
 800694e:	e7fd      	b.n	800694c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10b      	bne.n	800696e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	61fb      	str	r3, [r7, #28]
}
 8006968:	bf00      	nop
 800696a:	bf00      	nop
 800696c:	e7fd      	b.n	800696a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800696e:	2354      	movs	r3, #84	@ 0x54
 8006970:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b54      	cmp	r3, #84	@ 0x54
 8006976:	d00b      	beq.n	8006990 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	61bb      	str	r3, [r7, #24]
}
 800698a:	bf00      	nop
 800698c:	bf00      	nop
 800698e:	e7fd      	b.n	800698c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006990:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01e      	beq.n	80069d6 <xTaskCreateStatic+0xb2>
 8006998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800699a:	2b00      	cmp	r3, #0
 800699c:	d01b      	beq.n	80069d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800699e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069b0:	2300      	movs	r3, #0
 80069b2:	9303      	str	r3, [sp, #12]
 80069b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b6:	9302      	str	r3, [sp, #8]
 80069b8:	f107 0314 	add.w	r3, r7, #20
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	68b9      	ldr	r1, [r7, #8]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 f850 	bl	8006a6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80069d0:	f000 f8d6 	bl	8006b80 <prvAddNewTaskToReadyList>
 80069d4:	e001      	b.n	80069da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069da:	697b      	ldr	r3, [r7, #20]
	}
 80069dc:	4618      	mov	r0, r3
 80069de:	3728      	adds	r7, #40	@ 0x28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08c      	sub	sp, #48	@ 0x30
 80069e8:	af04      	add	r7, sp, #16
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	4613      	mov	r3, r2
 80069f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069f4:	88fb      	ldrh	r3, [r7, #6]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 feed 	bl	80077d8 <pvPortMalloc>
 80069fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00e      	beq.n	8006a24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a06:	2054      	movs	r0, #84	@ 0x54
 8006a08:	f000 fee6 	bl	80077d8 <pvPortMalloc>
 8006a0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a1a:	e005      	b.n	8006a28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a1c:	6978      	ldr	r0, [r7, #20]
 8006a1e:	f000 ffa9 	bl	8007974 <vPortFree>
 8006a22:	e001      	b.n	8006a28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d017      	beq.n	8006a5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a36:	88fa      	ldrh	r2, [r7, #6]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9303      	str	r3, [sp, #12]
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	9302      	str	r3, [sp, #8]
 8006a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a42:	9301      	str	r3, [sp, #4]
 8006a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	68b9      	ldr	r1, [r7, #8]
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 f80e 	bl	8006a6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a52:	69f8      	ldr	r0, [r7, #28]
 8006a54:	f000 f894 	bl	8006b80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	61bb      	str	r3, [r7, #24]
 8006a5c:	e002      	b.n	8006a64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a64:	69bb      	ldr	r3, [r7, #24]
	}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3720      	adds	r7, #32
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b088      	sub	sp, #32
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	607a      	str	r2, [r7, #4]
 8006a7a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a86:	3b01      	subs	r3, #1
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	f023 0307 	bic.w	r3, r3, #7
 8006a94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	617b      	str	r3, [r7, #20]
}
 8006ab2:	bf00      	nop
 8006ab4:	bf00      	nop
 8006ab6:	e7fd      	b.n	8006ab4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01f      	beq.n	8006afe <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61fb      	str	r3, [r7, #28]
 8006ac2:	e012      	b.n	8006aea <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4413      	add	r3, r2
 8006aca:	7819      	ldrb	r1, [r3, #0]
 8006acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	3334      	adds	r3, #52	@ 0x34
 8006ad4:	460a      	mov	r2, r1
 8006ad6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	4413      	add	r3, r2
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d006      	beq.n	8006af2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	61fb      	str	r3, [r7, #28]
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	2b0f      	cmp	r3, #15
 8006aee:	d9e9      	bls.n	8006ac4 <prvInitialiseNewTask+0x56>
 8006af0:	e000      	b.n	8006af4 <prvInitialiseNewTask+0x86>
			{
				break;
 8006af2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006afc:	e003      	b.n	8006b06 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b08:	2b06      	cmp	r3, #6
 8006b0a:	d901      	bls.n	8006b10 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b0c:	2306      	movs	r3, #6
 8006b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b14:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b1a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1e:	2200      	movs	r2, #0
 8006b20:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	3304      	adds	r3, #4
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff fe68 	bl	80067fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2e:	3318      	adds	r3, #24
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff fe63 	bl	80067fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3e:	f1c3 0207 	rsb	r2, r3, #7
 8006b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b4a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4e:	2200      	movs	r2, #0
 8006b50:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	68f9      	ldr	r1, [r7, #12]
 8006b5e:	69b8      	ldr	r0, [r7, #24]
 8006b60:	f000 fc2c 	bl	80073bc <pxPortInitialiseStack>
 8006b64:	4602      	mov	r2, r0
 8006b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b76:	bf00      	nop
 8006b78:	3720      	adds	r7, #32
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b88:	f000 fd46 	bl	8007618 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8006c38 <prvAddNewTaskToReadyList+0xb8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3301      	adds	r3, #1
 8006b92:	4a29      	ldr	r2, [pc, #164]	@ (8006c38 <prvAddNewTaskToReadyList+0xb8>)
 8006b94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b96:	4b29      	ldr	r3, [pc, #164]	@ (8006c3c <prvAddNewTaskToReadyList+0xbc>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b9e:	4a27      	ldr	r2, [pc, #156]	@ (8006c3c <prvAddNewTaskToReadyList+0xbc>)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ba4:	4b24      	ldr	r3, [pc, #144]	@ (8006c38 <prvAddNewTaskToReadyList+0xb8>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d110      	bne.n	8006bce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bac:	f000 fac4 	bl	8007138 <prvInitialiseTaskLists>
 8006bb0:	e00d      	b.n	8006bce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bb2:	4b23      	ldr	r3, [pc, #140]	@ (8006c40 <prvAddNewTaskToReadyList+0xc0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d109      	bne.n	8006bce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bba:	4b20      	ldr	r3, [pc, #128]	@ (8006c3c <prvAddNewTaskToReadyList+0xbc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d802      	bhi.n	8006bce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8006c3c <prvAddNewTaskToReadyList+0xbc>)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bce:	4b1d      	ldr	r3, [pc, #116]	@ (8006c44 <prvAddNewTaskToReadyList+0xc4>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8006c44 <prvAddNewTaskToReadyList+0xc4>)
 8006bd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bdc:	2201      	movs	r2, #1
 8006bde:	409a      	lsls	r2, r3
 8006be0:	4b19      	ldr	r3, [pc, #100]	@ (8006c48 <prvAddNewTaskToReadyList+0xc8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	4a18      	ldr	r2, [pc, #96]	@ (8006c48 <prvAddNewTaskToReadyList+0xc8>)
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4a15      	ldr	r2, [pc, #84]	@ (8006c4c <prvAddNewTaskToReadyList+0xcc>)
 8006bf8:	441a      	add	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4610      	mov	r0, r2
 8006c02:	f7ff fe08 	bl	8006816 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c06:	f000 fd39 	bl	800767c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c40 <prvAddNewTaskToReadyList+0xc0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00e      	beq.n	8006c30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c12:	4b0a      	ldr	r3, [pc, #40]	@ (8006c3c <prvAddNewTaskToReadyList+0xbc>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d207      	bcs.n	8006c30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c20:	4b0b      	ldr	r3, [pc, #44]	@ (8006c50 <prvAddNewTaskToReadyList+0xd0>)
 8006c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	20000724 	.word	0x20000724
 8006c3c:	20000624 	.word	0x20000624
 8006c40:	20000730 	.word	0x20000730
 8006c44:	20000740 	.word	0x20000740
 8006c48:	2000072c 	.word	0x2000072c
 8006c4c:	20000628 	.word	0x20000628
 8006c50:	e000ed04 	.word	0xe000ed04

08006c54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d018      	beq.n	8006c98 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c66:	4b14      	ldr	r3, [pc, #80]	@ (8006cb8 <vTaskDelay+0x64>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00b      	beq.n	8006c86 <vTaskDelay+0x32>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	60bb      	str	r3, [r7, #8]
}
 8006c80:	bf00      	nop
 8006c82:	bf00      	nop
 8006c84:	e7fd      	b.n	8006c82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c86:	f000 f87d 	bl	8006d84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fb2f 	bl	80072f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c92:	f000 f885 	bl	8006da0 <xTaskResumeAll>
 8006c96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d107      	bne.n	8006cae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006c9e:	4b07      	ldr	r3, [pc, #28]	@ (8006cbc <vTaskDelay+0x68>)
 8006ca0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cae:	bf00      	nop
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	2000074c 	.word	0x2000074c
 8006cbc:	e000ed04 	.word	0xe000ed04

08006cc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08a      	sub	sp, #40	@ 0x28
 8006cc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cce:	463a      	mov	r2, r7
 8006cd0:	1d39      	adds	r1, r7, #4
 8006cd2:	f107 0308 	add.w	r3, r7, #8
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7f9 fd26 	bl	8000728 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	9202      	str	r2, [sp, #8]
 8006ce4:	9301      	str	r3, [sp, #4]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	2300      	movs	r3, #0
 8006cec:	460a      	mov	r2, r1
 8006cee:	491f      	ldr	r1, [pc, #124]	@ (8006d6c <vTaskStartScheduler+0xac>)
 8006cf0:	481f      	ldr	r0, [pc, #124]	@ (8006d70 <vTaskStartScheduler+0xb0>)
 8006cf2:	f7ff fe17 	bl	8006924 <xTaskCreateStatic>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8006d74 <vTaskStartScheduler+0xb4>)
 8006cfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8006d74 <vTaskStartScheduler+0xb4>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d04:	2301      	movs	r3, #1
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	e001      	b.n	8006d0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d116      	bne.n	8006d42 <vTaskStartScheduler+0x82>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	613b      	str	r3, [r7, #16]
}
 8006d26:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d28:	4b13      	ldr	r3, [pc, #76]	@ (8006d78 <vTaskStartScheduler+0xb8>)
 8006d2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d30:	4b12      	ldr	r3, [pc, #72]	@ (8006d7c <vTaskStartScheduler+0xbc>)
 8006d32:	2201      	movs	r2, #1
 8006d34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d36:	4b12      	ldr	r3, [pc, #72]	@ (8006d80 <vTaskStartScheduler+0xc0>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d3c:	f000 fbc8 	bl	80074d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d40:	e00f      	b.n	8006d62 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d48:	d10b      	bne.n	8006d62 <vTaskStartScheduler+0xa2>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	60fb      	str	r3, [r7, #12]
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	e7fd      	b.n	8006d5e <vTaskStartScheduler+0x9e>
}
 8006d62:	bf00      	nop
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	080091e8 	.word	0x080091e8
 8006d70:	08007109 	.word	0x08007109
 8006d74:	20000748 	.word	0x20000748
 8006d78:	20000744 	.word	0x20000744
 8006d7c:	20000730 	.word	0x20000730
 8006d80:	20000728 	.word	0x20000728

08006d84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d88:	4b04      	ldr	r3, [pc, #16]	@ (8006d9c <vTaskSuspendAll+0x18>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	4a03      	ldr	r2, [pc, #12]	@ (8006d9c <vTaskSuspendAll+0x18>)
 8006d90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d92:	bf00      	nop
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	2000074c 	.word	0x2000074c

08006da0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006dae:	4b42      	ldr	r3, [pc, #264]	@ (8006eb8 <xTaskResumeAll+0x118>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10b      	bne.n	8006dce <xTaskResumeAll+0x2e>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	603b      	str	r3, [r7, #0]
}
 8006dc8:	bf00      	nop
 8006dca:	bf00      	nop
 8006dcc:	e7fd      	b.n	8006dca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006dce:	f000 fc23 	bl	8007618 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006dd2:	4b39      	ldr	r3, [pc, #228]	@ (8006eb8 <xTaskResumeAll+0x118>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	4a37      	ldr	r2, [pc, #220]	@ (8006eb8 <xTaskResumeAll+0x118>)
 8006dda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ddc:	4b36      	ldr	r3, [pc, #216]	@ (8006eb8 <xTaskResumeAll+0x118>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d161      	bne.n	8006ea8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006de4:	4b35      	ldr	r3, [pc, #212]	@ (8006ebc <xTaskResumeAll+0x11c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d05d      	beq.n	8006ea8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dec:	e02e      	b.n	8006e4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dee:	4b34      	ldr	r3, [pc, #208]	@ (8006ec0 <xTaskResumeAll+0x120>)
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3318      	adds	r3, #24
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff fd68 	bl	80068d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff fd63 	bl	80068d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	2201      	movs	r2, #1
 8006e10:	409a      	lsls	r2, r3
 8006e12:	4b2c      	ldr	r3, [pc, #176]	@ (8006ec4 <xTaskResumeAll+0x124>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	4a2a      	ldr	r2, [pc, #168]	@ (8006ec4 <xTaskResumeAll+0x124>)
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4a27      	ldr	r2, [pc, #156]	@ (8006ec8 <xTaskResumeAll+0x128>)
 8006e2a:	441a      	add	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	4619      	mov	r1, r3
 8006e32:	4610      	mov	r0, r2
 8006e34:	f7ff fcef 	bl	8006816 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e3c:	4b23      	ldr	r3, [pc, #140]	@ (8006ecc <xTaskResumeAll+0x12c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d302      	bcc.n	8006e4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006e46:	4b22      	ldr	r3, [pc, #136]	@ (8006ed0 <xTaskResumeAll+0x130>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ec0 <xTaskResumeAll+0x120>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1cc      	bne.n	8006dee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e5a:	f000 fa0b 	bl	8007274 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed4 <xTaskResumeAll+0x134>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d010      	beq.n	8006e8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e6a:	f000 f837 	bl	8006edc <xTaskIncrementTick>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006e74:	4b16      	ldr	r3, [pc, #88]	@ (8006ed0 <xTaskResumeAll+0x130>)
 8006e76:	2201      	movs	r2, #1
 8006e78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f1      	bne.n	8006e6a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006e86:	4b13      	ldr	r3, [pc, #76]	@ (8006ed4 <xTaskResumeAll+0x134>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e8c:	4b10      	ldr	r3, [pc, #64]	@ (8006ed0 <xTaskResumeAll+0x130>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d009      	beq.n	8006ea8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e94:	2301      	movs	r3, #1
 8006e96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e98:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed8 <xTaskResumeAll+0x138>)
 8006e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ea8:	f000 fbe8 	bl	800767c <vPortExitCritical>

	return xAlreadyYielded;
 8006eac:	68bb      	ldr	r3, [r7, #8]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	2000074c 	.word	0x2000074c
 8006ebc:	20000724 	.word	0x20000724
 8006ec0:	200006e4 	.word	0x200006e4
 8006ec4:	2000072c 	.word	0x2000072c
 8006ec8:	20000628 	.word	0x20000628
 8006ecc:	20000624 	.word	0x20000624
 8006ed0:	20000738 	.word	0x20000738
 8006ed4:	20000734 	.word	0x20000734
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ee6:	4b4f      	ldr	r3, [pc, #316]	@ (8007024 <xTaskIncrementTick+0x148>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f040 808f 	bne.w	800700e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8007028 <xTaskIncrementTick+0x14c>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8007028 <xTaskIncrementTick+0x14c>)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d121      	bne.n	8006f48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f04:	4b49      	ldr	r3, [pc, #292]	@ (800702c <xTaskIncrementTick+0x150>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00b      	beq.n	8006f26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	603b      	str	r3, [r7, #0]
}
 8006f20:	bf00      	nop
 8006f22:	bf00      	nop
 8006f24:	e7fd      	b.n	8006f22 <xTaskIncrementTick+0x46>
 8006f26:	4b41      	ldr	r3, [pc, #260]	@ (800702c <xTaskIncrementTick+0x150>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	4b40      	ldr	r3, [pc, #256]	@ (8007030 <xTaskIncrementTick+0x154>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a3e      	ldr	r2, [pc, #248]	@ (800702c <xTaskIncrementTick+0x150>)
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	4a3e      	ldr	r2, [pc, #248]	@ (8007030 <xTaskIncrementTick+0x154>)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8007034 <xTaskIncrementTick+0x158>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	4a3c      	ldr	r2, [pc, #240]	@ (8007034 <xTaskIncrementTick+0x158>)
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	f000 f996 	bl	8007274 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f48:	4b3b      	ldr	r3, [pc, #236]	@ (8007038 <xTaskIncrementTick+0x15c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d348      	bcc.n	8006fe4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f52:	4b36      	ldr	r3, [pc, #216]	@ (800702c <xTaskIncrementTick+0x150>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d104      	bne.n	8006f66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f5c:	4b36      	ldr	r3, [pc, #216]	@ (8007038 <xTaskIncrementTick+0x15c>)
 8006f5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f62:	601a      	str	r2, [r3, #0]
					break;
 8006f64:	e03e      	b.n	8006fe4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f66:	4b31      	ldr	r3, [pc, #196]	@ (800702c <xTaskIncrementTick+0x150>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d203      	bcs.n	8006f86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f7e:	4a2e      	ldr	r2, [pc, #184]	@ (8007038 <xTaskIncrementTick+0x15c>)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f84:	e02e      	b.n	8006fe4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff fca0 	bl	80068d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d004      	beq.n	8006fa2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	3318      	adds	r3, #24
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff fc97 	bl	80068d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	409a      	lsls	r2, r3
 8006faa:	4b24      	ldr	r3, [pc, #144]	@ (800703c <xTaskIncrementTick+0x160>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	4a22      	ldr	r2, [pc, #136]	@ (800703c <xTaskIncrementTick+0x160>)
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8007040 <xTaskIncrementTick+0x164>)
 8006fc2:	441a      	add	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	f7ff fc23 	bl	8006816 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8007044 <xTaskIncrementTick+0x168>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d3b9      	bcc.n	8006f52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fe2:	e7b6      	b.n	8006f52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fe4:	4b17      	ldr	r3, [pc, #92]	@ (8007044 <xTaskIncrementTick+0x168>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fea:	4915      	ldr	r1, [pc, #84]	@ (8007040 <xTaskIncrementTick+0x164>)
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d901      	bls.n	8007000 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007000:	4b11      	ldr	r3, [pc, #68]	@ (8007048 <xTaskIncrementTick+0x16c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d007      	beq.n	8007018 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007008:	2301      	movs	r3, #1
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	e004      	b.n	8007018 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800700e:	4b0f      	ldr	r3, [pc, #60]	@ (800704c <xTaskIncrementTick+0x170>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3301      	adds	r3, #1
 8007014:	4a0d      	ldr	r2, [pc, #52]	@ (800704c <xTaskIncrementTick+0x170>)
 8007016:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007018:	697b      	ldr	r3, [r7, #20]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	2000074c 	.word	0x2000074c
 8007028:	20000728 	.word	0x20000728
 800702c:	200006dc 	.word	0x200006dc
 8007030:	200006e0 	.word	0x200006e0
 8007034:	2000073c 	.word	0x2000073c
 8007038:	20000744 	.word	0x20000744
 800703c:	2000072c 	.word	0x2000072c
 8007040:	20000628 	.word	0x20000628
 8007044:	20000624 	.word	0x20000624
 8007048:	20000738 	.word	0x20000738
 800704c:	20000734 	.word	0x20000734

08007050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007056:	4b27      	ldr	r3, [pc, #156]	@ (80070f4 <vTaskSwitchContext+0xa4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800705e:	4b26      	ldr	r3, [pc, #152]	@ (80070f8 <vTaskSwitchContext+0xa8>)
 8007060:	2201      	movs	r2, #1
 8007062:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007064:	e040      	b.n	80070e8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007066:	4b24      	ldr	r3, [pc, #144]	@ (80070f8 <vTaskSwitchContext+0xa8>)
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800706c:	4b23      	ldr	r3, [pc, #140]	@ (80070fc <vTaskSwitchContext+0xac>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	fab3 f383 	clz	r3, r3
 8007078:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800707a:	7afb      	ldrb	r3, [r7, #11]
 800707c:	f1c3 031f 	rsb	r3, r3, #31
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	491f      	ldr	r1, [pc, #124]	@ (8007100 <vTaskSwitchContext+0xb0>)
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	440b      	add	r3, r1
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10b      	bne.n	80070ae <vTaskSwitchContext+0x5e>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	607b      	str	r3, [r7, #4]
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	e7fd      	b.n	80070aa <vTaskSwitchContext+0x5a>
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4a11      	ldr	r2, [pc, #68]	@ (8007100 <vTaskSwitchContext+0xb0>)
 80070ba:	4413      	add	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	605a      	str	r2, [r3, #4]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	3308      	adds	r3, #8
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d104      	bne.n	80070de <vTaskSwitchContext+0x8e>
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	605a      	str	r2, [r3, #4]
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	4a07      	ldr	r2, [pc, #28]	@ (8007104 <vTaskSwitchContext+0xb4>)
 80070e6:	6013      	str	r3, [r2, #0]
}
 80070e8:	bf00      	nop
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	2000074c 	.word	0x2000074c
 80070f8:	20000738 	.word	0x20000738
 80070fc:	2000072c 	.word	0x2000072c
 8007100:	20000628 	.word	0x20000628
 8007104:	20000624 	.word	0x20000624

08007108 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007110:	f000 f852 	bl	80071b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007114:	4b06      	ldr	r3, [pc, #24]	@ (8007130 <prvIdleTask+0x28>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d9f9      	bls.n	8007110 <prvIdleTask+0x8>
			{
				taskYIELD();
 800711c:	4b05      	ldr	r3, [pc, #20]	@ (8007134 <prvIdleTask+0x2c>)
 800711e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800712c:	e7f0      	b.n	8007110 <prvIdleTask+0x8>
 800712e:	bf00      	nop
 8007130:	20000628 	.word	0x20000628
 8007134:	e000ed04 	.word	0xe000ed04

08007138 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800713e:	2300      	movs	r3, #0
 8007140:	607b      	str	r3, [r7, #4]
 8007142:	e00c      	b.n	800715e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4a12      	ldr	r2, [pc, #72]	@ (8007198 <prvInitialiseTaskLists+0x60>)
 8007150:	4413      	add	r3, r2
 8007152:	4618      	mov	r0, r3
 8007154:	f7ff fb32 	bl	80067bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3301      	adds	r3, #1
 800715c:	607b      	str	r3, [r7, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b06      	cmp	r3, #6
 8007162:	d9ef      	bls.n	8007144 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007164:	480d      	ldr	r0, [pc, #52]	@ (800719c <prvInitialiseTaskLists+0x64>)
 8007166:	f7ff fb29 	bl	80067bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800716a:	480d      	ldr	r0, [pc, #52]	@ (80071a0 <prvInitialiseTaskLists+0x68>)
 800716c:	f7ff fb26 	bl	80067bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007170:	480c      	ldr	r0, [pc, #48]	@ (80071a4 <prvInitialiseTaskLists+0x6c>)
 8007172:	f7ff fb23 	bl	80067bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007176:	480c      	ldr	r0, [pc, #48]	@ (80071a8 <prvInitialiseTaskLists+0x70>)
 8007178:	f7ff fb20 	bl	80067bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800717c:	480b      	ldr	r0, [pc, #44]	@ (80071ac <prvInitialiseTaskLists+0x74>)
 800717e:	f7ff fb1d 	bl	80067bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007182:	4b0b      	ldr	r3, [pc, #44]	@ (80071b0 <prvInitialiseTaskLists+0x78>)
 8007184:	4a05      	ldr	r2, [pc, #20]	@ (800719c <prvInitialiseTaskLists+0x64>)
 8007186:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007188:	4b0a      	ldr	r3, [pc, #40]	@ (80071b4 <prvInitialiseTaskLists+0x7c>)
 800718a:	4a05      	ldr	r2, [pc, #20]	@ (80071a0 <prvInitialiseTaskLists+0x68>)
 800718c:	601a      	str	r2, [r3, #0]
}
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000628 	.word	0x20000628
 800719c:	200006b4 	.word	0x200006b4
 80071a0:	200006c8 	.word	0x200006c8
 80071a4:	200006e4 	.word	0x200006e4
 80071a8:	200006f8 	.word	0x200006f8
 80071ac:	20000710 	.word	0x20000710
 80071b0:	200006dc 	.word	0x200006dc
 80071b4:	200006e0 	.word	0x200006e0

080071b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071be:	e019      	b.n	80071f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071c0:	f000 fa2a 	bl	8007618 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c4:	4b10      	ldr	r3, [pc, #64]	@ (8007208 <prvCheckTasksWaitingTermination+0x50>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff fb7d 	bl	80068d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071d6:	4b0d      	ldr	r3, [pc, #52]	@ (800720c <prvCheckTasksWaitingTermination+0x54>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3b01      	subs	r3, #1
 80071dc:	4a0b      	ldr	r2, [pc, #44]	@ (800720c <prvCheckTasksWaitingTermination+0x54>)
 80071de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007210 <prvCheckTasksWaitingTermination+0x58>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007210 <prvCheckTasksWaitingTermination+0x58>)
 80071e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071ea:	f000 fa47 	bl	800767c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f810 	bl	8007214 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071f4:	4b06      	ldr	r3, [pc, #24]	@ (8007210 <prvCheckTasksWaitingTermination+0x58>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e1      	bne.n	80071c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071fc:	bf00      	nop
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	200006f8 	.word	0x200006f8
 800720c:	20000724 	.word	0x20000724
 8007210:	2000070c 	.word	0x2000070c

08007214 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007222:	2b00      	cmp	r3, #0
 8007224:	d108      	bne.n	8007238 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fba2 	bl	8007974 <vPortFree>
				vPortFree( pxTCB );
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fb9f 	bl	8007974 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007236:	e019      	b.n	800726c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800723e:	2b01      	cmp	r3, #1
 8007240:	d103      	bne.n	800724a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fb96 	bl	8007974 <vPortFree>
	}
 8007248:	e010      	b.n	800726c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007250:	2b02      	cmp	r3, #2
 8007252:	d00b      	beq.n	800726c <prvDeleteTCB+0x58>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	60fb      	str	r3, [r7, #12]
}
 8007266:	bf00      	nop
 8007268:	bf00      	nop
 800726a:	e7fd      	b.n	8007268 <prvDeleteTCB+0x54>
	}
 800726c:	bf00      	nop
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800727a:	4b0c      	ldr	r3, [pc, #48]	@ (80072ac <prvResetNextTaskUnblockTime+0x38>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d104      	bne.n	800728e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007284:	4b0a      	ldr	r3, [pc, #40]	@ (80072b0 <prvResetNextTaskUnblockTime+0x3c>)
 8007286:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800728a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800728c:	e008      	b.n	80072a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800728e:	4b07      	ldr	r3, [pc, #28]	@ (80072ac <prvResetNextTaskUnblockTime+0x38>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	4a04      	ldr	r2, [pc, #16]	@ (80072b0 <prvResetNextTaskUnblockTime+0x3c>)
 800729e:	6013      	str	r3, [r2, #0]
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	200006dc 	.word	0x200006dc
 80072b0:	20000744 	.word	0x20000744

080072b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072ba:	4b0b      	ldr	r3, [pc, #44]	@ (80072e8 <xTaskGetSchedulerState+0x34>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d102      	bne.n	80072c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072c2:	2301      	movs	r3, #1
 80072c4:	607b      	str	r3, [r7, #4]
 80072c6:	e008      	b.n	80072da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072c8:	4b08      	ldr	r3, [pc, #32]	@ (80072ec <xTaskGetSchedulerState+0x38>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d102      	bne.n	80072d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072d0:	2302      	movs	r3, #2
 80072d2:	607b      	str	r3, [r7, #4]
 80072d4:	e001      	b.n	80072da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072d6:	2300      	movs	r3, #0
 80072d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072da:	687b      	ldr	r3, [r7, #4]
	}
 80072dc:	4618      	mov	r0, r3
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	20000730 	.word	0x20000730
 80072ec:	2000074c 	.word	0x2000074c

080072f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072fa:	4b29      	ldr	r3, [pc, #164]	@ (80073a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007300:	4b28      	ldr	r3, [pc, #160]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3304      	adds	r3, #4
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff fae2 	bl	80068d0 <uxListRemove>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10b      	bne.n	800732a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007312:	4b24      	ldr	r3, [pc, #144]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007318:	2201      	movs	r2, #1
 800731a:	fa02 f303 	lsl.w	r3, r2, r3
 800731e:	43da      	mvns	r2, r3
 8007320:	4b21      	ldr	r3, [pc, #132]	@ (80073a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4013      	ands	r3, r2
 8007326:	4a20      	ldr	r2, [pc, #128]	@ (80073a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007328:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007330:	d10a      	bne.n	8007348 <prvAddCurrentTaskToDelayedList+0x58>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d007      	beq.n	8007348 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007338:	4b1a      	ldr	r3, [pc, #104]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3304      	adds	r3, #4
 800733e:	4619      	mov	r1, r3
 8007340:	481a      	ldr	r0, [pc, #104]	@ (80073ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8007342:	f7ff fa68 	bl	8006816 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007346:	e026      	b.n	8007396 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4413      	add	r3, r2
 800734e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007350:	4b14      	ldr	r3, [pc, #80]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	429a      	cmp	r2, r3
 800735e:	d209      	bcs.n	8007374 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007360:	4b13      	ldr	r3, [pc, #76]	@ (80073b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	4b0f      	ldr	r3, [pc, #60]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3304      	adds	r3, #4
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f7ff fa76 	bl	800685e <vListInsert>
}
 8007372:	e010      	b.n	8007396 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007374:	4b0f      	ldr	r3, [pc, #60]	@ (80073b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	4b0a      	ldr	r3, [pc, #40]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3304      	adds	r3, #4
 800737e:	4619      	mov	r1, r3
 8007380:	4610      	mov	r0, r2
 8007382:	f7ff fa6c 	bl	800685e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007386:	4b0c      	ldr	r3, [pc, #48]	@ (80073b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	429a      	cmp	r2, r3
 800738e:	d202      	bcs.n	8007396 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007390:	4a09      	ldr	r2, [pc, #36]	@ (80073b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	6013      	str	r3, [r2, #0]
}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000728 	.word	0x20000728
 80073a4:	20000624 	.word	0x20000624
 80073a8:	2000072c 	.word	0x2000072c
 80073ac:	20000710 	.word	0x20000710
 80073b0:	200006e0 	.word	0x200006e0
 80073b4:	200006dc 	.word	0x200006dc
 80073b8:	20000744 	.word	0x20000744

080073bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3b04      	subs	r3, #4
 80073cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3b04      	subs	r3, #4
 80073da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f023 0201 	bic.w	r2, r3, #1
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3b04      	subs	r3, #4
 80073ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073ec:	4a0c      	ldr	r2, [pc, #48]	@ (8007420 <pxPortInitialiseStack+0x64>)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3b14      	subs	r3, #20
 80073f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3b04      	subs	r3, #4
 8007402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f06f 0202 	mvn.w	r2, #2
 800740a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3b20      	subs	r3, #32
 8007410:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007412:	68fb      	ldr	r3, [r7, #12]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	08007425 	.word	0x08007425

08007424 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800742e:	4b13      	ldr	r3, [pc, #76]	@ (800747c <prvTaskExitError+0x58>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007436:	d00b      	beq.n	8007450 <prvTaskExitError+0x2c>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	60fb      	str	r3, [r7, #12]
}
 800744a:	bf00      	nop
 800744c:	bf00      	nop
 800744e:	e7fd      	b.n	800744c <prvTaskExitError+0x28>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	60bb      	str	r3, [r7, #8]
}
 8007462:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007464:	bf00      	nop
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0fc      	beq.n	8007466 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	2000000c 	.word	0x2000000c

08007480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007480:	4b07      	ldr	r3, [pc, #28]	@ (80074a0 <pxCurrentTCBConst2>)
 8007482:	6819      	ldr	r1, [r3, #0]
 8007484:	6808      	ldr	r0, [r1, #0]
 8007486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748a:	f380 8809 	msr	PSP, r0
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f04f 0000 	mov.w	r0, #0
 8007496:	f380 8811 	msr	BASEPRI, r0
 800749a:	4770      	bx	lr
 800749c:	f3af 8000 	nop.w

080074a0 <pxCurrentTCBConst2>:
 80074a0:	20000624 	.word	0x20000624
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop

080074a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074a8:	4808      	ldr	r0, [pc, #32]	@ (80074cc <prvPortStartFirstTask+0x24>)
 80074aa:	6800      	ldr	r0, [r0, #0]
 80074ac:	6800      	ldr	r0, [r0, #0]
 80074ae:	f380 8808 	msr	MSP, r0
 80074b2:	f04f 0000 	mov.w	r0, #0
 80074b6:	f380 8814 	msr	CONTROL, r0
 80074ba:	b662      	cpsie	i
 80074bc:	b661      	cpsie	f
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	df00      	svc	0
 80074c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074ca:	bf00      	nop
 80074cc:	e000ed08 	.word	0xe000ed08

080074d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074d6:	4b47      	ldr	r3, [pc, #284]	@ (80075f4 <xPortStartScheduler+0x124>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a47      	ldr	r2, [pc, #284]	@ (80075f8 <xPortStartScheduler+0x128>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d10b      	bne.n	80074f8 <xPortStartScheduler+0x28>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	613b      	str	r3, [r7, #16]
}
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
 80074f6:	e7fd      	b.n	80074f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074f8:	4b3e      	ldr	r3, [pc, #248]	@ (80075f4 <xPortStartScheduler+0x124>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a3f      	ldr	r2, [pc, #252]	@ (80075fc <xPortStartScheduler+0x12c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d10b      	bne.n	800751a <xPortStartScheduler+0x4a>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	60fb      	str	r3, [r7, #12]
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop
 8007518:	e7fd      	b.n	8007516 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800751a:	4b39      	ldr	r3, [pc, #228]	@ (8007600 <xPortStartScheduler+0x130>)
 800751c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	22ff      	movs	r2, #255	@ 0xff
 800752a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800753c:	b2da      	uxtb	r2, r3
 800753e:	4b31      	ldr	r3, [pc, #196]	@ (8007604 <xPortStartScheduler+0x134>)
 8007540:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007542:	4b31      	ldr	r3, [pc, #196]	@ (8007608 <xPortStartScheduler+0x138>)
 8007544:	2207      	movs	r2, #7
 8007546:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007548:	e009      	b.n	800755e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800754a:	4b2f      	ldr	r3, [pc, #188]	@ (8007608 <xPortStartScheduler+0x138>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3b01      	subs	r3, #1
 8007550:	4a2d      	ldr	r2, [pc, #180]	@ (8007608 <xPortStartScheduler+0x138>)
 8007552:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	b2db      	uxtb	r3, r3
 800755c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800755e:	78fb      	ldrb	r3, [r7, #3]
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007566:	2b80      	cmp	r3, #128	@ 0x80
 8007568:	d0ef      	beq.n	800754a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800756a:	4b27      	ldr	r3, [pc, #156]	@ (8007608 <xPortStartScheduler+0x138>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f1c3 0307 	rsb	r3, r3, #7
 8007572:	2b04      	cmp	r3, #4
 8007574:	d00b      	beq.n	800758e <xPortStartScheduler+0xbe>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	60bb      	str	r3, [r7, #8]
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	e7fd      	b.n	800758a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800758e:	4b1e      	ldr	r3, [pc, #120]	@ (8007608 <xPortStartScheduler+0x138>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	021b      	lsls	r3, r3, #8
 8007594:	4a1c      	ldr	r2, [pc, #112]	@ (8007608 <xPortStartScheduler+0x138>)
 8007596:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007598:	4b1b      	ldr	r3, [pc, #108]	@ (8007608 <xPortStartScheduler+0x138>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075a0:	4a19      	ldr	r2, [pc, #100]	@ (8007608 <xPortStartScheduler+0x138>)
 80075a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075ac:	4b17      	ldr	r3, [pc, #92]	@ (800760c <xPortStartScheduler+0x13c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a16      	ldr	r2, [pc, #88]	@ (800760c <xPortStartScheduler+0x13c>)
 80075b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80075b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075b8:	4b14      	ldr	r3, [pc, #80]	@ (800760c <xPortStartScheduler+0x13c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a13      	ldr	r2, [pc, #76]	@ (800760c <xPortStartScheduler+0x13c>)
 80075be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80075c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075c4:	f000 f8da 	bl	800777c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075c8:	4b11      	ldr	r3, [pc, #68]	@ (8007610 <xPortStartScheduler+0x140>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075ce:	f000 f8f9 	bl	80077c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075d2:	4b10      	ldr	r3, [pc, #64]	@ (8007614 <xPortStartScheduler+0x144>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007614 <xPortStartScheduler+0x144>)
 80075d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80075dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075de:	f7ff ff63 	bl	80074a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075e2:	f7ff fd35 	bl	8007050 <vTaskSwitchContext>
	prvTaskExitError();
 80075e6:	f7ff ff1d 	bl	8007424 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	e000ed00 	.word	0xe000ed00
 80075f8:	410fc271 	.word	0x410fc271
 80075fc:	410fc270 	.word	0x410fc270
 8007600:	e000e400 	.word	0xe000e400
 8007604:	20000750 	.word	0x20000750
 8007608:	20000754 	.word	0x20000754
 800760c:	e000ed20 	.word	0xe000ed20
 8007610:	2000000c 	.word	0x2000000c
 8007614:	e000ef34 	.word	0xe000ef34

08007618 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	607b      	str	r3, [r7, #4]
}
 8007630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007632:	4b10      	ldr	r3, [pc, #64]	@ (8007674 <vPortEnterCritical+0x5c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3301      	adds	r3, #1
 8007638:	4a0e      	ldr	r2, [pc, #56]	@ (8007674 <vPortEnterCritical+0x5c>)
 800763a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800763c:	4b0d      	ldr	r3, [pc, #52]	@ (8007674 <vPortEnterCritical+0x5c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d110      	bne.n	8007666 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007644:	4b0c      	ldr	r3, [pc, #48]	@ (8007678 <vPortEnterCritical+0x60>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00b      	beq.n	8007666 <vPortEnterCritical+0x4e>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	603b      	str	r3, [r7, #0]
}
 8007660:	bf00      	nop
 8007662:	bf00      	nop
 8007664:	e7fd      	b.n	8007662 <vPortEnterCritical+0x4a>
	}
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	2000000c 	.word	0x2000000c
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007682:	4b12      	ldr	r3, [pc, #72]	@ (80076cc <vPortExitCritical+0x50>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10b      	bne.n	80076a2 <vPortExitCritical+0x26>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	607b      	str	r3, [r7, #4]
}
 800769c:	bf00      	nop
 800769e:	bf00      	nop
 80076a0:	e7fd      	b.n	800769e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076a2:	4b0a      	ldr	r3, [pc, #40]	@ (80076cc <vPortExitCritical+0x50>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	4a08      	ldr	r2, [pc, #32]	@ (80076cc <vPortExitCritical+0x50>)
 80076aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076ac:	4b07      	ldr	r3, [pc, #28]	@ (80076cc <vPortExitCritical+0x50>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d105      	bne.n	80076c0 <vPortExitCritical+0x44>
 80076b4:	2300      	movs	r3, #0
 80076b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80076be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	2000000c 	.word	0x2000000c

080076d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076d0:	f3ef 8009 	mrs	r0, PSP
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	4b15      	ldr	r3, [pc, #84]	@ (8007730 <pxCurrentTCBConst>)
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	f01e 0f10 	tst.w	lr, #16
 80076e0:	bf08      	it	eq
 80076e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ea:	6010      	str	r0, [r2, #0]
 80076ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80076f4:	f380 8811 	msr	BASEPRI, r0
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f7ff fca6 	bl	8007050 <vTaskSwitchContext>
 8007704:	f04f 0000 	mov.w	r0, #0
 8007708:	f380 8811 	msr	BASEPRI, r0
 800770c:	bc09      	pop	{r0, r3}
 800770e:	6819      	ldr	r1, [r3, #0]
 8007710:	6808      	ldr	r0, [r1, #0]
 8007712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007716:	f01e 0f10 	tst.w	lr, #16
 800771a:	bf08      	it	eq
 800771c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007720:	f380 8809 	msr	PSP, r0
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	f3af 8000 	nop.w

08007730 <pxCurrentTCBConst>:
 8007730:	20000624 	.word	0x20000624
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop

08007738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	607b      	str	r3, [r7, #4]
}
 8007750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007752:	f7ff fbc3 	bl	8006edc <xTaskIncrementTick>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800775c:	4b06      	ldr	r3, [pc, #24]	@ (8007778 <xPortSysTickHandler+0x40>)
 800775e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	2300      	movs	r3, #0
 8007766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	f383 8811 	msr	BASEPRI, r3
}
 800776e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007780:	4b0b      	ldr	r3, [pc, #44]	@ (80077b0 <vPortSetupTimerInterrupt+0x34>)
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007786:	4b0b      	ldr	r3, [pc, #44]	@ (80077b4 <vPortSetupTimerInterrupt+0x38>)
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800778c:	4b0a      	ldr	r3, [pc, #40]	@ (80077b8 <vPortSetupTimerInterrupt+0x3c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a0a      	ldr	r2, [pc, #40]	@ (80077bc <vPortSetupTimerInterrupt+0x40>)
 8007792:	fba2 2303 	umull	r2, r3, r2, r3
 8007796:	099b      	lsrs	r3, r3, #6
 8007798:	4a09      	ldr	r2, [pc, #36]	@ (80077c0 <vPortSetupTimerInterrupt+0x44>)
 800779a:	3b01      	subs	r3, #1
 800779c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800779e:	4b04      	ldr	r3, [pc, #16]	@ (80077b0 <vPortSetupTimerInterrupt+0x34>)
 80077a0:	2207      	movs	r2, #7
 80077a2:	601a      	str	r2, [r3, #0]
}
 80077a4:	bf00      	nop
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	e000e010 	.word	0xe000e010
 80077b4:	e000e018 	.word	0xe000e018
 80077b8:	20000000 	.word	0x20000000
 80077bc:	10624dd3 	.word	0x10624dd3
 80077c0:	e000e014 	.word	0xe000e014

080077c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80077d4 <vPortEnableVFP+0x10>
 80077c8:	6801      	ldr	r1, [r0, #0]
 80077ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80077ce:	6001      	str	r1, [r0, #0]
 80077d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077d2:	bf00      	nop
 80077d4:	e000ed88 	.word	0xe000ed88

080077d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08a      	sub	sp, #40	@ 0x28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077e4:	f7ff face 	bl	8006d84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077e8:	4b5c      	ldr	r3, [pc, #368]	@ (800795c <pvPortMalloc+0x184>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077f0:	f000 f924 	bl	8007a3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077f4:	4b5a      	ldr	r3, [pc, #360]	@ (8007960 <pvPortMalloc+0x188>)
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4013      	ands	r3, r2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f040 8095 	bne.w	800792c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01e      	beq.n	8007846 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007808:	2208      	movs	r2, #8
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4413      	add	r3, r2
 800780e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	2b00      	cmp	r3, #0
 8007818:	d015      	beq.n	8007846 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f023 0307 	bic.w	r3, r3, #7
 8007820:	3308      	adds	r3, #8
 8007822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00b      	beq.n	8007846 <pvPortMalloc+0x6e>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	617b      	str	r3, [r7, #20]
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	e7fd      	b.n	8007842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d06f      	beq.n	800792c <pvPortMalloc+0x154>
 800784c:	4b45      	ldr	r3, [pc, #276]	@ (8007964 <pvPortMalloc+0x18c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	429a      	cmp	r2, r3
 8007854:	d86a      	bhi.n	800792c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007856:	4b44      	ldr	r3, [pc, #272]	@ (8007968 <pvPortMalloc+0x190>)
 8007858:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800785a:	4b43      	ldr	r3, [pc, #268]	@ (8007968 <pvPortMalloc+0x190>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007860:	e004      	b.n	800786c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007864:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	429a      	cmp	r2, r3
 8007874:	d903      	bls.n	800787e <pvPortMalloc+0xa6>
 8007876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1f1      	bne.n	8007862 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800787e:	4b37      	ldr	r3, [pc, #220]	@ (800795c <pvPortMalloc+0x184>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007884:	429a      	cmp	r2, r3
 8007886:	d051      	beq.n	800792c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2208      	movs	r2, #8
 800788e:	4413      	add	r3, r2
 8007890:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	1ad2      	subs	r2, r2, r3
 80078a2:	2308      	movs	r3, #8
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d920      	bls.n	80078ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4413      	add	r3, r2
 80078b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	f003 0307 	and.w	r3, r3, #7
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00b      	beq.n	80078d4 <pvPortMalloc+0xfc>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	613b      	str	r3, [r7, #16]
}
 80078ce:	bf00      	nop
 80078d0:	bf00      	nop
 80078d2:	e7fd      	b.n	80078d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	1ad2      	subs	r2, r2, r3
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078e6:	69b8      	ldr	r0, [r7, #24]
 80078e8:	f000 f90a 	bl	8007b00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007964 <pvPortMalloc+0x18c>)
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007964 <pvPortMalloc+0x18c>)
 80078f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007964 <pvPortMalloc+0x18c>)
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	4b1b      	ldr	r3, [pc, #108]	@ (800796c <pvPortMalloc+0x194>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d203      	bcs.n	800790e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007906:	4b17      	ldr	r3, [pc, #92]	@ (8007964 <pvPortMalloc+0x18c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a18      	ldr	r2, [pc, #96]	@ (800796c <pvPortMalloc+0x194>)
 800790c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800790e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	4b13      	ldr	r3, [pc, #76]	@ (8007960 <pvPortMalloc+0x188>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	431a      	orrs	r2, r3
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800791c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007922:	4b13      	ldr	r3, [pc, #76]	@ (8007970 <pvPortMalloc+0x198>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3301      	adds	r3, #1
 8007928:	4a11      	ldr	r2, [pc, #68]	@ (8007970 <pvPortMalloc+0x198>)
 800792a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800792c:	f7ff fa38 	bl	8006da0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	f003 0307 	and.w	r3, r3, #7
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00b      	beq.n	8007952 <pvPortMalloc+0x17a>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	60fb      	str	r3, [r7, #12]
}
 800794c:	bf00      	nop
 800794e:	bf00      	nop
 8007950:	e7fd      	b.n	800794e <pvPortMalloc+0x176>
	return pvReturn;
 8007952:	69fb      	ldr	r3, [r7, #28]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3728      	adds	r7, #40	@ 0x28
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	20001318 	.word	0x20001318
 8007960:	2000132c 	.word	0x2000132c
 8007964:	2000131c 	.word	0x2000131c
 8007968:	20001310 	.word	0x20001310
 800796c:	20001320 	.word	0x20001320
 8007970:	20001324 	.word	0x20001324

08007974 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d04f      	beq.n	8007a26 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007986:	2308      	movs	r3, #8
 8007988:	425b      	negs	r3, r3
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4413      	add	r3, r2
 800798e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	4b25      	ldr	r3, [pc, #148]	@ (8007a30 <vPortFree+0xbc>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4013      	ands	r3, r2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10b      	bne.n	80079ba <vPortFree+0x46>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	60fb      	str	r3, [r7, #12]
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop
 80079b8:	e7fd      	b.n	80079b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <vPortFree+0x66>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	60bb      	str	r3, [r7, #8]
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop
 80079d8:	e7fd      	b.n	80079d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	4b14      	ldr	r3, [pc, #80]	@ (8007a30 <vPortFree+0xbc>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4013      	ands	r3, r2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d01e      	beq.n	8007a26 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d11a      	bne.n	8007a26 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a30 <vPortFree+0xbc>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	43db      	mvns	r3, r3
 80079fa:	401a      	ands	r2, r3
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a00:	f7ff f9c0 	bl	8006d84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	4b0a      	ldr	r3, [pc, #40]	@ (8007a34 <vPortFree+0xc0>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	4a09      	ldr	r2, [pc, #36]	@ (8007a34 <vPortFree+0xc0>)
 8007a10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a12:	6938      	ldr	r0, [r7, #16]
 8007a14:	f000 f874 	bl	8007b00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a18:	4b07      	ldr	r3, [pc, #28]	@ (8007a38 <vPortFree+0xc4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	4a06      	ldr	r2, [pc, #24]	@ (8007a38 <vPortFree+0xc4>)
 8007a20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a22:	f7ff f9bd 	bl	8006da0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a26:	bf00      	nop
 8007a28:	3718      	adds	r7, #24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	2000132c 	.word	0x2000132c
 8007a34:	2000131c 	.word	0x2000131c
 8007a38:	20001328 	.word	0x20001328

08007a3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a42:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007a46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a48:	4b27      	ldr	r3, [pc, #156]	@ (8007ae8 <prvHeapInit+0xac>)
 8007a4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00c      	beq.n	8007a70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3307      	adds	r3, #7
 8007a5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f023 0307 	bic.w	r3, r3, #7
 8007a62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae8 <prvHeapInit+0xac>)
 8007a6c:	4413      	add	r3, r2
 8007a6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a74:	4a1d      	ldr	r2, [pc, #116]	@ (8007aec <prvHeapInit+0xb0>)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8007aec <prvHeapInit+0xb0>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	4413      	add	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a88:	2208      	movs	r2, #8
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	1a9b      	subs	r3, r3, r2
 8007a8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f023 0307 	bic.w	r3, r3, #7
 8007a96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4a15      	ldr	r2, [pc, #84]	@ (8007af0 <prvHeapInit+0xb4>)
 8007a9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a9e:	4b14      	ldr	r3, [pc, #80]	@ (8007af0 <prvHeapInit+0xb4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007aa6:	4b12      	ldr	r3, [pc, #72]	@ (8007af0 <prvHeapInit+0xb4>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	1ad2      	subs	r2, r2, r3
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007abc:	4b0c      	ldr	r3, [pc, #48]	@ (8007af0 <prvHeapInit+0xb4>)
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8007af4 <prvHeapInit+0xb8>)
 8007aca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	4a09      	ldr	r2, [pc, #36]	@ (8007af8 <prvHeapInit+0xbc>)
 8007ad2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ad4:	4b09      	ldr	r3, [pc, #36]	@ (8007afc <prvHeapInit+0xc0>)
 8007ad6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ada:	601a      	str	r2, [r3, #0]
}
 8007adc:	bf00      	nop
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	20000758 	.word	0x20000758
 8007aec:	20001310 	.word	0x20001310
 8007af0:	20001318 	.word	0x20001318
 8007af4:	20001320 	.word	0x20001320
 8007af8:	2000131c 	.word	0x2000131c
 8007afc:	2000132c 	.word	0x2000132c

08007b00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b08:	4b28      	ldr	r3, [pc, #160]	@ (8007bac <prvInsertBlockIntoFreeList+0xac>)
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	e002      	b.n	8007b14 <prvInsertBlockIntoFreeList+0x14>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d8f7      	bhi.n	8007b0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	4413      	add	r3, r2
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d108      	bne.n	8007b42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	441a      	add	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	441a      	add	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d118      	bne.n	8007b88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	4b15      	ldr	r3, [pc, #84]	@ (8007bb0 <prvInsertBlockIntoFreeList+0xb0>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d00d      	beq.n	8007b7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	441a      	add	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	e008      	b.n	8007b90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb0 <prvInsertBlockIntoFreeList+0xb0>)
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	e003      	b.n	8007b90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d002      	beq.n	8007b9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	20001310 	.word	0x20001310
 8007bb0:	20001318 	.word	0x20001318

08007bb4 <std>:
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	b510      	push	{r4, lr}
 8007bb8:	4604      	mov	r4, r0
 8007bba:	e9c0 3300 	strd	r3, r3, [r0]
 8007bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bc2:	6083      	str	r3, [r0, #8]
 8007bc4:	8181      	strh	r1, [r0, #12]
 8007bc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007bc8:	81c2      	strh	r2, [r0, #14]
 8007bca:	6183      	str	r3, [r0, #24]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	2208      	movs	r2, #8
 8007bd0:	305c      	adds	r0, #92	@ 0x5c
 8007bd2:	f000 fa1b 	bl	800800c <memset>
 8007bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c0c <std+0x58>)
 8007bd8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bda:	4b0d      	ldr	r3, [pc, #52]	@ (8007c10 <std+0x5c>)
 8007bdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bde:	4b0d      	ldr	r3, [pc, #52]	@ (8007c14 <std+0x60>)
 8007be0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007be2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c18 <std+0x64>)
 8007be4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007be6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c1c <std+0x68>)
 8007be8:	6224      	str	r4, [r4, #32]
 8007bea:	429c      	cmp	r4, r3
 8007bec:	d006      	beq.n	8007bfc <std+0x48>
 8007bee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007bf2:	4294      	cmp	r4, r2
 8007bf4:	d002      	beq.n	8007bfc <std+0x48>
 8007bf6:	33d0      	adds	r3, #208	@ 0xd0
 8007bf8:	429c      	cmp	r4, r3
 8007bfa:	d105      	bne.n	8007c08 <std+0x54>
 8007bfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c04:	f000 bad6 	b.w	80081b4 <__retarget_lock_init_recursive>
 8007c08:	bd10      	pop	{r4, pc}
 8007c0a:	bf00      	nop
 8007c0c:	08007e5d 	.word	0x08007e5d
 8007c10:	08007e7f 	.word	0x08007e7f
 8007c14:	08007eb7 	.word	0x08007eb7
 8007c18:	08007edb 	.word	0x08007edb
 8007c1c:	20001330 	.word	0x20001330

08007c20 <stdio_exit_handler>:
 8007c20:	4a02      	ldr	r2, [pc, #8]	@ (8007c2c <stdio_exit_handler+0xc>)
 8007c22:	4903      	ldr	r1, [pc, #12]	@ (8007c30 <stdio_exit_handler+0x10>)
 8007c24:	4803      	ldr	r0, [pc, #12]	@ (8007c34 <stdio_exit_handler+0x14>)
 8007c26:	f000 b869 	b.w	8007cfc <_fwalk_sglue>
 8007c2a:	bf00      	nop
 8007c2c:	20000010 	.word	0x20000010
 8007c30:	08008ae9 	.word	0x08008ae9
 8007c34:	20000020 	.word	0x20000020

08007c38 <cleanup_stdio>:
 8007c38:	6841      	ldr	r1, [r0, #4]
 8007c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c6c <cleanup_stdio+0x34>)
 8007c3c:	4299      	cmp	r1, r3
 8007c3e:	b510      	push	{r4, lr}
 8007c40:	4604      	mov	r4, r0
 8007c42:	d001      	beq.n	8007c48 <cleanup_stdio+0x10>
 8007c44:	f000 ff50 	bl	8008ae8 <_fflush_r>
 8007c48:	68a1      	ldr	r1, [r4, #8]
 8007c4a:	4b09      	ldr	r3, [pc, #36]	@ (8007c70 <cleanup_stdio+0x38>)
 8007c4c:	4299      	cmp	r1, r3
 8007c4e:	d002      	beq.n	8007c56 <cleanup_stdio+0x1e>
 8007c50:	4620      	mov	r0, r4
 8007c52:	f000 ff49 	bl	8008ae8 <_fflush_r>
 8007c56:	68e1      	ldr	r1, [r4, #12]
 8007c58:	4b06      	ldr	r3, [pc, #24]	@ (8007c74 <cleanup_stdio+0x3c>)
 8007c5a:	4299      	cmp	r1, r3
 8007c5c:	d004      	beq.n	8007c68 <cleanup_stdio+0x30>
 8007c5e:	4620      	mov	r0, r4
 8007c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c64:	f000 bf40 	b.w	8008ae8 <_fflush_r>
 8007c68:	bd10      	pop	{r4, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20001330 	.word	0x20001330
 8007c70:	20001398 	.word	0x20001398
 8007c74:	20001400 	.word	0x20001400

08007c78 <global_stdio_init.part.0>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca8 <global_stdio_init.part.0+0x30>)
 8007c7c:	4c0b      	ldr	r4, [pc, #44]	@ (8007cac <global_stdio_init.part.0+0x34>)
 8007c7e:	4a0c      	ldr	r2, [pc, #48]	@ (8007cb0 <global_stdio_init.part.0+0x38>)
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	4620      	mov	r0, r4
 8007c84:	2200      	movs	r2, #0
 8007c86:	2104      	movs	r1, #4
 8007c88:	f7ff ff94 	bl	8007bb4 <std>
 8007c8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c90:	2201      	movs	r2, #1
 8007c92:	2109      	movs	r1, #9
 8007c94:	f7ff ff8e 	bl	8007bb4 <std>
 8007c98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ca2:	2112      	movs	r1, #18
 8007ca4:	f7ff bf86 	b.w	8007bb4 <std>
 8007ca8:	20001468 	.word	0x20001468
 8007cac:	20001330 	.word	0x20001330
 8007cb0:	08007c21 	.word	0x08007c21

08007cb4 <__sfp_lock_acquire>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	@ (8007cbc <__sfp_lock_acquire+0x8>)
 8007cb6:	f000 ba7e 	b.w	80081b6 <__retarget_lock_acquire_recursive>
 8007cba:	bf00      	nop
 8007cbc:	20001471 	.word	0x20001471

08007cc0 <__sfp_lock_release>:
 8007cc0:	4801      	ldr	r0, [pc, #4]	@ (8007cc8 <__sfp_lock_release+0x8>)
 8007cc2:	f000 ba79 	b.w	80081b8 <__retarget_lock_release_recursive>
 8007cc6:	bf00      	nop
 8007cc8:	20001471 	.word	0x20001471

08007ccc <__sinit>:
 8007ccc:	b510      	push	{r4, lr}
 8007cce:	4604      	mov	r4, r0
 8007cd0:	f7ff fff0 	bl	8007cb4 <__sfp_lock_acquire>
 8007cd4:	6a23      	ldr	r3, [r4, #32]
 8007cd6:	b11b      	cbz	r3, 8007ce0 <__sinit+0x14>
 8007cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cdc:	f7ff bff0 	b.w	8007cc0 <__sfp_lock_release>
 8007ce0:	4b04      	ldr	r3, [pc, #16]	@ (8007cf4 <__sinit+0x28>)
 8007ce2:	6223      	str	r3, [r4, #32]
 8007ce4:	4b04      	ldr	r3, [pc, #16]	@ (8007cf8 <__sinit+0x2c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1f5      	bne.n	8007cd8 <__sinit+0xc>
 8007cec:	f7ff ffc4 	bl	8007c78 <global_stdio_init.part.0>
 8007cf0:	e7f2      	b.n	8007cd8 <__sinit+0xc>
 8007cf2:	bf00      	nop
 8007cf4:	08007c39 	.word	0x08007c39
 8007cf8:	20001468 	.word	0x20001468

08007cfc <_fwalk_sglue>:
 8007cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d00:	4607      	mov	r7, r0
 8007d02:	4688      	mov	r8, r1
 8007d04:	4614      	mov	r4, r2
 8007d06:	2600      	movs	r6, #0
 8007d08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d0c:	f1b9 0901 	subs.w	r9, r9, #1
 8007d10:	d505      	bpl.n	8007d1e <_fwalk_sglue+0x22>
 8007d12:	6824      	ldr	r4, [r4, #0]
 8007d14:	2c00      	cmp	r4, #0
 8007d16:	d1f7      	bne.n	8007d08 <_fwalk_sglue+0xc>
 8007d18:	4630      	mov	r0, r6
 8007d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d1e:	89ab      	ldrh	r3, [r5, #12]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d907      	bls.n	8007d34 <_fwalk_sglue+0x38>
 8007d24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	d003      	beq.n	8007d34 <_fwalk_sglue+0x38>
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	4638      	mov	r0, r7
 8007d30:	47c0      	blx	r8
 8007d32:	4306      	orrs	r6, r0
 8007d34:	3568      	adds	r5, #104	@ 0x68
 8007d36:	e7e9      	b.n	8007d0c <_fwalk_sglue+0x10>

08007d38 <_puts_r>:
 8007d38:	6a03      	ldr	r3, [r0, #32]
 8007d3a:	b570      	push	{r4, r5, r6, lr}
 8007d3c:	6884      	ldr	r4, [r0, #8]
 8007d3e:	4605      	mov	r5, r0
 8007d40:	460e      	mov	r6, r1
 8007d42:	b90b      	cbnz	r3, 8007d48 <_puts_r+0x10>
 8007d44:	f7ff ffc2 	bl	8007ccc <__sinit>
 8007d48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d4a:	07db      	lsls	r3, r3, #31
 8007d4c:	d405      	bmi.n	8007d5a <_puts_r+0x22>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	0598      	lsls	r0, r3, #22
 8007d52:	d402      	bmi.n	8007d5a <_puts_r+0x22>
 8007d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d56:	f000 fa2e 	bl	80081b6 <__retarget_lock_acquire_recursive>
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	0719      	lsls	r1, r3, #28
 8007d5e:	d502      	bpl.n	8007d66 <_puts_r+0x2e>
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d135      	bne.n	8007dd2 <_puts_r+0x9a>
 8007d66:	4621      	mov	r1, r4
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f000 f8f9 	bl	8007f60 <__swsetup_r>
 8007d6e:	b380      	cbz	r0, 8007dd2 <_puts_r+0x9a>
 8007d70:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007d74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d76:	07da      	lsls	r2, r3, #31
 8007d78:	d405      	bmi.n	8007d86 <_puts_r+0x4e>
 8007d7a:	89a3      	ldrh	r3, [r4, #12]
 8007d7c:	059b      	lsls	r3, r3, #22
 8007d7e:	d402      	bmi.n	8007d86 <_puts_r+0x4e>
 8007d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d82:	f000 fa19 	bl	80081b8 <__retarget_lock_release_recursive>
 8007d86:	4628      	mov	r0, r5
 8007d88:	bd70      	pop	{r4, r5, r6, pc}
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	da04      	bge.n	8007d98 <_puts_r+0x60>
 8007d8e:	69a2      	ldr	r2, [r4, #24]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	dc17      	bgt.n	8007dc4 <_puts_r+0x8c>
 8007d94:	290a      	cmp	r1, #10
 8007d96:	d015      	beq.n	8007dc4 <_puts_r+0x8c>
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	6022      	str	r2, [r4, #0]
 8007d9e:	7019      	strb	r1, [r3, #0]
 8007da0:	68a3      	ldr	r3, [r4, #8]
 8007da2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007da6:	3b01      	subs	r3, #1
 8007da8:	60a3      	str	r3, [r4, #8]
 8007daa:	2900      	cmp	r1, #0
 8007dac:	d1ed      	bne.n	8007d8a <_puts_r+0x52>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	da11      	bge.n	8007dd6 <_puts_r+0x9e>
 8007db2:	4622      	mov	r2, r4
 8007db4:	210a      	movs	r1, #10
 8007db6:	4628      	mov	r0, r5
 8007db8:	f000 f893 	bl	8007ee2 <__swbuf_r>
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d0d7      	beq.n	8007d70 <_puts_r+0x38>
 8007dc0:	250a      	movs	r5, #10
 8007dc2:	e7d7      	b.n	8007d74 <_puts_r+0x3c>
 8007dc4:	4622      	mov	r2, r4
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 f88b 	bl	8007ee2 <__swbuf_r>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d1e7      	bne.n	8007da0 <_puts_r+0x68>
 8007dd0:	e7ce      	b.n	8007d70 <_puts_r+0x38>
 8007dd2:	3e01      	subs	r6, #1
 8007dd4:	e7e4      	b.n	8007da0 <_puts_r+0x68>
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	6022      	str	r2, [r4, #0]
 8007ddc:	220a      	movs	r2, #10
 8007dde:	701a      	strb	r2, [r3, #0]
 8007de0:	e7ee      	b.n	8007dc0 <_puts_r+0x88>
	...

08007de4 <puts>:
 8007de4:	4b02      	ldr	r3, [pc, #8]	@ (8007df0 <puts+0xc>)
 8007de6:	4601      	mov	r1, r0
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	f7ff bfa5 	b.w	8007d38 <_puts_r>
 8007dee:	bf00      	nop
 8007df0:	2000001c 	.word	0x2000001c

08007df4 <sniprintf>:
 8007df4:	b40c      	push	{r2, r3}
 8007df6:	b530      	push	{r4, r5, lr}
 8007df8:	4b17      	ldr	r3, [pc, #92]	@ (8007e58 <sniprintf+0x64>)
 8007dfa:	1e0c      	subs	r4, r1, #0
 8007dfc:	681d      	ldr	r5, [r3, #0]
 8007dfe:	b09d      	sub	sp, #116	@ 0x74
 8007e00:	da08      	bge.n	8007e14 <sniprintf+0x20>
 8007e02:	238b      	movs	r3, #139	@ 0x8b
 8007e04:	602b      	str	r3, [r5, #0]
 8007e06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e0a:	b01d      	add	sp, #116	@ 0x74
 8007e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e10:	b002      	add	sp, #8
 8007e12:	4770      	bx	lr
 8007e14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007e18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e1c:	bf14      	ite	ne
 8007e1e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007e22:	4623      	moveq	r3, r4
 8007e24:	9304      	str	r3, [sp, #16]
 8007e26:	9307      	str	r3, [sp, #28]
 8007e28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e2c:	9002      	str	r0, [sp, #8]
 8007e2e:	9006      	str	r0, [sp, #24]
 8007e30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007e34:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007e36:	ab21      	add	r3, sp, #132	@ 0x84
 8007e38:	a902      	add	r1, sp, #8
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	f000 fb45 	bl	80084cc <_svfiprintf_r>
 8007e42:	1c43      	adds	r3, r0, #1
 8007e44:	bfbc      	itt	lt
 8007e46:	238b      	movlt	r3, #139	@ 0x8b
 8007e48:	602b      	strlt	r3, [r5, #0]
 8007e4a:	2c00      	cmp	r4, #0
 8007e4c:	d0dd      	beq.n	8007e0a <sniprintf+0x16>
 8007e4e:	9b02      	ldr	r3, [sp, #8]
 8007e50:	2200      	movs	r2, #0
 8007e52:	701a      	strb	r2, [r3, #0]
 8007e54:	e7d9      	b.n	8007e0a <sniprintf+0x16>
 8007e56:	bf00      	nop
 8007e58:	2000001c 	.word	0x2000001c

08007e5c <__sread>:
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	460c      	mov	r4, r1
 8007e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e64:	f000 f958 	bl	8008118 <_read_r>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	bfab      	itete	ge
 8007e6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8007e70:	181b      	addge	r3, r3, r0
 8007e72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e76:	bfac      	ite	ge
 8007e78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e7a:	81a3      	strhlt	r3, [r4, #12]
 8007e7c:	bd10      	pop	{r4, pc}

08007e7e <__swrite>:
 8007e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e82:	461f      	mov	r7, r3
 8007e84:	898b      	ldrh	r3, [r1, #12]
 8007e86:	05db      	lsls	r3, r3, #23
 8007e88:	4605      	mov	r5, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	4616      	mov	r6, r2
 8007e8e:	d505      	bpl.n	8007e9c <__swrite+0x1e>
 8007e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e94:	2302      	movs	r3, #2
 8007e96:	2200      	movs	r2, #0
 8007e98:	f000 f92c 	bl	80080f4 <_lseek_r>
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ea2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ea6:	81a3      	strh	r3, [r4, #12]
 8007ea8:	4632      	mov	r2, r6
 8007eaa:	463b      	mov	r3, r7
 8007eac:	4628      	mov	r0, r5
 8007eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb2:	f000 b943 	b.w	800813c <_write_r>

08007eb6 <__sseek>:
 8007eb6:	b510      	push	{r4, lr}
 8007eb8:	460c      	mov	r4, r1
 8007eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ebe:	f000 f919 	bl	80080f4 <_lseek_r>
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	89a3      	ldrh	r3, [r4, #12]
 8007ec6:	bf15      	itete	ne
 8007ec8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007eca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ece:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ed2:	81a3      	strheq	r3, [r4, #12]
 8007ed4:	bf18      	it	ne
 8007ed6:	81a3      	strhne	r3, [r4, #12]
 8007ed8:	bd10      	pop	{r4, pc}

08007eda <__sclose>:
 8007eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ede:	f000 b8f9 	b.w	80080d4 <_close_r>

08007ee2 <__swbuf_r>:
 8007ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee4:	460e      	mov	r6, r1
 8007ee6:	4614      	mov	r4, r2
 8007ee8:	4605      	mov	r5, r0
 8007eea:	b118      	cbz	r0, 8007ef4 <__swbuf_r+0x12>
 8007eec:	6a03      	ldr	r3, [r0, #32]
 8007eee:	b90b      	cbnz	r3, 8007ef4 <__swbuf_r+0x12>
 8007ef0:	f7ff feec 	bl	8007ccc <__sinit>
 8007ef4:	69a3      	ldr	r3, [r4, #24]
 8007ef6:	60a3      	str	r3, [r4, #8]
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	071a      	lsls	r2, r3, #28
 8007efc:	d501      	bpl.n	8007f02 <__swbuf_r+0x20>
 8007efe:	6923      	ldr	r3, [r4, #16]
 8007f00:	b943      	cbnz	r3, 8007f14 <__swbuf_r+0x32>
 8007f02:	4621      	mov	r1, r4
 8007f04:	4628      	mov	r0, r5
 8007f06:	f000 f82b 	bl	8007f60 <__swsetup_r>
 8007f0a:	b118      	cbz	r0, 8007f14 <__swbuf_r+0x32>
 8007f0c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007f10:	4638      	mov	r0, r7
 8007f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	6922      	ldr	r2, [r4, #16]
 8007f18:	1a98      	subs	r0, r3, r2
 8007f1a:	6963      	ldr	r3, [r4, #20]
 8007f1c:	b2f6      	uxtb	r6, r6
 8007f1e:	4283      	cmp	r3, r0
 8007f20:	4637      	mov	r7, r6
 8007f22:	dc05      	bgt.n	8007f30 <__swbuf_r+0x4e>
 8007f24:	4621      	mov	r1, r4
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 fdde 	bl	8008ae8 <_fflush_r>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d1ed      	bne.n	8007f0c <__swbuf_r+0x2a>
 8007f30:	68a3      	ldr	r3, [r4, #8]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	60a3      	str	r3, [r4, #8]
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	6022      	str	r2, [r4, #0]
 8007f3c:	701e      	strb	r6, [r3, #0]
 8007f3e:	6962      	ldr	r2, [r4, #20]
 8007f40:	1c43      	adds	r3, r0, #1
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d004      	beq.n	8007f50 <__swbuf_r+0x6e>
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	07db      	lsls	r3, r3, #31
 8007f4a:	d5e1      	bpl.n	8007f10 <__swbuf_r+0x2e>
 8007f4c:	2e0a      	cmp	r6, #10
 8007f4e:	d1df      	bne.n	8007f10 <__swbuf_r+0x2e>
 8007f50:	4621      	mov	r1, r4
 8007f52:	4628      	mov	r0, r5
 8007f54:	f000 fdc8 	bl	8008ae8 <_fflush_r>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d0d9      	beq.n	8007f10 <__swbuf_r+0x2e>
 8007f5c:	e7d6      	b.n	8007f0c <__swbuf_r+0x2a>
	...

08007f60 <__swsetup_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4b29      	ldr	r3, [pc, #164]	@ (8008008 <__swsetup_r+0xa8>)
 8007f64:	4605      	mov	r5, r0
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	460c      	mov	r4, r1
 8007f6a:	b118      	cbz	r0, 8007f74 <__swsetup_r+0x14>
 8007f6c:	6a03      	ldr	r3, [r0, #32]
 8007f6e:	b90b      	cbnz	r3, 8007f74 <__swsetup_r+0x14>
 8007f70:	f7ff feac 	bl	8007ccc <__sinit>
 8007f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f78:	0719      	lsls	r1, r3, #28
 8007f7a:	d422      	bmi.n	8007fc2 <__swsetup_r+0x62>
 8007f7c:	06da      	lsls	r2, r3, #27
 8007f7e:	d407      	bmi.n	8007f90 <__swsetup_r+0x30>
 8007f80:	2209      	movs	r2, #9
 8007f82:	602a      	str	r2, [r5, #0]
 8007f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f88:	81a3      	strh	r3, [r4, #12]
 8007f8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f8e:	e033      	b.n	8007ff8 <__swsetup_r+0x98>
 8007f90:	0758      	lsls	r0, r3, #29
 8007f92:	d512      	bpl.n	8007fba <__swsetup_r+0x5a>
 8007f94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f96:	b141      	cbz	r1, 8007faa <__swsetup_r+0x4a>
 8007f98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f9c:	4299      	cmp	r1, r3
 8007f9e:	d002      	beq.n	8007fa6 <__swsetup_r+0x46>
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	f000 f937 	bl	8008214 <_free_r>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007faa:	89a3      	ldrh	r3, [r4, #12]
 8007fac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007fb0:	81a3      	strh	r3, [r4, #12]
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	6063      	str	r3, [r4, #4]
 8007fb6:	6923      	ldr	r3, [r4, #16]
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	f043 0308 	orr.w	r3, r3, #8
 8007fc0:	81a3      	strh	r3, [r4, #12]
 8007fc2:	6923      	ldr	r3, [r4, #16]
 8007fc4:	b94b      	cbnz	r3, 8007fda <__swsetup_r+0x7a>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fd0:	d003      	beq.n	8007fda <__swsetup_r+0x7a>
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f000 fde7 	bl	8008ba8 <__smakebuf_r>
 8007fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fde:	f013 0201 	ands.w	r2, r3, #1
 8007fe2:	d00a      	beq.n	8007ffa <__swsetup_r+0x9a>
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	60a2      	str	r2, [r4, #8]
 8007fe8:	6962      	ldr	r2, [r4, #20]
 8007fea:	4252      	negs	r2, r2
 8007fec:	61a2      	str	r2, [r4, #24]
 8007fee:	6922      	ldr	r2, [r4, #16]
 8007ff0:	b942      	cbnz	r2, 8008004 <__swsetup_r+0xa4>
 8007ff2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ff6:	d1c5      	bne.n	8007f84 <__swsetup_r+0x24>
 8007ff8:	bd38      	pop	{r3, r4, r5, pc}
 8007ffa:	0799      	lsls	r1, r3, #30
 8007ffc:	bf58      	it	pl
 8007ffe:	6962      	ldrpl	r2, [r4, #20]
 8008000:	60a2      	str	r2, [r4, #8]
 8008002:	e7f4      	b.n	8007fee <__swsetup_r+0x8e>
 8008004:	2000      	movs	r0, #0
 8008006:	e7f7      	b.n	8007ff8 <__swsetup_r+0x98>
 8008008:	2000001c 	.word	0x2000001c

0800800c <memset>:
 800800c:	4402      	add	r2, r0
 800800e:	4603      	mov	r3, r0
 8008010:	4293      	cmp	r3, r2
 8008012:	d100      	bne.n	8008016 <memset+0xa>
 8008014:	4770      	bx	lr
 8008016:	f803 1b01 	strb.w	r1, [r3], #1
 800801a:	e7f9      	b.n	8008010 <memset+0x4>

0800801c <strtok>:
 800801c:	4b16      	ldr	r3, [pc, #88]	@ (8008078 <strtok+0x5c>)
 800801e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008022:	681f      	ldr	r7, [r3, #0]
 8008024:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008026:	4605      	mov	r5, r0
 8008028:	460e      	mov	r6, r1
 800802a:	b9ec      	cbnz	r4, 8008068 <strtok+0x4c>
 800802c:	2050      	movs	r0, #80	@ 0x50
 800802e:	f000 f93b 	bl	80082a8 <malloc>
 8008032:	4602      	mov	r2, r0
 8008034:	6478      	str	r0, [r7, #68]	@ 0x44
 8008036:	b920      	cbnz	r0, 8008042 <strtok+0x26>
 8008038:	4b10      	ldr	r3, [pc, #64]	@ (800807c <strtok+0x60>)
 800803a:	4811      	ldr	r0, [pc, #68]	@ (8008080 <strtok+0x64>)
 800803c:	215b      	movs	r1, #91	@ 0x5b
 800803e:	f000 f8cb 	bl	80081d8 <__assert_func>
 8008042:	e9c0 4400 	strd	r4, r4, [r0]
 8008046:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800804a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800804e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008052:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008056:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800805a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800805e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008062:	6184      	str	r4, [r0, #24]
 8008064:	7704      	strb	r4, [r0, #28]
 8008066:	6244      	str	r4, [r0, #36]	@ 0x24
 8008068:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800806a:	4631      	mov	r1, r6
 800806c:	4628      	mov	r0, r5
 800806e:	2301      	movs	r3, #1
 8008070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008074:	f000 b806 	b.w	8008084 <__strtok_r>
 8008078:	2000001c 	.word	0x2000001c
 800807c:	0800927c 	.word	0x0800927c
 8008080:	08009293 	.word	0x08009293

08008084 <__strtok_r>:
 8008084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008086:	4604      	mov	r4, r0
 8008088:	b908      	cbnz	r0, 800808e <__strtok_r+0xa>
 800808a:	6814      	ldr	r4, [r2, #0]
 800808c:	b144      	cbz	r4, 80080a0 <__strtok_r+0x1c>
 800808e:	4620      	mov	r0, r4
 8008090:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008094:	460f      	mov	r7, r1
 8008096:	f817 6b01 	ldrb.w	r6, [r7], #1
 800809a:	b91e      	cbnz	r6, 80080a4 <__strtok_r+0x20>
 800809c:	b965      	cbnz	r5, 80080b8 <__strtok_r+0x34>
 800809e:	6015      	str	r5, [r2, #0]
 80080a0:	2000      	movs	r0, #0
 80080a2:	e005      	b.n	80080b0 <__strtok_r+0x2c>
 80080a4:	42b5      	cmp	r5, r6
 80080a6:	d1f6      	bne.n	8008096 <__strtok_r+0x12>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1f0      	bne.n	800808e <__strtok_r+0xa>
 80080ac:	6014      	str	r4, [r2, #0]
 80080ae:	7003      	strb	r3, [r0, #0]
 80080b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b2:	461c      	mov	r4, r3
 80080b4:	e00c      	b.n	80080d0 <__strtok_r+0x4c>
 80080b6:	b915      	cbnz	r5, 80080be <__strtok_r+0x3a>
 80080b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080bc:	460e      	mov	r6, r1
 80080be:	f816 5b01 	ldrb.w	r5, [r6], #1
 80080c2:	42ab      	cmp	r3, r5
 80080c4:	d1f7      	bne.n	80080b6 <__strtok_r+0x32>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0f3      	beq.n	80080b2 <__strtok_r+0x2e>
 80080ca:	2300      	movs	r3, #0
 80080cc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80080d0:	6014      	str	r4, [r2, #0]
 80080d2:	e7ed      	b.n	80080b0 <__strtok_r+0x2c>

080080d4 <_close_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d06      	ldr	r5, [pc, #24]	@ (80080f0 <_close_r+0x1c>)
 80080d8:	2300      	movs	r3, #0
 80080da:	4604      	mov	r4, r0
 80080dc:	4608      	mov	r0, r1
 80080de:	602b      	str	r3, [r5, #0]
 80080e0:	f7f9 fa4a 	bl	8001578 <_close>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d102      	bne.n	80080ee <_close_r+0x1a>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b103      	cbz	r3, 80080ee <_close_r+0x1a>
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	2000146c 	.word	0x2000146c

080080f4 <_lseek_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4d07      	ldr	r5, [pc, #28]	@ (8008114 <_lseek_r+0x20>)
 80080f8:	4604      	mov	r4, r0
 80080fa:	4608      	mov	r0, r1
 80080fc:	4611      	mov	r1, r2
 80080fe:	2200      	movs	r2, #0
 8008100:	602a      	str	r2, [r5, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	f7f9 fa5f 	bl	80015c6 <_lseek>
 8008108:	1c43      	adds	r3, r0, #1
 800810a:	d102      	bne.n	8008112 <_lseek_r+0x1e>
 800810c:	682b      	ldr	r3, [r5, #0]
 800810e:	b103      	cbz	r3, 8008112 <_lseek_r+0x1e>
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	bd38      	pop	{r3, r4, r5, pc}
 8008114:	2000146c 	.word	0x2000146c

08008118 <_read_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d07      	ldr	r5, [pc, #28]	@ (8008138 <_read_r+0x20>)
 800811c:	4604      	mov	r4, r0
 800811e:	4608      	mov	r0, r1
 8008120:	4611      	mov	r1, r2
 8008122:	2200      	movs	r2, #0
 8008124:	602a      	str	r2, [r5, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	f7f9 f9ed 	bl	8001506 <_read>
 800812c:	1c43      	adds	r3, r0, #1
 800812e:	d102      	bne.n	8008136 <_read_r+0x1e>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	b103      	cbz	r3, 8008136 <_read_r+0x1e>
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	2000146c 	.word	0x2000146c

0800813c <_write_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4d07      	ldr	r5, [pc, #28]	@ (800815c <_write_r+0x20>)
 8008140:	4604      	mov	r4, r0
 8008142:	4608      	mov	r0, r1
 8008144:	4611      	mov	r1, r2
 8008146:	2200      	movs	r2, #0
 8008148:	602a      	str	r2, [r5, #0]
 800814a:	461a      	mov	r2, r3
 800814c:	f7f9 f9f8 	bl	8001540 <_write>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	d102      	bne.n	800815a <_write_r+0x1e>
 8008154:	682b      	ldr	r3, [r5, #0]
 8008156:	b103      	cbz	r3, 800815a <_write_r+0x1e>
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	bd38      	pop	{r3, r4, r5, pc}
 800815c:	2000146c 	.word	0x2000146c

08008160 <__errno>:
 8008160:	4b01      	ldr	r3, [pc, #4]	@ (8008168 <__errno+0x8>)
 8008162:	6818      	ldr	r0, [r3, #0]
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	2000001c 	.word	0x2000001c

0800816c <__libc_init_array>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	4d0d      	ldr	r5, [pc, #52]	@ (80081a4 <__libc_init_array+0x38>)
 8008170:	4c0d      	ldr	r4, [pc, #52]	@ (80081a8 <__libc_init_array+0x3c>)
 8008172:	1b64      	subs	r4, r4, r5
 8008174:	10a4      	asrs	r4, r4, #2
 8008176:	2600      	movs	r6, #0
 8008178:	42a6      	cmp	r6, r4
 800817a:	d109      	bne.n	8008190 <__libc_init_array+0x24>
 800817c:	4d0b      	ldr	r5, [pc, #44]	@ (80081ac <__libc_init_array+0x40>)
 800817e:	4c0c      	ldr	r4, [pc, #48]	@ (80081b0 <__libc_init_array+0x44>)
 8008180:	f000 ff5c 	bl	800903c <_init>
 8008184:	1b64      	subs	r4, r4, r5
 8008186:	10a4      	asrs	r4, r4, #2
 8008188:	2600      	movs	r6, #0
 800818a:	42a6      	cmp	r6, r4
 800818c:	d105      	bne.n	800819a <__libc_init_array+0x2e>
 800818e:	bd70      	pop	{r4, r5, r6, pc}
 8008190:	f855 3b04 	ldr.w	r3, [r5], #4
 8008194:	4798      	blx	r3
 8008196:	3601      	adds	r6, #1
 8008198:	e7ee      	b.n	8008178 <__libc_init_array+0xc>
 800819a:	f855 3b04 	ldr.w	r3, [r5], #4
 800819e:	4798      	blx	r3
 80081a0:	3601      	adds	r6, #1
 80081a2:	e7f2      	b.n	800818a <__libc_init_array+0x1e>
 80081a4:	08009364 	.word	0x08009364
 80081a8:	08009364 	.word	0x08009364
 80081ac:	08009364 	.word	0x08009364
 80081b0:	08009368 	.word	0x08009368

080081b4 <__retarget_lock_init_recursive>:
 80081b4:	4770      	bx	lr

080081b6 <__retarget_lock_acquire_recursive>:
 80081b6:	4770      	bx	lr

080081b8 <__retarget_lock_release_recursive>:
 80081b8:	4770      	bx	lr

080081ba <memcpy>:
 80081ba:	440a      	add	r2, r1
 80081bc:	4291      	cmp	r1, r2
 80081be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80081c2:	d100      	bne.n	80081c6 <memcpy+0xc>
 80081c4:	4770      	bx	lr
 80081c6:	b510      	push	{r4, lr}
 80081c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081d0:	4291      	cmp	r1, r2
 80081d2:	d1f9      	bne.n	80081c8 <memcpy+0xe>
 80081d4:	bd10      	pop	{r4, pc}
	...

080081d8 <__assert_func>:
 80081d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081da:	4614      	mov	r4, r2
 80081dc:	461a      	mov	r2, r3
 80081de:	4b09      	ldr	r3, [pc, #36]	@ (8008204 <__assert_func+0x2c>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4605      	mov	r5, r0
 80081e4:	68d8      	ldr	r0, [r3, #12]
 80081e6:	b954      	cbnz	r4, 80081fe <__assert_func+0x26>
 80081e8:	4b07      	ldr	r3, [pc, #28]	@ (8008208 <__assert_func+0x30>)
 80081ea:	461c      	mov	r4, r3
 80081ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081f0:	9100      	str	r1, [sp, #0]
 80081f2:	462b      	mov	r3, r5
 80081f4:	4905      	ldr	r1, [pc, #20]	@ (800820c <__assert_func+0x34>)
 80081f6:	f000 fc9f 	bl	8008b38 <fiprintf>
 80081fa:	f000 fd5d 	bl	8008cb8 <abort>
 80081fe:	4b04      	ldr	r3, [pc, #16]	@ (8008210 <__assert_func+0x38>)
 8008200:	e7f4      	b.n	80081ec <__assert_func+0x14>
 8008202:	bf00      	nop
 8008204:	2000001c 	.word	0x2000001c
 8008208:	08009328 	.word	0x08009328
 800820c:	080092fa 	.word	0x080092fa
 8008210:	080092ed 	.word	0x080092ed

08008214 <_free_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4605      	mov	r5, r0
 8008218:	2900      	cmp	r1, #0
 800821a:	d041      	beq.n	80082a0 <_free_r+0x8c>
 800821c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008220:	1f0c      	subs	r4, r1, #4
 8008222:	2b00      	cmp	r3, #0
 8008224:	bfb8      	it	lt
 8008226:	18e4      	addlt	r4, r4, r3
 8008228:	f000 f8e8 	bl	80083fc <__malloc_lock>
 800822c:	4a1d      	ldr	r2, [pc, #116]	@ (80082a4 <_free_r+0x90>)
 800822e:	6813      	ldr	r3, [r2, #0]
 8008230:	b933      	cbnz	r3, 8008240 <_free_r+0x2c>
 8008232:	6063      	str	r3, [r4, #4]
 8008234:	6014      	str	r4, [r2, #0]
 8008236:	4628      	mov	r0, r5
 8008238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800823c:	f000 b8e4 	b.w	8008408 <__malloc_unlock>
 8008240:	42a3      	cmp	r3, r4
 8008242:	d908      	bls.n	8008256 <_free_r+0x42>
 8008244:	6820      	ldr	r0, [r4, #0]
 8008246:	1821      	adds	r1, r4, r0
 8008248:	428b      	cmp	r3, r1
 800824a:	bf01      	itttt	eq
 800824c:	6819      	ldreq	r1, [r3, #0]
 800824e:	685b      	ldreq	r3, [r3, #4]
 8008250:	1809      	addeq	r1, r1, r0
 8008252:	6021      	streq	r1, [r4, #0]
 8008254:	e7ed      	b.n	8008232 <_free_r+0x1e>
 8008256:	461a      	mov	r2, r3
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	b10b      	cbz	r3, 8008260 <_free_r+0x4c>
 800825c:	42a3      	cmp	r3, r4
 800825e:	d9fa      	bls.n	8008256 <_free_r+0x42>
 8008260:	6811      	ldr	r1, [r2, #0]
 8008262:	1850      	adds	r0, r2, r1
 8008264:	42a0      	cmp	r0, r4
 8008266:	d10b      	bne.n	8008280 <_free_r+0x6c>
 8008268:	6820      	ldr	r0, [r4, #0]
 800826a:	4401      	add	r1, r0
 800826c:	1850      	adds	r0, r2, r1
 800826e:	4283      	cmp	r3, r0
 8008270:	6011      	str	r1, [r2, #0]
 8008272:	d1e0      	bne.n	8008236 <_free_r+0x22>
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	6053      	str	r3, [r2, #4]
 800827a:	4408      	add	r0, r1
 800827c:	6010      	str	r0, [r2, #0]
 800827e:	e7da      	b.n	8008236 <_free_r+0x22>
 8008280:	d902      	bls.n	8008288 <_free_r+0x74>
 8008282:	230c      	movs	r3, #12
 8008284:	602b      	str	r3, [r5, #0]
 8008286:	e7d6      	b.n	8008236 <_free_r+0x22>
 8008288:	6820      	ldr	r0, [r4, #0]
 800828a:	1821      	adds	r1, r4, r0
 800828c:	428b      	cmp	r3, r1
 800828e:	bf04      	itt	eq
 8008290:	6819      	ldreq	r1, [r3, #0]
 8008292:	685b      	ldreq	r3, [r3, #4]
 8008294:	6063      	str	r3, [r4, #4]
 8008296:	bf04      	itt	eq
 8008298:	1809      	addeq	r1, r1, r0
 800829a:	6021      	streq	r1, [r4, #0]
 800829c:	6054      	str	r4, [r2, #4]
 800829e:	e7ca      	b.n	8008236 <_free_r+0x22>
 80082a0:	bd38      	pop	{r3, r4, r5, pc}
 80082a2:	bf00      	nop
 80082a4:	20001478 	.word	0x20001478

080082a8 <malloc>:
 80082a8:	4b02      	ldr	r3, [pc, #8]	@ (80082b4 <malloc+0xc>)
 80082aa:	4601      	mov	r1, r0
 80082ac:	6818      	ldr	r0, [r3, #0]
 80082ae:	f000 b825 	b.w	80082fc <_malloc_r>
 80082b2:	bf00      	nop
 80082b4:	2000001c 	.word	0x2000001c

080082b8 <sbrk_aligned>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	4e0f      	ldr	r6, [pc, #60]	@ (80082f8 <sbrk_aligned+0x40>)
 80082bc:	460c      	mov	r4, r1
 80082be:	6831      	ldr	r1, [r6, #0]
 80082c0:	4605      	mov	r5, r0
 80082c2:	b911      	cbnz	r1, 80082ca <sbrk_aligned+0x12>
 80082c4:	f000 fce8 	bl	8008c98 <_sbrk_r>
 80082c8:	6030      	str	r0, [r6, #0]
 80082ca:	4621      	mov	r1, r4
 80082cc:	4628      	mov	r0, r5
 80082ce:	f000 fce3 	bl	8008c98 <_sbrk_r>
 80082d2:	1c43      	adds	r3, r0, #1
 80082d4:	d103      	bne.n	80082de <sbrk_aligned+0x26>
 80082d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80082da:	4620      	mov	r0, r4
 80082dc:	bd70      	pop	{r4, r5, r6, pc}
 80082de:	1cc4      	adds	r4, r0, #3
 80082e0:	f024 0403 	bic.w	r4, r4, #3
 80082e4:	42a0      	cmp	r0, r4
 80082e6:	d0f8      	beq.n	80082da <sbrk_aligned+0x22>
 80082e8:	1a21      	subs	r1, r4, r0
 80082ea:	4628      	mov	r0, r5
 80082ec:	f000 fcd4 	bl	8008c98 <_sbrk_r>
 80082f0:	3001      	adds	r0, #1
 80082f2:	d1f2      	bne.n	80082da <sbrk_aligned+0x22>
 80082f4:	e7ef      	b.n	80082d6 <sbrk_aligned+0x1e>
 80082f6:	bf00      	nop
 80082f8:	20001474 	.word	0x20001474

080082fc <_malloc_r>:
 80082fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008300:	1ccd      	adds	r5, r1, #3
 8008302:	f025 0503 	bic.w	r5, r5, #3
 8008306:	3508      	adds	r5, #8
 8008308:	2d0c      	cmp	r5, #12
 800830a:	bf38      	it	cc
 800830c:	250c      	movcc	r5, #12
 800830e:	2d00      	cmp	r5, #0
 8008310:	4606      	mov	r6, r0
 8008312:	db01      	blt.n	8008318 <_malloc_r+0x1c>
 8008314:	42a9      	cmp	r1, r5
 8008316:	d904      	bls.n	8008322 <_malloc_r+0x26>
 8008318:	230c      	movs	r3, #12
 800831a:	6033      	str	r3, [r6, #0]
 800831c:	2000      	movs	r0, #0
 800831e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083f8 <_malloc_r+0xfc>
 8008326:	f000 f869 	bl	80083fc <__malloc_lock>
 800832a:	f8d8 3000 	ldr.w	r3, [r8]
 800832e:	461c      	mov	r4, r3
 8008330:	bb44      	cbnz	r4, 8008384 <_malloc_r+0x88>
 8008332:	4629      	mov	r1, r5
 8008334:	4630      	mov	r0, r6
 8008336:	f7ff ffbf 	bl	80082b8 <sbrk_aligned>
 800833a:	1c43      	adds	r3, r0, #1
 800833c:	4604      	mov	r4, r0
 800833e:	d158      	bne.n	80083f2 <_malloc_r+0xf6>
 8008340:	f8d8 4000 	ldr.w	r4, [r8]
 8008344:	4627      	mov	r7, r4
 8008346:	2f00      	cmp	r7, #0
 8008348:	d143      	bne.n	80083d2 <_malloc_r+0xd6>
 800834a:	2c00      	cmp	r4, #0
 800834c:	d04b      	beq.n	80083e6 <_malloc_r+0xea>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	4639      	mov	r1, r7
 8008352:	4630      	mov	r0, r6
 8008354:	eb04 0903 	add.w	r9, r4, r3
 8008358:	f000 fc9e 	bl	8008c98 <_sbrk_r>
 800835c:	4581      	cmp	r9, r0
 800835e:	d142      	bne.n	80083e6 <_malloc_r+0xea>
 8008360:	6821      	ldr	r1, [r4, #0]
 8008362:	1a6d      	subs	r5, r5, r1
 8008364:	4629      	mov	r1, r5
 8008366:	4630      	mov	r0, r6
 8008368:	f7ff ffa6 	bl	80082b8 <sbrk_aligned>
 800836c:	3001      	adds	r0, #1
 800836e:	d03a      	beq.n	80083e6 <_malloc_r+0xea>
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	442b      	add	r3, r5
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	f8d8 3000 	ldr.w	r3, [r8]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	bb62      	cbnz	r2, 80083d8 <_malloc_r+0xdc>
 800837e:	f8c8 7000 	str.w	r7, [r8]
 8008382:	e00f      	b.n	80083a4 <_malloc_r+0xa8>
 8008384:	6822      	ldr	r2, [r4, #0]
 8008386:	1b52      	subs	r2, r2, r5
 8008388:	d420      	bmi.n	80083cc <_malloc_r+0xd0>
 800838a:	2a0b      	cmp	r2, #11
 800838c:	d917      	bls.n	80083be <_malloc_r+0xc2>
 800838e:	1961      	adds	r1, r4, r5
 8008390:	42a3      	cmp	r3, r4
 8008392:	6025      	str	r5, [r4, #0]
 8008394:	bf18      	it	ne
 8008396:	6059      	strne	r1, [r3, #4]
 8008398:	6863      	ldr	r3, [r4, #4]
 800839a:	bf08      	it	eq
 800839c:	f8c8 1000 	streq.w	r1, [r8]
 80083a0:	5162      	str	r2, [r4, r5]
 80083a2:	604b      	str	r3, [r1, #4]
 80083a4:	4630      	mov	r0, r6
 80083a6:	f000 f82f 	bl	8008408 <__malloc_unlock>
 80083aa:	f104 000b 	add.w	r0, r4, #11
 80083ae:	1d23      	adds	r3, r4, #4
 80083b0:	f020 0007 	bic.w	r0, r0, #7
 80083b4:	1ac2      	subs	r2, r0, r3
 80083b6:	bf1c      	itt	ne
 80083b8:	1a1b      	subne	r3, r3, r0
 80083ba:	50a3      	strne	r3, [r4, r2]
 80083bc:	e7af      	b.n	800831e <_malloc_r+0x22>
 80083be:	6862      	ldr	r2, [r4, #4]
 80083c0:	42a3      	cmp	r3, r4
 80083c2:	bf0c      	ite	eq
 80083c4:	f8c8 2000 	streq.w	r2, [r8]
 80083c8:	605a      	strne	r2, [r3, #4]
 80083ca:	e7eb      	b.n	80083a4 <_malloc_r+0xa8>
 80083cc:	4623      	mov	r3, r4
 80083ce:	6864      	ldr	r4, [r4, #4]
 80083d0:	e7ae      	b.n	8008330 <_malloc_r+0x34>
 80083d2:	463c      	mov	r4, r7
 80083d4:	687f      	ldr	r7, [r7, #4]
 80083d6:	e7b6      	b.n	8008346 <_malloc_r+0x4a>
 80083d8:	461a      	mov	r2, r3
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	42a3      	cmp	r3, r4
 80083de:	d1fb      	bne.n	80083d8 <_malloc_r+0xdc>
 80083e0:	2300      	movs	r3, #0
 80083e2:	6053      	str	r3, [r2, #4]
 80083e4:	e7de      	b.n	80083a4 <_malloc_r+0xa8>
 80083e6:	230c      	movs	r3, #12
 80083e8:	6033      	str	r3, [r6, #0]
 80083ea:	4630      	mov	r0, r6
 80083ec:	f000 f80c 	bl	8008408 <__malloc_unlock>
 80083f0:	e794      	b.n	800831c <_malloc_r+0x20>
 80083f2:	6005      	str	r5, [r0, #0]
 80083f4:	e7d6      	b.n	80083a4 <_malloc_r+0xa8>
 80083f6:	bf00      	nop
 80083f8:	20001478 	.word	0x20001478

080083fc <__malloc_lock>:
 80083fc:	4801      	ldr	r0, [pc, #4]	@ (8008404 <__malloc_lock+0x8>)
 80083fe:	f7ff beda 	b.w	80081b6 <__retarget_lock_acquire_recursive>
 8008402:	bf00      	nop
 8008404:	20001470 	.word	0x20001470

08008408 <__malloc_unlock>:
 8008408:	4801      	ldr	r0, [pc, #4]	@ (8008410 <__malloc_unlock+0x8>)
 800840a:	f7ff bed5 	b.w	80081b8 <__retarget_lock_release_recursive>
 800840e:	bf00      	nop
 8008410:	20001470 	.word	0x20001470

08008414 <__ssputs_r>:
 8008414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008418:	688e      	ldr	r6, [r1, #8]
 800841a:	461f      	mov	r7, r3
 800841c:	42be      	cmp	r6, r7
 800841e:	680b      	ldr	r3, [r1, #0]
 8008420:	4682      	mov	sl, r0
 8008422:	460c      	mov	r4, r1
 8008424:	4690      	mov	r8, r2
 8008426:	d82d      	bhi.n	8008484 <__ssputs_r+0x70>
 8008428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800842c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008430:	d026      	beq.n	8008480 <__ssputs_r+0x6c>
 8008432:	6965      	ldr	r5, [r4, #20]
 8008434:	6909      	ldr	r1, [r1, #16]
 8008436:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800843a:	eba3 0901 	sub.w	r9, r3, r1
 800843e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008442:	1c7b      	adds	r3, r7, #1
 8008444:	444b      	add	r3, r9
 8008446:	106d      	asrs	r5, r5, #1
 8008448:	429d      	cmp	r5, r3
 800844a:	bf38      	it	cc
 800844c:	461d      	movcc	r5, r3
 800844e:	0553      	lsls	r3, r2, #21
 8008450:	d527      	bpl.n	80084a2 <__ssputs_r+0x8e>
 8008452:	4629      	mov	r1, r5
 8008454:	f7ff ff52 	bl	80082fc <_malloc_r>
 8008458:	4606      	mov	r6, r0
 800845a:	b360      	cbz	r0, 80084b6 <__ssputs_r+0xa2>
 800845c:	6921      	ldr	r1, [r4, #16]
 800845e:	464a      	mov	r2, r9
 8008460:	f7ff feab 	bl	80081ba <memcpy>
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800846a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	6126      	str	r6, [r4, #16]
 8008472:	6165      	str	r5, [r4, #20]
 8008474:	444e      	add	r6, r9
 8008476:	eba5 0509 	sub.w	r5, r5, r9
 800847a:	6026      	str	r6, [r4, #0]
 800847c:	60a5      	str	r5, [r4, #8]
 800847e:	463e      	mov	r6, r7
 8008480:	42be      	cmp	r6, r7
 8008482:	d900      	bls.n	8008486 <__ssputs_r+0x72>
 8008484:	463e      	mov	r6, r7
 8008486:	6820      	ldr	r0, [r4, #0]
 8008488:	4632      	mov	r2, r6
 800848a:	4641      	mov	r1, r8
 800848c:	f000 fbc8 	bl	8008c20 <memmove>
 8008490:	68a3      	ldr	r3, [r4, #8]
 8008492:	1b9b      	subs	r3, r3, r6
 8008494:	60a3      	str	r3, [r4, #8]
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	4433      	add	r3, r6
 800849a:	6023      	str	r3, [r4, #0]
 800849c:	2000      	movs	r0, #0
 800849e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a2:	462a      	mov	r2, r5
 80084a4:	f000 fc0f 	bl	8008cc6 <_realloc_r>
 80084a8:	4606      	mov	r6, r0
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d1e0      	bne.n	8008470 <__ssputs_r+0x5c>
 80084ae:	6921      	ldr	r1, [r4, #16]
 80084b0:	4650      	mov	r0, sl
 80084b2:	f7ff feaf 	bl	8008214 <_free_r>
 80084b6:	230c      	movs	r3, #12
 80084b8:	f8ca 3000 	str.w	r3, [sl]
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084c2:	81a3      	strh	r3, [r4, #12]
 80084c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084c8:	e7e9      	b.n	800849e <__ssputs_r+0x8a>
	...

080084cc <_svfiprintf_r>:
 80084cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d0:	4698      	mov	r8, r3
 80084d2:	898b      	ldrh	r3, [r1, #12]
 80084d4:	061b      	lsls	r3, r3, #24
 80084d6:	b09d      	sub	sp, #116	@ 0x74
 80084d8:	4607      	mov	r7, r0
 80084da:	460d      	mov	r5, r1
 80084dc:	4614      	mov	r4, r2
 80084de:	d510      	bpl.n	8008502 <_svfiprintf_r+0x36>
 80084e0:	690b      	ldr	r3, [r1, #16]
 80084e2:	b973      	cbnz	r3, 8008502 <_svfiprintf_r+0x36>
 80084e4:	2140      	movs	r1, #64	@ 0x40
 80084e6:	f7ff ff09 	bl	80082fc <_malloc_r>
 80084ea:	6028      	str	r0, [r5, #0]
 80084ec:	6128      	str	r0, [r5, #16]
 80084ee:	b930      	cbnz	r0, 80084fe <_svfiprintf_r+0x32>
 80084f0:	230c      	movs	r3, #12
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084f8:	b01d      	add	sp, #116	@ 0x74
 80084fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fe:	2340      	movs	r3, #64	@ 0x40
 8008500:	616b      	str	r3, [r5, #20]
 8008502:	2300      	movs	r3, #0
 8008504:	9309      	str	r3, [sp, #36]	@ 0x24
 8008506:	2320      	movs	r3, #32
 8008508:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800850c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008510:	2330      	movs	r3, #48	@ 0x30
 8008512:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80086b0 <_svfiprintf_r+0x1e4>
 8008516:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800851a:	f04f 0901 	mov.w	r9, #1
 800851e:	4623      	mov	r3, r4
 8008520:	469a      	mov	sl, r3
 8008522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008526:	b10a      	cbz	r2, 800852c <_svfiprintf_r+0x60>
 8008528:	2a25      	cmp	r2, #37	@ 0x25
 800852a:	d1f9      	bne.n	8008520 <_svfiprintf_r+0x54>
 800852c:	ebba 0b04 	subs.w	fp, sl, r4
 8008530:	d00b      	beq.n	800854a <_svfiprintf_r+0x7e>
 8008532:	465b      	mov	r3, fp
 8008534:	4622      	mov	r2, r4
 8008536:	4629      	mov	r1, r5
 8008538:	4638      	mov	r0, r7
 800853a:	f7ff ff6b 	bl	8008414 <__ssputs_r>
 800853e:	3001      	adds	r0, #1
 8008540:	f000 80a7 	beq.w	8008692 <_svfiprintf_r+0x1c6>
 8008544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008546:	445a      	add	r2, fp
 8008548:	9209      	str	r2, [sp, #36]	@ 0x24
 800854a:	f89a 3000 	ldrb.w	r3, [sl]
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 809f 	beq.w	8008692 <_svfiprintf_r+0x1c6>
 8008554:	2300      	movs	r3, #0
 8008556:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800855a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800855e:	f10a 0a01 	add.w	sl, sl, #1
 8008562:	9304      	str	r3, [sp, #16]
 8008564:	9307      	str	r3, [sp, #28]
 8008566:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800856a:	931a      	str	r3, [sp, #104]	@ 0x68
 800856c:	4654      	mov	r4, sl
 800856e:	2205      	movs	r2, #5
 8008570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008574:	484e      	ldr	r0, [pc, #312]	@ (80086b0 <_svfiprintf_r+0x1e4>)
 8008576:	f7f7 fe3b 	bl	80001f0 <memchr>
 800857a:	9a04      	ldr	r2, [sp, #16]
 800857c:	b9d8      	cbnz	r0, 80085b6 <_svfiprintf_r+0xea>
 800857e:	06d0      	lsls	r0, r2, #27
 8008580:	bf44      	itt	mi
 8008582:	2320      	movmi	r3, #32
 8008584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008588:	0711      	lsls	r1, r2, #28
 800858a:	bf44      	itt	mi
 800858c:	232b      	movmi	r3, #43	@ 0x2b
 800858e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008592:	f89a 3000 	ldrb.w	r3, [sl]
 8008596:	2b2a      	cmp	r3, #42	@ 0x2a
 8008598:	d015      	beq.n	80085c6 <_svfiprintf_r+0xfa>
 800859a:	9a07      	ldr	r2, [sp, #28]
 800859c:	4654      	mov	r4, sl
 800859e:	2000      	movs	r0, #0
 80085a0:	f04f 0c0a 	mov.w	ip, #10
 80085a4:	4621      	mov	r1, r4
 80085a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085aa:	3b30      	subs	r3, #48	@ 0x30
 80085ac:	2b09      	cmp	r3, #9
 80085ae:	d94b      	bls.n	8008648 <_svfiprintf_r+0x17c>
 80085b0:	b1b0      	cbz	r0, 80085e0 <_svfiprintf_r+0x114>
 80085b2:	9207      	str	r2, [sp, #28]
 80085b4:	e014      	b.n	80085e0 <_svfiprintf_r+0x114>
 80085b6:	eba0 0308 	sub.w	r3, r0, r8
 80085ba:	fa09 f303 	lsl.w	r3, r9, r3
 80085be:	4313      	orrs	r3, r2
 80085c0:	9304      	str	r3, [sp, #16]
 80085c2:	46a2      	mov	sl, r4
 80085c4:	e7d2      	b.n	800856c <_svfiprintf_r+0xa0>
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	1d19      	adds	r1, r3, #4
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	9103      	str	r1, [sp, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	bfbb      	ittet	lt
 80085d2:	425b      	neglt	r3, r3
 80085d4:	f042 0202 	orrlt.w	r2, r2, #2
 80085d8:	9307      	strge	r3, [sp, #28]
 80085da:	9307      	strlt	r3, [sp, #28]
 80085dc:	bfb8      	it	lt
 80085de:	9204      	strlt	r2, [sp, #16]
 80085e0:	7823      	ldrb	r3, [r4, #0]
 80085e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80085e4:	d10a      	bne.n	80085fc <_svfiprintf_r+0x130>
 80085e6:	7863      	ldrb	r3, [r4, #1]
 80085e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80085ea:	d132      	bne.n	8008652 <_svfiprintf_r+0x186>
 80085ec:	9b03      	ldr	r3, [sp, #12]
 80085ee:	1d1a      	adds	r2, r3, #4
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	9203      	str	r2, [sp, #12]
 80085f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085f8:	3402      	adds	r4, #2
 80085fa:	9305      	str	r3, [sp, #20]
 80085fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80086c0 <_svfiprintf_r+0x1f4>
 8008600:	7821      	ldrb	r1, [r4, #0]
 8008602:	2203      	movs	r2, #3
 8008604:	4650      	mov	r0, sl
 8008606:	f7f7 fdf3 	bl	80001f0 <memchr>
 800860a:	b138      	cbz	r0, 800861c <_svfiprintf_r+0x150>
 800860c:	9b04      	ldr	r3, [sp, #16]
 800860e:	eba0 000a 	sub.w	r0, r0, sl
 8008612:	2240      	movs	r2, #64	@ 0x40
 8008614:	4082      	lsls	r2, r0
 8008616:	4313      	orrs	r3, r2
 8008618:	3401      	adds	r4, #1
 800861a:	9304      	str	r3, [sp, #16]
 800861c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008620:	4824      	ldr	r0, [pc, #144]	@ (80086b4 <_svfiprintf_r+0x1e8>)
 8008622:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008626:	2206      	movs	r2, #6
 8008628:	f7f7 fde2 	bl	80001f0 <memchr>
 800862c:	2800      	cmp	r0, #0
 800862e:	d036      	beq.n	800869e <_svfiprintf_r+0x1d2>
 8008630:	4b21      	ldr	r3, [pc, #132]	@ (80086b8 <_svfiprintf_r+0x1ec>)
 8008632:	bb1b      	cbnz	r3, 800867c <_svfiprintf_r+0x1b0>
 8008634:	9b03      	ldr	r3, [sp, #12]
 8008636:	3307      	adds	r3, #7
 8008638:	f023 0307 	bic.w	r3, r3, #7
 800863c:	3308      	adds	r3, #8
 800863e:	9303      	str	r3, [sp, #12]
 8008640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008642:	4433      	add	r3, r6
 8008644:	9309      	str	r3, [sp, #36]	@ 0x24
 8008646:	e76a      	b.n	800851e <_svfiprintf_r+0x52>
 8008648:	fb0c 3202 	mla	r2, ip, r2, r3
 800864c:	460c      	mov	r4, r1
 800864e:	2001      	movs	r0, #1
 8008650:	e7a8      	b.n	80085a4 <_svfiprintf_r+0xd8>
 8008652:	2300      	movs	r3, #0
 8008654:	3401      	adds	r4, #1
 8008656:	9305      	str	r3, [sp, #20]
 8008658:	4619      	mov	r1, r3
 800865a:	f04f 0c0a 	mov.w	ip, #10
 800865e:	4620      	mov	r0, r4
 8008660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008664:	3a30      	subs	r2, #48	@ 0x30
 8008666:	2a09      	cmp	r2, #9
 8008668:	d903      	bls.n	8008672 <_svfiprintf_r+0x1a6>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0c6      	beq.n	80085fc <_svfiprintf_r+0x130>
 800866e:	9105      	str	r1, [sp, #20]
 8008670:	e7c4      	b.n	80085fc <_svfiprintf_r+0x130>
 8008672:	fb0c 2101 	mla	r1, ip, r1, r2
 8008676:	4604      	mov	r4, r0
 8008678:	2301      	movs	r3, #1
 800867a:	e7f0      	b.n	800865e <_svfiprintf_r+0x192>
 800867c:	ab03      	add	r3, sp, #12
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	462a      	mov	r2, r5
 8008682:	4b0e      	ldr	r3, [pc, #56]	@ (80086bc <_svfiprintf_r+0x1f0>)
 8008684:	a904      	add	r1, sp, #16
 8008686:	4638      	mov	r0, r7
 8008688:	f3af 8000 	nop.w
 800868c:	1c42      	adds	r2, r0, #1
 800868e:	4606      	mov	r6, r0
 8008690:	d1d6      	bne.n	8008640 <_svfiprintf_r+0x174>
 8008692:	89ab      	ldrh	r3, [r5, #12]
 8008694:	065b      	lsls	r3, r3, #25
 8008696:	f53f af2d 	bmi.w	80084f4 <_svfiprintf_r+0x28>
 800869a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800869c:	e72c      	b.n	80084f8 <_svfiprintf_r+0x2c>
 800869e:	ab03      	add	r3, sp, #12
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	462a      	mov	r2, r5
 80086a4:	4b05      	ldr	r3, [pc, #20]	@ (80086bc <_svfiprintf_r+0x1f0>)
 80086a6:	a904      	add	r1, sp, #16
 80086a8:	4638      	mov	r0, r7
 80086aa:	f000 f879 	bl	80087a0 <_printf_i>
 80086ae:	e7ed      	b.n	800868c <_svfiprintf_r+0x1c0>
 80086b0:	08009329 	.word	0x08009329
 80086b4:	08009333 	.word	0x08009333
 80086b8:	00000000 	.word	0x00000000
 80086bc:	08008415 	.word	0x08008415
 80086c0:	0800932f 	.word	0x0800932f

080086c4 <_printf_common>:
 80086c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c8:	4616      	mov	r6, r2
 80086ca:	4698      	mov	r8, r3
 80086cc:	688a      	ldr	r2, [r1, #8]
 80086ce:	690b      	ldr	r3, [r1, #16]
 80086d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086d4:	4293      	cmp	r3, r2
 80086d6:	bfb8      	it	lt
 80086d8:	4613      	movlt	r3, r2
 80086da:	6033      	str	r3, [r6, #0]
 80086dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086e0:	4607      	mov	r7, r0
 80086e2:	460c      	mov	r4, r1
 80086e4:	b10a      	cbz	r2, 80086ea <_printf_common+0x26>
 80086e6:	3301      	adds	r3, #1
 80086e8:	6033      	str	r3, [r6, #0]
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	0699      	lsls	r1, r3, #26
 80086ee:	bf42      	ittt	mi
 80086f0:	6833      	ldrmi	r3, [r6, #0]
 80086f2:	3302      	addmi	r3, #2
 80086f4:	6033      	strmi	r3, [r6, #0]
 80086f6:	6825      	ldr	r5, [r4, #0]
 80086f8:	f015 0506 	ands.w	r5, r5, #6
 80086fc:	d106      	bne.n	800870c <_printf_common+0x48>
 80086fe:	f104 0a19 	add.w	sl, r4, #25
 8008702:	68e3      	ldr	r3, [r4, #12]
 8008704:	6832      	ldr	r2, [r6, #0]
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	42ab      	cmp	r3, r5
 800870a:	dc26      	bgt.n	800875a <_printf_common+0x96>
 800870c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008710:	6822      	ldr	r2, [r4, #0]
 8008712:	3b00      	subs	r3, #0
 8008714:	bf18      	it	ne
 8008716:	2301      	movne	r3, #1
 8008718:	0692      	lsls	r2, r2, #26
 800871a:	d42b      	bmi.n	8008774 <_printf_common+0xb0>
 800871c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008720:	4641      	mov	r1, r8
 8008722:	4638      	mov	r0, r7
 8008724:	47c8      	blx	r9
 8008726:	3001      	adds	r0, #1
 8008728:	d01e      	beq.n	8008768 <_printf_common+0xa4>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	6922      	ldr	r2, [r4, #16]
 800872e:	f003 0306 	and.w	r3, r3, #6
 8008732:	2b04      	cmp	r3, #4
 8008734:	bf02      	ittt	eq
 8008736:	68e5      	ldreq	r5, [r4, #12]
 8008738:	6833      	ldreq	r3, [r6, #0]
 800873a:	1aed      	subeq	r5, r5, r3
 800873c:	68a3      	ldr	r3, [r4, #8]
 800873e:	bf0c      	ite	eq
 8008740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008744:	2500      	movne	r5, #0
 8008746:	4293      	cmp	r3, r2
 8008748:	bfc4      	itt	gt
 800874a:	1a9b      	subgt	r3, r3, r2
 800874c:	18ed      	addgt	r5, r5, r3
 800874e:	2600      	movs	r6, #0
 8008750:	341a      	adds	r4, #26
 8008752:	42b5      	cmp	r5, r6
 8008754:	d11a      	bne.n	800878c <_printf_common+0xc8>
 8008756:	2000      	movs	r0, #0
 8008758:	e008      	b.n	800876c <_printf_common+0xa8>
 800875a:	2301      	movs	r3, #1
 800875c:	4652      	mov	r2, sl
 800875e:	4641      	mov	r1, r8
 8008760:	4638      	mov	r0, r7
 8008762:	47c8      	blx	r9
 8008764:	3001      	adds	r0, #1
 8008766:	d103      	bne.n	8008770 <_printf_common+0xac>
 8008768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800876c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008770:	3501      	adds	r5, #1
 8008772:	e7c6      	b.n	8008702 <_printf_common+0x3e>
 8008774:	18e1      	adds	r1, r4, r3
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	2030      	movs	r0, #48	@ 0x30
 800877a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800877e:	4422      	add	r2, r4
 8008780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008788:	3302      	adds	r3, #2
 800878a:	e7c7      	b.n	800871c <_printf_common+0x58>
 800878c:	2301      	movs	r3, #1
 800878e:	4622      	mov	r2, r4
 8008790:	4641      	mov	r1, r8
 8008792:	4638      	mov	r0, r7
 8008794:	47c8      	blx	r9
 8008796:	3001      	adds	r0, #1
 8008798:	d0e6      	beq.n	8008768 <_printf_common+0xa4>
 800879a:	3601      	adds	r6, #1
 800879c:	e7d9      	b.n	8008752 <_printf_common+0x8e>
	...

080087a0 <_printf_i>:
 80087a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087a4:	7e0f      	ldrb	r7, [r1, #24]
 80087a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087a8:	2f78      	cmp	r7, #120	@ 0x78
 80087aa:	4691      	mov	r9, r2
 80087ac:	4680      	mov	r8, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	469a      	mov	sl, r3
 80087b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087b6:	d807      	bhi.n	80087c8 <_printf_i+0x28>
 80087b8:	2f62      	cmp	r7, #98	@ 0x62
 80087ba:	d80a      	bhi.n	80087d2 <_printf_i+0x32>
 80087bc:	2f00      	cmp	r7, #0
 80087be:	f000 80d2 	beq.w	8008966 <_printf_i+0x1c6>
 80087c2:	2f58      	cmp	r7, #88	@ 0x58
 80087c4:	f000 80b9 	beq.w	800893a <_printf_i+0x19a>
 80087c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087d0:	e03a      	b.n	8008848 <_printf_i+0xa8>
 80087d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087d6:	2b15      	cmp	r3, #21
 80087d8:	d8f6      	bhi.n	80087c8 <_printf_i+0x28>
 80087da:	a101      	add	r1, pc, #4	@ (adr r1, 80087e0 <_printf_i+0x40>)
 80087dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087e0:	08008839 	.word	0x08008839
 80087e4:	0800884d 	.word	0x0800884d
 80087e8:	080087c9 	.word	0x080087c9
 80087ec:	080087c9 	.word	0x080087c9
 80087f0:	080087c9 	.word	0x080087c9
 80087f4:	080087c9 	.word	0x080087c9
 80087f8:	0800884d 	.word	0x0800884d
 80087fc:	080087c9 	.word	0x080087c9
 8008800:	080087c9 	.word	0x080087c9
 8008804:	080087c9 	.word	0x080087c9
 8008808:	080087c9 	.word	0x080087c9
 800880c:	0800894d 	.word	0x0800894d
 8008810:	08008877 	.word	0x08008877
 8008814:	08008907 	.word	0x08008907
 8008818:	080087c9 	.word	0x080087c9
 800881c:	080087c9 	.word	0x080087c9
 8008820:	0800896f 	.word	0x0800896f
 8008824:	080087c9 	.word	0x080087c9
 8008828:	08008877 	.word	0x08008877
 800882c:	080087c9 	.word	0x080087c9
 8008830:	080087c9 	.word	0x080087c9
 8008834:	0800890f 	.word	0x0800890f
 8008838:	6833      	ldr	r3, [r6, #0]
 800883a:	1d1a      	adds	r2, r3, #4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6032      	str	r2, [r6, #0]
 8008840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008848:	2301      	movs	r3, #1
 800884a:	e09d      	b.n	8008988 <_printf_i+0x1e8>
 800884c:	6833      	ldr	r3, [r6, #0]
 800884e:	6820      	ldr	r0, [r4, #0]
 8008850:	1d19      	adds	r1, r3, #4
 8008852:	6031      	str	r1, [r6, #0]
 8008854:	0606      	lsls	r6, r0, #24
 8008856:	d501      	bpl.n	800885c <_printf_i+0xbc>
 8008858:	681d      	ldr	r5, [r3, #0]
 800885a:	e003      	b.n	8008864 <_printf_i+0xc4>
 800885c:	0645      	lsls	r5, r0, #25
 800885e:	d5fb      	bpl.n	8008858 <_printf_i+0xb8>
 8008860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008864:	2d00      	cmp	r5, #0
 8008866:	da03      	bge.n	8008870 <_printf_i+0xd0>
 8008868:	232d      	movs	r3, #45	@ 0x2d
 800886a:	426d      	negs	r5, r5
 800886c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008870:	4859      	ldr	r0, [pc, #356]	@ (80089d8 <_printf_i+0x238>)
 8008872:	230a      	movs	r3, #10
 8008874:	e011      	b.n	800889a <_printf_i+0xfa>
 8008876:	6821      	ldr	r1, [r4, #0]
 8008878:	6833      	ldr	r3, [r6, #0]
 800887a:	0608      	lsls	r0, r1, #24
 800887c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008880:	d402      	bmi.n	8008888 <_printf_i+0xe8>
 8008882:	0649      	lsls	r1, r1, #25
 8008884:	bf48      	it	mi
 8008886:	b2ad      	uxthmi	r5, r5
 8008888:	2f6f      	cmp	r7, #111	@ 0x6f
 800888a:	4853      	ldr	r0, [pc, #332]	@ (80089d8 <_printf_i+0x238>)
 800888c:	6033      	str	r3, [r6, #0]
 800888e:	bf14      	ite	ne
 8008890:	230a      	movne	r3, #10
 8008892:	2308      	moveq	r3, #8
 8008894:	2100      	movs	r1, #0
 8008896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800889a:	6866      	ldr	r6, [r4, #4]
 800889c:	60a6      	str	r6, [r4, #8]
 800889e:	2e00      	cmp	r6, #0
 80088a0:	bfa2      	ittt	ge
 80088a2:	6821      	ldrge	r1, [r4, #0]
 80088a4:	f021 0104 	bicge.w	r1, r1, #4
 80088a8:	6021      	strge	r1, [r4, #0]
 80088aa:	b90d      	cbnz	r5, 80088b0 <_printf_i+0x110>
 80088ac:	2e00      	cmp	r6, #0
 80088ae:	d04b      	beq.n	8008948 <_printf_i+0x1a8>
 80088b0:	4616      	mov	r6, r2
 80088b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80088b6:	fb03 5711 	mls	r7, r3, r1, r5
 80088ba:	5dc7      	ldrb	r7, [r0, r7]
 80088bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088c0:	462f      	mov	r7, r5
 80088c2:	42bb      	cmp	r3, r7
 80088c4:	460d      	mov	r5, r1
 80088c6:	d9f4      	bls.n	80088b2 <_printf_i+0x112>
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d10b      	bne.n	80088e4 <_printf_i+0x144>
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	07df      	lsls	r7, r3, #31
 80088d0:	d508      	bpl.n	80088e4 <_printf_i+0x144>
 80088d2:	6923      	ldr	r3, [r4, #16]
 80088d4:	6861      	ldr	r1, [r4, #4]
 80088d6:	4299      	cmp	r1, r3
 80088d8:	bfde      	ittt	le
 80088da:	2330      	movle	r3, #48	@ 0x30
 80088dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088e0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80088e4:	1b92      	subs	r2, r2, r6
 80088e6:	6122      	str	r2, [r4, #16]
 80088e8:	f8cd a000 	str.w	sl, [sp]
 80088ec:	464b      	mov	r3, r9
 80088ee:	aa03      	add	r2, sp, #12
 80088f0:	4621      	mov	r1, r4
 80088f2:	4640      	mov	r0, r8
 80088f4:	f7ff fee6 	bl	80086c4 <_printf_common>
 80088f8:	3001      	adds	r0, #1
 80088fa:	d14a      	bne.n	8008992 <_printf_i+0x1f2>
 80088fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008900:	b004      	add	sp, #16
 8008902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	f043 0320 	orr.w	r3, r3, #32
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	4833      	ldr	r0, [pc, #204]	@ (80089dc <_printf_i+0x23c>)
 8008910:	2778      	movs	r7, #120	@ 0x78
 8008912:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	6831      	ldr	r1, [r6, #0]
 800891a:	061f      	lsls	r7, r3, #24
 800891c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008920:	d402      	bmi.n	8008928 <_printf_i+0x188>
 8008922:	065f      	lsls	r7, r3, #25
 8008924:	bf48      	it	mi
 8008926:	b2ad      	uxthmi	r5, r5
 8008928:	6031      	str	r1, [r6, #0]
 800892a:	07d9      	lsls	r1, r3, #31
 800892c:	bf44      	itt	mi
 800892e:	f043 0320 	orrmi.w	r3, r3, #32
 8008932:	6023      	strmi	r3, [r4, #0]
 8008934:	b11d      	cbz	r5, 800893e <_printf_i+0x19e>
 8008936:	2310      	movs	r3, #16
 8008938:	e7ac      	b.n	8008894 <_printf_i+0xf4>
 800893a:	4827      	ldr	r0, [pc, #156]	@ (80089d8 <_printf_i+0x238>)
 800893c:	e7e9      	b.n	8008912 <_printf_i+0x172>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	f023 0320 	bic.w	r3, r3, #32
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	e7f6      	b.n	8008936 <_printf_i+0x196>
 8008948:	4616      	mov	r6, r2
 800894a:	e7bd      	b.n	80088c8 <_printf_i+0x128>
 800894c:	6833      	ldr	r3, [r6, #0]
 800894e:	6825      	ldr	r5, [r4, #0]
 8008950:	6961      	ldr	r1, [r4, #20]
 8008952:	1d18      	adds	r0, r3, #4
 8008954:	6030      	str	r0, [r6, #0]
 8008956:	062e      	lsls	r6, r5, #24
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	d501      	bpl.n	8008960 <_printf_i+0x1c0>
 800895c:	6019      	str	r1, [r3, #0]
 800895e:	e002      	b.n	8008966 <_printf_i+0x1c6>
 8008960:	0668      	lsls	r0, r5, #25
 8008962:	d5fb      	bpl.n	800895c <_printf_i+0x1bc>
 8008964:	8019      	strh	r1, [r3, #0]
 8008966:	2300      	movs	r3, #0
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	4616      	mov	r6, r2
 800896c:	e7bc      	b.n	80088e8 <_printf_i+0x148>
 800896e:	6833      	ldr	r3, [r6, #0]
 8008970:	1d1a      	adds	r2, r3, #4
 8008972:	6032      	str	r2, [r6, #0]
 8008974:	681e      	ldr	r6, [r3, #0]
 8008976:	6862      	ldr	r2, [r4, #4]
 8008978:	2100      	movs	r1, #0
 800897a:	4630      	mov	r0, r6
 800897c:	f7f7 fc38 	bl	80001f0 <memchr>
 8008980:	b108      	cbz	r0, 8008986 <_printf_i+0x1e6>
 8008982:	1b80      	subs	r0, r0, r6
 8008984:	6060      	str	r0, [r4, #4]
 8008986:	6863      	ldr	r3, [r4, #4]
 8008988:	6123      	str	r3, [r4, #16]
 800898a:	2300      	movs	r3, #0
 800898c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008990:	e7aa      	b.n	80088e8 <_printf_i+0x148>
 8008992:	6923      	ldr	r3, [r4, #16]
 8008994:	4632      	mov	r2, r6
 8008996:	4649      	mov	r1, r9
 8008998:	4640      	mov	r0, r8
 800899a:	47d0      	blx	sl
 800899c:	3001      	adds	r0, #1
 800899e:	d0ad      	beq.n	80088fc <_printf_i+0x15c>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	079b      	lsls	r3, r3, #30
 80089a4:	d413      	bmi.n	80089ce <_printf_i+0x22e>
 80089a6:	68e0      	ldr	r0, [r4, #12]
 80089a8:	9b03      	ldr	r3, [sp, #12]
 80089aa:	4298      	cmp	r0, r3
 80089ac:	bfb8      	it	lt
 80089ae:	4618      	movlt	r0, r3
 80089b0:	e7a6      	b.n	8008900 <_printf_i+0x160>
 80089b2:	2301      	movs	r3, #1
 80089b4:	4632      	mov	r2, r6
 80089b6:	4649      	mov	r1, r9
 80089b8:	4640      	mov	r0, r8
 80089ba:	47d0      	blx	sl
 80089bc:	3001      	adds	r0, #1
 80089be:	d09d      	beq.n	80088fc <_printf_i+0x15c>
 80089c0:	3501      	adds	r5, #1
 80089c2:	68e3      	ldr	r3, [r4, #12]
 80089c4:	9903      	ldr	r1, [sp, #12]
 80089c6:	1a5b      	subs	r3, r3, r1
 80089c8:	42ab      	cmp	r3, r5
 80089ca:	dcf2      	bgt.n	80089b2 <_printf_i+0x212>
 80089cc:	e7eb      	b.n	80089a6 <_printf_i+0x206>
 80089ce:	2500      	movs	r5, #0
 80089d0:	f104 0619 	add.w	r6, r4, #25
 80089d4:	e7f5      	b.n	80089c2 <_printf_i+0x222>
 80089d6:	bf00      	nop
 80089d8:	0800933a 	.word	0x0800933a
 80089dc:	0800934b 	.word	0x0800934b

080089e0 <__sflush_r>:
 80089e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e8:	0716      	lsls	r6, r2, #28
 80089ea:	4605      	mov	r5, r0
 80089ec:	460c      	mov	r4, r1
 80089ee:	d454      	bmi.n	8008a9a <__sflush_r+0xba>
 80089f0:	684b      	ldr	r3, [r1, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	dc02      	bgt.n	80089fc <__sflush_r+0x1c>
 80089f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	dd48      	ble.n	8008a8e <__sflush_r+0xae>
 80089fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089fe:	2e00      	cmp	r6, #0
 8008a00:	d045      	beq.n	8008a8e <__sflush_r+0xae>
 8008a02:	2300      	movs	r3, #0
 8008a04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a08:	682f      	ldr	r7, [r5, #0]
 8008a0a:	6a21      	ldr	r1, [r4, #32]
 8008a0c:	602b      	str	r3, [r5, #0]
 8008a0e:	d030      	beq.n	8008a72 <__sflush_r+0x92>
 8008a10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	0759      	lsls	r1, r3, #29
 8008a16:	d505      	bpl.n	8008a24 <__sflush_r+0x44>
 8008a18:	6863      	ldr	r3, [r4, #4]
 8008a1a:	1ad2      	subs	r2, r2, r3
 8008a1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a1e:	b10b      	cbz	r3, 8008a24 <__sflush_r+0x44>
 8008a20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a22:	1ad2      	subs	r2, r2, r3
 8008a24:	2300      	movs	r3, #0
 8008a26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a28:	6a21      	ldr	r1, [r4, #32]
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	47b0      	blx	r6
 8008a2e:	1c43      	adds	r3, r0, #1
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	d106      	bne.n	8008a42 <__sflush_r+0x62>
 8008a34:	6829      	ldr	r1, [r5, #0]
 8008a36:	291d      	cmp	r1, #29
 8008a38:	d82b      	bhi.n	8008a92 <__sflush_r+0xb2>
 8008a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ae4 <__sflush_r+0x104>)
 8008a3c:	410a      	asrs	r2, r1
 8008a3e:	07d6      	lsls	r6, r2, #31
 8008a40:	d427      	bmi.n	8008a92 <__sflush_r+0xb2>
 8008a42:	2200      	movs	r2, #0
 8008a44:	6062      	str	r2, [r4, #4]
 8008a46:	04d9      	lsls	r1, r3, #19
 8008a48:	6922      	ldr	r2, [r4, #16]
 8008a4a:	6022      	str	r2, [r4, #0]
 8008a4c:	d504      	bpl.n	8008a58 <__sflush_r+0x78>
 8008a4e:	1c42      	adds	r2, r0, #1
 8008a50:	d101      	bne.n	8008a56 <__sflush_r+0x76>
 8008a52:	682b      	ldr	r3, [r5, #0]
 8008a54:	b903      	cbnz	r3, 8008a58 <__sflush_r+0x78>
 8008a56:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a5a:	602f      	str	r7, [r5, #0]
 8008a5c:	b1b9      	cbz	r1, 8008a8e <__sflush_r+0xae>
 8008a5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a62:	4299      	cmp	r1, r3
 8008a64:	d002      	beq.n	8008a6c <__sflush_r+0x8c>
 8008a66:	4628      	mov	r0, r5
 8008a68:	f7ff fbd4 	bl	8008214 <_free_r>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a70:	e00d      	b.n	8008a8e <__sflush_r+0xae>
 8008a72:	2301      	movs	r3, #1
 8008a74:	4628      	mov	r0, r5
 8008a76:	47b0      	blx	r6
 8008a78:	4602      	mov	r2, r0
 8008a7a:	1c50      	adds	r0, r2, #1
 8008a7c:	d1c9      	bne.n	8008a12 <__sflush_r+0x32>
 8008a7e:	682b      	ldr	r3, [r5, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0c6      	beq.n	8008a12 <__sflush_r+0x32>
 8008a84:	2b1d      	cmp	r3, #29
 8008a86:	d001      	beq.n	8008a8c <__sflush_r+0xac>
 8008a88:	2b16      	cmp	r3, #22
 8008a8a:	d11e      	bne.n	8008aca <__sflush_r+0xea>
 8008a8c:	602f      	str	r7, [r5, #0]
 8008a8e:	2000      	movs	r0, #0
 8008a90:	e022      	b.n	8008ad8 <__sflush_r+0xf8>
 8008a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a96:	b21b      	sxth	r3, r3
 8008a98:	e01b      	b.n	8008ad2 <__sflush_r+0xf2>
 8008a9a:	690f      	ldr	r7, [r1, #16]
 8008a9c:	2f00      	cmp	r7, #0
 8008a9e:	d0f6      	beq.n	8008a8e <__sflush_r+0xae>
 8008aa0:	0793      	lsls	r3, r2, #30
 8008aa2:	680e      	ldr	r6, [r1, #0]
 8008aa4:	bf08      	it	eq
 8008aa6:	694b      	ldreq	r3, [r1, #20]
 8008aa8:	600f      	str	r7, [r1, #0]
 8008aaa:	bf18      	it	ne
 8008aac:	2300      	movne	r3, #0
 8008aae:	eba6 0807 	sub.w	r8, r6, r7
 8008ab2:	608b      	str	r3, [r1, #8]
 8008ab4:	f1b8 0f00 	cmp.w	r8, #0
 8008ab8:	dde9      	ble.n	8008a8e <__sflush_r+0xae>
 8008aba:	6a21      	ldr	r1, [r4, #32]
 8008abc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008abe:	4643      	mov	r3, r8
 8008ac0:	463a      	mov	r2, r7
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	47b0      	blx	r6
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	dc08      	bgt.n	8008adc <__sflush_r+0xfc>
 8008aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ad2:	81a3      	strh	r3, [r4, #12]
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008adc:	4407      	add	r7, r0
 8008ade:	eba8 0800 	sub.w	r8, r8, r0
 8008ae2:	e7e7      	b.n	8008ab4 <__sflush_r+0xd4>
 8008ae4:	dfbffffe 	.word	0xdfbffffe

08008ae8 <_fflush_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	690b      	ldr	r3, [r1, #16]
 8008aec:	4605      	mov	r5, r0
 8008aee:	460c      	mov	r4, r1
 8008af0:	b913      	cbnz	r3, 8008af8 <_fflush_r+0x10>
 8008af2:	2500      	movs	r5, #0
 8008af4:	4628      	mov	r0, r5
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	b118      	cbz	r0, 8008b02 <_fflush_r+0x1a>
 8008afa:	6a03      	ldr	r3, [r0, #32]
 8008afc:	b90b      	cbnz	r3, 8008b02 <_fflush_r+0x1a>
 8008afe:	f7ff f8e5 	bl	8007ccc <__sinit>
 8008b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0f3      	beq.n	8008af2 <_fflush_r+0xa>
 8008b0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b0c:	07d0      	lsls	r0, r2, #31
 8008b0e:	d404      	bmi.n	8008b1a <_fflush_r+0x32>
 8008b10:	0599      	lsls	r1, r3, #22
 8008b12:	d402      	bmi.n	8008b1a <_fflush_r+0x32>
 8008b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b16:	f7ff fb4e 	bl	80081b6 <__retarget_lock_acquire_recursive>
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	f7ff ff5f 	bl	80089e0 <__sflush_r>
 8008b22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b24:	07da      	lsls	r2, r3, #31
 8008b26:	4605      	mov	r5, r0
 8008b28:	d4e4      	bmi.n	8008af4 <_fflush_r+0xc>
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	059b      	lsls	r3, r3, #22
 8008b2e:	d4e1      	bmi.n	8008af4 <_fflush_r+0xc>
 8008b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b32:	f7ff fb41 	bl	80081b8 <__retarget_lock_release_recursive>
 8008b36:	e7dd      	b.n	8008af4 <_fflush_r+0xc>

08008b38 <fiprintf>:
 8008b38:	b40e      	push	{r1, r2, r3}
 8008b3a:	b503      	push	{r0, r1, lr}
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	ab03      	add	r3, sp, #12
 8008b40:	4805      	ldr	r0, [pc, #20]	@ (8008b58 <fiprintf+0x20>)
 8008b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b46:	6800      	ldr	r0, [r0, #0]
 8008b48:	9301      	str	r3, [sp, #4]
 8008b4a:	f000 f913 	bl	8008d74 <_vfiprintf_r>
 8008b4e:	b002      	add	sp, #8
 8008b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b54:	b003      	add	sp, #12
 8008b56:	4770      	bx	lr
 8008b58:	2000001c 	.word	0x2000001c

08008b5c <__swhatbuf_r>:
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	460c      	mov	r4, r1
 8008b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b64:	2900      	cmp	r1, #0
 8008b66:	b096      	sub	sp, #88	@ 0x58
 8008b68:	4615      	mov	r5, r2
 8008b6a:	461e      	mov	r6, r3
 8008b6c:	da0d      	bge.n	8008b8a <__swhatbuf_r+0x2e>
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b74:	f04f 0100 	mov.w	r1, #0
 8008b78:	bf14      	ite	ne
 8008b7a:	2340      	movne	r3, #64	@ 0x40
 8008b7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b80:	2000      	movs	r0, #0
 8008b82:	6031      	str	r1, [r6, #0]
 8008b84:	602b      	str	r3, [r5, #0]
 8008b86:	b016      	add	sp, #88	@ 0x58
 8008b88:	bd70      	pop	{r4, r5, r6, pc}
 8008b8a:	466a      	mov	r2, sp
 8008b8c:	f000 f862 	bl	8008c54 <_fstat_r>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	dbec      	blt.n	8008b6e <__swhatbuf_r+0x12>
 8008b94:	9901      	ldr	r1, [sp, #4]
 8008b96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b9e:	4259      	negs	r1, r3
 8008ba0:	4159      	adcs	r1, r3
 8008ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ba6:	e7eb      	b.n	8008b80 <__swhatbuf_r+0x24>

08008ba8 <__smakebuf_r>:
 8008ba8:	898b      	ldrh	r3, [r1, #12]
 8008baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bac:	079d      	lsls	r5, r3, #30
 8008bae:	4606      	mov	r6, r0
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	d507      	bpl.n	8008bc4 <__smakebuf_r+0x1c>
 8008bb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	6123      	str	r3, [r4, #16]
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	6163      	str	r3, [r4, #20]
 8008bc0:	b003      	add	sp, #12
 8008bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bc4:	ab01      	add	r3, sp, #4
 8008bc6:	466a      	mov	r2, sp
 8008bc8:	f7ff ffc8 	bl	8008b5c <__swhatbuf_r>
 8008bcc:	9f00      	ldr	r7, [sp, #0]
 8008bce:	4605      	mov	r5, r0
 8008bd0:	4639      	mov	r1, r7
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f7ff fb92 	bl	80082fc <_malloc_r>
 8008bd8:	b948      	cbnz	r0, 8008bee <__smakebuf_r+0x46>
 8008bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bde:	059a      	lsls	r2, r3, #22
 8008be0:	d4ee      	bmi.n	8008bc0 <__smakebuf_r+0x18>
 8008be2:	f023 0303 	bic.w	r3, r3, #3
 8008be6:	f043 0302 	orr.w	r3, r3, #2
 8008bea:	81a3      	strh	r3, [r4, #12]
 8008bec:	e7e2      	b.n	8008bb4 <__smakebuf_r+0xc>
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	6020      	str	r0, [r4, #0]
 8008bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bf6:	81a3      	strh	r3, [r4, #12]
 8008bf8:	9b01      	ldr	r3, [sp, #4]
 8008bfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008bfe:	b15b      	cbz	r3, 8008c18 <__smakebuf_r+0x70>
 8008c00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c04:	4630      	mov	r0, r6
 8008c06:	f000 f837 	bl	8008c78 <_isatty_r>
 8008c0a:	b128      	cbz	r0, 8008c18 <__smakebuf_r+0x70>
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	f023 0303 	bic.w	r3, r3, #3
 8008c12:	f043 0301 	orr.w	r3, r3, #1
 8008c16:	81a3      	strh	r3, [r4, #12]
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	431d      	orrs	r5, r3
 8008c1c:	81a5      	strh	r5, [r4, #12]
 8008c1e:	e7cf      	b.n	8008bc0 <__smakebuf_r+0x18>

08008c20 <memmove>:
 8008c20:	4288      	cmp	r0, r1
 8008c22:	b510      	push	{r4, lr}
 8008c24:	eb01 0402 	add.w	r4, r1, r2
 8008c28:	d902      	bls.n	8008c30 <memmove+0x10>
 8008c2a:	4284      	cmp	r4, r0
 8008c2c:	4623      	mov	r3, r4
 8008c2e:	d807      	bhi.n	8008c40 <memmove+0x20>
 8008c30:	1e43      	subs	r3, r0, #1
 8008c32:	42a1      	cmp	r1, r4
 8008c34:	d008      	beq.n	8008c48 <memmove+0x28>
 8008c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c3e:	e7f8      	b.n	8008c32 <memmove+0x12>
 8008c40:	4402      	add	r2, r0
 8008c42:	4601      	mov	r1, r0
 8008c44:	428a      	cmp	r2, r1
 8008c46:	d100      	bne.n	8008c4a <memmove+0x2a>
 8008c48:	bd10      	pop	{r4, pc}
 8008c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c52:	e7f7      	b.n	8008c44 <memmove+0x24>

08008c54 <_fstat_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4d07      	ldr	r5, [pc, #28]	@ (8008c74 <_fstat_r+0x20>)
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	4611      	mov	r1, r2
 8008c60:	602b      	str	r3, [r5, #0]
 8008c62:	f7f8 fc95 	bl	8001590 <_fstat>
 8008c66:	1c43      	adds	r3, r0, #1
 8008c68:	d102      	bne.n	8008c70 <_fstat_r+0x1c>
 8008c6a:	682b      	ldr	r3, [r5, #0]
 8008c6c:	b103      	cbz	r3, 8008c70 <_fstat_r+0x1c>
 8008c6e:	6023      	str	r3, [r4, #0]
 8008c70:	bd38      	pop	{r3, r4, r5, pc}
 8008c72:	bf00      	nop
 8008c74:	2000146c 	.word	0x2000146c

08008c78 <_isatty_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4d06      	ldr	r5, [pc, #24]	@ (8008c94 <_isatty_r+0x1c>)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	4608      	mov	r0, r1
 8008c82:	602b      	str	r3, [r5, #0]
 8008c84:	f7f8 fc94 	bl	80015b0 <_isatty>
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	d102      	bne.n	8008c92 <_isatty_r+0x1a>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	b103      	cbz	r3, 8008c92 <_isatty_r+0x1a>
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	2000146c 	.word	0x2000146c

08008c98 <_sbrk_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d06      	ldr	r5, [pc, #24]	@ (8008cb4 <_sbrk_r+0x1c>)
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	602b      	str	r3, [r5, #0]
 8008ca4:	f7f8 fc9c 	bl	80015e0 <_sbrk>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_sbrk_r+0x1a>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_sbrk_r+0x1a>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	2000146c 	.word	0x2000146c

08008cb8 <abort>:
 8008cb8:	b508      	push	{r3, lr}
 8008cba:	2006      	movs	r0, #6
 8008cbc:	f000 f99a 	bl	8008ff4 <raise>
 8008cc0:	2001      	movs	r0, #1
 8008cc2:	f7f8 fc15 	bl	80014f0 <_exit>

08008cc6 <_realloc_r>:
 8008cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cca:	4680      	mov	r8, r0
 8008ccc:	4615      	mov	r5, r2
 8008cce:	460c      	mov	r4, r1
 8008cd0:	b921      	cbnz	r1, 8008cdc <_realloc_r+0x16>
 8008cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	f7ff bb10 	b.w	80082fc <_malloc_r>
 8008cdc:	b92a      	cbnz	r2, 8008cea <_realloc_r+0x24>
 8008cde:	f7ff fa99 	bl	8008214 <_free_r>
 8008ce2:	2400      	movs	r4, #0
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cea:	f000 f99f 	bl	800902c <_malloc_usable_size_r>
 8008cee:	4285      	cmp	r5, r0
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	d802      	bhi.n	8008cfa <_realloc_r+0x34>
 8008cf4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008cf8:	d8f4      	bhi.n	8008ce4 <_realloc_r+0x1e>
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	f7ff fafd 	bl	80082fc <_malloc_r>
 8008d02:	4607      	mov	r7, r0
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d0ec      	beq.n	8008ce2 <_realloc_r+0x1c>
 8008d08:	42b5      	cmp	r5, r6
 8008d0a:	462a      	mov	r2, r5
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	bf28      	it	cs
 8008d10:	4632      	movcs	r2, r6
 8008d12:	f7ff fa52 	bl	80081ba <memcpy>
 8008d16:	4621      	mov	r1, r4
 8008d18:	4640      	mov	r0, r8
 8008d1a:	f7ff fa7b 	bl	8008214 <_free_r>
 8008d1e:	463c      	mov	r4, r7
 8008d20:	e7e0      	b.n	8008ce4 <_realloc_r+0x1e>

08008d22 <__sfputc_r>:
 8008d22:	6893      	ldr	r3, [r2, #8]
 8008d24:	3b01      	subs	r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	b410      	push	{r4}
 8008d2a:	6093      	str	r3, [r2, #8]
 8008d2c:	da08      	bge.n	8008d40 <__sfputc_r+0x1e>
 8008d2e:	6994      	ldr	r4, [r2, #24]
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	db01      	blt.n	8008d38 <__sfputc_r+0x16>
 8008d34:	290a      	cmp	r1, #10
 8008d36:	d103      	bne.n	8008d40 <__sfputc_r+0x1e>
 8008d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d3c:	f7ff b8d1 	b.w	8007ee2 <__swbuf_r>
 8008d40:	6813      	ldr	r3, [r2, #0]
 8008d42:	1c58      	adds	r0, r3, #1
 8008d44:	6010      	str	r0, [r2, #0]
 8008d46:	7019      	strb	r1, [r3, #0]
 8008d48:	4608      	mov	r0, r1
 8008d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <__sfputs_r>:
 8008d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d52:	4606      	mov	r6, r0
 8008d54:	460f      	mov	r7, r1
 8008d56:	4614      	mov	r4, r2
 8008d58:	18d5      	adds	r5, r2, r3
 8008d5a:	42ac      	cmp	r4, r5
 8008d5c:	d101      	bne.n	8008d62 <__sfputs_r+0x12>
 8008d5e:	2000      	movs	r0, #0
 8008d60:	e007      	b.n	8008d72 <__sfputs_r+0x22>
 8008d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d66:	463a      	mov	r2, r7
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f7ff ffda 	bl	8008d22 <__sfputc_r>
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	d1f3      	bne.n	8008d5a <__sfputs_r+0xa>
 8008d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d74 <_vfiprintf_r>:
 8008d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d78:	460d      	mov	r5, r1
 8008d7a:	b09d      	sub	sp, #116	@ 0x74
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	4698      	mov	r8, r3
 8008d80:	4606      	mov	r6, r0
 8008d82:	b118      	cbz	r0, 8008d8c <_vfiprintf_r+0x18>
 8008d84:	6a03      	ldr	r3, [r0, #32]
 8008d86:	b90b      	cbnz	r3, 8008d8c <_vfiprintf_r+0x18>
 8008d88:	f7fe ffa0 	bl	8007ccc <__sinit>
 8008d8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d8e:	07d9      	lsls	r1, r3, #31
 8008d90:	d405      	bmi.n	8008d9e <_vfiprintf_r+0x2a>
 8008d92:	89ab      	ldrh	r3, [r5, #12]
 8008d94:	059a      	lsls	r2, r3, #22
 8008d96:	d402      	bmi.n	8008d9e <_vfiprintf_r+0x2a>
 8008d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d9a:	f7ff fa0c 	bl	80081b6 <__retarget_lock_acquire_recursive>
 8008d9e:	89ab      	ldrh	r3, [r5, #12]
 8008da0:	071b      	lsls	r3, r3, #28
 8008da2:	d501      	bpl.n	8008da8 <_vfiprintf_r+0x34>
 8008da4:	692b      	ldr	r3, [r5, #16]
 8008da6:	b99b      	cbnz	r3, 8008dd0 <_vfiprintf_r+0x5c>
 8008da8:	4629      	mov	r1, r5
 8008daa:	4630      	mov	r0, r6
 8008dac:	f7ff f8d8 	bl	8007f60 <__swsetup_r>
 8008db0:	b170      	cbz	r0, 8008dd0 <_vfiprintf_r+0x5c>
 8008db2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008db4:	07dc      	lsls	r4, r3, #31
 8008db6:	d504      	bpl.n	8008dc2 <_vfiprintf_r+0x4e>
 8008db8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dbc:	b01d      	add	sp, #116	@ 0x74
 8008dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc2:	89ab      	ldrh	r3, [r5, #12]
 8008dc4:	0598      	lsls	r0, r3, #22
 8008dc6:	d4f7      	bmi.n	8008db8 <_vfiprintf_r+0x44>
 8008dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dca:	f7ff f9f5 	bl	80081b8 <__retarget_lock_release_recursive>
 8008dce:	e7f3      	b.n	8008db8 <_vfiprintf_r+0x44>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dd4:	2320      	movs	r3, #32
 8008dd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dda:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dde:	2330      	movs	r3, #48	@ 0x30
 8008de0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f90 <_vfiprintf_r+0x21c>
 8008de4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008de8:	f04f 0901 	mov.w	r9, #1
 8008dec:	4623      	mov	r3, r4
 8008dee:	469a      	mov	sl, r3
 8008df0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008df4:	b10a      	cbz	r2, 8008dfa <_vfiprintf_r+0x86>
 8008df6:	2a25      	cmp	r2, #37	@ 0x25
 8008df8:	d1f9      	bne.n	8008dee <_vfiprintf_r+0x7a>
 8008dfa:	ebba 0b04 	subs.w	fp, sl, r4
 8008dfe:	d00b      	beq.n	8008e18 <_vfiprintf_r+0xa4>
 8008e00:	465b      	mov	r3, fp
 8008e02:	4622      	mov	r2, r4
 8008e04:	4629      	mov	r1, r5
 8008e06:	4630      	mov	r0, r6
 8008e08:	f7ff ffa2 	bl	8008d50 <__sfputs_r>
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	f000 80a7 	beq.w	8008f60 <_vfiprintf_r+0x1ec>
 8008e12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e14:	445a      	add	r2, fp
 8008e16:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e18:	f89a 3000 	ldrb.w	r3, [sl]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 809f 	beq.w	8008f60 <_vfiprintf_r+0x1ec>
 8008e22:	2300      	movs	r3, #0
 8008e24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e2c:	f10a 0a01 	add.w	sl, sl, #1
 8008e30:	9304      	str	r3, [sp, #16]
 8008e32:	9307      	str	r3, [sp, #28]
 8008e34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e38:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e3a:	4654      	mov	r4, sl
 8008e3c:	2205      	movs	r2, #5
 8008e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e42:	4853      	ldr	r0, [pc, #332]	@ (8008f90 <_vfiprintf_r+0x21c>)
 8008e44:	f7f7 f9d4 	bl	80001f0 <memchr>
 8008e48:	9a04      	ldr	r2, [sp, #16]
 8008e4a:	b9d8      	cbnz	r0, 8008e84 <_vfiprintf_r+0x110>
 8008e4c:	06d1      	lsls	r1, r2, #27
 8008e4e:	bf44      	itt	mi
 8008e50:	2320      	movmi	r3, #32
 8008e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e56:	0713      	lsls	r3, r2, #28
 8008e58:	bf44      	itt	mi
 8008e5a:	232b      	movmi	r3, #43	@ 0x2b
 8008e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e60:	f89a 3000 	ldrb.w	r3, [sl]
 8008e64:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e66:	d015      	beq.n	8008e94 <_vfiprintf_r+0x120>
 8008e68:	9a07      	ldr	r2, [sp, #28]
 8008e6a:	4654      	mov	r4, sl
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	f04f 0c0a 	mov.w	ip, #10
 8008e72:	4621      	mov	r1, r4
 8008e74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e78:	3b30      	subs	r3, #48	@ 0x30
 8008e7a:	2b09      	cmp	r3, #9
 8008e7c:	d94b      	bls.n	8008f16 <_vfiprintf_r+0x1a2>
 8008e7e:	b1b0      	cbz	r0, 8008eae <_vfiprintf_r+0x13a>
 8008e80:	9207      	str	r2, [sp, #28]
 8008e82:	e014      	b.n	8008eae <_vfiprintf_r+0x13a>
 8008e84:	eba0 0308 	sub.w	r3, r0, r8
 8008e88:	fa09 f303 	lsl.w	r3, r9, r3
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	9304      	str	r3, [sp, #16]
 8008e90:	46a2      	mov	sl, r4
 8008e92:	e7d2      	b.n	8008e3a <_vfiprintf_r+0xc6>
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	1d19      	adds	r1, r3, #4
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	9103      	str	r1, [sp, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bfbb      	ittet	lt
 8008ea0:	425b      	neglt	r3, r3
 8008ea2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ea6:	9307      	strge	r3, [sp, #28]
 8008ea8:	9307      	strlt	r3, [sp, #28]
 8008eaa:	bfb8      	it	lt
 8008eac:	9204      	strlt	r2, [sp, #16]
 8008eae:	7823      	ldrb	r3, [r4, #0]
 8008eb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008eb2:	d10a      	bne.n	8008eca <_vfiprintf_r+0x156>
 8008eb4:	7863      	ldrb	r3, [r4, #1]
 8008eb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eb8:	d132      	bne.n	8008f20 <_vfiprintf_r+0x1ac>
 8008eba:	9b03      	ldr	r3, [sp, #12]
 8008ebc:	1d1a      	adds	r2, r3, #4
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	9203      	str	r2, [sp, #12]
 8008ec2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ec6:	3402      	adds	r4, #2
 8008ec8:	9305      	str	r3, [sp, #20]
 8008eca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008fa0 <_vfiprintf_r+0x22c>
 8008ece:	7821      	ldrb	r1, [r4, #0]
 8008ed0:	2203      	movs	r2, #3
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	f7f7 f98c 	bl	80001f0 <memchr>
 8008ed8:	b138      	cbz	r0, 8008eea <_vfiprintf_r+0x176>
 8008eda:	9b04      	ldr	r3, [sp, #16]
 8008edc:	eba0 000a 	sub.w	r0, r0, sl
 8008ee0:	2240      	movs	r2, #64	@ 0x40
 8008ee2:	4082      	lsls	r2, r0
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	3401      	adds	r4, #1
 8008ee8:	9304      	str	r3, [sp, #16]
 8008eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eee:	4829      	ldr	r0, [pc, #164]	@ (8008f94 <_vfiprintf_r+0x220>)
 8008ef0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ef4:	2206      	movs	r2, #6
 8008ef6:	f7f7 f97b 	bl	80001f0 <memchr>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d03f      	beq.n	8008f7e <_vfiprintf_r+0x20a>
 8008efe:	4b26      	ldr	r3, [pc, #152]	@ (8008f98 <_vfiprintf_r+0x224>)
 8008f00:	bb1b      	cbnz	r3, 8008f4a <_vfiprintf_r+0x1d6>
 8008f02:	9b03      	ldr	r3, [sp, #12]
 8008f04:	3307      	adds	r3, #7
 8008f06:	f023 0307 	bic.w	r3, r3, #7
 8008f0a:	3308      	adds	r3, #8
 8008f0c:	9303      	str	r3, [sp, #12]
 8008f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f10:	443b      	add	r3, r7
 8008f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f14:	e76a      	b.n	8008dec <_vfiprintf_r+0x78>
 8008f16:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	2001      	movs	r0, #1
 8008f1e:	e7a8      	b.n	8008e72 <_vfiprintf_r+0xfe>
 8008f20:	2300      	movs	r3, #0
 8008f22:	3401      	adds	r4, #1
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	4619      	mov	r1, r3
 8008f28:	f04f 0c0a 	mov.w	ip, #10
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f32:	3a30      	subs	r2, #48	@ 0x30
 8008f34:	2a09      	cmp	r2, #9
 8008f36:	d903      	bls.n	8008f40 <_vfiprintf_r+0x1cc>
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d0c6      	beq.n	8008eca <_vfiprintf_r+0x156>
 8008f3c:	9105      	str	r1, [sp, #20]
 8008f3e:	e7c4      	b.n	8008eca <_vfiprintf_r+0x156>
 8008f40:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f44:	4604      	mov	r4, r0
 8008f46:	2301      	movs	r3, #1
 8008f48:	e7f0      	b.n	8008f2c <_vfiprintf_r+0x1b8>
 8008f4a:	ab03      	add	r3, sp, #12
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	462a      	mov	r2, r5
 8008f50:	4b12      	ldr	r3, [pc, #72]	@ (8008f9c <_vfiprintf_r+0x228>)
 8008f52:	a904      	add	r1, sp, #16
 8008f54:	4630      	mov	r0, r6
 8008f56:	f3af 8000 	nop.w
 8008f5a:	4607      	mov	r7, r0
 8008f5c:	1c78      	adds	r0, r7, #1
 8008f5e:	d1d6      	bne.n	8008f0e <_vfiprintf_r+0x19a>
 8008f60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f62:	07d9      	lsls	r1, r3, #31
 8008f64:	d405      	bmi.n	8008f72 <_vfiprintf_r+0x1fe>
 8008f66:	89ab      	ldrh	r3, [r5, #12]
 8008f68:	059a      	lsls	r2, r3, #22
 8008f6a:	d402      	bmi.n	8008f72 <_vfiprintf_r+0x1fe>
 8008f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f6e:	f7ff f923 	bl	80081b8 <__retarget_lock_release_recursive>
 8008f72:	89ab      	ldrh	r3, [r5, #12]
 8008f74:	065b      	lsls	r3, r3, #25
 8008f76:	f53f af1f 	bmi.w	8008db8 <_vfiprintf_r+0x44>
 8008f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f7c:	e71e      	b.n	8008dbc <_vfiprintf_r+0x48>
 8008f7e:	ab03      	add	r3, sp, #12
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	462a      	mov	r2, r5
 8008f84:	4b05      	ldr	r3, [pc, #20]	@ (8008f9c <_vfiprintf_r+0x228>)
 8008f86:	a904      	add	r1, sp, #16
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f7ff fc09 	bl	80087a0 <_printf_i>
 8008f8e:	e7e4      	b.n	8008f5a <_vfiprintf_r+0x1e6>
 8008f90:	08009329 	.word	0x08009329
 8008f94:	08009333 	.word	0x08009333
 8008f98:	00000000 	.word	0x00000000
 8008f9c:	08008d51 	.word	0x08008d51
 8008fa0:	0800932f 	.word	0x0800932f

08008fa4 <_raise_r>:
 8008fa4:	291f      	cmp	r1, #31
 8008fa6:	b538      	push	{r3, r4, r5, lr}
 8008fa8:	4605      	mov	r5, r0
 8008faa:	460c      	mov	r4, r1
 8008fac:	d904      	bls.n	8008fb8 <_raise_r+0x14>
 8008fae:	2316      	movs	r3, #22
 8008fb0:	6003      	str	r3, [r0, #0]
 8008fb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fba:	b112      	cbz	r2, 8008fc2 <_raise_r+0x1e>
 8008fbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fc0:	b94b      	cbnz	r3, 8008fd6 <_raise_r+0x32>
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 f830 	bl	8009028 <_getpid_r>
 8008fc8:	4622      	mov	r2, r4
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4628      	mov	r0, r5
 8008fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fd2:	f000 b817 	b.w	8009004 <_kill_r>
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d00a      	beq.n	8008ff0 <_raise_r+0x4c>
 8008fda:	1c59      	adds	r1, r3, #1
 8008fdc:	d103      	bne.n	8008fe6 <_raise_r+0x42>
 8008fde:	2316      	movs	r3, #22
 8008fe0:	6003      	str	r3, [r0, #0]
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	e7e7      	b.n	8008fb6 <_raise_r+0x12>
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008fec:	4620      	mov	r0, r4
 8008fee:	4798      	blx	r3
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e7e0      	b.n	8008fb6 <_raise_r+0x12>

08008ff4 <raise>:
 8008ff4:	4b02      	ldr	r3, [pc, #8]	@ (8009000 <raise+0xc>)
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	f7ff bfd3 	b.w	8008fa4 <_raise_r>
 8008ffe:	bf00      	nop
 8009000:	2000001c 	.word	0x2000001c

08009004 <_kill_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	4d07      	ldr	r5, [pc, #28]	@ (8009024 <_kill_r+0x20>)
 8009008:	2300      	movs	r3, #0
 800900a:	4604      	mov	r4, r0
 800900c:	4608      	mov	r0, r1
 800900e:	4611      	mov	r1, r2
 8009010:	602b      	str	r3, [r5, #0]
 8009012:	f7f8 fa5d 	bl	80014d0 <_kill>
 8009016:	1c43      	adds	r3, r0, #1
 8009018:	d102      	bne.n	8009020 <_kill_r+0x1c>
 800901a:	682b      	ldr	r3, [r5, #0]
 800901c:	b103      	cbz	r3, 8009020 <_kill_r+0x1c>
 800901e:	6023      	str	r3, [r4, #0]
 8009020:	bd38      	pop	{r3, r4, r5, pc}
 8009022:	bf00      	nop
 8009024:	2000146c 	.word	0x2000146c

08009028 <_getpid_r>:
 8009028:	f7f8 ba4a 	b.w	80014c0 <_getpid>

0800902c <_malloc_usable_size_r>:
 800902c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009030:	1f18      	subs	r0, r3, #4
 8009032:	2b00      	cmp	r3, #0
 8009034:	bfbc      	itt	lt
 8009036:	580b      	ldrlt	r3, [r1, r0]
 8009038:	18c0      	addlt	r0, r0, r3
 800903a:	4770      	bx	lr

0800903c <_init>:
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903e:	bf00      	nop
 8009040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009042:	bc08      	pop	{r3}
 8009044:	469e      	mov	lr, r3
 8009046:	4770      	bx	lr

08009048 <_fini>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	bf00      	nop
 800904c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904e:	bc08      	pop	{r3}
 8009050:	469e      	mov	lr, r3
 8009052:	4770      	bx	lr
