
TP Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  0800bb7c  0800bb7c  0000cb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be98  0800be98  0000d074  2**0
                  CONTENTS
  4 .ARM          00000008  0800be98  0800be98  0000ce98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bea0  0800bea0  0000d074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bea0  0800bea0  0000cea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bea4  0800bea4  0000cea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800bea8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017a8  20000074  0800bf1c  0000d074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000181c  0800bf1c  0000d81c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002149b  00000000  00000000  0000d0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005432  00000000  00000000  0002e53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  00033978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001587  00000000  00000000  00035580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f265  00000000  00000000  00036b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002571e  00000000  00000000  00065d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f817  00000000  00000000  0008b48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019aca1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ec0  00000000  00000000  0019ace4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001a2ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb64 	.word	0x0800bb64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800bb64 	.word	0x0800bb64

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
 80005a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ba:	4b29      	ldr	r3, [pc, #164]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c0:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005c2:	2204      	movs	r2, #4
 80005c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005c6:	4b26      	ldr	r3, [pc, #152]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005cc:	4b24      	ldr	r3, [pc, #144]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005d2:	4b23      	ldr	r3, [pc, #140]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d8:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005fa:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <MX_ADC1_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000602:	4817      	ldr	r0, [pc, #92]	@ (8000660 <MX_ADC1_Init+0xe0>)
 8000604:	f001 fe36 	bl	8002274 <HAL_ADC_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800060e:	f000 fb8d 	bl	8000d2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	4619      	mov	r1, r3
 800061c:	4810      	ldr	r0, [pc, #64]	@ (8000660 <MX_ADC1_Init+0xe0>)
 800061e:	f002 fb91 	bl	8002d44 <HAL_ADCEx_MultiModeConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000628:	f000 fb80 	bl	8000d2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_ADC1_Init+0xe8>)
 800062e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000630:	2306      	movs	r3, #6
 8000632:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000638:	237f      	movs	r3, #127	@ 0x7f
 800063a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800063c:	2304      	movs	r3, #4
 800063e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_ADC1_Init+0xe0>)
 800064a:	f001 ff63 	bl	8002514 <HAL_ADC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000654:	f000 fb6a 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	3728      	adds	r7, #40	@ 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000090 	.word	0x20000090
 8000664:	50040000 	.word	0x50040000
 8000668:	04300002 	.word	0x04300002

0800066c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	@ 0x28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a15      	ldr	r2, [pc, #84]	@ (80006e0 <HAL_ADC_MspInit+0x74>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d123      	bne.n	80006d6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800068e:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <HAL_ADC_MspInit+0x78>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a14      	ldr	r2, [pc, #80]	@ (80006e4 <HAL_ADC_MspInit+0x78>)
 8000694:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <HAL_ADC_MspInit+0x78>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <HAL_ADC_MspInit+0x78>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a0e      	ldr	r2, [pc, #56]	@ (80006e4 <HAL_ADC_MspInit+0x78>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <HAL_ADC_MspInit+0x78>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006be:	2301      	movs	r3, #1
 80006c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006c2:	230b      	movs	r3, #11
 80006c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <HAL_ADC_MspInit+0x7c>)
 80006d2:	f003 f8b7 	bl	8003844 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	@ 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	50040000 	.word	0x50040000
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000800 	.word	0x48000800

080006ec <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2224      	movs	r2, #36	@ 0x24
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f00a fa19 	bl	800ab30 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006fe:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <MX_DAC1_Init+0x5c>)
 8000700:	4a12      	ldr	r2, [pc, #72]	@ (800074c <MX_DAC1_Init+0x60>)
 8000702:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000704:	4810      	ldr	r0, [pc, #64]	@ (8000748 <MX_DAC1_Init+0x5c>)
 8000706:	f002 fcde 	bl	80030c6 <HAL_DAC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000710:	f000 fb0c 	bl	8000d2c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	@ (8000748 <MX_DAC1_Init+0x5c>)
 8000730:	f002 fceb 	bl	800310a <HAL_DAC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 faf7 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	@ 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000f4 	.word	0x200000f4
 800074c:	40007400 	.word	0x40007400

08000750 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	@ 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a15      	ldr	r2, [pc, #84]	@ (80007c4 <HAL_DAC_MspInit+0x74>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d124      	bne.n	80007bc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <HAL_DAC_MspInit+0x78>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000776:	4a14      	ldr	r2, [pc, #80]	@ (80007c8 <HAL_DAC_MspInit+0x78>)
 8000778:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800077c:	6593      	str	r3, [r2, #88]	@ 0x58
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <HAL_DAC_MspInit+0x78>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000782:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <HAL_DAC_MspInit+0x78>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	4a0e      	ldr	r2, [pc, #56]	@ (80007c8 <HAL_DAC_MspInit+0x78>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000796:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <HAL_DAC_MspInit+0x78>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007a2:	2310      	movs	r3, #16
 80007a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a6:	2303      	movs	r3, #3
 80007a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b8:	f003 f844 	bl	8003844 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	@ 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40007400 	.word	0x40007400
 80007c8:	40021000 	.word	0x40021000

080007cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_DMA_Init+0x48>)
 80007d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <MX_DMA_Init+0x48>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <MX_DMA_Init+0x48>)
 80007e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2105      	movs	r1, #5
 80007ee:	2010      	movs	r0, #16
 80007f0:	f002 fc33 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007f4:	2010      	movs	r0, #16
 80007f6:	f002 fc4c 	bl	8003092 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2105      	movs	r1, #5
 80007fe:	2011      	movs	r0, #17
 8000800:	f002 fc2b 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000804:	2011      	movs	r0, #17
 8000806:	f002 fc44 	bl	8003092 <HAL_NVIC_EnableIRQ>

}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <drv_uart2_receive>:

#include "usart.h"
#include "gpio.h"

uint8_t drv_uart2_receive(char * pData, uint16_t size)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart2, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 8000824:	887a      	ldrh	r2, [r7, #2]
 8000826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	4803      	ldr	r0, [pc, #12]	@ (800083c <drv_uart2_receive+0x24>)
 800082e:	f007 ff2a 	bl	8008686 <HAL_UART_Receive>

	return 0;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000618 	.word	0x20000618

08000840 <drv_uart2_transmit>:

uint8_t drv_uart2_transmit(const char * pData, uint16_t size)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 800084c:	887a      	ldrh	r2, [r7, #2]
 800084e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	4803      	ldr	r0, [pc, #12]	@ (8000864 <drv_uart2_transmit+0x24>)
 8000856:	f007 fe8d 	bl	8008574 <HAL_UART_Transmit>

	return 0;
 800085a:	2300      	movs	r3, #0
}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000618 	.word	0x20000618

08000868 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	4a07      	ldr	r2, [pc, #28]	@ (8000894 <vApplicationGetIdleTaskMemory+0x2c>)
 8000878:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	4a06      	ldr	r2, [pc, #24]	@ (8000898 <vApplicationGetIdleTaskMemory+0x30>)
 800087e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2280      	movs	r2, #128	@ 0x80
 8000884:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	2000010c 	.word	0x2000010c
 8000898:	20000160 	.word	0x20000160

0800089c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800089c:	b5b0      	push	{r4, r5, r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008a2:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <MX_FREERTOS_Init+0x30>)
 80008a4:	1d3c      	adds	r4, r7, #4
 80008a6:	461d      	mov	r5, r3
 80008a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f008 fc9f 	bl	80091fc <osThreadCreate>
 80008be:	4603      	mov	r3, r0
 80008c0:	4a03      	ldr	r2, [pc, #12]	@ (80008d0 <MX_FREERTOS_Init+0x34>)
 80008c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bdb0      	pop	{r4, r5, r7, pc}
 80008cc:	0800bb88 	.word	0x0800bb88
 80008d0:	20000108 	.word	0x20000108

080008d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008dc:	2001      	movs	r0, #1
 80008de:	f008 fcd9 	bl	8009294 <osDelay>
 80008e2:	e7fb      	b.n	80008dc <StartDefaultTask+0x8>

080008e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b38      	ldr	r3, [pc, #224]	@ (80009dc <MX_GPIO_Init+0xf8>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a37      	ldr	r2, [pc, #220]	@ (80009dc <MX_GPIO_Init+0xf8>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <MX_GPIO_Init+0xf8>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	4b32      	ldr	r3, [pc, #200]	@ (80009dc <MX_GPIO_Init+0xf8>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4a31      	ldr	r2, [pc, #196]	@ (80009dc <MX_GPIO_Init+0xf8>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <MX_GPIO_Init+0xf8>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <MX_GPIO_Init+0xf8>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	4a2b      	ldr	r2, [pc, #172]	@ (80009dc <MX_GPIO_Init+0xf8>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000936:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <MX_GPIO_Init+0xf8>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <MX_GPIO_Init+0xf8>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	4a25      	ldr	r2, [pc, #148]	@ (80009dc <MX_GPIO_Init+0xf8>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094e:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <MX_GPIO_Init+0xf8>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_Vu_GPIO_Port, RESET_Vu_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	2101      	movs	r1, #1
 800095e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000962:	f003 f919 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2120      	movs	r1, #32
 800096a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096e:	f003 f913 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_Vu_GPIO_Port, CS_Vu_Pin, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	2180      	movs	r1, #128	@ 0x80
 8000976:	481a      	ldr	r0, [pc, #104]	@ (80009e0 <MX_GPIO_Init+0xfc>)
 8000978:	f003 f90e 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800097c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000982:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4814      	ldr	r0, [pc, #80]	@ (80009e4 <MX_GPIO_Init+0x100>)
 8000994:	f002 ff56 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RESET_Vu_Pin|LD2_Pin;
 8000998:	2321      	movs	r3, #33	@ 0x21
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b2:	f002 ff47 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Vu_Pin;
 80009b6:	2380      	movs	r3, #128	@ 0x80
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_Vu_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_GPIO_Init+0xfc>)
 80009ce:	f002 ff39 	bl	8003844 <HAL_GPIO_Init>

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	@ 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000
 80009e0:	48000400 	.word	0x48000400
 80009e4:	48000800 	.word	0x48000800

080009e8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <MX_I2C2_Init+0x74>)
 80009ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000a60 <MX_I2C2_Init+0x78>)
 80009f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <MX_I2C2_Init+0x74>)
 80009f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a64 <MX_I2C2_Init+0x7c>)
 80009f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009f8:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <MX_I2C2_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fe:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <MX_I2C2_Init+0x74>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <MX_I2C2_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <MX_I2C2_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <MX_I2C2_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <MX_I2C2_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <MX_I2C2_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a22:	480e      	ldr	r0, [pc, #56]	@ (8000a5c <MX_I2C2_Init+0x74>)
 8000a24:	f003 f8ea 	bl	8003bfc <HAL_I2C_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a2e:	f000 f97d 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4809      	ldr	r0, [pc, #36]	@ (8000a5c <MX_I2C2_Init+0x74>)
 8000a36:	f004 f907 	bl	8004c48 <HAL_I2CEx_ConfigAnalogFilter>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a40:	f000 f974 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_I2C2_Init+0x74>)
 8000a48:	f004 f949 	bl	8004cde <HAL_I2CEx_ConfigDigitalFilter>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a52:	f000 f96b 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000360 	.word	0x20000360
 8000a60:	40005800 	.word	0x40005800
 8000a64:	10d19ce4 	.word	0x10d19ce4

08000a68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2288      	movs	r2, #136	@ 0x88
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f00a f851 	bl	800ab30 <memset>
  if(i2cHandle->Instance==I2C2)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a21      	ldr	r2, [pc, #132]	@ (8000b18 <HAL_I2C_MspInit+0xb0>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d13b      	bne.n	8000b10 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a98:	2380      	movs	r3, #128	@ 0x80
 8000a9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f004 ffcb 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ab0:	f000 f93c 	bl	8000d2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <HAL_I2C_MspInit+0xb4>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab8:	4a18      	ldr	r2, [pc, #96]	@ (8000b1c <HAL_I2C_MspInit+0xb4>)
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac0:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <HAL_I2C_MspInit+0xb4>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000acc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ad0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad4:	2312      	movs	r3, #18
 8000ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000af0:	4619      	mov	r1, r3
 8000af2:	480b      	ldr	r0, [pc, #44]	@ (8000b20 <HAL_I2C_MspInit+0xb8>)
 8000af4:	f002 fea6 	bl	8003844 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <HAL_I2C_MspInit+0xb4>)
 8000afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afc:	4a07      	ldr	r2, [pc, #28]	@ (8000b1c <HAL_I2C_MspInit+0xb4>)
 8000afe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b02:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <HAL_I2C_MspInit+0xb4>)
 8000b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b10:	bf00      	nop
 8000b12:	37b0      	adds	r7, #176	@ 0xb0
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40005800 	.word	0x40005800
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000400 	.word	0x48000400

08000b24 <getCHIP_ID>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint16_t getCHIP_ID(uint8_t reg, uint8_t I2C_addr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af04      	add	r7, sp, #16
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	460a      	mov	r2, r1
 8000b2e:	71fb      	strb	r3, [r7, #7]
 8000b30:	4613      	mov	r3, r2
 8000b32:	71bb      	strb	r3, [r7, #6]
	uint16_t data = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(&hi2c2, I2C_addr, reg, I2C_MEMADD_SIZE_8BIT, &data, 2, HAL_MAX_DELAY);
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	b299      	uxth	r1, r3
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b44:	9302      	str	r3, [sp, #8]
 8000b46:	2302      	movs	r3, #2
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2301      	movs	r3, #1
 8000b52:	4808      	ldr	r0, [pc, #32]	@ (8000b74 <getCHIP_ID+0x50>)
 8000b54:	f003 fc10 	bl	8004378 <HAL_I2C_Mem_Read>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK){
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d002      	beq.n	8000b68 <getCHIP_ID+0x44>
		return -1;
 8000b62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b66:	e000      	b.n	8000b6a <getCHIP_ID+0x46>
	}
	return data;
 8000b68:	89bb      	ldrh	r3, [r7, #12]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000360 	.word	0x20000360

08000b78 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b7e:	f001 f94d 	bl	8001e1c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b82:	f000 f853 	bl	8000c2c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000b86:	f000 f8a3 	bl	8000cd0 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b8a:	f7ff feab 	bl	80008e4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000b8e:	f7ff fe1d 	bl	80007cc <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000b92:	f000 fe59 	bl	8001848 <MX_USART2_UART_Init>
	MX_SPI3_Init();
 8000b96:	f000 fc5b 	bl	8001450 <MX_SPI3_Init>
	MX_I2C2_Init();
 8000b9a:	f7ff ff25 	bl	80009e8 <MX_I2C2_Init>
	MX_SAI2_Init();
 8000b9e:	f000 f8cb 	bl	8000d38 <MX_SAI2_Init>
	MX_DAC1_Init();
 8000ba2:	f7ff fda3 	bl	80006ec <MX_DAC1_Init>
	MX_ADC1_Init();
 8000ba6:	f7ff fceb 	bl	8000580 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8000baa:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <main+0x9c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <main+0x9c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000bb8:	601a      	str	r2, [r3, #0]

	h_shell.drv.receive = drv_uart2_receive;
 8000bba:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <main+0xa0>)
 8000bbc:	4a17      	ldr	r2, [pc, #92]	@ (8000c1c <main+0xa4>)
 8000bbe:	65da      	str	r2, [r3, #92]	@ 0x5c
	h_shell.drv.transmit = drv_uart2_transmit;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <main+0xa0>)
 8000bc2:	4a17      	ldr	r2, [pc, #92]	@ (8000c20 <main+0xa8>)
 8000bc4:	659a      	str	r2, [r3, #88]	@ 0x58

	// Init du GPIO Extender
	MCP23S17_Init();
 8000bc6:	f000 fefd 	bl	80019c4 <MCP23S17_Init>

	// Génération du signal triangle
	sgtl5000_init(&h_sgtl5000);
 8000bca:	4816      	ldr	r0, [pc, #88]	@ (8000c24 <main+0xac>)
 8000bcc:	f000 ff68 	bl	8001aa0 <sgtl5000_init>
	Triangle_Wave_Start();
 8000bd0:	f001 f882 	bl	8001cd8 <Triangle_Wave_Start>


	uint16_t chip_ID = getCHIP_ID(CODEC_ID_REG, CODEC_ADDR);
 8000bd4:	2114      	movs	r1, #20
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff ffa4 	bl	8000b24 <getCHIP_ID>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	80fb      	strh	r3, [r7, #6]





	shell_init(&h_shell);
 8000be0:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <main+0xa0>)
 8000be2:	f000 fb33 	bl	800124c <shell_init>
	shell_run(&h_shell);
 8000be6:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <main+0xa0>)
 8000be8:	f000 fbd4 	bl	8001394 <shell_run>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000bec:	f7ff fe56 	bl	800089c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000bf0:	f008 fafd 	bl	80091ee <osKernelStart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		MCP23S17_Chenillard();
 8000bf4:	f000 fef8 	bl	80019e8 <MCP23S17_Chenillard>
		printf("Toggle Led... \r\n");
 8000bf8:	480b      	ldr	r0, [pc, #44]	@ (8000c28 <main+0xb0>)
 8000bfa:	f009 fe85 	bl	800a908 <puts>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000bfe:	2120      	movs	r1, #32
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c04:	f002 ffe0 	bl	8003bc8 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000c08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c0c:	f001 f982 	bl	8001f14 <HAL_Delay>
		MCP23S17_Chenillard();
 8000c10:	bf00      	nop
 8000c12:	e7ef      	b.n	8000bf4 <main+0x7c>
 8000c14:	20000414 	.word	0x20000414
 8000c18:	200003b4 	.word	0x200003b4
 8000c1c:	08000819 	.word	0x08000819
 8000c20:	08000841 	.word	0x08000841
 8000c24:	20000000 	.word	0x20000000
 8000c28:	0800bba4 	.word	0x0800bba4

08000c2c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b096      	sub	sp, #88	@ 0x58
 8000c30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	2244      	movs	r2, #68	@ 0x44
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f009 ff78 	bl	800ab30 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	463b      	mov	r3, r7
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c52:	f004 f89f 	bl	8004d94 <HAL_PWREx_ControlVoltageScaling>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000c5c:	f000 f866 	bl	8000d2c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c60:	2302      	movs	r3, #2
 8000c62:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c68:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c72:	2302      	movs	r3, #2
 8000c74:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000c7a:	230a      	movs	r3, #10
 8000c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c82:	2302      	movs	r3, #2
 8000c84:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 f8d6 	bl	8004e40 <HAL_RCC_OscConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000c9a:	f000 f847 	bl	8000d2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9e:	230f      	movs	r3, #15
 8000ca0:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 fc9e 	bl	80055f8 <HAL_RCC_ClockConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000cc2:	f000 f833 	bl	8000d2c <Error_Handler>
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	3758      	adds	r7, #88	@ 0x58
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b0a2      	sub	sp, #136	@ 0x88
 8000cd4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2288      	movs	r2, #136	@ 0x88
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f009 ff27 	bl	800ab30 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_ADC;
 8000ce2:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000ce6:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cf0:	67bb      	str	r3, [r7, #120]	@ 0x78
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d02:	2302      	movs	r3, #2
 8000d04:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <PeriphCommonClock_Config+0x58>)
 8000d0c:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 fe95 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 8000d1c:	f000 f806 	bl	8000d2c <Error_Handler>
	}
}
 8000d20:	bf00      	nop
 8000d22:	3788      	adds	r7, #136	@ 0x88
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	01010000 	.word	0x01010000

08000d2c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <Error_Handler+0x8>

08000d38 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000de8 <MX_SAI2_Init+0xb0>)
 8000d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8000dec <MX_SAI2_Init+0xb4>)
 8000d40:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d42:	4b29      	ldr	r3, [pc, #164]	@ (8000de8 <MX_SAI2_Init+0xb0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d48:	4b27      	ldr	r3, [pc, #156]	@ (8000de8 <MX_SAI2_Init+0xb0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d4e:	4b26      	ldr	r3, [pc, #152]	@ (8000de8 <MX_SAI2_Init+0xb0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d54:	4b24      	ldr	r3, [pc, #144]	@ (8000de8 <MX_SAI2_Init+0xb0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d5a:	4b23      	ldr	r3, [pc, #140]	@ (8000de8 <MX_SAI2_Init+0xb0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000d60:	4b21      	ldr	r3, [pc, #132]	@ (8000de8 <MX_SAI2_Init+0xb0>)
 8000d62:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000d66:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	@ (8000de8 <MX_SAI2_Init+0xb0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <MX_SAI2_Init+0xb0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	@ (8000de8 <MX_SAI2_Init+0xb0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <MX_SAI2_Init+0xb0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000d80:	2302      	movs	r3, #2
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	4818      	ldr	r0, [pc, #96]	@ (8000de8 <MX_SAI2_Init+0xb0>)
 8000d88:	f006 f974 	bl	8007074 <HAL_SAI_InitProtocol>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000d92:	f7ff ffcb 	bl	8000d2c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d96:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <MX_SAI2_Init+0xb8>)
 8000d98:	4a16      	ldr	r2, [pc, #88]	@ (8000df4 <MX_SAI2_Init+0xbc>)
 8000d9a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <MX_SAI2_Init+0xb8>)
 8000d9e:	2203      	movs	r2, #3
 8000da0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000da2:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <MX_SAI2_Init+0xb8>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <MX_SAI2_Init+0xb8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <MX_SAI2_Init+0xb8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000db4:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <MX_SAI2_Init+0xb8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dba:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <MX_SAI2_Init+0xb8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <MX_SAI2_Init+0xb8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <MX_SAI2_Init+0xb8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000dcc:	2302      	movs	r3, #2
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <MX_SAI2_Init+0xb8>)
 8000dd4:	f006 f94e 	bl	8007074 <HAL_SAI_InitProtocol>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000dde:	f7ff ffa5 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000414 	.word	0x20000414
 8000dec:	40015804 	.word	0x40015804
 8000df0:	20000498 	.word	0x20000498
 8000df4:	40015824 	.word	0x40015824

08000df8 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a64      	ldr	r2, [pc, #400]	@ (8000f98 <HAL_SAI_MspInit+0x1a0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d15e      	bne.n	8000ec8 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000e0a:	4b64      	ldr	r3, [pc, #400]	@ (8000f9c <HAL_SAI_MspInit+0x1a4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d113      	bne.n	8000e3a <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000e12:	4b63      	ldr	r3, [pc, #396]	@ (8000fa0 <HAL_SAI_MspInit+0x1a8>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e16:	4a62      	ldr	r2, [pc, #392]	@ (8000fa0 <HAL_SAI_MspInit+0x1a8>)
 8000e18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e1e:	4b60      	ldr	r3, [pc, #384]	@ (8000fa0 <HAL_SAI_MspInit+0x1a8>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2105      	movs	r1, #5
 8000e2e:	204b      	movs	r0, #75	@ 0x4b
 8000e30:	f002 f913 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000e34:	204b      	movs	r0, #75	@ 0x4b
 8000e36:	f002 f92c 	bl	8003092 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000e3a:	4b58      	ldr	r3, [pc, #352]	@ (8000f9c <HAL_SAI_MspInit+0x1a4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	4a56      	ldr	r2, [pc, #344]	@ (8000f9c <HAL_SAI_MspInit+0x1a4>)
 8000e42:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e44:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e56:	230d      	movs	r3, #13
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4850      	ldr	r0, [pc, #320]	@ (8000fa4 <HAL_SAI_MspInit+0x1ac>)
 8000e62:	f002 fcef 	bl	8003844 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000e66:	4b50      	ldr	r3, [pc, #320]	@ (8000fa8 <HAL_SAI_MspInit+0x1b0>)
 8000e68:	4a50      	ldr	r2, [pc, #320]	@ (8000fac <HAL_SAI_MspInit+0x1b4>)
 8000e6a:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000e6c:	4b4e      	ldr	r3, [pc, #312]	@ (8000fa8 <HAL_SAI_MspInit+0x1b0>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e72:	4b4d      	ldr	r3, [pc, #308]	@ (8000fa8 <HAL_SAI_MspInit+0x1b0>)
 8000e74:	2210      	movs	r2, #16
 8000e76:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e78:	4b4b      	ldr	r3, [pc, #300]	@ (8000fa8 <HAL_SAI_MspInit+0x1b0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa8 <HAL_SAI_MspInit+0x1b0>)
 8000e80:	2280      	movs	r2, #128	@ 0x80
 8000e82:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e84:	4b48      	ldr	r3, [pc, #288]	@ (8000fa8 <HAL_SAI_MspInit+0x1b0>)
 8000e86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e8a:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e8c:	4b46      	ldr	r3, [pc, #280]	@ (8000fa8 <HAL_SAI_MspInit+0x1b0>)
 8000e8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e92:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000e94:	4b44      	ldr	r3, [pc, #272]	@ (8000fa8 <HAL_SAI_MspInit+0x1b0>)
 8000e96:	2220      	movs	r2, #32
 8000e98:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000e9a:	4b43      	ldr	r3, [pc, #268]	@ (8000fa8 <HAL_SAI_MspInit+0x1b0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000ea0:	4841      	ldr	r0, [pc, #260]	@ (8000fa8 <HAL_SAI_MspInit+0x1b0>)
 8000ea2:	f002 fa59 	bl	8003358 <HAL_DMA_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000eac:	f7ff ff3e 	bl	8000d2c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a3d      	ldr	r2, [pc, #244]	@ (8000fa8 <HAL_SAI_MspInit+0x1b0>)
 8000eb4:	671a      	str	r2, [r3, #112]	@ 0x70
 8000eb6:	4a3c      	ldr	r2, [pc, #240]	@ (8000fa8 <HAL_SAI_MspInit+0x1b0>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a3a      	ldr	r2, [pc, #232]	@ (8000fa8 <HAL_SAI_MspInit+0x1b0>)
 8000ec0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000ec2:	4a39      	ldr	r2, [pc, #228]	@ (8000fa8 <HAL_SAI_MspInit+0x1b0>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a38      	ldr	r2, [pc, #224]	@ (8000fb0 <HAL_SAI_MspInit+0x1b8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d15e      	bne.n	8000f90 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000ed2:	4b32      	ldr	r3, [pc, #200]	@ (8000f9c <HAL_SAI_MspInit+0x1a4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d113      	bne.n	8000f02 <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000eda:	4b31      	ldr	r3, [pc, #196]	@ (8000fa0 <HAL_SAI_MspInit+0x1a8>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ede:	4a30      	ldr	r2, [pc, #192]	@ (8000fa0 <HAL_SAI_MspInit+0x1a8>)
 8000ee0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ee4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa0 <HAL_SAI_MspInit+0x1a8>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	204b      	movs	r0, #75	@ 0x4b
 8000ef8:	f002 f8af 	bl	800305a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000efc:	204b      	movs	r0, #75	@ 0x4b
 8000efe:	f002 f8c8 	bl	8003092 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000f02:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <HAL_SAI_MspInit+0x1a4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	4a24      	ldr	r2, [pc, #144]	@ (8000f9c <HAL_SAI_MspInit+0x1a4>)
 8000f0a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000f1e:	230d      	movs	r3, #13
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4822      	ldr	r0, [pc, #136]	@ (8000fb4 <HAL_SAI_MspInit+0x1bc>)
 8000f2a:	f002 fc8b 	bl	8003844 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000f2e:	4b22      	ldr	r3, [pc, #136]	@ (8000fb8 <HAL_SAI_MspInit+0x1c0>)
 8000f30:	4a22      	ldr	r2, [pc, #136]	@ (8000fbc <HAL_SAI_MspInit+0x1c4>)
 8000f32:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000f34:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <HAL_SAI_MspInit+0x1c0>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <HAL_SAI_MspInit+0x1c0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <HAL_SAI_MspInit+0x1c0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <HAL_SAI_MspInit+0x1c0>)
 8000f48:	2280      	movs	r2, #128	@ 0x80
 8000f4a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <HAL_SAI_MspInit+0x1c0>)
 8000f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f52:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f54:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <HAL_SAI_MspInit+0x1c0>)
 8000f56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f5a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <HAL_SAI_MspInit+0x1c0>)
 8000f5e:	2220      	movs	r2, #32
 8000f60:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <HAL_SAI_MspInit+0x1c0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000f68:	4813      	ldr	r0, [pc, #76]	@ (8000fb8 <HAL_SAI_MspInit+0x1c0>)
 8000f6a:	f002 f9f5 	bl	8003358 <HAL_DMA_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000f74:	f7ff feda 	bl	8000d2c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb8 <HAL_SAI_MspInit+0x1c0>)
 8000f7c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb8 <HAL_SAI_MspInit+0x1c0>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb8 <HAL_SAI_MspInit+0x1c0>)
 8000f88:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb8 <HAL_SAI_MspInit+0x1c0>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	@ 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40015804 	.word	0x40015804
 8000f9c:	200005ac 	.word	0x200005ac
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	2000051c 	.word	0x2000051c
 8000fac:	4002006c 	.word	0x4002006c
 8000fb0:	40015824 	.word	0x40015824
 8000fb4:	48000800 	.word	0x48000800
 8000fb8:	20000564 	.word	0x20000564
 8000fbc:	40020080 	.word	0x40020080

08000fc0 <sh_pins>:
#include "components/MCP23S17.h"




static int sh_pins(h_shell_t * h_shell, int argc, char ** argv) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]


	MCP23S17_Init();
 8000fcc:	f000 fcfa 	bl	80019c4 <MCP23S17_Init>
	MCP23S17_WriteRegister(MCP23S17_GPIOA, 0x00);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2012      	movs	r0, #18
 8000fd4:	f000 fcc4 	bl	8001960 <MCP23S17_WriteRegister>
	return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <sh_status>:
static int sh_status(h_shell_t * h_shell, int argc, char ** argv) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	int size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3308      	adds	r3, #8
 8000ff4:	4a09      	ldr	r2, [pc, #36]	@ (800101c <sh_status+0x38>)
 8000ff6:	2128      	movs	r1, #40	@ 0x28
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f009 fc8d 	bl	800a918 <sniprintf>
 8000ffe:	6178      	str	r0, [r7, #20]
			"System status: OK\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	3208      	adds	r2, #8
 8001008:	6979      	ldr	r1, [r7, #20]
 800100a:	b289      	uxth	r1, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4798      	blx	r3
	return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	0800bbb4 	.word	0x0800bbb4

08001020 <sh_led>:

static int sh_led(h_shell_t * h_shell, int argc, char ** argv) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	int size;

	if (argc != 2) {
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d012      	beq.n	8001058 <sh_led+0x38>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3308      	adds	r3, #8
 8001036:	4a31      	ldr	r2, [pc, #196]	@ (80010fc <sh_led+0xdc>)
 8001038:	2128      	movs	r1, #40	@ 0x28
 800103a:	4618      	mov	r0, r3
 800103c:	f009 fc6c 	bl	800a918 <sniprintf>
 8001040:	6178      	str	r0, [r7, #20]
				"Usage: led <0|1>\r\n");
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	3208      	adds	r2, #8
 800104a:	6979      	ldr	r1, [r7, #20]
 800104c:	b289      	uxth	r1, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4798      	blx	r3
		return -1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001056:	e04d      	b.n	80010f4 <sh_led+0xd4>
	}

	if (strcmp(argv[1], "0") == 0) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3304      	adds	r3, #4
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4928      	ldr	r1, [pc, #160]	@ (8001100 <sh_led+0xe0>)
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f8b5 	bl	80001d0 <strcmp>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10e      	bne.n	800108a <sh_led+0x6a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2120      	movs	r1, #32
 8001070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001074:	f002 fd90 	bl	8003b98 <HAL_GPIO_WritePin>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "LED turned OFF\r\n");
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3308      	adds	r3, #8
 800107c:	4a21      	ldr	r2, [pc, #132]	@ (8001104 <sh_led+0xe4>)
 800107e:	2128      	movs	r1, #40	@ 0x28
 8001080:	4618      	mov	r0, r3
 8001082:	f009 fc49 	bl	800a918 <sniprintf>
 8001086:	6178      	str	r0, [r7, #20]
 8001088:	e02b      	b.n	80010e2 <sh_led+0xc2>
	}
	else if (strcmp(argv[1], "1") == 0) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3304      	adds	r3, #4
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	491d      	ldr	r1, [pc, #116]	@ (8001108 <sh_led+0xe8>)
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f89c 	bl	80001d0 <strcmp>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10e      	bne.n	80010bc <sh_led+0x9c>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	2120      	movs	r1, #32
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a6:	f002 fd77 	bl	8003b98 <HAL_GPIO_WritePin>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "LED turned ON\r\n");
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3308      	adds	r3, #8
 80010ae:	4a17      	ldr	r2, [pc, #92]	@ (800110c <sh_led+0xec>)
 80010b0:	2128      	movs	r1, #40	@ 0x28
 80010b2:	4618      	mov	r0, r3
 80010b4:	f009 fc30 	bl	800a918 <sniprintf>
 80010b8:	6178      	str	r0, [r7, #20]
 80010ba:	e012      	b.n	80010e2 <sh_led+0xc2>
	}
	else {
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3308      	adds	r3, #8
 80010c0:	4a13      	ldr	r2, [pc, #76]	@ (8001110 <sh_led+0xf0>)
 80010c2:	2128      	movs	r1, #40	@ 0x28
 80010c4:	4618      	mov	r0, r3
 80010c6:	f009 fc27 	bl	800a918 <sniprintf>
 80010ca:	6178      	str	r0, [r7, #20]
				"Invalid argument. Use 0 or 1\r\n");
		h_shell->drv.transmit(h_shell->print_buffer, size);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	3208      	adds	r2, #8
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	b289      	uxth	r1, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4798      	blx	r3
		return -1;
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010e0:	e008      	b.n	80010f4 <sh_led+0xd4>
	}

	h_shell->drv.transmit(h_shell->print_buffer, size);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	3208      	adds	r2, #8
 80010ea:	6979      	ldr	r1, [r7, #20]
 80010ec:	b289      	uxth	r1, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4798      	blx	r3
	return 0;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	0800bbc8 	.word	0x0800bbc8
 8001100:	0800bbdc 	.word	0x0800bbdc
 8001104:	0800bbe0 	.word	0x0800bbe0
 8001108:	0800bbf4 	.word	0x0800bbf4
 800110c:	0800bbf8 	.word	0x0800bbf8
 8001110:	0800bc08 	.word	0x0800bc08

08001114 <sh_help>:

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b089      	sub	sp, #36	@ 0x24
 8001118:	af02      	add	r7, sp, #8
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
	int i;
	int size;

	if (argc > 1) {
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b01      	cmp	r3, #1
 8001124:	dd59      	ble.n	80011da <sh_help+0xc6>
		for (i = 0; i < h_shell->func_list_size; i++) {
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e03b      	b.n	80011a4 <sh_help+0x90>
			if (strcmp(h_shell->func_list[i].cmd_name, argv[1]) == 0) {
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6819      	ldr	r1, [r3, #0]
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3304      	adds	r3, #4
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	4610      	mov	r0, r2
 8001148:	f7ff f842 	bl	80001d0 <strcmp>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d125      	bne.n	800119e <sh_help+0x8a>
				size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f103 0008 	add.w	r0, r3, #8
						"%s: %s\r\n", h_shell->func_list[i].cmd_name,
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6819      	ldr	r1, [r3, #0]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	440b      	add	r3, r1
 8001168:	681c      	ldr	r4, [r3, #0]
						h_shell->func_list[i].description);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6819      	ldr	r1, [r3, #0]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	689b      	ldr	r3, [r3, #8]
				size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	4623      	mov	r3, r4
 8001180:	4a30      	ldr	r2, [pc, #192]	@ (8001244 <sh_help+0x130>)
 8001182:	2128      	movs	r1, #40	@ 0x28
 8001184:	f009 fbc8 	bl	800a918 <sniprintf>
 8001188:	6138      	str	r0, [r7, #16]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	3208      	adds	r2, #8
 8001192:	6939      	ldr	r1, [r7, #16]
 8001194:	b289      	uxth	r1, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4798      	blx	r3
				return 0;
 800119a:	2300      	movs	r3, #0
 800119c:	e04d      	b.n	800123a <sh_help+0x126>
		for (i = 0; i < h_shell->func_list_size; i++) {
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dbbe      	blt.n	800112c <sh_help+0x18>
			}
		}
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f103 0008 	add.w	r0, r3, #8
				"Unknown command: %s\r\n", argv[1]);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3304      	adds	r3, #4
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a23      	ldr	r2, [pc, #140]	@ (8001248 <sh_help+0x134>)
 80011bc:	2128      	movs	r1, #40	@ 0x28
 80011be:	f009 fbab 	bl	800a918 <sniprintf>
 80011c2:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	3208      	adds	r2, #8
 80011cc:	6939      	ldr	r1, [r7, #16]
 80011ce:	b289      	uxth	r1, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4798      	blx	r3
		return -1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011d8:	e02f      	b.n	800123a <sh_help+0x126>
	}

	for(i = 0; i < h_shell->func_list_size; i++) {
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e026      	b.n	800122e <sh_help+0x11a>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f103 0008 	add.w	r0, r3, #8
				"%s: %s\r\n", h_shell->func_list[i].cmd_name,
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6819      	ldr	r1, [r3, #0]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	681c      	ldr	r4, [r3, #0]
				h_shell->func_list[i].description);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6819      	ldr	r1, [r3, #0]
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	689b      	ldr	r3, [r3, #8]
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	4623      	mov	r3, r4
 800120e:	4a0d      	ldr	r2, [pc, #52]	@ (8001244 <sh_help+0x130>)
 8001210:	2128      	movs	r1, #40	@ 0x28
 8001212:	f009 fb81 	bl	800a918 <sniprintf>
 8001216:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	3208      	adds	r2, #8
 8001220:	6939      	ldr	r1, [r7, #16]
 8001222:	b289      	uxth	r1, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4798      	blx	r3
	for(i = 0; i < h_shell->func_list_size; i++) {
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbd3      	blt.n	80011e0 <sh_help+0xcc>
	}

	return 0;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd90      	pop	{r4, r7, pc}
 8001242:	bf00      	nop
 8001244:	0800bc28 	.word	0x0800bc28
 8001248:	0800bc34 	.word	0x0800bc34

0800124c <shell_init>:



};

void shell_init(h_shell_t * h_shell) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	int size = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]

	h_shell->func_list = shell_functions;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a14      	ldr	r2, [pc, #80]	@ (80012ac <shell_init+0x60>)
 800125c:	601a      	str	r2, [r3, #0]
	h_shell->func_list_size = sizeof(shell_functions) / sizeof(shell_functions[0]);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2204      	movs	r2, #4
 8001262:	605a      	str	r2, [r3, #4]

	size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3308      	adds	r3, #8
 8001268:	4a11      	ldr	r2, [pc, #68]	@ (80012b0 <shell_init+0x64>)
 800126a:	2128      	movs	r1, #40	@ 0x28
 800126c:	4618      	mov	r0, r3
 800126e:	f009 fb53 	bl	800a918 <sniprintf>
 8001272:	60f8      	str	r0, [r7, #12]
			"\r\n\r\n===== Super auto radio v1.0 =====\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	68f9      	ldr	r1, [r7, #12]
 800127e:	b289      	uxth	r1, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4798      	blx	r3

	size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3308      	adds	r3, #8
 8001288:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <shell_init+0x68>)
 800128a:	2128      	movs	r1, #40	@ 0x28
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fb43 	bl	800a918 <sniprintf>
 8001292:	60f8      	str	r0, [r7, #12]
			"Type 'help' for available commands\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	68f9      	ldr	r1, [r7, #12]
 800129e:	b289      	uxth	r1, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4798      	blx	r3
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	0800bd2c 	.word	0x0800bd2c
 80012b0:	0800bcb8 	.word	0x0800bcb8
 80012b4:	0800bce0 	.word	0x0800bce0

080012b8 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08e      	sub	sp, #56	@ 0x38
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	int i;
	int argc = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	633b      	str	r3, [r7, #48]	@ 0x30
	char *argv[ARGC_MAX];
	char *token;

	token = strtok(buf, " ");
 80012c6:	4931      	ldr	r1, [pc, #196]	@ (800138c <shell_exec+0xd4>)
 80012c8:	6838      	ldr	r0, [r7, #0]
 80012ca:	f009 fc39 	bl	800ab40 <strtok>
 80012ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
	while (token != NULL && argc < ARGC_MAX) {
 80012d0:	e00d      	b.n	80012ee <shell_exec+0x36>
		argv[argc++] = token;
 80012d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	3338      	adds	r3, #56	@ 0x38
 80012dc:	443b      	add	r3, r7
 80012de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012e0:	f843 2c30 	str.w	r2, [r3, #-48]
		token = strtok(NULL, " ");
 80012e4:	4929      	ldr	r1, [pc, #164]	@ (800138c <shell_exec+0xd4>)
 80012e6:	2000      	movs	r0, #0
 80012e8:	f009 fc2a 	bl	800ab40 <strtok>
 80012ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
	while (token != NULL && argc < ARGC_MAX) {
 80012ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <shell_exec+0x42>
 80012f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012f6:	2b07      	cmp	r3, #7
 80012f8:	ddeb      	ble.n	80012d2 <shell_exec+0x1a>
	}

	if (argc == 0) return 0;
 80012fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <shell_exec+0x4c>
 8001300:	2300      	movs	r3, #0
 8001302:	e03e      	b.n	8001382 <shell_exec+0xca>

	for (i = 0; i < h_shell->func_list_size; i++) {
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	@ 0x34
 8001308:	e023      	b.n	8001352 <shell_exec+0x9a>
		if (strcmp(h_shell->func_list[i].cmd_name, argv[0]) == 0) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7fe ff55 	bl	80001d0 <strcmp>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10f      	bne.n	800134c <shell_exec+0x94>
			return h_shell->func_list[i].func(h_shell, argc, argv);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6819      	ldr	r1, [r3, #0]
 8001330:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f107 0208 	add.w	r2, r7, #8
 8001342:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	4798      	blx	r3
 8001348:	4603      	mov	r3, r0
 800134a:	e01a      	b.n	8001382 <shell_exec+0xca>
	for (i = 0; i < h_shell->func_list_size; i++) {
 800134c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800134e:	3301      	adds	r3, #1
 8001350:	637b      	str	r3, [r7, #52]	@ 0x34
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001358:	429a      	cmp	r2, r3
 800135a:	dbd6      	blt.n	800130a <shell_exec+0x52>
		}
	}


	int size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f103 0008 	add.w	r0, r3, #8
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <shell_exec+0xd8>)
 8001366:	2128      	movs	r1, #40	@ 0x28
 8001368:	f009 fad6 	bl	800a918 <sniprintf>
 800136c:	62b8      	str	r0, [r7, #40]	@ 0x28
			"Unknown command: %s\r\n", argv[0]);
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001378:	b289      	uxth	r1, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4798      	blx	r3
	return -1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001382:	4618      	mov	r0, r3
 8001384:	3738      	adds	r7, #56	@ 0x38
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	0800bd08 	.word	0x0800bd08
 8001390:	0800bc34 	.word	0x0800bc34

08001394 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "shell@radio>> ";

int shell_run(h_shell_t * h_shell) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	int reading = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
	int pos = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, strlen(prompt));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a8:	210e      	movs	r1, #14
 80013aa:	4826      	ldr	r0, [pc, #152]	@ (8001444 <shell_run+0xb0>)
 80013ac:	4798      	blx	r3
		reading = 1;
 80013ae:	2301      	movs	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]

		while(reading) {
 80013b2:	e03a      	b.n	800142a <shell_run+0x96>
			char c;
			h_shell->drv.receive(&c, 1);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b8:	f107 020f 	add.w	r2, r7, #15
 80013bc:	2101      	movs	r1, #1
 80013be:	4610      	mov	r0, r2
 80013c0:	4798      	blx	r3

			switch (c) {
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d00f      	beq.n	80013e8 <shell_run+0x54>
 80013c8:	2b0d      	cmp	r3, #13
 80013ca:	d119      	bne.n	8001400 <shell_run+0x6c>
			case '\r':
				h_shell->drv.transmit("\r\n", 2);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d0:	2102      	movs	r1, #2
 80013d2:	481d      	ldr	r0, [pc, #116]	@ (8001448 <shell_run+0xb4>)
 80013d4:	4798      	blx	r3
				h_shell->cmd_buffer[pos] = 0;
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4413      	add	r3, r2
 80013dc:	3330      	adds	r3, #48	@ 0x30
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
				reading = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
				break;
 80013e6:	e020      	b.n	800142a <shell_run+0x96>

			case '\b':
				if (pos > 0) {
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dd1c      	ble.n	8001428 <shell_run+0x94>
					pos--;
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	613b      	str	r3, [r7, #16]
					h_shell->drv.transmit(backspace, 3);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f8:	2103      	movs	r1, #3
 80013fa:	4814      	ldr	r0, [pc, #80]	@ (800144c <shell_run+0xb8>)
 80013fc:	4798      	blx	r3
				}
				break;
 80013fe:	e013      	b.n	8001428 <shell_run+0x94>

			default:
				if (pos < BUFFER_SIZE - 1) {
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	2b26      	cmp	r3, #38	@ 0x26
 8001404:	dc11      	bgt.n	800142a <shell_run+0x96>
					h_shell->drv.transmit(&c, 1);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140a:	f107 020f 	add.w	r2, r7, #15
 800140e:	2101      	movs	r1, #1
 8001410:	4610      	mov	r0, r2
 8001412:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c;
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	613a      	str	r2, [r7, #16]
 800141a:	7bf9      	ldrb	r1, [r7, #15]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	460a      	mov	r2, r1
 8001422:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8001426:	e000      	b.n	800142a <shell_run+0x96>
				break;
 8001428:	bf00      	nop
		while(reading) {
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1c1      	bne.n	80013b4 <shell_run+0x20>
				}
			}
		}

		shell_exec(h_shell, h_shell->cmd_buffer);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3330      	adds	r3, #48	@ 0x30
 8001434:	4619      	mov	r1, r3
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff3e 	bl	80012b8 <shell_exec>
		pos = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
		h_shell->drv.transmit(prompt, strlen(prompt));
 8001440:	e7b0      	b.n	80013a4 <shell_run+0x10>
 8001442:	bf00      	nop
 8001444:	0800bd60 	.word	0x0800bd60
 8001448:	0800bd0c 	.word	0x0800bd0c
 800144c:	0800bd5c 	.word	0x0800bd5c

08001450 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <MX_SPI3_Init+0x74>)
 8001456:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <MX_SPI3_Init+0x78>)
 8001458:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <MX_SPI3_Init+0x74>)
 800145c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001460:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001462:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <MX_SPI3_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001468:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <MX_SPI3_Init+0x74>)
 800146a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800146e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001470:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <MX_SPI3_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <MX_SPI3_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_SPI3_Init+0x74>)
 800147e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001482:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_SPI3_Init+0x74>)
 8001486:	2220      	movs	r2, #32
 8001488:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_SPI3_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_SPI3_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <MX_SPI3_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_SPI3_Init+0x74>)
 800149e:	2207      	movs	r2, #7
 80014a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <MX_SPI3_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_SPI3_Init+0x74>)
 80014aa:	2208      	movs	r2, #8
 80014ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_SPI3_Init+0x74>)
 80014b0:	f006 fc95 	bl	8007dde <HAL_SPI_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80014ba:	f7ff fc37 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200005b0 	.word	0x200005b0
 80014c8:	40003c00 	.word	0x40003c00

080014cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	@ 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a25      	ldr	r2, [pc, #148]	@ (8001580 <HAL_SPI_MspInit+0xb4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d144      	bne.n	8001578 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014ee:	4b25      	ldr	r3, [pc, #148]	@ (8001584 <HAL_SPI_MspInit+0xb8>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f2:	4a24      	ldr	r2, [pc, #144]	@ (8001584 <HAL_SPI_MspInit+0xb8>)
 80014f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014fa:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <HAL_SPI_MspInit+0xb8>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <HAL_SPI_MspInit+0xb8>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150a:	4a1e      	ldr	r2, [pc, #120]	@ (8001584 <HAL_SPI_MspInit+0xb8>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <HAL_SPI_MspInit+0xb8>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <HAL_SPI_MspInit+0xb8>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001522:	4a18      	ldr	r2, [pc, #96]	@ (8001584 <HAL_SPI_MspInit+0xb8>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152a:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <HAL_SPI_MspInit+0xb8>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001536:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001548:	2306      	movs	r3, #6
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	480d      	ldr	r0, [pc, #52]	@ (8001588 <HAL_SPI_MspInit+0xbc>)
 8001554:	f002 f976 	bl	8003844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001558:	2320      	movs	r3, #32
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001568:	2306      	movs	r3, #6
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	@ (800158c <HAL_SPI_MspInit+0xc0>)
 8001574:	f002 f966 	bl	8003844 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	@ 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40003c00 	.word	0x40003c00
 8001584:	40021000 	.word	0x40021000
 8001588:	48000800 	.word	0x48000800
 800158c:	48000400 	.word	0x48000400

08001590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <HAL_MspInit+0x4c>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159a:	4a10      	ldr	r2, [pc, #64]	@ (80015dc <HAL_MspInit+0x4c>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <HAL_MspInit+0x4c>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <HAL_MspInit+0x4c>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <HAL_MspInit+0x4c>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ba:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <HAL_MspInit+0x4c>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	210f      	movs	r1, #15
 80015ca:	f06f 0001 	mvn.w	r0, #1
 80015ce:	f001 fd44 	bl	800305a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000

080015e0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80015e8:	1d39      	adds	r1, r7, #4
 80015ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015ee:	2201      	movs	r2, #1
 80015f0:	4803      	ldr	r0, [pc, #12]	@ (8001600 <__io_putchar+0x20>)
 80015f2:	f006 ffbf 	bl	8008574 <HAL_UART_Transmit>

  return ch;
 80015f6:	687b      	ldr	r3, [r7, #4]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000618 	.word	0x20000618

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <NMI_Handler+0x4>

0800160c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <HardFault_Handler+0x4>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <MemManage_Handler+0x4>

0800161c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <BusFault_Handler+0x4>

08001624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <UsageFault_Handler+0x4>

0800162c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163e:	f000 fc49 	bl	8001ed4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001642:	f008 fbb7 	bl	8009db4 <xTaskGetSchedulerState>
 8001646:	4603      	mov	r3, r0
 8001648:	2b01      	cmp	r3, #1
 800164a:	d001      	beq.n	8001650 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800164c:	f008 fdf4 	bl	800a238 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001658:	4802      	ldr	r0, [pc, #8]	@ (8001664 <DMA1_Channel6_IRQHandler+0x10>)
 800165a:	f002 f814 	bl	8003686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000051c 	.word	0x2000051c

08001668 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <DMA1_Channel7_IRQHandler+0x10>)
 800166e:	f002 f80a 	bl	8003686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000564 	.word	0x20000564

0800167c <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8001680:	4803      	ldr	r0, [pc, #12]	@ (8001690 <SAI2_IRQHandler+0x14>)
 8001682:	f005 ffb1 	bl	80075e8 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8001686:	4803      	ldr	r0, [pc, #12]	@ (8001694 <SAI2_IRQHandler+0x18>)
 8001688:	f005 ffae 	bl	80075e8 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000414 	.word	0x20000414
 8001694:	20000498 	.word	0x20000498

08001698 <_getpid>:
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
 800169c:	2301      	movs	r3, #1
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_kill>:
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	f009 fae7 	bl	800ac84 <__errno>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2216      	movs	r2, #22
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_exit>:
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ffe7 	bl	80016a8 <_kill>
 80016da:	bf00      	nop
 80016dc:	e7fd      	b.n	80016da <_exit+0x12>

080016de <_read>:
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	e00a      	b.n	8001706 <_read+0x28>
 80016f0:	f3af 8000 	nop.w
 80016f4:	4601      	mov	r1, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	60ba      	str	r2, [r7, #8]
 80016fc:	b2ca      	uxtb	r2, r1
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	dbf0      	blt.n	80016f0 <_read+0x12>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_write>:
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e009      	b.n	800173e <_write+0x26>
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	60ba      	str	r2, [r7, #8]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff54 	bl	80015e0 <__io_putchar>
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	429a      	cmp	r2, r3
 8001744:	dbf1      	blt.n	800172a <_write+0x12>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_close>:
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_fstat>:
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	2300      	movs	r3, #0
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_isatty>:
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	2301      	movs	r3, #1
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <_lseek>:
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	2300      	movs	r3, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_sbrk>:
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	4b13      	ldr	r3, [pc, #76]	@ (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
 80017e8:	f009 fa4c 	bl	800ac84 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
 80017f8:	4b08      	ldr	r3, [pc, #32]	@ (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	@ (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20018000 	.word	0x20018000
 8001818:	00000400 	.word	0x00000400
 800181c:	20000614 	.word	0x20000614
 8001820:	20001820 	.word	0x20001820

08001824 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <SystemInit+0x20>)
 800182a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800182e:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <SystemInit+0x20>)
 8001830:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001834:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800184c:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800184e:	4a15      	ldr	r2, [pc, #84]	@ (80018a4 <MX_USART2_UART_Init+0x5c>)
 8001850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001852:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001860:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800186e:	220c      	movs	r2, #12
 8001870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 8001886:	2200      	movs	r2, #0
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <MX_USART2_UART_Init+0x58>)
 800188c:	f006 fe24 	bl	80084d8 <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001896:	f7ff fa49 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000618 	.word	0x20000618
 80018a4:	40004400 	.word	0x40004400

080018a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b0ac      	sub	sp, #176	@ 0xb0
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2288      	movs	r2, #136	@ 0x88
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f009 f931 	bl	800ab30 <memset>
  if(uartHandle->Instance==USART2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a21      	ldr	r2, [pc, #132]	@ (8001958 <HAL_UART_MspInit+0xb0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d13b      	bne.n	8001950 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018d8:	2302      	movs	r3, #2
 80018da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018dc:	2300      	movs	r3, #0
 80018de:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4618      	mov	r0, r3
 80018e6:	f004 f8ab 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018f0:	f7ff fa1c 	bl	8000d2c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018f4:	4b19      	ldr	r3, [pc, #100]	@ (800195c <HAL_UART_MspInit+0xb4>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f8:	4a18      	ldr	r2, [pc, #96]	@ (800195c <HAL_UART_MspInit+0xb4>)
 80018fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <HAL_UART_MspInit+0xb4>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <HAL_UART_MspInit+0xb4>)
 800190e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001910:	4a12      	ldr	r2, [pc, #72]	@ (800195c <HAL_UART_MspInit+0xb4>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001918:	4b10      	ldr	r3, [pc, #64]	@ (800195c <HAL_UART_MspInit+0xb4>)
 800191a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001924:	230c      	movs	r3, #12
 8001926:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800193c:	2307      	movs	r3, #7
 800193e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001946:	4619      	mov	r1, r3
 8001948:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800194c:	f001 ff7a 	bl	8003844 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001950:	bf00      	nop
 8001952:	37b0      	adds	r7, #176	@ 0xb0
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40004400 	.word	0x40004400
 800195c:	40021000 	.word	0x40021000

08001960 <MCP23S17_WriteRegister>:
#include "components/MCP23S17.h"




HAL_StatusTypeDef MCP23S17_WriteRegister(uint8_t reg, uint8_t data){
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	460a      	mov	r2, r1
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	71bb      	strb	r3, [r7, #6]
	uint8_t pData[3];

	pData[0] = MCP23S17_ADDR;
 8001970:	2340      	movs	r3, #64	@ 0x40
 8001972:	733b      	strb	r3, [r7, #12]
	pData[1] = reg;
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	737b      	strb	r3, [r7, #13]
	pData[2] = data;
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(CS_Vu_GPIO_Port, CS_Vu_Pin, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	2180      	movs	r1, #128	@ 0x80
 8001980:	480e      	ldr	r0, [pc, #56]	@ (80019bc <MCP23S17_WriteRegister+0x5c>)
 8001982:	f002 f909 	bl	8003b98 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001986:	200a      	movs	r0, #10
 8001988:	f000 fac4 	bl	8001f14 <HAL_Delay>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&MCP23S17_SPI, pData, 3, HAL_MAX_DELAY);
 800198c:	f107 010c 	add.w	r1, r7, #12
 8001990:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001994:	2203      	movs	r2, #3
 8001996:	480a      	ldr	r0, [pc, #40]	@ (80019c0 <MCP23S17_WriteRegister+0x60>)
 8001998:	f006 fac4 	bl	8007f24 <HAL_SPI_Transmit>
 800199c:	4603      	mov	r3, r0
 800199e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80019a0:	200a      	movs	r0, #10
 80019a2:	f000 fab7 	bl	8001f14 <HAL_Delay>
	HAL_GPIO_WritePin(CS_Vu_GPIO_Port, CS_Vu_Pin, GPIO_PIN_SET);
 80019a6:	2201      	movs	r2, #1
 80019a8:	2180      	movs	r1, #128	@ 0x80
 80019aa:	4804      	ldr	r0, [pc, #16]	@ (80019bc <MCP23S17_WriteRegister+0x5c>)
 80019ac:	f002 f8f4 	bl	8003b98 <HAL_GPIO_WritePin>
	return ret;
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	48000400 	.word	0x48000400
 80019c0:	200005b0 	.word	0x200005b0

080019c4 <MCP23S17_Init>:

void MCP23S17_Init()
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_Vu_GPIO_Port, RESET_Vu_Pin, GPIO_PIN_SET);
 80019c8:	2201      	movs	r2, #1
 80019ca:	2101      	movs	r1, #1
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d0:	f002 f8e2 	bl	8003b98 <HAL_GPIO_WritePin>
	MCP23S17_WriteRegister(IODIRA, CONFIG);
 80019d4:	2100      	movs	r1, #0
 80019d6:	2000      	movs	r0, #0
 80019d8:	f7ff ffc2 	bl	8001960 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(IODIRB, CONFIG);
 80019dc:	2100      	movs	r1, #0
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff ffbe 	bl	8001960 <MCP23S17_WriteRegister>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <MCP23S17_Chenillard>:

void MCP23S17_Chenillard(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
    //
    for (int i = 0; i < 8; i++) {
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	e025      	b.n	8001a40 <MCP23S17_Chenillard+0x58>

    	MCP23S17_WriteRegister(0x12, ~(1 << i));
 80019f4:	2201      	movs	r2, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	4619      	mov	r1, r3
 8001a04:	2012      	movs	r0, #18
 8001a06:	f7ff ffab 	bl	8001960 <MCP23S17_WriteRegister>
    	MCP23S17_WriteRegister(0x13, ~(1 << i));
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	4619      	mov	r1, r3
 8001a1a:	2013      	movs	r0, #19
 8001a1c:	f7ff ffa0 	bl	8001960 <MCP23S17_WriteRegister>
        printf("LED %d allumée\r\n", i + 1);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3301      	adds	r3, #1
 8001a24:	4619      	mov	r1, r3
 8001a26:	480a      	ldr	r0, [pc, #40]	@ (8001a50 <MCP23S17_Chenillard+0x68>)
 8001a28:	f008 ff06 	bl	800a838 <iprintf>
        HAL_Delay(100);
 8001a2c:	2064      	movs	r0, #100	@ 0x64
 8001a2e:	f000 fa71 	bl	8001f14 <HAL_Delay>


        MCP23S17_WriteRegister(0x12, 0xFF);
 8001a32:	21ff      	movs	r1, #255	@ 0xff
 8001a34:	2012      	movs	r0, #18
 8001a36:	f7ff ff93 	bl	8001960 <MCP23S17_WriteRegister>
    for (int i = 0; i < 8; i++) {
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b07      	cmp	r3, #7
 8001a44:	ddd6      	ble.n	80019f4 <MCP23S17_Chenillard+0xc>
    }
}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	0800bd10 	.word	0x0800bd10

08001a54 <sgtl5000_WriteReg>:

HAL_StatusTypeDef dump_status;


HAL_StatusTypeDef sgtl5000_WriteReg(h_sgtl5000_t * h_sgtl5000, uint16_t reg, uint16_t value)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
 8001a60:	4613      	mov	r3, r2
 8001a62:	803b      	strh	r3, [r7, #0]
    uint8_t data[2];
    data[0] = (value >> 8) & 0xFF;    // MSB of value
 8001a64:	883b      	ldrh	r3, [r7, #0]
 8001a66:	0a1b      	lsrs	r3, r3, #8
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	733b      	strb	r3, [r7, #12]
    data[1] = value & 0xFF;           // LSB of value
 8001a6e:	883b      	ldrh	r3, [r7, #0]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	737b      	strb	r3, [r7, #13]

    return HAL_I2C_Mem_Write(h_sgtl5000->hi2c,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6818      	ldr	r0, [r3, #0]
                            h_sgtl5000->device_address,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	791b      	ldrb	r3, [r3, #4]
    return HAL_I2C_Mem_Write(h_sgtl5000->hi2c,
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a84:	9302      	str	r3, [sp, #8]
 8001a86:	2302      	movs	r3, #2
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2302      	movs	r3, #2
 8001a92:	f002 fb5d 	bl	8004150 <HAL_I2C_Mem_Write>
 8001a96:	4603      	mov	r3, r0
                            reg,
                            I2C_MEMADD_SIZE_16BIT,
                            data,
                            2,
                            HAL_MAX_DELAY);
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <sgtl5000_init>:

HAL_StatusTypeDef sgtl5000_init(h_sgtl5000_t * h_sgtl5000)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]

	// NOTE: This next Write call is needed ONLY if VDDD is
	// externally driven
	// Turn off startup power supplies to save power (Clear bit 12 and 13)
	// Write CHIP_ANA_POWER 0x4260
	mask = (1 << 12) | (1 << 13);
 8001aac:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001ab0:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_clear_bit(h_sgtl5000, SGTL5000_CHIP_ANA_POWER, mask);
 8001ab2:	89bb      	ldrh	r3, [r7, #12]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	2130      	movs	r1, #48	@ 0x30
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f8e1 	bl	8001c80 <sgtl5000_i2c_clear_bit>
	// NOTE: The next modify call is only needed if both VDDA and
	// VDDIO are greater than 3.1 V
	// Configure the charge pump to use the VDDIO rail (set bit 5 and bit 6)
	// Write CHIP_LINREG_CTRL 0x006C
	// VDDA and VDDIO = 3.3V so it IS necessary
	mask = (1 << 5) | (1 << 6);
 8001abe:	2360      	movs	r3, #96	@ 0x60
 8001ac0:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_set_bit(h_sgtl5000, SGTL5000_CHIP_LINREG_CTRL, mask);
 8001ac2:	89bb      	ldrh	r3, [r7, #12]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2126      	movs	r1, #38	@ 0x26
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f8b3 	bl	8001c34 <sgtl5000_i2c_set_bit>
	// on the VDDA voltage value.
	// Set ground, ADC, DAC reference voltage (bits 8:4). The value should
	// be set to VDDA/2. This example assumes VDDA = 1.8 V. VDDA/2 = 0.9 V.
	// The bias current should be set to 50% of the nominal value (bits 3:1)
	// Write CHIP_REF_CTRL 0x004E
	mask = 0x01FF;	// VAG_VAL = 1.575V, BIAS_CTRL = -50%, SMALL_POP = 1
 8001ace:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8001ad2:	81bb      	strh	r3, [r7, #12]
	sgtl5000_WriteReg(h_sgtl5000, SGTL5000_CHIP_REF_CTRL, mask);
 8001ad4:	89bb      	ldrh	r3, [r7, #12]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2128      	movs	r1, #40	@ 0x28
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffba 	bl	8001a54 <sgtl5000_WriteReg>
	// Set LINEOUT reference voltage to VDDIO/2 (1.65 V) (bits 5:0)
	// and bias current (bits 11:8) to the recommended value of 0.36 mA
	// for 10 kOhm load with 1.0 nF capacitance
	// Write CHIP_LINE_OUT_CTRL 0x0322
//	mask = 0x0322;	// LO_VAGCNTRL = 1.65V, OUT_CURRENT = 0.36mA (?)
	mask = 0x031E;
 8001ae0:	f240 331e 	movw	r3, #798	@ 0x31e
 8001ae4:	81bb      	strh	r3, [r7, #12]
	sgtl5000_WriteReg(h_sgtl5000, SGTL5000_CHIP_LINE_OUT_CTRL, mask);
 8001ae6:	89bb      	ldrh	r3, [r7, #12]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	212c      	movs	r1, #44	@ 0x2c
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ffb1 	bl	8001a54 <sgtl5000_WriteReg>

	// Enable short detect mode for headphone left/right
	// and center channel and set short detect current trip level
	// to 75 mA
	// Write CHIP_SHORT_CTRL 0x1106
	mask = 0x1106;	// MODE_CM = 2, MODE_LR = 1, LVLADJC = 200mA, LVLADJL = 75mA, LVLADJR = 50mA
 8001af2:	f241 1306 	movw	r3, #4358	@ 0x1106
 8001af6:	81bb      	strh	r3, [r7, #12]
	sgtl5000_WriteReg(h_sgtl5000, SGTL5000_CHIP_SHORT_CTRL, mask);
 8001af8:	89bb      	ldrh	r3, [r7, #12]
 8001afa:	461a      	mov	r2, r3
 8001afc:	213c      	movs	r1, #60	@ 0x3c
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffa8 	bl	8001a54 <sgtl5000_WriteReg>

	// Enable Zero-cross detect if needed for HP_OUT (bit 5) and ADC (bit 1)
	// Write CHIP_ANA_CTRL 0x0133
	mask = 0x0004;	// Unmute all + SELECT_ADC = LINEIN
 8001b04:	2304      	movs	r3, #4
 8001b06:	81bb      	strh	r3, [r7, #12]
//	mask = 0x0000;	// Unmute all + SELECT_ADC = MIC
	sgtl5000_WriteReg(h_sgtl5000, SGTL5000_CHIP_ANA_CTRL, mask);
 8001b08:	89bb      	ldrh	r3, [r7, #12]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2124      	movs	r1, #36	@ 0x24
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffa0 	bl	8001a54 <sgtl5000_WriteReg>

	//------------Power up Inputs/Outputs/Digital Blocks---------
	// Power up LINEOUT, HP, ADC, DAC
	// Write CHIP_ANA_POWER 0x6AFF
	mask = 0x6AFF;	// LINEOUT_POWERUP, ADC_POWERUP, CAPLESS_HEADPHONE_POWERUP, DAC_POWERUP, HEADPHONE_POWERUP, REFTOP_POWERUP, ADC_MONO = stereo
 8001b14:	f646 23ff 	movw	r3, #27391	@ 0x6aff
 8001b18:	81bb      	strh	r3, [r7, #12]
	// VAG_POWERUP, VCOAMP_POWERUP = 0, LINREG_D_POWERUP, PLL_POWERUP = 0, VDDC_CHRGPMP_POWERUP, STARTUP_POWERUP = 0, LINREG_SIMPLE_POWERUP,
	// DAC_MONO = stereo
	sgtl5000_WriteReg(h_sgtl5000, SGTL5000_CHIP_ANA_POWER, mask);
 8001b1a:	89bb      	ldrh	r3, [r7, #12]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2130      	movs	r1, #48	@ 0x30
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff97 	bl	8001a54 <sgtl5000_WriteReg>
	// Power up desired digital blocks
	// I2S_IN (bit 0), I2S_OUT (bit 1), DAP (bit 4), DAC (bit 5),
	// ADC (bit 6) are powered on
	// Write CHIP_DIG_POWER 0x0073
	mask = 0x0073;	// I2S_IN_POWERUP, I2S_OUT_POWERUP, DAP_POWERUP, DAC_POWERUP, ADC_POWERUP
 8001b26:	2373      	movs	r3, #115	@ 0x73
 8001b28:	81bb      	strh	r3, [r7, #12]
	sgtl5000_WriteReg(h_sgtl5000, SGTL5000_CHIP_DIG_POWER, mask);
 8001b2a:	89bb      	ldrh	r3, [r7, #12]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	2102      	movs	r1, #2
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff8f 	bl	8001a54 <sgtl5000_WriteReg>
	// Value = (int)(40*log(VAG_VAL/LO_VAGCNTRL) + 15)
	// Assuming VAG_VAL and LO_VAGCNTRL is set to 0.9 V and
	// 1.65 V respectively, the // left LO vol (bits 12:8) and right LO
	// volume (bits 4:0) value should be set // to 5
	// Write CHIP_LINE_OUT_VOL 0x0505
	mask = 0x1111;	// TODO recalculer
 8001b36:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001b3a:	81bb      	strh	r3, [r7, #12]
	sgtl5000_WriteReg(h_sgtl5000, SGTL5000_CHIP_LINE_OUT_VOL, mask);
 8001b3c:	89bb      	ldrh	r3, [r7, #12]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	212e      	movs	r1, #46	@ 0x2e
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ff86 	bl	8001a54 <sgtl5000_WriteReg>

	// Configure SYS_FS clock to 48 kHz
	// Configure MCLK_FREQ to 256*Fs
	// Modify CHIP_CLK_CTRL->SYS_FS 0x0002 // bits 3:2
	// Modify CHIP_CLK_CTRL->MCLK_FREQ 0x0000 // bits 1:0
	mask = 0x0004;	// SYS_FS = 48kHz
 8001b48:	2304      	movs	r3, #4
 8001b4a:	81bb      	strh	r3, [r7, #12]
	sgtl5000_WriteReg(h_sgtl5000, SGTL5000_CHIP_CLK_CTRL, mask);
 8001b4c:	89bb      	ldrh	r3, [r7, #12]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	2104      	movs	r1, #4
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff7e 	bl	8001a54 <sgtl5000_WriteReg>
	// Configure the I2S clocks in master mode
	// NOTE: I2S LRCLK is same as the system sample clock
	// Modify CHIP_I2S_CTRL->MS 0x0001 // bit 7
	// Non, on reste en slave!
	mask = 0x0130;	// DLEN = 16 bits
 8001b58:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8001b5c:	81bb      	strh	r3, [r7, #12]
	sgtl5000_WriteReg(h_sgtl5000, SGTL5000_CHIP_I2S_CTRL, mask);
 8001b5e:	89bb      	ldrh	r3, [r7, #12]
 8001b60:	461a      	mov	r2, r3
 8001b62:	2106      	movs	r1, #6
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff75 	bl	8001a54 <sgtl5000_WriteReg>
	// Laissons tout par défaut pour l'instant
//	mask = 0x0000;	// ADC -> DAC
//	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_SSS_CTRL, mask);

	/* Le reste */
	mask = 0x0000;	// Unmute
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	81bb      	strh	r3, [r7, #12]
	sgtl5000_WriteReg(h_sgtl5000, SGTL5000_CHIP_ADCDAC_CTRL, mask);
 8001b6e:	89bb      	ldrh	r3, [r7, #12]
 8001b70:	461a      	mov	r2, r3
 8001b72:	210e      	movs	r1, #14
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff6d 	bl	8001a54 <sgtl5000_WriteReg>

	mask = 0x3C3C;
 8001b7a:	f643 433c 	movw	r3, #15420	@ 0x3c3c
 8001b7e:	81bb      	strh	r3, [r7, #12]
//	mask = 0x4747;
	sgtl5000_WriteReg(h_sgtl5000, SGTL5000_CHIP_DAC_VOL, mask);
 8001b80:	89bb      	ldrh	r3, [r7, #12]
 8001b82:	461a      	mov	r2, r3
 8001b84:	2110      	movs	r1, #16
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ff64 	bl	8001a54 <sgtl5000_WriteReg>

	mask = 0x0251;	// BIAS_RESISTOR = 2, BIAS_VOLT = 5, GAIN = 1
 8001b8c:	f240 2351 	movw	r3, #593	@ 0x251
 8001b90:	81bb      	strh	r3, [r7, #12]
	sgtl5000_WriteReg(h_sgtl5000, SGTL5000_CHIP_MIC_CTRL, mask);
 8001b92:	89bb      	ldrh	r3, [r7, #12]
 8001b94:	461a      	mov	r2, r3
 8001b96:	212a      	movs	r1, #42	@ 0x2a
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff5b 	bl	8001a54 <sgtl5000_WriteReg>
//		uint16_t reg = 0;
//		sgtl5000_i2c_read_register(h_sgtl5000, register_map[i], &reg);
//		printf("%02d: [0x%04x] = 0x%04x\r\n", i, register_map[i], reg);
//	}

	return ret;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <sgtl5000_i2c_read_register>:




static HAL_StatusTypeDef sgtl5000_i2c_read_register(h_sgtl5000_t *h_sgtl5000, uint16_t reg, uint16_t *value)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	817b      	strh	r3, [r7, #10]
    HAL_StatusTypeDef status;
    uint8_t reg_addr[2];
    uint8_t data[2];

    reg_addr[0] = (uint8_t)((reg & 0xFF00) >> 8);
 8001bb6:	897b      	ldrh	r3, [r7, #10]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	753b      	strb	r3, [r7, #20]
    reg_addr[1] = (uint8_t)(reg & 0x00FF);
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	757b      	strb	r3, [r7, #21]

    // Write register address
    status = HAL_I2C_Master_Transmit(h_sgtl5000->hi2c, h_sgtl5000->device_address, reg_addr, 2, HAL_MAX_DELAY);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	791b      	ldrb	r3, [r3, #4]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f107 0214 	add.w	r2, r7, #20
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2302      	movs	r3, #2
 8001bdc:	f002 f8aa 	bl	8003d34 <HAL_I2C_Master_Transmit>
 8001be0:	4603      	mov	r3, r0
 8001be2:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <sgtl5000_i2c_read_register+0x46>
        return status;
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	e01e      	b.n	8001c2c <sgtl5000_i2c_read_register+0x84>

    // Read register value
    status = HAL_I2C_Master_Receive(h_sgtl5000->hi2c, h_sgtl5000->device_address, data, 2, HAL_MAX_DELAY);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	791b      	ldrb	r3, [r3, #4]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f107 0210 	add.w	r2, r7, #16
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2302      	movs	r3, #2
 8001c04:	f002 f9ae 	bl	8003f64 <HAL_I2C_Master_Receive>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <sgtl5000_i2c_read_register+0x6e>
        return status;
 8001c12:	7dfb      	ldrb	r3, [r7, #23]
 8001c14:	e00a      	b.n	8001c2c <sgtl5000_i2c_read_register+0x84>

    *value = (uint16_t)((data[0] << 8) | data[1]);
 8001c16:	7c3b      	ldrb	r3, [r7, #16]
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	7c7b      	ldrb	r3, [r7, #17]
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	4313      	orrs	r3, r2
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <sgtl5000_i2c_set_bit>:

static HAL_StatusTypeDef sgtl5000_i2c_set_bit(h_sgtl5000_t *h_sgtl5000, uint16_t reg, uint16_t bits_mask)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	4613      	mov	r3, r2
 8001c42:	803b      	strh	r3, [r7, #0]
    uint16_t reg_value;
    HAL_StatusTypeDef status;

    // Read current value - Fixed: use read function instead of write
    status = sgtl5000_i2c_read_register(h_sgtl5000, reg, &reg_value);
 8001c44:	f107 020c 	add.w	r2, r7, #12
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ffab 	bl	8001ba8 <sgtl5000_i2c_read_register>
 8001c52:	4603      	mov	r3, r0
 8001c54:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <sgtl5000_i2c_set_bit+0x2c>
        return status;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	e00b      	b.n	8001c78 <sgtl5000_i2c_set_bit+0x44>

    // Set bits
    reg_value |= bits_mask;
 8001c60:	89ba      	ldrh	r2, [r7, #12]
 8001c62:	883b      	ldrh	r3, [r7, #0]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	81bb      	strh	r3, [r7, #12]

    // Write back
    return sgtl5000_WriteReg(h_sgtl5000, reg, reg_value);
 8001c6a:	89ba      	ldrh	r2, [r7, #12]
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff feef 	bl	8001a54 <sgtl5000_WriteReg>
 8001c76:	4603      	mov	r3, r0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <sgtl5000_i2c_clear_bit>:

static HAL_StatusTypeDef sgtl5000_i2c_clear_bit(h_sgtl5000_t *h_sgtl5000, uint16_t reg, uint16_t bits_mask)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	803b      	strh	r3, [r7, #0]
    uint16_t reg_value;
    HAL_StatusTypeDef status;

    // Read current value - Fixed: use read function instead of write
    status = sgtl5000_i2c_read_register(h_sgtl5000, reg, &reg_value);
 8001c90:	f107 020c 	add.w	r2, r7, #12
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	4619      	mov	r1, r3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff85 	bl	8001ba8 <sgtl5000_i2c_read_register>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <sgtl5000_i2c_clear_bit+0x2c>
        return status;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	e010      	b.n	8001cce <sgtl5000_i2c_clear_bit+0x4e>

    // Clear bits
    reg_value &= ~bits_mask;
 8001cac:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	89bb      	ldrh	r3, [r7, #12]
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	4013      	ands	r3, r2
 8001cba:	b21b      	sxth	r3, r3
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	81bb      	strh	r3, [r7, #12]

    // Write back
    return sgtl5000_WriteReg(h_sgtl5000, reg, reg_value);
 8001cc0:	89ba      	ldrh	r2, [r7, #12]
 8001cc2:	887b      	ldrh	r3, [r7, #2]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fec4 	bl	8001a54 <sgtl5000_WriteReg>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <Triangle_Wave_Start>:
extern SAI_HandleTypeDef hsai_BlockB2;
extern h_sgtl5000_t h_sgtl5000;


void Triangle_Wave_Start(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
	for(int i = 0; i < TRIANGLE_POINTS/2; i++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	e024      	b.n	8001d2e <Triangle_Wave_Start+0x56>
	{

		triangleWave[i] = (i * 32767) / (TRIANGLE_POINTS/2);
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	03db      	lsls	r3, r3, #15
 8001cea:	1a9b      	subs	r3, r3, r2
 8001cec:	4a27      	ldr	r2, [pc, #156]	@ (8001d8c <Triangle_Wave_Start+0xb4>)
 8001cee:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf2:	1112      	asrs	r2, r2, #4
 8001cf4:	17db      	asrs	r3, r3, #31
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4a25      	ldr	r2, [pc, #148]	@ (8001d90 <Triangle_Wave_Start+0xb8>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		triangleWave[i + TRIANGLE_POINTS/2] =
				(32767 - ((i * 32767) / (TRIANGLE_POINTS/2)));
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	03db      	lsls	r3, r3, #15
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	4a20      	ldr	r2, [pc, #128]	@ (8001d8c <Triangle_Wave_Start+0xb4>)
 8001d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d10:	1112      	asrs	r2, r2, #4
 8001d12:	17db      	asrs	r3, r3, #31
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001d1a:	337f      	adds	r3, #127	@ 0x7f
		triangleWave[i + TRIANGLE_POINTS/2] =
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	3232      	adds	r2, #50	@ 0x32
				(32767 - ((i * 32767) / (TRIANGLE_POINTS/2)));
 8001d20:	4619      	mov	r1, r3
		triangleWave[i + TRIANGLE_POINTS/2] =
 8001d22:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <Triangle_Wave_Start+0xb8>)
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < TRIANGLE_POINTS/2; i++)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b31      	cmp	r3, #49	@ 0x31
 8001d32:	ddd7      	ble.n	8001ce4 <Triangle_Wave_Start+0xc>
	}

	for(int i = 0; i < TRIANGLE_POINTS; i++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	e017      	b.n	8001d6a <Triangle_Wave_Start+0x92>
	{
		saiTxBuffer[i*2] = (int16_t)triangleWave[i];
 8001d3a:	4a15      	ldr	r2, [pc, #84]	@ (8001d90 <Triangle_Wave_Start+0xb8>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	b211      	sxth	r1, r2
 8001d48:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <Triangle_Wave_Start+0xbc>)
 8001d4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		saiTxBuffer[i*2 + 1] = (int16_t)triangleWave[i];
 8001d4e:	4a10      	ldr	r2, [pc, #64]	@ (8001d90 <Triangle_Wave_Start+0xb8>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b211      	sxth	r1, r2
 8001d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001d94 <Triangle_Wave_Start+0xbc>)
 8001d60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < TRIANGLE_POINTS; i++)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b63      	cmp	r3, #99	@ 0x63
 8001d6e:	dde4      	ble.n	8001d3a <Triangle_Wave_Start+0x62>
	}

	if(HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)saiTxBuffer, SAI_BUFFER_SIZE) != HAL_OK)
 8001d70:	22c8      	movs	r2, #200	@ 0xc8
 8001d72:	4908      	ldr	r1, [pc, #32]	@ (8001d94 <Triangle_Wave_Start+0xbc>)
 8001d74:	4808      	ldr	r0, [pc, #32]	@ (8001d98 <Triangle_Wave_Start+0xc0>)
 8001d76:	f005 fb87 	bl	8007488 <HAL_SAI_Transmit_DMA>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <Triangle_Wave_Start+0xac>
	{
		Error_Handler();
 8001d80:	f7fe ffd4 	bl	8000d2c <Error_Handler>
	}
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	51eb851f 	.word	0x51eb851f
 8001d90:	20000830 	.word	0x20000830
 8001d94:	200006a0 	.word	0x200006a0
 8001d98:	20000414 	.word	0x20000414

08001d9c <HAL_SAI_TxCpltCallback>:
	uint16_t mask = 0x000C; // Mute
	sgtl5000_WriteReg(&h_sgtl5000, SGTL5000_CHIP_ADCDAC_CTRL, mask);
}

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	if(hsai->Instance == SAI2_Block_A)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a05      	ldr	r2, [pc, #20]	@ (8001dc0 <HAL_SAI_TxCpltCallback+0x24>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d104      	bne.n	8001db8 <HAL_SAI_TxCpltCallback+0x1c>
	{
		HAL_SAI_Transmit_DMA(hsai, (uint8_t*)saiTxBuffer, SAI_BUFFER_SIZE);
 8001dae:	22c8      	movs	r2, #200	@ 0xc8
 8001db0:	4904      	ldr	r1, [pc, #16]	@ (8001dc4 <HAL_SAI_TxCpltCallback+0x28>)
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f005 fb68 	bl	8007488 <HAL_SAI_Transmit_DMA>
	}
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40015804 	.word	0x40015804
 8001dc4:	200006a0 	.word	0x200006a0

08001dc8 <Reset_Handler>:
 8001dc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e00 <LoopForever+0x2>
 8001dcc:	f7ff fd2a 	bl	8001824 <SystemInit>
 8001dd0:	480c      	ldr	r0, [pc, #48]	@ (8001e04 <LoopForever+0x6>)
 8001dd2:	490d      	ldr	r1, [pc, #52]	@ (8001e08 <LoopForever+0xa>)
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e0c <LoopForever+0xe>)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e002      	b.n	8001de0 <LoopCopyDataInit>

08001dda <CopyDataInit>:
 8001dda:	58d4      	ldr	r4, [r2, r3]
 8001ddc:	50c4      	str	r4, [r0, r3]
 8001dde:	3304      	adds	r3, #4

08001de0 <LoopCopyDataInit>:
 8001de0:	18c4      	adds	r4, r0, r3
 8001de2:	428c      	cmp	r4, r1
 8001de4:	d3f9      	bcc.n	8001dda <CopyDataInit>
 8001de6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <LoopForever+0x12>)
 8001de8:	4c0a      	ldr	r4, [pc, #40]	@ (8001e14 <LoopForever+0x16>)
 8001dea:	2300      	movs	r3, #0
 8001dec:	e001      	b.n	8001df2 <LoopFillZerobss>

08001dee <FillZerobss>:
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	3204      	adds	r2, #4

08001df2 <LoopFillZerobss>:
 8001df2:	42a2      	cmp	r2, r4
 8001df4:	d3fb      	bcc.n	8001dee <FillZerobss>
 8001df6:	f008 ff4b 	bl	800ac90 <__libc_init_array>
 8001dfa:	f7fe febd 	bl	8000b78 <main>

08001dfe <LoopForever>:
 8001dfe:	e7fe      	b.n	8001dfe <LoopForever>
 8001e00:	20018000 	.word	0x20018000
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000074 	.word	0x20000074
 8001e0c:	0800bea8 	.word	0x0800bea8
 8001e10:	20000074 	.word	0x20000074
 8001e14:	2000181c 	.word	0x2000181c

08001e18 <ADC1_2_IRQHandler>:
 8001e18:	e7fe      	b.n	8001e18 <ADC1_2_IRQHandler>
	...

08001e1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e26:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <HAL_Init+0x3c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e58 <HAL_Init+0x3c>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e32:	2003      	movs	r0, #3
 8001e34:	f001 f906 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e38:	200f      	movs	r0, #15
 8001e3a:	f000 f80f 	bl	8001e5c <HAL_InitTick>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	71fb      	strb	r3, [r7, #7]
 8001e48:	e001      	b.n	8001e4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e4a:	f7ff fba1 	bl	8001590 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40022000 	.word	0x40022000

08001e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e68:	4b17      	ldr	r3, [pc, #92]	@ (8001ec8 <HAL_InitTick+0x6c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d023      	beq.n	8001eb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e70:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <HAL_InitTick+0x70>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <HAL_InitTick+0x6c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f001 f911 	bl	80030ae <HAL_SYSTICK_Config>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10f      	bne.n	8001eb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b0f      	cmp	r3, #15
 8001e96:	d809      	bhi.n	8001eac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ea0:	f001 f8db 	bl	800305a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <HAL_InitTick+0x74>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e007      	b.n	8001ebc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e004      	b.n	8001ebc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	e001      	b.n	8001ebc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000010 	.word	0x20000010
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	2000000c 	.word	0x2000000c

08001ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <HAL_IncTick+0x20>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_IncTick+0x24>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a04      	ldr	r2, [pc, #16]	@ (8001ef8 <HAL_IncTick+0x24>)
 8001ee6:	6013      	str	r3, [r2, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000010 	.word	0x20000010
 8001ef8:	200009c0 	.word	0x200009c0

08001efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b03      	ldr	r3, [pc, #12]	@ (8001f10 <HAL_GetTick+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	200009c0 	.word	0x200009c0

08001f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff ffee 	bl	8001efc <HAL_GetTick>
 8001f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f2c:	d005      	beq.n	8001f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_Delay+0x44>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f3a:	bf00      	nop
 8001f3c:	f7ff ffde 	bl	8001efc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d8f7      	bhi.n	8001f3c <HAL_Delay+0x28>
  {
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000010 	.word	0x20000010

08001f5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	609a      	str	r2, [r3, #8]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3360      	adds	r3, #96	@ 0x60
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <LL_ADC_SetOffset+0x44>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ffc:	bf00      	nop
 8001ffe:	371c      	adds	r7, #28
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	03fff000 	.word	0x03fff000

0800200c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3360      	adds	r3, #96	@ 0x60
 800201a:	461a      	mov	r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3360      	adds	r3, #96	@ 0x60
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	431a      	orrs	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800206e:	b480      	push	{r7}
 8002070:	b087      	sub	sp, #28
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3330      	adds	r3, #48	@ 0x30
 800207e:	461a      	mov	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	4413      	add	r3, r2
 800208c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	211f      	movs	r1, #31
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	401a      	ands	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	0e9b      	lsrs	r3, r3, #26
 80020a6:	f003 011f 	and.w	r1, r3, #31
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	431a      	orrs	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020ba:	bf00      	nop
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b087      	sub	sp, #28
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3314      	adds	r3, #20
 80020d6:	461a      	mov	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	0e5b      	lsrs	r3, r3, #25
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	4413      	add	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	0d1b      	lsrs	r3, r3, #20
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2107      	movs	r1, #7
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	401a      	ands	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	0d1b      	lsrs	r3, r3, #20
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	431a      	orrs	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002110:	bf00      	nop
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002134:	43db      	mvns	r3, r3
 8002136:	401a      	ands	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0318 	and.w	r3, r3, #24
 800213e:	4908      	ldr	r1, [pc, #32]	@ (8002160 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002140:	40d9      	lsrs	r1, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	400b      	ands	r3, r1
 8002146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214a:	431a      	orrs	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	0007ffff 	.word	0x0007ffff

08002164 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002174:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6093      	str	r3, [r2, #8]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800219c:	d101      	bne.n	80021a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021ec:	d101      	bne.n	80021f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <LL_ADC_IsEnabled+0x18>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <LL_ADC_IsEnabled+0x1a>
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b04      	cmp	r3, #4
 8002238:	d101      	bne.n	800223e <LL_ADC_REG_IsConversionOngoing+0x18>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b08      	cmp	r3, #8
 800225e:	d101      	bne.n	8002264 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b089      	sub	sp, #36	@ 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e130      	b.n	80024f0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002298:	2b00      	cmp	r3, #0
 800229a:	d109      	bne.n	80022b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7fe f9e5 	bl	800066c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff67 	bl	8002188 <LL_ADC_IsDeepPowerDownEnabled>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d004      	beq.n	80022ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff4d 	bl	8002164 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff82 	bl	80021d8 <LL_ADC_IsInternalRegulatorEnabled>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d115      	bne.n	8002306 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff66 	bl	80021b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022e4:	4b84      	ldr	r3, [pc, #528]	@ (80024f8 <HAL_ADC_Init+0x284>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	099b      	lsrs	r3, r3, #6
 80022ea:	4a84      	ldr	r2, [pc, #528]	@ (80024fc <HAL_ADC_Init+0x288>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	099b      	lsrs	r3, r3, #6
 80022f2:	3301      	adds	r3, #1
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022f8:	e002      	b.n	8002300 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f9      	bne.n	80022fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff64 	bl	80021d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10d      	bne.n	8002332 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231a:	f043 0210 	orr.w	r2, r3, #16
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff75 	bl	8002226 <LL_ADC_REG_IsConversionOngoing>
 800233c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 80c9 	bne.w	80024de <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f040 80c5 	bne.w	80024de <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002358:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800235c:	f043 0202 	orr.w	r2, r3, #2
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff49 	bl	8002200 <LL_ADC_IsEnabled>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d115      	bne.n	80023a0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002374:	4862      	ldr	r0, [pc, #392]	@ (8002500 <HAL_ADC_Init+0x28c>)
 8002376:	f7ff ff43 	bl	8002200 <LL_ADC_IsEnabled>
 800237a:	4604      	mov	r4, r0
 800237c:	4861      	ldr	r0, [pc, #388]	@ (8002504 <HAL_ADC_Init+0x290>)
 800237e:	f7ff ff3f 	bl	8002200 <LL_ADC_IsEnabled>
 8002382:	4603      	mov	r3, r0
 8002384:	431c      	orrs	r4, r3
 8002386:	4860      	ldr	r0, [pc, #384]	@ (8002508 <HAL_ADC_Init+0x294>)
 8002388:	f7ff ff3a 	bl	8002200 <LL_ADC_IsEnabled>
 800238c:	4603      	mov	r3, r0
 800238e:	4323      	orrs	r3, r4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4619      	mov	r1, r3
 800239a:	485c      	ldr	r0, [pc, #368]	@ (800250c <HAL_ADC_Init+0x298>)
 800239c:	f7ff fdde 	bl	8001f5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7e5b      	ldrb	r3, [r3, #25]
 80023a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80023b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d106      	bne.n	80023dc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d2:	3b01      	subs	r3, #1
 80023d4:	045b      	lsls	r3, r3, #17
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	4b44      	ldr	r3, [pc, #272]	@ (8002510 <HAL_ADC_Init+0x29c>)
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	69b9      	ldr	r1, [r7, #24]
 8002408:	430b      	orrs	r3, r1
 800240a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff1b 	bl	800224c <LL_ADC_INJ_IsConversionOngoing>
 8002416:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d13d      	bne.n	800249a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d13a      	bne.n	800249a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002428:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002430:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002440:	f023 0302 	bic.w	r3, r3, #2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	69b9      	ldr	r1, [r7, #24]
 800244a:	430b      	orrs	r3, r1
 800244c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002454:	2b01      	cmp	r3, #1
 8002456:	d118      	bne.n	800248a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002462:	f023 0304 	bic.w	r3, r3, #4
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800246e:	4311      	orrs	r1, r2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002474:	4311      	orrs	r1, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800247a:	430a      	orrs	r2, r1
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	611a      	str	r2, [r3, #16]
 8002488:	e007      	b.n	800249a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10c      	bne.n	80024bc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a8:	f023 010f 	bic.w	r1, r3, #15
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	1e5a      	subs	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80024ba:	e007      	b.n	80024cc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 020f 	bic.w	r2, r2, #15
 80024ca:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d0:	f023 0303 	bic.w	r3, r3, #3
 80024d4:	f043 0201 	orr.w	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	655a      	str	r2, [r3, #84]	@ 0x54
 80024dc:	e007      	b.n	80024ee <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e2:	f043 0210 	orr.w	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3724      	adds	r7, #36	@ 0x24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd90      	pop	{r4, r7, pc}
 80024f8:	20000008 	.word	0x20000008
 80024fc:	053e2d63 	.word	0x053e2d63
 8002500:	50040000 	.word	0x50040000
 8002504:	50040100 	.word	0x50040100
 8002508:	50040200 	.word	0x50040200
 800250c:	50040300 	.word	0x50040300
 8002510:	fff0c007 	.word	0xfff0c007

08002514 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b0b6      	sub	sp, #216	@ 0xd8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x22>
 8002532:	2302      	movs	r3, #2
 8002534:	e3c9      	b.n	8002cca <HAL_ADC_ConfigChannel+0x7b6>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fe6f 	bl	8002226 <LL_ADC_REG_IsConversionOngoing>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 83aa 	bne.w	8002ca4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d824      	bhi.n	80025aa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	3b02      	subs	r3, #2
 8002566:	2b03      	cmp	r3, #3
 8002568:	d81b      	bhi.n	80025a2 <HAL_ADC_ConfigChannel+0x8e>
 800256a:	a201      	add	r2, pc, #4	@ (adr r2, 8002570 <HAL_ADC_ConfigChannel+0x5c>)
 800256c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002570:	08002581 	.word	0x08002581
 8002574:	08002589 	.word	0x08002589
 8002578:	08002591 	.word	0x08002591
 800257c:	08002599 	.word	0x08002599
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002580:	230c      	movs	r3, #12
 8002582:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002586:	e010      	b.n	80025aa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002588:	2312      	movs	r3, #18
 800258a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800258e:	e00c      	b.n	80025aa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002590:	2318      	movs	r3, #24
 8002592:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002596:	e008      	b.n	80025aa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002598:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800259c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025a0:	e003      	b.n	80025aa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80025a2:	2306      	movs	r3, #6
 80025a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025a8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80025b8:	f7ff fd59 	bl	800206e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fe30 	bl	8002226 <LL_ADC_REG_IsConversionOngoing>
 80025c6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fe3c 	bl	800224c <LL_ADC_INJ_IsConversionOngoing>
 80025d4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f040 81a4 	bne.w	800292a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 819f 	bne.w	800292a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	461a      	mov	r2, r3
 80025fa:	f7ff fd64 	bl	80020c6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	08db      	lsrs	r3, r3, #3
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b04      	cmp	r3, #4
 800261e:	d00a      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6919      	ldr	r1, [r3, #16]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002630:	f7ff fcc8 	bl	8001fc4 <LL_ADC_SetOffset>
 8002634:	e179      	b.n	800292a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fce5 	bl	800200c <LL_ADC_GetOffsetChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x14e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fcda 	bl	800200c <LL_ADC_GetOffsetChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	0e9b      	lsrs	r3, r3, #26
 800265c:	f003 021f 	and.w	r2, r3, #31
 8002660:	e01e      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x18c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fccf 	bl	800200c <LL_ADC_GetOffsetChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002680:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002684:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002690:	2320      	movs	r3, #32
 8002692:	e004      	b.n	800269e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002694:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d105      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1a4>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0e9b      	lsrs	r3, r3, #26
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	e018      	b.n	80026ea <HAL_ADC_ConfigChannel+0x1d6>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80026cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80026d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80026dc:	2320      	movs	r3, #32
 80026de:	e004      	b.n	80026ea <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80026e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d106      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fc9e 	bl	8002038 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2101      	movs	r1, #1
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fc82 	bl	800200c <LL_ADC_GetOffsetChannel>
 8002708:	4603      	mov	r3, r0
 800270a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x214>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2101      	movs	r1, #1
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fc77 	bl	800200c <LL_ADC_GetOffsetChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	f003 021f 	and.w	r2, r3, #31
 8002726:	e01e      	b.n	8002766 <HAL_ADC_ConfigChannel+0x252>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2101      	movs	r1, #1
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fc6c 	bl	800200c <LL_ADC_GetOffsetChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002746:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800274a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800274e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e004      	b.n	8002764 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800275a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d105      	bne.n	800277e <HAL_ADC_ConfigChannel+0x26a>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	e018      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x29c>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002792:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002796:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800279a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80027a2:	2320      	movs	r3, #32
 80027a4:	e004      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80027a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d106      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2200      	movs	r2, #0
 80027ba:	2101      	movs	r1, #1
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fc3b 	bl	8002038 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2102      	movs	r1, #2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fc1f 	bl	800200c <LL_ADC_GetOffsetChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x2da>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2102      	movs	r1, #2
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fc14 	bl	800200c <LL_ADC_GetOffsetChannel>
 80027e4:	4603      	mov	r3, r0
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	f003 021f 	and.w	r2, r3, #31
 80027ec:	e01e      	b.n	800282c <HAL_ADC_ConfigChannel+0x318>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2102      	movs	r1, #2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fc09 	bl	800200c <LL_ADC_GetOffsetChannel>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800280c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002810:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002814:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800281c:	2320      	movs	r3, #32
 800281e:	e004      	b.n	800282a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002820:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002824:	fab3 f383 	clz	r3, r3
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002834:	2b00      	cmp	r3, #0
 8002836:	d105      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x330>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	0e9b      	lsrs	r3, r3, #26
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	e014      	b.n	800286e <HAL_ADC_ConfigChannel+0x35a>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002852:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002858:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002860:	2320      	movs	r3, #32
 8002862:	e004      	b.n	800286e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002864:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800286e:	429a      	cmp	r2, r3
 8002870:	d106      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	2102      	movs	r1, #2
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fbdc 	bl	8002038 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2103      	movs	r1, #3
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fbc0 	bl	800200c <LL_ADC_GetOffsetChannel>
 800288c:	4603      	mov	r3, r0
 800288e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10a      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x398>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2103      	movs	r1, #3
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fbb5 	bl	800200c <LL_ADC_GetOffsetChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	f003 021f 	and.w	r2, r3, #31
 80028aa:	e017      	b.n	80028dc <HAL_ADC_ConfigChannel+0x3c8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2103      	movs	r1, #3
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fbaa 	bl	800200c <LL_ADC_GetOffsetChannel>
 80028b8:	4603      	mov	r3, r0
 80028ba:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80028c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80028c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80028ce:	2320      	movs	r3, #32
 80028d0:	e003      	b.n	80028da <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80028d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x3e0>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0e9b      	lsrs	r3, r3, #26
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	e011      	b.n	8002918 <HAL_ADC_ConfigChannel+0x404>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002902:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002904:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002906:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800290c:	2320      	movs	r3, #32
 800290e:	e003      	b.n	8002918 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002910:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002918:	429a      	cmp	r2, r3
 800291a:	d106      	bne.n	800292a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2200      	movs	r2, #0
 8002922:	2103      	movs	r1, #3
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fb87 	bl	8002038 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fc66 	bl	8002200 <LL_ADC_IsEnabled>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 8140 	bne.w	8002bbc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6819      	ldr	r1, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	461a      	mov	r2, r3
 800294a:	f7ff fbe7 	bl	800211c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	4a8f      	ldr	r2, [pc, #572]	@ (8002b90 <HAL_ADC_ConfigChannel+0x67c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	f040 8131 	bne.w	8002bbc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10b      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x46e>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0e9b      	lsrs	r3, r3, #26
 8002970:	3301      	adds	r3, #1
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	2b09      	cmp	r3, #9
 8002978:	bf94      	ite	ls
 800297a:	2301      	movls	r3, #1
 800297c:	2300      	movhi	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	e019      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x4a2>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002992:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002994:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800299a:	2320      	movs	r3, #32
 800299c:	e003      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800299e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029a0:	fab3 f383 	clz	r3, r3
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2b09      	cmp	r3, #9
 80029ae:	bf94      	ite	ls
 80029b0:	2301      	movls	r3, #1
 80029b2:	2300      	movhi	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d079      	beq.n	8002aae <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d107      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x4c2>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	0e9b      	lsrs	r3, r3, #26
 80029cc:	3301      	adds	r3, #1
 80029ce:	069b      	lsls	r3, r3, #26
 80029d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029d4:	e015      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x4ee>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80029e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029e6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80029e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80029ee:	2320      	movs	r3, #32
 80029f0:	e003      	b.n	80029fa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80029f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	069b      	lsls	r3, r3, #26
 80029fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x50e>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	0e9b      	lsrs	r3, r3, #26
 8002a14:	3301      	adds	r3, #1
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	e017      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x53e>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a32:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	e003      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	3301      	adds	r3, #1
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	ea42 0103 	orr.w	r1, r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10a      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x564>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0e9b      	lsrs	r3, r3, #26
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f003 021f 	and.w	r2, r3, #31
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	051b      	lsls	r3, r3, #20
 8002a76:	e018      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x596>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a88:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002a90:	2320      	movs	r3, #32
 8002a92:	e003      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f003 021f 	and.w	r2, r3, #31
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	e081      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d107      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x5b6>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	0e9b      	lsrs	r3, r3, #26
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	069b      	lsls	r3, r3, #26
 8002ac4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ac8:	e015      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x5e2>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	e003      	b.n	8002aee <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	3301      	adds	r3, #1
 8002af0:	069b      	lsls	r3, r3, #26
 8002af2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x602>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	2101      	movs	r1, #1
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	e017      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x632>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	61bb      	str	r3, [r7, #24]
  return result;
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002b2e:	2320      	movs	r3, #32
 8002b30:	e003      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	2101      	movs	r1, #1
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	ea42 0103 	orr.w	r1, r2, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10d      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x65e>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0e9b      	lsrs	r3, r3, #26
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f003 021f 	and.w	r2, r3, #31
 8002b62:	4613      	mov	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4413      	add	r3, r2
 8002b68:	3b1e      	subs	r3, #30
 8002b6a:	051b      	lsls	r3, r3, #20
 8002b6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b70:	e01e      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x69c>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	60fb      	str	r3, [r7, #12]
  return result;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002b8a:	2320      	movs	r3, #32
 8002b8c:	e006      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x688>
 8002b8e:	bf00      	nop
 8002b90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f003 021f 	and.w	r2, r3, #31
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b1e      	subs	r3, #30
 8002baa:	051b      	lsls	r3, r3, #20
 8002bac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f7ff fa85 	bl	80020c6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b44      	ldr	r3, [pc, #272]	@ (8002cd4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d07a      	beq.n	8002cbe <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bc8:	4843      	ldr	r0, [pc, #268]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002bca:	f7ff f9ed 	bl	8001fa8 <LL_ADC_GetCommonPathInternalCh>
 8002bce:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a41      	ldr	r2, [pc, #260]	@ (8002cdc <HAL_ADC_ConfigChannel+0x7c8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d12c      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002be0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d126      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a3c      	ldr	r2, [pc, #240]	@ (8002ce0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0x6e8>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ce4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d15d      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c04:	4619      	mov	r1, r3
 8002c06:	4834      	ldr	r0, [pc, #208]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c08:	f7ff f9bb 	bl	8001f82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ce8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	4a36      	ldr	r2, [pc, #216]	@ (8002cec <HAL_ADC_ConfigChannel+0x7d8>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c26:	e002      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f9      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c34:	e040      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002cf0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d118      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d112      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a23      	ldr	r2, [pc, #140]	@ (8002ce0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_ADC_ConfigChannel+0x74c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a22      	ldr	r2, [pc, #136]	@ (8002ce4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d12d      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c68:	4619      	mov	r1, r3
 8002c6a:	481b      	ldr	r0, [pc, #108]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c6c:	f7ff f989 	bl	8001f82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c70:	e024      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d120      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d11a      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ce0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d115      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	480e      	ldr	r0, [pc, #56]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c9e:	f7ff f970 	bl	8001f82 <LL_ADC_SetCommonPathInternalCh>
 8002ca2:	e00c      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002cb6:	e002      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	37d8      	adds	r7, #216	@ 0xd8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	80080000 	.word	0x80080000
 8002cd8:	50040300 	.word	0x50040300
 8002cdc:	c7520000 	.word	0xc7520000
 8002ce0:	50040000 	.word	0x50040000
 8002ce4:	50040200 	.word	0x50040200
 8002ce8:	20000008 	.word	0x20000008
 8002cec:	053e2d63 	.word	0x053e2d63
 8002cf0:	cb840000 	.word	0xcb840000
 8002cf4:	80000001 	.word	0x80000001

08002cf8 <LL_ADC_IsEnabled>:
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <LL_ADC_IsEnabled+0x18>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <LL_ADC_IsEnabled+0x1a>
 8002d10:	2300      	movs	r3, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <LL_ADC_REG_IsConversionOngoing>:
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d101      	bne.n	8002d36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d36:	2300      	movs	r3, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_ADCEx_MultiModeConfigChannel>:
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b09f      	sub	sp, #124	@ 0x7c
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e093      	b.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d6e:	2300      	movs	r3, #0
 8002d70:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a47      	ldr	r2, [pc, #284]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d102      	bne.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d7c:	4b46      	ldr	r3, [pc, #280]	@ (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	e001      	b.n	8002d86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10b      	bne.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002da0:	2301      	movs	r3, #1
 8002da2:	e072      	b.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ffb9 	bl	8002d1e <LL_ADC_REG_IsConversionOngoing>
 8002dac:	6738      	str	r0, [r7, #112]	@ 0x70
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ffb3 	bl	8002d1e <LL_ADC_REG_IsConversionOngoing>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d154      	bne.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x124>
 8002dbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d151      	bne.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x124>
 8002dc4:	4b35      	ldr	r3, [pc, #212]	@ (8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d02c      	beq.n	8002e2a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 8002dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002de2:	035b      	lsls	r3, r3, #13
 8002de4:	430b      	orrs	r3, r1
 8002de6:	431a      	orrs	r2, r3
 8002de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	4829      	ldr	r0, [pc, #164]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dee:	f7ff ff83 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002df2:	4604      	mov	r4, r0
 8002df4:	4828      	ldr	r0, [pc, #160]	@ (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002df6:	f7ff ff7f 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	431c      	orrs	r4, r3
 8002dfe:	4828      	ldr	r0, [pc, #160]	@ (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e00:	f7ff ff7a 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4323      	orrs	r3, r4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d137      	bne.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e14:	f023 030f 	bic.w	r3, r3, #15
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	6811      	ldr	r1, [r2, #0]
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	6892      	ldr	r2, [r2, #8]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	431a      	orrs	r2, r3
 8002e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	e028      	b.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	4817      	ldr	r0, [pc, #92]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e38:	f7ff ff5e 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	4816      	ldr	r0, [pc, #88]	@ (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e40:	f7ff ff5a 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e44:	4603      	mov	r3, r0
 8002e46:	431c      	orrs	r4, r3
 8002e48:	4815      	ldr	r0, [pc, #84]	@ (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e4a:	f7ff ff55 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4323      	orrs	r3, r4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d112      	bne.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e5e:	f023 030f 	bic.w	r3, r3, #15
 8002e62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e64:	6093      	str	r3, [r2, #8]
 8002e66:	e009      	b.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002e7a:	e000      	b.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 8002e7c:	bf00      	nop
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002e86:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	377c      	adds	r7, #124	@ 0x7c
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd90      	pop	{r4, r7, pc}
 8002e92:	bf00      	nop
 8002e94:	50040000 	.word	0x50040000
 8002e98:	50040100 	.word	0x50040100
 8002e9c:	50040300 	.word	0x50040300
 8002ea0:	50040200 	.word	0x50040200

08002ea4 <__NVIC_SetPriorityGrouping>:
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	021a      	lsls	r2, r3, #8
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	4a04      	ldr	r2, [pc, #16]	@ (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	60d3      	str	r3, [r2, #12]
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_GetPriorityGrouping>:
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	4b04      	ldr	r3, [pc, #16]	@ (8002f04 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	4618      	mov	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_EnableIRQ>:
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	db0b      	blt.n	8002f32 <__NVIC_EnableIRQ+0x2a>
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	4907      	ldr	r1, [pc, #28]	@ (8002f40 <__NVIC_EnableIRQ+0x38>)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2001      	movs	r0, #1
 8002f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000e100 	.word	0xe000e100

08002f44 <__NVIC_SetPriority>:
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	71fb      	strb	r3, [r7, #7]
 8002f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	db0a      	blt.n	8002f6e <__NVIC_SetPriority+0x2a>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	490c      	ldr	r1, [pc, #48]	@ (8002f90 <__NVIC_SetPriority+0x4c>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	0112      	lsls	r2, r2, #4
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	440b      	add	r3, r1
 8002f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002f6c:	e00a      	b.n	8002f84 <__NVIC_SetPriority+0x40>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4908      	ldr	r1, [pc, #32]	@ (8002f94 <__NVIC_SetPriority+0x50>)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3b04      	subs	r3, #4
 8002f7c:	0112      	lsls	r2, r2, #4
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	440b      	add	r3, r1
 8002f82:	761a      	strb	r2, [r3, #24]
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000e100 	.word	0xe000e100
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <NVIC_EncodePriority>:
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	@ 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f1c3 0307 	rsb	r3, r3, #7
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	bf28      	it	cs
 8002fb6:	2304      	movcs	r3, #4
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d902      	bls.n	8002fc8 <NVIC_EncodePriority+0x30>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3b03      	subs	r3, #3
 8002fc6:	e000      	b.n	8002fca <NVIC_EncodePriority+0x32>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	401a      	ands	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	43d9      	mvns	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	400b      	ands	r3, r1
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3724      	adds	r7, #36	@ 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <SysTick_Config>:
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003010:	d301      	bcc.n	8003016 <SysTick_Config+0x16>
 8003012:	2301      	movs	r3, #1
 8003014:	e00f      	b.n	8003036 <SysTick_Config+0x36>
 8003016:	4a0a      	ldr	r2, [pc, #40]	@ (8003040 <SysTick_Config+0x40>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	6053      	str	r3, [r2, #4]
 800301e:	210f      	movs	r1, #15
 8003020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003024:	f7ff ff8e 	bl	8002f44 <__NVIC_SetPriority>
 8003028:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <SysTick_Config+0x40>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
 800302e:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <SysTick_Config+0x40>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	2300      	movs	r3, #0
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010

08003044 <HAL_NVIC_SetPriorityGrouping>:
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff29 	bl	8002ea4 <__NVIC_SetPriorityGrouping>
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_SetPriority>:
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	f7ff ff3e 	bl	8002eec <__NVIC_GetPriorityGrouping>
 8003070:	6178      	str	r0, [r7, #20]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ff8e 	bl	8002f98 <NVIC_EncodePriority>
 800307c:	4602      	mov	r2, r0
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff5d 	bl	8002f44 <__NVIC_SetPriority>
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_EnableIRQ>:
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	71fb      	strb	r3, [r7, #7]
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff31 	bl	8002f08 <__NVIC_EnableIRQ>
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_SYSTICK_Config>:
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ffa2 	bl	8003000 <SysTick_Config>
 80030bc:	4603      	mov	r3, r0
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_DAC_Init>:
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_DAC_Init+0x12>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e014      	b.n	8003102 <HAL_DAC_Init+0x3c>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	791b      	ldrb	r3, [r3, #4]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d105      	bne.n	80030ee <HAL_DAC_Init+0x28>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	715a      	strb	r2, [r3, #5]
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7fd fb31 	bl	8000750 <HAL_DAC_MspInit>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2202      	movs	r2, #2
 80030f2:	711a      	strb	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	711a      	strb	r2, [r3, #4]
 8003100:	2300      	movs	r3, #0
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_DAC_ConfigChannel>:
 800310a:	b580      	push	{r7, lr}
 800310c:	b088      	sub	sp, #32
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	795b      	ldrb	r3, [r3, #5]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_DAC_ConfigChannel+0x1c>
 8003122:	2302      	movs	r3, #2
 8003124:	e114      	b.n	8003350 <HAL_DAC_ConfigChannel+0x246>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	715a      	strb	r2, [r3, #5]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2202      	movs	r2, #2
 8003130:	711a      	strb	r2, [r3, #4]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b04      	cmp	r3, #4
 8003138:	f040 8081 	bne.w	800323e <HAL_DAC_ConfigChannel+0x134>
 800313c:	f7fe fede 	bl	8001efc <HAL_GetTick>
 8003140:	61f8      	str	r0, [r7, #28]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d140      	bne.n	80031ca <HAL_DAC_ConfigChannel+0xc0>
 8003148:	e018      	b.n	800317c <HAL_DAC_ConfigChannel+0x72>
 800314a:	f7fe fed7 	bl	8001efc <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	d911      	bls.n	800317c <HAL_DAC_ConfigChannel+0x72>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_DAC_ConfigChannel+0x72>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f043 0208 	orr.w	r2, r3, #8
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	611a      	str	r2, [r3, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2203      	movs	r2, #3
 8003176:	711a      	strb	r2, [r3, #4]
 8003178:	2303      	movs	r3, #3
 800317a:	e0e9      	b.n	8003350 <HAL_DAC_ConfigChannel+0x246>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003182:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1df      	bne.n	800314a <HAL_DAC_ConfigChannel+0x40>
 800318a:	2001      	movs	r0, #1
 800318c:	f7fe fec2 	bl	8001f14 <HAL_Delay>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	6992      	ldr	r2, [r2, #24]
 8003198:	641a      	str	r2, [r3, #64]	@ 0x40
 800319a:	e023      	b.n	80031e4 <HAL_DAC_ConfigChannel+0xda>
 800319c:	f7fe feae 	bl	8001efc <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d90f      	bls.n	80031ca <HAL_DAC_ConfigChannel+0xc0>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da0a      	bge.n	80031ca <HAL_DAC_ConfigChannel+0xc0>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f043 0208 	orr.w	r2, r3, #8
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	611a      	str	r2, [r3, #16]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2203      	movs	r2, #3
 80031c4:	711a      	strb	r2, [r3, #4]
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0c2      	b.n	8003350 <HAL_DAC_ConfigChannel+0x246>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	dbe3      	blt.n	800319c <HAL_DAC_ConfigChannel+0x92>
 80031d4:	2001      	movs	r0, #1
 80031d6:	f7fe fe9d 	bl	8001f14 <HAL_Delay>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	6992      	ldr	r2, [r2, #24]
 80031e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	ea02 0103 	and.w	r1, r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	69da      	ldr	r2, [r3, #28]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	409a      	lsls	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	649a      	str	r2, [r3, #72]	@ 0x48
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	21ff      	movs	r1, #255	@ 0xff
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	ea02 0103 	and.w	r1, r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	6a1a      	ldr	r2, [r3, #32]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	409a      	lsls	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d11d      	bne.n	8003282 <HAL_DAC_ConfigChannel+0x178>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	221f      	movs	r2, #31
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	639a      	str	r2, [r3, #56]	@ 0x38
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2207      	movs	r2, #7
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	400a      	ands	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6819      	ldr	r1, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	22c0      	movs	r2, #192	@ 0xc0
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43da      	mvns	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	400a      	ands	r2, r1
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	711a      	strb	r2, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	715a      	strb	r2, [r3, #5]
 800334e:	2300      	movs	r3, #0
 8003350:	4618      	mov	r0, r3
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_DMA_Init>:
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_DMA_Init+0x12>
 8003366:	2301      	movs	r3, #1
 8003368:	e098      	b.n	800349c <HAL_DMA_Init+0x144>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	4b4d      	ldr	r3, [pc, #308]	@ (80034a8 <HAL_DMA_Init+0x150>)
 8003372:	429a      	cmp	r2, r3
 8003374:	d80f      	bhi.n	8003396 <HAL_DMA_Init+0x3e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	4b4b      	ldr	r3, [pc, #300]	@ (80034ac <HAL_DMA_Init+0x154>)
 800337e:	4413      	add	r3, r2
 8003380:	4a4b      	ldr	r2, [pc, #300]	@ (80034b0 <HAL_DMA_Init+0x158>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	009a      	lsls	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	645a      	str	r2, [r3, #68]	@ 0x44
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a48      	ldr	r2, [pc, #288]	@ (80034b4 <HAL_DMA_Init+0x15c>)
 8003392:	641a      	str	r2, [r3, #64]	@ 0x40
 8003394:	e00e      	b.n	80033b4 <HAL_DMA_Init+0x5c>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	4b46      	ldr	r3, [pc, #280]	@ (80034b8 <HAL_DMA_Init+0x160>)
 800339e:	4413      	add	r3, r2
 80033a0:	4a43      	ldr	r2, [pc, #268]	@ (80034b0 <HAL_DMA_Init+0x158>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	091b      	lsrs	r3, r3, #4
 80033a8:	009a      	lsls	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	645a      	str	r2, [r3, #68]	@ 0x44
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a42      	ldr	r2, [pc, #264]	@ (80034bc <HAL_DMA_Init+0x164>)
 80033b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80033ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800340e:	d039      	beq.n	8003484 <HAL_DMA_Init+0x12c>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	4a27      	ldr	r2, [pc, #156]	@ (80034b4 <HAL_DMA_Init+0x15c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d11a      	bne.n	8003450 <HAL_DMA_Init+0xf8>
 800341a:	4b29      	ldr	r3, [pc, #164]	@ (80034c0 <HAL_DMA_Init+0x168>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	f003 031c 	and.w	r3, r3, #28
 8003426:	210f      	movs	r1, #15
 8003428:	fa01 f303 	lsl.w	r3, r1, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	4924      	ldr	r1, [pc, #144]	@ (80034c0 <HAL_DMA_Init+0x168>)
 8003430:	4013      	ands	r3, r2
 8003432:	600b      	str	r3, [r1, #0]
 8003434:	4b22      	ldr	r3, [pc, #136]	@ (80034c0 <HAL_DMA_Init+0x168>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003440:	f003 031c 	and.w	r3, r3, #28
 8003444:	fa01 f303 	lsl.w	r3, r1, r3
 8003448:	491d      	ldr	r1, [pc, #116]	@ (80034c0 <HAL_DMA_Init+0x168>)
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
 800344e:	e019      	b.n	8003484 <HAL_DMA_Init+0x12c>
 8003450:	4b1c      	ldr	r3, [pc, #112]	@ (80034c4 <HAL_DMA_Init+0x16c>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003458:	f003 031c 	and.w	r3, r3, #28
 800345c:	210f      	movs	r1, #15
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	4917      	ldr	r1, [pc, #92]	@ (80034c4 <HAL_DMA_Init+0x16c>)
 8003466:	4013      	ands	r3, r2
 8003468:	600b      	str	r3, [r1, #0]
 800346a:	4b16      	ldr	r3, [pc, #88]	@ (80034c4 <HAL_DMA_Init+0x16c>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6859      	ldr	r1, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	f003 031c 	and.w	r3, r3, #28
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	4911      	ldr	r1, [pc, #68]	@ (80034c4 <HAL_DMA_Init+0x16c>)
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	63da      	str	r2, [r3, #60]	@ 0x3c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800349a:	2300      	movs	r3, #0
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40020407 	.word	0x40020407
 80034ac:	bffdfff8 	.word	0xbffdfff8
 80034b0:	cccccccd 	.word	0xcccccccd
 80034b4:	40020000 	.word	0x40020000
 80034b8:	bffdfbf8 	.word	0xbffdfbf8
 80034bc:	40020400 	.word	0x40020400
 80034c0:	400200a8 	.word	0x400200a8
 80034c4:	400204a8 	.word	0x400204a8

080034c8 <HAL_DMA_Start_IT>:
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	2300      	movs	r3, #0
 80034d8:	75fb      	strb	r3, [r7, #23]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_DMA_Start_IT+0x20>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e04b      	b.n	8003580 <HAL_DMA_Start_IT+0xb8>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d13a      	bne.n	8003572 <HAL_DMA_Start_IT+0xaa>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	63da      	str	r2, [r3, #60]	@ 0x3c
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0201 	bic.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f95f 	bl	80037e4 <DMA_SetConfig>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_DMA_Start_IT+0x78>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 020e 	orr.w	r2, r2, #14
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e00f      	b.n	8003560 <HAL_DMA_Start_IT+0x98>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0204 	bic.w	r2, r2, #4
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 020a 	orr.w	r2, r2, #10
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e005      	b.n	800357e <HAL_DMA_Start_IT+0xb6>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800357a:	2302      	movs	r3, #2
 800357c:	75fb      	strb	r3, [r7, #23]
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_DMA_Abort>:
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	2300      	movs	r3, #0
 8003592:	73fb      	strb	r3, [r7, #15]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d008      	beq.n	80035b2 <HAL_DMA_Abort+0x2a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2204      	movs	r2, #4
 80035a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80035ae:	2301      	movs	r3, #1
 80035b0:	e022      	b.n	80035f8 <HAL_DMA_Abort+0x70>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 020e 	bic.w	r2, r2, #14
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d6:	f003 021c 	and.w	r2, r3, #28
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_DMA_Abort_IT>:
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	2300      	movs	r3, #0
 800360e:	73fb      	strb	r3, [r7, #15]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d005      	beq.n	8003628 <HAL_DMA_Abort_IT+0x24>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2204      	movs	r2, #4
 8003620:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
 8003626:	e029      	b.n	800367c <HAL_DMA_Abort_IT+0x78>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 020e 	bic.w	r2, r2, #14
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364c:	f003 021c 	and.w	r2, r3, #28
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	2101      	movs	r1, #1
 8003656:	fa01 f202 	lsl.w	r2, r1, r2
 800365a:	605a      	str	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_DMA_Abort_IT+0x78>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_DMA_IRQHandler>:
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	f003 031c 	and.w	r3, r3, #28
 80036a6:	2204      	movs	r2, #4
 80036a8:	409a      	lsls	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d026      	beq.n	8003700 <HAL_DMA_IRQHandler+0x7a>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d021      	beq.n	8003700 <HAL_DMA_IRQHandler+0x7a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d107      	bne.n	80036da <HAL_DMA_IRQHandler+0x54>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0204 	bic.w	r2, r2, #4
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	f003 021c 	and.w	r2, r3, #28
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	2104      	movs	r1, #4
 80036e8:	fa01 f202 	lsl.w	r2, r1, r2
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d071      	beq.n	80037da <HAL_DMA_IRQHandler+0x154>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
 80036fe:	e06c      	b.n	80037da <HAL_DMA_IRQHandler+0x154>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003704:	f003 031c 	and.w	r3, r3, #28
 8003708:	2202      	movs	r2, #2
 800370a:	409a      	lsls	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d02e      	beq.n	8003772 <HAL_DMA_IRQHandler+0xec>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d029      	beq.n	8003772 <HAL_DMA_IRQHandler+0xec>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10b      	bne.n	8003744 <HAL_DMA_IRQHandler+0xbe>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 020a 	bic.w	r2, r2, #10
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003748:	f003 021c 	and.w	r2, r3, #28
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	2102      	movs	r1, #2
 8003752:	fa01 f202 	lsl.w	r2, r1, r2
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d038      	beq.n	80037da <HAL_DMA_IRQHandler+0x154>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
 8003770:	e033      	b.n	80037da <HAL_DMA_IRQHandler+0x154>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003776:	f003 031c 	and.w	r3, r3, #28
 800377a:	2208      	movs	r2, #8
 800377c:	409a      	lsls	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4013      	ands	r3, r2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d02a      	beq.n	80037dc <HAL_DMA_IRQHandler+0x156>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d025      	beq.n	80037dc <HAL_DMA_IRQHandler+0x156>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 020e 	bic.w	r2, r2, #14
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a4:	f003 021c 	and.w	r2, r3, #28
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ac:	2101      	movs	r1, #1
 80037ae:	fa01 f202 	lsl.w	r2, r1, r2
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d004      	beq.n	80037dc <HAL_DMA_IRQHandler+0x156>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <DMA_SetConfig>:
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	f003 021c 	and.w	r2, r3, #28
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	2101      	movs	r1, #1
 8003800:	fa01 f202 	lsl.w	r2, r1, r2
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b10      	cmp	r3, #16
 8003814:	d108      	bne.n	8003828 <DMA_SetConfig+0x44>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	609a      	str	r2, [r3, #8]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	e007      	b.n	8003838 <DMA_SetConfig+0x54>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_GPIO_Init>:
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	e17f      	b.n	8003b54 <HAL_GPIO_Init+0x310>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	2101      	movs	r1, #1
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	fa01 f303 	lsl.w	r3, r1, r3
 8003860:	4013      	ands	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8171 	beq.w	8003b4e <HAL_GPIO_Init+0x30a>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d005      	beq.n	8003884 <HAL_GPIO_Init+0x40>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d130      	bne.n	80038e6 <HAL_GPIO_Init+0xa2>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4013      	ands	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	2201      	movs	r2, #1
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4013      	ands	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	f003 0201 	and.w	r2, r3, #1
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d118      	bne.n	8003924 <HAL_GPIO_Init+0xe0>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	2201      	movs	r2, #1
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	08db      	lsrs	r3, r3, #3
 800390e:	f003 0201 	and.w	r2, r3, #1
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b03      	cmp	r3, #3
 800392e:	d017      	beq.n	8003960 <HAL_GPIO_Init+0x11c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	2203      	movs	r2, #3
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	60da      	str	r2, [r3, #12]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d123      	bne.n	80039b4 <HAL_GPIO_Init+0x170>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	08da      	lsrs	r2, r3, #3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3208      	adds	r2, #8
 8003974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	220f      	movs	r2, #15
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4013      	ands	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	08da      	lsrs	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3208      	adds	r2, #8
 80039ae:	6939      	ldr	r1, [r7, #16]
 80039b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	2203      	movs	r2, #3
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0203 	and.w	r2, r3, #3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80ac 	beq.w	8003b4e <HAL_GPIO_Init+0x30a>
 80039f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003b74 <HAL_GPIO_Init+0x330>)
 80039f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fa:	4a5e      	ldr	r2, [pc, #376]	@ (8003b74 <HAL_GPIO_Init+0x330>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a02:	4b5c      	ldr	r3, [pc, #368]	@ (8003b74 <HAL_GPIO_Init+0x330>)
 8003a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4a5a      	ldr	r2, [pc, #360]	@ (8003b78 <HAL_GPIO_Init+0x334>)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	3302      	adds	r3, #2
 8003a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	220f      	movs	r2, #15
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a38:	d025      	beq.n	8003a86 <HAL_GPIO_Init+0x242>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a4f      	ldr	r2, [pc, #316]	@ (8003b7c <HAL_GPIO_Init+0x338>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01f      	beq.n	8003a82 <HAL_GPIO_Init+0x23e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a4e      	ldr	r2, [pc, #312]	@ (8003b80 <HAL_GPIO_Init+0x33c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d019      	beq.n	8003a7e <HAL_GPIO_Init+0x23a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a4d      	ldr	r2, [pc, #308]	@ (8003b84 <HAL_GPIO_Init+0x340>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_GPIO_Init+0x236>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a4c      	ldr	r2, [pc, #304]	@ (8003b88 <HAL_GPIO_Init+0x344>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00d      	beq.n	8003a76 <HAL_GPIO_Init+0x232>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b8c <HAL_GPIO_Init+0x348>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <HAL_GPIO_Init+0x22e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a4a      	ldr	r2, [pc, #296]	@ (8003b90 <HAL_GPIO_Init+0x34c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <HAL_GPIO_Init+0x22a>
 8003a6a:	2306      	movs	r3, #6
 8003a6c:	e00c      	b.n	8003a88 <HAL_GPIO_Init+0x244>
 8003a6e:	2307      	movs	r3, #7
 8003a70:	e00a      	b.n	8003a88 <HAL_GPIO_Init+0x244>
 8003a72:	2305      	movs	r3, #5
 8003a74:	e008      	b.n	8003a88 <HAL_GPIO_Init+0x244>
 8003a76:	2304      	movs	r3, #4
 8003a78:	e006      	b.n	8003a88 <HAL_GPIO_Init+0x244>
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e004      	b.n	8003a88 <HAL_GPIO_Init+0x244>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e002      	b.n	8003a88 <HAL_GPIO_Init+0x244>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <HAL_GPIO_Init+0x244>
 8003a86:	2300      	movs	r3, #0
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	f002 0203 	and.w	r2, r2, #3
 8003a8e:	0092      	lsls	r2, r2, #2
 8003a90:	4093      	lsls	r3, r2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	4937      	ldr	r1, [pc, #220]	@ (8003b78 <HAL_GPIO_Init+0x334>)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	089b      	lsrs	r3, r3, #2
 8003a9e:	3302      	adds	r3, #2
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8003b94 <HAL_GPIO_Init+0x350>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_Init+0x286>
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	4a32      	ldr	r2, [pc, #200]	@ (8003b94 <HAL_GPIO_Init+0x350>)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	6093      	str	r3, [r2, #8]
 8003ad0:	4b30      	ldr	r3, [pc, #192]	@ (8003b94 <HAL_GPIO_Init+0x350>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_GPIO_Init+0x2b0>
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	4a27      	ldr	r2, [pc, #156]	@ (8003b94 <HAL_GPIO_Init+0x350>)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	60d3      	str	r3, [r2, #12]
 8003afa:	4b26      	ldr	r3, [pc, #152]	@ (8003b94 <HAL_GPIO_Init+0x350>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	43db      	mvns	r3, r3
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4013      	ands	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_GPIO_Init+0x2da>
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b94 <HAL_GPIO_Init+0x350>)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	6053      	str	r3, [r2, #4]
 8003b24:	4b1b      	ldr	r3, [pc, #108]	@ (8003b94 <HAL_GPIO_Init+0x350>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4013      	ands	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_GPIO_Init+0x304>
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	4a12      	ldr	r2, [pc, #72]	@ (8003b94 <HAL_GPIO_Init+0x350>)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	3301      	adds	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f47f ae78 	bne.w	8003854 <HAL_GPIO_Init+0x10>
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40010000 	.word	0x40010000
 8003b7c:	48000400 	.word	0x48000400
 8003b80:	48000800 	.word	0x48000800
 8003b84:	48000c00 	.word	0x48000c00
 8003b88:	48001000 	.word	0x48001000
 8003b8c:	48001400 	.word	0x48001400
 8003b90:	48001800 	.word	0x48001800
 8003b94:	40010400 	.word	0x40010400

08003b98 <HAL_GPIO_WritePin>:
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	707b      	strb	r3, [r7, #1]
 8003ba8:	787b      	ldrb	r3, [r7, #1]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_WritePin+0x1e>
 8003bae:	887a      	ldrh	r2, [r7, #2]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	619a      	str	r2, [r3, #24]
 8003bb4:	e002      	b.n	8003bbc <HAL_GPIO_WritePin+0x24>
 8003bb6:	887a      	ldrh	r2, [r7, #2]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_GPIO_TogglePin>:
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4013      	ands	r3, r2
 8003be0:	041a      	lsls	r2, r3, #16
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	43d9      	mvns	r1, r3
 8003be6:	887b      	ldrh	r3, [r7, #2]
 8003be8:	400b      	ands	r3, r1
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	619a      	str	r2, [r3, #24]
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_I2C_Init>:
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_I2C_Init+0x12>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e08d      	b.n	8003d2a <HAL_I2C_Init+0x12e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_I2C_Init+0x2c>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fc ff20 	bl	8000a68 <HAL_I2C_MspInit>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2224      	movs	r2, #36	@ 0x24
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c4c:	611a      	str	r2, [r3, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c5c:	609a      	str	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d107      	bne.n	8003c76 <HAL_I2C_Init+0x7a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	e006      	b.n	8003c84 <HAL_I2C_Init+0x88>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d108      	bne.n	8003c9e <HAL_I2C_Init+0xa2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c9a:	605a      	str	r2, [r3, #4]
 8003c9c:	e007      	b.n	8003cae <HAL_I2C_Init+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cc0:	6053      	str	r3, [r2, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cd0:	60da      	str	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	ea42 0103 	orr.w	r1, r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	021a      	lsls	r2, r3, #8
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69d9      	ldr	r1, [r3, #28]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	@ 0x44
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d28:	2300      	movs	r3, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <HAL_I2C_Master_Transmit>:
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	460b      	mov	r3, r1
 8003d42:	817b      	strh	r3, [r7, #10]
 8003d44:	4613      	mov	r3, r2
 8003d46:	813b      	strh	r3, [r7, #8]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	f040 80fd 	bne.w	8003f50 <HAL_I2C_Master_Transmit+0x21c>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_I2C_Master_Transmit+0x30>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e0f6      	b.n	8003f52 <HAL_I2C_Master_Transmit+0x21e>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d6c:	f7fe f8c6 	bl	8001efc <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	2319      	movs	r3, #25
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fce0 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_Master_Transmit+0x5a>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e0e1      	b.n	8003f52 <HAL_I2C_Master_Transmit+0x21e>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2221      	movs	r2, #33	@ 0x21
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2210      	movs	r2, #16
 8003d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	645a      	str	r2, [r3, #68]	@ 0x44
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	893a      	ldrh	r2, [r7, #8]
 8003dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2bff      	cmp	r3, #255	@ 0xff
 8003dbe:	d906      	bls.n	8003dce <HAL_I2C_Master_Transmit+0x9a>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	22ff      	movs	r2, #255	@ 0xff
 8003dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003dc6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	e007      	b.n	8003dde <HAL_I2C_Master_Transmit+0xaa>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003dd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d024      	beq.n	8003e30 <HAL_I2C_Master_Transmit+0xfc>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	625a      	str	r2, [r3, #36]	@ 0x24
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	8979      	ldrh	r1, [r7, #10]
 8003e22:	4b4e      	ldr	r3, [pc, #312]	@ (8003f5c <HAL_I2C_Master_Transmit+0x228>)
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 fedb 	bl	8004be4 <I2C_TransferConfig>
 8003e2e:	e066      	b.n	8003efe <HAL_I2C_Master_Transmit+0x1ca>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	8979      	ldrh	r1, [r7, #10]
 8003e38:	4b48      	ldr	r3, [pc, #288]	@ (8003f5c <HAL_I2C_Master_Transmit+0x228>)
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fed0 	bl	8004be4 <I2C_TransferConfig>
 8003e44:	e05b      	b.n	8003efe <HAL_I2C_Master_Transmit+0x1ca>
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	6a39      	ldr	r1, [r7, #32]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fcd3 	bl	80047f6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_Master_Transmit+0x126>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07b      	b.n	8003f52 <HAL_I2C_Master_Transmit+0x21e>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	781a      	ldrb	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d034      	beq.n	8003efe <HAL_I2C_Master_Transmit+0x1ca>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d130      	bne.n	8003efe <HAL_I2C_Master_Transmit+0x1ca>
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2180      	movs	r1, #128	@ 0x80
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fc4c 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_I2C_Master_Transmit+0x182>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e04d      	b.n	8003f52 <HAL_I2C_Master_Transmit+0x21e>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2bff      	cmp	r3, #255	@ 0xff
 8003ebe:	d90e      	bls.n	8003ede <HAL_I2C_Master_Transmit+0x1aa>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	22ff      	movs	r2, #255	@ 0xff
 8003ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	8979      	ldrh	r1, [r7, #10]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fe84 	bl	8004be4 <I2C_TransferConfig>
 8003edc:	e00f      	b.n	8003efe <HAL_I2C_Master_Transmit+0x1ca>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	8979      	ldrh	r1, [r7, #10]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 fe73 	bl	8004be4 <I2C_TransferConfig>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d19e      	bne.n	8003e46 <HAL_I2C_Master_Transmit+0x112>
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	6a39      	ldr	r1, [r7, #32]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 fcb9 	bl	8004884 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_I2C_Master_Transmit+0x1e8>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e01a      	b.n	8003f52 <HAL_I2C_Master_Transmit+0x21e>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2220      	movs	r2, #32
 8003f22:	61da      	str	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <HAL_I2C_Master_Transmit+0x22c>)
 8003f30:	400b      	ands	r3, r1
 8003f32:	6053      	str	r3, [r2, #4]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e000      	b.n	8003f52 <HAL_I2C_Master_Transmit+0x21e>
 8003f50:	2302      	movs	r3, #2
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	80002000 	.word	0x80002000
 8003f60:	fe00e800 	.word	0xfe00e800

08003f64 <HAL_I2C_Master_Receive>:
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	460b      	mov	r3, r1
 8003f72:	817b      	strh	r3, [r7, #10]
 8003f74:	4613      	mov	r3, r2
 8003f76:	813b      	strh	r3, [r7, #8]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	f040 80db 	bne.w	800413c <HAL_I2C_Master_Receive+0x1d8>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_I2C_Master_Receive+0x30>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e0d4      	b.n	800413e <HAL_I2C_Master_Receive+0x1da>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f9c:	f7fd ffae 	bl	8001efc <HAL_GetTick>
 8003fa0:	6178      	str	r0, [r7, #20]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2319      	movs	r3, #25
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 fbc8 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_I2C_Master_Receive+0x5a>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e0bf      	b.n	800413e <HAL_I2C_Master_Receive+0x1da>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2222      	movs	r2, #34	@ 0x22
 8003fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2210      	movs	r2, #16
 8003fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	645a      	str	r2, [r3, #68]	@ 0x44
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	893a      	ldrh	r2, [r7, #8]
 8003fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2bff      	cmp	r3, #255	@ 0xff
 8003fee:	d90e      	bls.n	800400e <HAL_I2C_Master_Receive+0xaa>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	8979      	ldrh	r1, [r7, #10]
 8003ffe:	4b52      	ldr	r3, [pc, #328]	@ (8004148 <HAL_I2C_Master_Receive+0x1e4>)
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fdec 	bl	8004be4 <I2C_TransferConfig>
 800400c:	e06d      	b.n	80040ea <HAL_I2C_Master_Receive+0x186>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401c:	b2da      	uxtb	r2, r3
 800401e:	8979      	ldrh	r1, [r7, #10]
 8004020:	4b49      	ldr	r3, [pc, #292]	@ (8004148 <HAL_I2C_Master_Receive+0x1e4>)
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fddb 	bl	8004be4 <I2C_TransferConfig>
 800402e:	e05c      	b.n	80040ea <HAL_I2C_Master_Receive+0x186>
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	6a39      	ldr	r1, [r7, #32]
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fc69 	bl	800490c <I2C_WaitOnRXNEFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_I2C_Master_Receive+0xe0>
 8004040:	2301      	movs	r3, #1
 8004042:	e07c      	b.n	800413e <HAL_I2C_Master_Receive+0x1da>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	625a      	str	r2, [r3, #36]	@ 0x24
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d034      	beq.n	80040ea <HAL_I2C_Master_Receive+0x186>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	d130      	bne.n	80040ea <HAL_I2C_Master_Receive+0x186>
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	2200      	movs	r2, #0
 8004090:	2180      	movs	r1, #128	@ 0x80
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 fb56 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Master_Receive+0x13e>
 800409e:	2301      	movs	r3, #1
 80040a0:	e04d      	b.n	800413e <HAL_I2C_Master_Receive+0x1da>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2bff      	cmp	r3, #255	@ 0xff
 80040aa:	d90e      	bls.n	80040ca <HAL_I2C_Master_Receive+0x166>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	22ff      	movs	r2, #255	@ 0xff
 80040b0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	8979      	ldrh	r1, [r7, #10]
 80040ba:	2300      	movs	r3, #0
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fd8e 	bl	8004be4 <I2C_TransferConfig>
 80040c8:	e00f      	b.n	80040ea <HAL_I2C_Master_Receive+0x186>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	8979      	ldrh	r1, [r7, #10]
 80040dc:	2300      	movs	r3, #0
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fd7d 	bl	8004be4 <I2C_TransferConfig>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d19d      	bne.n	8004030 <HAL_I2C_Master_Receive+0xcc>
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	6a39      	ldr	r1, [r7, #32]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 fbc3 	bl	8004884 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_I2C_Master_Receive+0x1a4>
 8004104:	2301      	movs	r3, #1
 8004106:	e01a      	b.n	800413e <HAL_I2C_Master_Receive+0x1da>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2220      	movs	r2, #32
 800410e:	61da      	str	r2, [r3, #28]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6859      	ldr	r1, [r3, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4b0c      	ldr	r3, [pc, #48]	@ (800414c <HAL_I2C_Master_Receive+0x1e8>)
 800411c:	400b      	ands	r3, r1
 800411e:	6053      	str	r3, [r2, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004138:	2300      	movs	r3, #0
 800413a:	e000      	b.n	800413e <HAL_I2C_Master_Receive+0x1da>
 800413c:	2302      	movs	r3, #2
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	80002400 	.word	0x80002400
 800414c:	fe00e800 	.word	0xfe00e800

08004150 <HAL_I2C_Mem_Write>:
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	4608      	mov	r0, r1
 800415a:	4611      	mov	r1, r2
 800415c:	461a      	mov	r2, r3
 800415e:	4603      	mov	r3, r0
 8004160:	817b      	strh	r3, [r7, #10]
 8004162:	460b      	mov	r3, r1
 8004164:	813b      	strh	r3, [r7, #8]
 8004166:	4613      	mov	r3, r2
 8004168:	80fb      	strh	r3, [r7, #6]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b20      	cmp	r3, #32
 8004174:	f040 80f9 	bne.w	800436a <HAL_I2C_Mem_Write+0x21a>
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_I2C_Mem_Write+0x34>
 800417e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004180:	2b00      	cmp	r3, #0
 8004182:	d105      	bne.n	8004190 <HAL_I2C_Mem_Write+0x40>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800418a:	645a      	str	r2, [r3, #68]	@ 0x44
 800418c:	2301      	movs	r3, #1
 800418e:	e0ed      	b.n	800436c <HAL_I2C_Mem_Write+0x21c>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_I2C_Mem_Write+0x4e>
 800419a:	2302      	movs	r3, #2
 800419c:	e0e6      	b.n	800436c <HAL_I2C_Mem_Write+0x21c>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041a6:	f7fd fea9 	bl	8001efc <HAL_GetTick>
 80041aa:	6178      	str	r0, [r7, #20]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	2319      	movs	r3, #25
 80041b2:	2201      	movs	r2, #1
 80041b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 fac3 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_I2C_Mem_Write+0x78>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0d1      	b.n	800436c <HAL_I2C_Mem_Write+0x21c>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2221      	movs	r2, #33	@ 0x21
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2240      	movs	r2, #64	@ 0x40
 80041d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a3a      	ldr	r2, [r7, #32]
 80041e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80041f0:	88f8      	ldrh	r0, [r7, #6]
 80041f2:	893a      	ldrh	r2, [r7, #8]
 80041f4:	8979      	ldrh	r1, [r7, #10]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	9301      	str	r3, [sp, #4]
 80041fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	4603      	mov	r3, r0
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f9d3 	bl	80045ac <I2C_RequestMemoryWrite>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_I2C_Mem_Write+0xc8>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004214:	2301      	movs	r3, #1
 8004216:	e0a9      	b.n	800436c <HAL_I2C_Mem_Write+0x21c>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	2bff      	cmp	r3, #255	@ 0xff
 8004220:	d90e      	bls.n	8004240 <HAL_I2C_Mem_Write+0xf0>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	22ff      	movs	r2, #255	@ 0xff
 8004226:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422c:	b2da      	uxtb	r2, r3
 800422e:	8979      	ldrh	r1, [r7, #10]
 8004230:	2300      	movs	r3, #0
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 fcd3 	bl	8004be4 <I2C_TransferConfig>
 800423e:	e00f      	b.n	8004260 <HAL_I2C_Mem_Write+0x110>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	851a      	strh	r2, [r3, #40]	@ 0x28
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424e:	b2da      	uxtb	r2, r3
 8004250:	8979      	ldrh	r1, [r7, #10]
 8004252:	2300      	movs	r3, #0
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fcc2 	bl	8004be4 <I2C_TransferConfig>
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fac6 	bl	80047f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_I2C_Mem_Write+0x124>
 8004270:	2301      	movs	r3, #1
 8004272:	e07b      	b.n	800436c <HAL_I2C_Mem_Write+0x21c>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	781a      	ldrb	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	625a      	str	r2, [r3, #36]	@ 0x24
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d034      	beq.n	8004318 <HAL_I2C_Mem_Write+0x1c8>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d130      	bne.n	8004318 <HAL_I2C_Mem_Write+0x1c8>
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042bc:	2200      	movs	r2, #0
 80042be:	2180      	movs	r1, #128	@ 0x80
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fa3f 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_I2C_Mem_Write+0x180>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e04d      	b.n	800436c <HAL_I2C_Mem_Write+0x21c>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2bff      	cmp	r3, #255	@ 0xff
 80042d8:	d90e      	bls.n	80042f8 <HAL_I2C_Mem_Write+0x1a8>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	22ff      	movs	r2, #255	@ 0xff
 80042de:	851a      	strh	r2, [r3, #40]	@ 0x28
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	8979      	ldrh	r1, [r7, #10]
 80042e8:	2300      	movs	r3, #0
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fc77 	bl	8004be4 <I2C_TransferConfig>
 80042f6:	e00f      	b.n	8004318 <HAL_I2C_Mem_Write+0x1c8>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004306:	b2da      	uxtb	r2, r3
 8004308:	8979      	ldrh	r1, [r7, #10]
 800430a:	2300      	movs	r3, #0
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fc66 	bl	8004be4 <I2C_TransferConfig>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d19e      	bne.n	8004260 <HAL_I2C_Mem_Write+0x110>
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 faac 	bl	8004884 <I2C_WaitOnSTOPFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_I2C_Mem_Write+0x1e6>
 8004332:	2301      	movs	r3, #1
 8004334:	e01a      	b.n	800436c <HAL_I2C_Mem_Write+0x21c>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2220      	movs	r2, #32
 800433c:	61da      	str	r2, [r3, #28]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b0a      	ldr	r3, [pc, #40]	@ (8004374 <HAL_I2C_Mem_Write+0x224>)
 800434a:	400b      	ands	r3, r1
 800434c:	6053      	str	r3, [r2, #4]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004366:	2300      	movs	r3, #0
 8004368:	e000      	b.n	800436c <HAL_I2C_Mem_Write+0x21c>
 800436a:	2302      	movs	r3, #2
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	fe00e800 	.word	0xfe00e800

08004378 <HAL_I2C_Mem_Read>:
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	4608      	mov	r0, r1
 8004382:	4611      	mov	r1, r2
 8004384:	461a      	mov	r2, r3
 8004386:	4603      	mov	r3, r0
 8004388:	817b      	strh	r3, [r7, #10]
 800438a:	460b      	mov	r3, r1
 800438c:	813b      	strh	r3, [r7, #8]
 800438e:	4613      	mov	r3, r2
 8004390:	80fb      	strh	r3, [r7, #6]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b20      	cmp	r3, #32
 800439c:	f040 80fd 	bne.w	800459a <HAL_I2C_Mem_Read+0x222>
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <HAL_I2C_Mem_Read+0x34>
 80043a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d105      	bne.n	80043b8 <HAL_I2C_Mem_Read+0x40>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0f1      	b.n	800459c <HAL_I2C_Mem_Read+0x224>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_I2C_Mem_Read+0x4e>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e0ea      	b.n	800459c <HAL_I2C_Mem_Read+0x224>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ce:	f7fd fd95 	bl	8001efc <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	2319      	movs	r3, #25
 80043da:	2201      	movs	r2, #1
 80043dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f9af 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_I2C_Mem_Read+0x78>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0d5      	b.n	800459c <HAL_I2C_Mem_Read+0x224>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2222      	movs	r2, #34	@ 0x22
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2240      	movs	r2, #64	@ 0x40
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	645a      	str	r2, [r3, #68]	@ 0x44
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a3a      	ldr	r2, [r7, #32]
 800440a:	625a      	str	r2, [r3, #36]	@ 0x24
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004410:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	635a      	str	r2, [r3, #52]	@ 0x34
 8004418:	88f8      	ldrh	r0, [r7, #6]
 800441a:	893a      	ldrh	r2, [r7, #8]
 800441c:	8979      	ldrh	r1, [r7, #10]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	4603      	mov	r3, r0
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f913 	bl	8004654 <I2C_RequestMemoryRead>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_I2C_Mem_Read+0xc8>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800443c:	2301      	movs	r3, #1
 800443e:	e0ad      	b.n	800459c <HAL_I2C_Mem_Read+0x224>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2bff      	cmp	r3, #255	@ 0xff
 8004448:	d90e      	bls.n	8004468 <HAL_I2C_Mem_Read+0xf0>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004454:	b2da      	uxtb	r2, r3
 8004456:	8979      	ldrh	r1, [r7, #10]
 8004458:	4b52      	ldr	r3, [pc, #328]	@ (80045a4 <HAL_I2C_Mem_Read+0x22c>)
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 fbbf 	bl	8004be4 <I2C_TransferConfig>
 8004466:	e00f      	b.n	8004488 <HAL_I2C_Mem_Read+0x110>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004476:	b2da      	uxtb	r2, r3
 8004478:	8979      	ldrh	r1, [r7, #10]
 800447a:	4b4a      	ldr	r3, [pc, #296]	@ (80045a4 <HAL_I2C_Mem_Read+0x22c>)
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fbae 	bl	8004be4 <I2C_TransferConfig>
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448e:	2200      	movs	r2, #0
 8004490:	2104      	movs	r1, #4
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f956 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_I2C_Mem_Read+0x12a>
 800449e:	2301      	movs	r3, #1
 80044a0:	e07c      	b.n	800459c <HAL_I2C_Mem_Read+0x224>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d034      	beq.n	8004548 <HAL_I2C_Mem_Read+0x1d0>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d130      	bne.n	8004548 <HAL_I2C_Mem_Read+0x1d0>
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ec:	2200      	movs	r2, #0
 80044ee:	2180      	movs	r1, #128	@ 0x80
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f927 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_I2C_Mem_Read+0x188>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e04d      	b.n	800459c <HAL_I2C_Mem_Read+0x224>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	2bff      	cmp	r3, #255	@ 0xff
 8004508:	d90e      	bls.n	8004528 <HAL_I2C_Mem_Read+0x1b0>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004514:	b2da      	uxtb	r2, r3
 8004516:	8979      	ldrh	r1, [r7, #10]
 8004518:	2300      	movs	r3, #0
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fb5f 	bl	8004be4 <I2C_TransferConfig>
 8004526:	e00f      	b.n	8004548 <HAL_I2C_Mem_Read+0x1d0>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004536:	b2da      	uxtb	r2, r3
 8004538:	8979      	ldrh	r1, [r7, #10]
 800453a:	2300      	movs	r3, #0
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fb4e 	bl	8004be4 <I2C_TransferConfig>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d19a      	bne.n	8004488 <HAL_I2C_Mem_Read+0x110>
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f994 	bl	8004884 <I2C_WaitOnSTOPFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_I2C_Mem_Read+0x1ee>
 8004562:	2301      	movs	r3, #1
 8004564:	e01a      	b.n	800459c <HAL_I2C_Mem_Read+0x224>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2220      	movs	r2, #32
 800456c:	61da      	str	r2, [r3, #28]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6859      	ldr	r1, [r3, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <HAL_I2C_Mem_Read+0x230>)
 800457a:	400b      	ands	r3, r1
 800457c:	6053      	str	r3, [r2, #4]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <HAL_I2C_Mem_Read+0x224>
 800459a:	2302      	movs	r3, #2
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	80002400 	.word	0x80002400
 80045a8:	fe00e800 	.word	0xfe00e800

080045ac <I2C_RequestMemoryWrite>:
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	461a      	mov	r2, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	817b      	strh	r3, [r7, #10]
 80045be:	460b      	mov	r3, r1
 80045c0:	813b      	strh	r3, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
 80045c6:	88fb      	ldrh	r3, [r7, #6]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	8979      	ldrh	r1, [r7, #10]
 80045cc:	4b20      	ldr	r3, [pc, #128]	@ (8004650 <I2C_RequestMemoryWrite+0xa4>)
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 fb05 	bl	8004be4 <I2C_TransferConfig>
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	69b9      	ldr	r1, [r7, #24]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f909 	bl	80047f6 <I2C_WaitOnTXISFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <I2C_RequestMemoryWrite+0x42>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e02c      	b.n	8004648 <I2C_RequestMemoryWrite+0x9c>
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d105      	bne.n	8004600 <I2C_RequestMemoryWrite+0x54>
 80045f4:	893b      	ldrh	r3, [r7, #8]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80045fe:	e015      	b.n	800462c <I2C_RequestMemoryWrite+0x80>
 8004600:	893b      	ldrh	r3, [r7, #8]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	b29b      	uxth	r3, r3
 8004606:	b2da      	uxtb	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	629a      	str	r2, [r3, #40]	@ 0x28
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	69b9      	ldr	r1, [r7, #24]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f8ef 	bl	80047f6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <I2C_RequestMemoryWrite+0x76>
 800461e:	2301      	movs	r3, #1
 8004620:	e012      	b.n	8004648 <I2C_RequestMemoryWrite+0x9c>
 8004622:	893b      	ldrh	r3, [r7, #8]
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	629a      	str	r2, [r3, #40]	@ 0x28
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2200      	movs	r2, #0
 8004634:	2180      	movs	r1, #128	@ 0x80
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f884 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <I2C_RequestMemoryWrite+0x9a>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <I2C_RequestMemoryWrite+0x9c>
 8004646:	2300      	movs	r3, #0
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	80002000 	.word	0x80002000

08004654 <I2C_RequestMemoryRead>:
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	4608      	mov	r0, r1
 800465e:	4611      	mov	r1, r2
 8004660:	461a      	mov	r2, r3
 8004662:	4603      	mov	r3, r0
 8004664:	817b      	strh	r3, [r7, #10]
 8004666:	460b      	mov	r3, r1
 8004668:	813b      	strh	r3, [r7, #8]
 800466a:	4613      	mov	r3, r2
 800466c:	80fb      	strh	r3, [r7, #6]
 800466e:	88fb      	ldrh	r3, [r7, #6]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	8979      	ldrh	r1, [r7, #10]
 8004674:	4b20      	ldr	r3, [pc, #128]	@ (80046f8 <I2C_RequestMemoryRead+0xa4>)
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2300      	movs	r3, #0
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fab2 	bl	8004be4 <I2C_TransferConfig>
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	69b9      	ldr	r1, [r7, #24]
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f8b6 	bl	80047f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <I2C_RequestMemoryRead+0x40>
 8004690:	2301      	movs	r3, #1
 8004692:	e02c      	b.n	80046ee <I2C_RequestMemoryRead+0x9a>
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d105      	bne.n	80046a6 <I2C_RequestMemoryRead+0x52>
 800469a:	893b      	ldrh	r3, [r7, #8]
 800469c:	b2da      	uxtb	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80046a4:	e015      	b.n	80046d2 <I2C_RequestMemoryRead+0x7e>
 80046a6:	893b      	ldrh	r3, [r7, #8]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	69b9      	ldr	r1, [r7, #24]
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f89c 	bl	80047f6 <I2C_WaitOnTXISFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <I2C_RequestMemoryRead+0x74>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e012      	b.n	80046ee <I2C_RequestMemoryRead+0x9a>
 80046c8:	893b      	ldrh	r3, [r7, #8]
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2200      	movs	r2, #0
 80046da:	2140      	movs	r1, #64	@ 0x40
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f831 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <I2C_RequestMemoryRead+0x98>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <I2C_RequestMemoryRead+0x9a>
 80046ec:	2300      	movs	r3, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	80002000 	.word	0x80002000

080046fc <I2C_Flush_TXDR>:
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b02      	cmp	r3, #2
 8004710:	d103      	bne.n	800471a <I2C_Flush_TXDR+0x1e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2200      	movs	r2, #0
 8004718:	629a      	str	r2, [r3, #40]	@ 0x28
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b01      	cmp	r3, #1
 8004726:	d007      	beq.n	8004738 <I2C_Flush_TXDR+0x3c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	619a      	str	r2, [r3, #24]
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <I2C_WaitOnFlagUntilTimeout>:
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	4613      	mov	r3, r2
 8004752:	71fb      	strb	r3, [r7, #7]
 8004754:	e03b      	b.n	80047ce <I2C_WaitOnFlagUntilTimeout+0x8a>
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	6839      	ldr	r1, [r7, #0]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f962 	bl	8004a24 <I2C_IsErrorOccurred>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <I2C_WaitOnFlagUntilTimeout+0x26>
 8004766:	2301      	movs	r3, #1
 8004768:	e041      	b.n	80047ee <I2C_WaitOnFlagUntilTimeout+0xaa>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004770:	d02d      	beq.n	80047ce <I2C_WaitOnFlagUntilTimeout+0x8a>
 8004772:	f7fd fbc3 	bl	8001efc <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d302      	bcc.n	8004788 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d122      	bne.n	80047ce <I2C_WaitOnFlagUntilTimeout+0x8a>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	429a      	cmp	r2, r3
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d113      	bne.n	80047ce <I2C_WaitOnFlagUntilTimeout+0x8a>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047aa:	f043 0220 	orr.w	r2, r3, #32
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047ca:	2301      	movs	r3, #1
 80047cc:	e00f      	b.n	80047ee <I2C_WaitOnFlagUntilTimeout+0xaa>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699a      	ldr	r2, [r3, #24]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4013      	ands	r3, r2
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	429a      	cmp	r2, r3
 80047dc:	bf0c      	ite	eq
 80047de:	2301      	moveq	r3, #1
 80047e0:	2300      	movne	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d0b4      	beq.n	8004756 <I2C_WaitOnFlagUntilTimeout+0x12>
 80047ec:	2300      	movs	r3, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <I2C_WaitOnTXISFlagUntilTimeout>:
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	e033      	b.n	800486c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f90b 	bl	8004a24 <I2C_IsErrorOccurred>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 8004814:	2301      	movs	r3, #1
 8004816:	e031      	b.n	800487c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800481e:	d025      	beq.n	800486c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8004820:	f7fd fb6c 	bl	8001efc <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	d302      	bcc.n	8004836 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d11a      	bne.n	800486c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b02      	cmp	r3, #2
 8004842:	d013      	beq.n	800486c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004868:	2301      	movs	r3, #1
 800486a:	e007      	b.n	800487c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	d1c4      	bne.n	8004804 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 800487a:	2300      	movs	r3, #0
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <I2C_WaitOnSTOPFlagUntilTimeout>:
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	e02f      	b.n	80048f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f8c4 	bl	8004a24 <I2C_IsErrorOccurred>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e02d      	b.n	8004902 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 80048a6:	f7fd fb29 	bl	8001efc <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d302      	bcc.n	80048bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d11a      	bne.n	80048f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d013      	beq.n	80048f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ce:	f043 0220 	orr.w	r2, r3, #32
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	645a      	str	r2, [r3, #68]	@ 0x44
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048ee:	2301      	movs	r3, #1
 80048f0:	e007      	b.n	8004902 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d1c8      	bne.n	8004892 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 8004900:	2300      	movs	r3, #0
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <I2C_WaitOnRXNEFlagUntilTimeout>:
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	2300      	movs	r3, #0
 800491a:	75fb      	strb	r3, [r7, #23]
 800491c:	e071      	b.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f87e 	bl	8004a24 <I2C_IsErrorOccurred>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b20      	cmp	r3, #32
 800493e:	d13b      	bne.n	80049b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d138      	bne.n	80049b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b04      	cmp	r3, #4
 8004952:	d105      	bne.n	8004960 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800495c:	2300      	movs	r3, #0
 800495e:	75fb      	strb	r3, [r7, #23]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b10      	cmp	r3, #16
 800496c:	d121      	bne.n	80049b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2210      	movs	r2, #16
 8004974:	61da      	str	r2, [r3, #28]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2204      	movs	r2, #4
 800497a:	645a      	str	r2, [r3, #68]	@ 0x44
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2220      	movs	r2, #32
 8004982:	61da      	str	r2, [r3, #28]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6859      	ldr	r1, [r3, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4b24      	ldr	r3, [pc, #144]	@ (8004a20 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004990:	400b      	ands	r3, r1
 8004992:	6053      	str	r3, [r2, #4]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049ac:	2301      	movs	r3, #1
 80049ae:	75fb      	strb	r3, [r7, #23]
 80049b0:	e002      	b.n	80049b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80049b8:	f7fd faa0 	bl	8001efc <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d302      	bcc.n	80049ce <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d119      	bne.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d116      	bne.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d00f      	beq.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e6:	f043 0220 	orr.w	r2, r3, #32
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049fe:	2301      	movs	r3, #1
 8004a00:	75fb      	strb	r3, [r7, #23]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d002      	beq.n	8004a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d083      	beq.n	800491e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	fe00e800 	.word	0xfe00e800

08004a24 <I2C_IsErrorOccurred>:
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	@ 0x28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	623b      	str	r3, [r7, #32]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	61fb      	str	r3, [r7, #28]
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d068      	beq.n	8004b22 <I2C_IsErrorOccurred+0xfe>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2210      	movs	r2, #16
 8004a56:	61da      	str	r2, [r3, #28]
 8004a58:	e049      	b.n	8004aee <I2C_IsErrorOccurred+0xca>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a60:	d045      	beq.n	8004aee <I2C_IsErrorOccurred+0xca>
 8004a62:	f7fd fa4b 	bl	8001efc <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <I2C_IsErrorOccurred+0x54>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d13a      	bne.n	8004aee <I2C_IsErrorOccurred+0xca>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a8a:	74fb      	strb	r3, [r7, #19]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a9a:	d121      	bne.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004aa2:	d01d      	beq.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	d01a      	beq.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	f7fd fa1f 	bl	8001efc <HAL_GetTick>
 8004abe:	61f8      	str	r0, [r7, #28]
 8004ac0:	e00e      	b.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
 8004ac2:	f7fd fa1b 	bl	8001efc <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b19      	cmp	r3, #25
 8004ace:	d907      	bls.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	f043 0320 	orr.w	r3, r3, #32
 8004ad6:	623b      	str	r3, [r7, #32]
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004ade:	e006      	b.n	8004aee <I2C_IsErrorOccurred+0xca>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d1e9      	bne.n	8004ac2 <I2C_IsErrorOccurred+0x9e>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d003      	beq.n	8004b04 <I2C_IsErrorOccurred+0xe0>
 8004afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0aa      	beq.n	8004a5a <I2C_IsErrorOccurred+0x36>
 8004b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d103      	bne.n	8004b14 <I2C_IsErrorOccurred+0xf0>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2220      	movs	r2, #32
 8004b12:	61da      	str	r2, [r3, #28]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	f043 0304 	orr.w	r3, r3, #4
 8004b1a:	623b      	str	r3, [r7, #32]
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00b      	beq.n	8004b4c <I2C_IsErrorOccurred+0x128>
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	623b      	str	r3, [r7, #32]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b44:	61da      	str	r2, [r3, #28]
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00b      	beq.n	8004b6e <I2C_IsErrorOccurred+0x14a>
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	f043 0308 	orr.w	r3, r3, #8
 8004b5c:	623b      	str	r3, [r7, #32]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b66:	61da      	str	r2, [r3, #28]
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <I2C_IsErrorOccurred+0x16c>
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	f043 0302 	orr.w	r3, r3, #2
 8004b7e:	623b      	str	r3, [r7, #32]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b88:	61da      	str	r2, [r3, #28]
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004b90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01c      	beq.n	8004bd2 <I2C_IsErrorOccurred+0x1ae>
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f7ff fdaf 	bl	80046fc <I2C_Flush_TXDR>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <I2C_IsErrorOccurred+0x1bc>)
 8004baa:	400b      	ands	r3, r1
 8004bac:	6053      	str	r3, [r2, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	645a      	str	r2, [r3, #68]	@ 0x44
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3728      	adds	r7, #40	@ 0x28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	fe00e800 	.word	0xfe00e800

08004be4 <I2C_TransferConfig>:
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	817b      	strh	r3, [r7, #10]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	727b      	strb	r3, [r7, #9]
 8004bf6:	897b      	ldrh	r3, [r7, #10]
 8004bf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004bfc:	7a7b      	ldrb	r3, [r7, #9]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	0d5b      	lsrs	r3, r3, #21
 8004c1e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004c22:	4b08      	ldr	r3, [pc, #32]	@ (8004c44 <I2C_TransferConfig+0x60>)
 8004c24:	430b      	orrs	r3, r1
 8004c26:	43db      	mvns	r3, r3
 8004c28:	ea02 0103 	and.w	r1, r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	bf00      	nop
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	03ff63ff 	.word	0x03ff63ff

08004c48 <HAL_I2CEx_ConfigAnalogFilter>:
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d138      	bne.n	8004cd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e032      	b.n	8004cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2224      	movs	r2, #36	@ 0x24
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0201 	bic.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6819      	ldr	r1, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ccc:	2300      	movs	r3, #0
 8004cce:	e000      	b.n	8004cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_I2CEx_ConfigDigitalFilter>:
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d139      	bne.n	8004d68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e033      	b.n	8004d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2224      	movs	r2, #36	@ 0x24
 8004d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0201 	bic.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d64:	2300      	movs	r3, #0
 8004d66:	e000      	b.n	8004d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_PWREx_GetVoltageRange>:
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	4b04      	ldr	r3, [pc, #16]	@ (8004d90 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40007000 	.word	0x40007000

08004d94 <HAL_PWREx_ControlVoltageScaling>:
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004da2:	d130      	bne.n	8004e06 <HAL_PWREx_ControlVoltageScaling+0x72>
 8004da4:	4b23      	ldr	r3, [pc, #140]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004db0:	d038      	beq.n	8004e24 <HAL_PWREx_ControlVoltageScaling+0x90>
 8004db2:	4b20      	ldr	r3, [pc, #128]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004dba:	4a1e      	ldr	r2, [pc, #120]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2232      	movs	r2, #50	@ 0x32
 8004dc8:	fb02 f303 	mul.w	r3, r2, r3
 8004dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8004e3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	0c9b      	lsrs	r3, r3, #18
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	e002      	b.n	8004de0 <HAL_PWREx_ControlVoltageScaling+0x4c>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	4b14      	ldr	r3, [pc, #80]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dec:	d102      	bne.n	8004df4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f2      	bne.n	8004dda <HAL_PWREx_ControlVoltageScaling+0x46>
 8004df4:	4b0f      	ldr	r3, [pc, #60]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e00:	d110      	bne.n	8004e24 <HAL_PWREx_ControlVoltageScaling+0x90>
 8004e02:	2303      	movs	r3, #3
 8004e04:	e00f      	b.n	8004e26 <HAL_PWREx_ControlVoltageScaling+0x92>
 8004e06:	4b0b      	ldr	r3, [pc, #44]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e12:	d007      	beq.n	8004e24 <HAL_PWREx_ControlVoltageScaling+0x90>
 8004e14:	4b07      	ldr	r3, [pc, #28]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e1c:	4a05      	ldr	r2, [pc, #20]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	2300      	movs	r3, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40007000 	.word	0x40007000
 8004e38:	20000008 	.word	0x20000008
 8004e3c:	431bde83 	.word	0x431bde83

08004e40 <HAL_RCC_OscConfig>:
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCC_OscConfig+0x12>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e3ca      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 8004e52:	4b97      	ldr	r3, [pc, #604]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	61bb      	str	r3, [r7, #24]
 8004e5c:	4b94      	ldr	r3, [pc, #592]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 80e4 	beq.w	800503c <HAL_RCC_OscConfig+0x1fc>
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <HAL_RCC_OscConfig+0x4a>
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b0c      	cmp	r3, #12
 8004e7e:	f040 808b 	bne.w	8004f98 <HAL_RCC_OscConfig+0x158>
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	f040 8087 	bne.w	8004f98 <HAL_RCC_OscConfig+0x158>
 8004e8a:	4b89      	ldr	r3, [pc, #548]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x62>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x62>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e3a2      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1a      	ldr	r2, [r3, #32]
 8004ea6:	4b82      	ldr	r3, [pc, #520]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d004      	beq.n	8004ebc <HAL_RCC_OscConfig+0x7c>
 8004eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004eba:	e005      	b.n	8004ec8 <HAL_RCC_OscConfig+0x88>
 8004ebc:	4b7c      	ldr	r3, [pc, #496]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d223      	bcs.n	8004f14 <HAL_RCC_OscConfig+0xd4>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fd55 	bl	8005980 <RCC_SetFlashLatencyFromMSIRange>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_OscConfig+0xa0>
 8004edc:	2301      	movs	r3, #1
 8004ede:	e383      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 8004ee0:	4b73      	ldr	r3, [pc, #460]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a72      	ldr	r2, [pc, #456]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004ee6:	f043 0308 	orr.w	r3, r3, #8
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	4b70      	ldr	r3, [pc, #448]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	496d      	ldr	r1, [pc, #436]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]
 8004efe:	4b6c      	ldr	r3, [pc, #432]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	021b      	lsls	r3, r3, #8
 8004f0c:	4968      	ldr	r1, [pc, #416]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	604b      	str	r3, [r1, #4]
 8004f12:	e025      	b.n	8004f60 <HAL_RCC_OscConfig+0x120>
 8004f14:	4b66      	ldr	r3, [pc, #408]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a65      	ldr	r2, [pc, #404]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f1a:	f043 0308 	orr.w	r3, r3, #8
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	4b63      	ldr	r3, [pc, #396]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	4960      	ldr	r1, [pc, #384]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	600b      	str	r3, [r1, #0]
 8004f32:	4b5f      	ldr	r3, [pc, #380]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	495b      	ldr	r1, [pc, #364]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	604b      	str	r3, [r1, #4]
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d109      	bne.n	8004f60 <HAL_RCC_OscConfig+0x120>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fd15 	bl	8005980 <RCC_SetFlashLatencyFromMSIRange>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCC_OscConfig+0x120>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e343      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 8004f60:	f000 fc4a 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 8004f64:	4602      	mov	r2, r0
 8004f66:	4b52      	ldr	r3, [pc, #328]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	091b      	lsrs	r3, r3, #4
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	4950      	ldr	r1, [pc, #320]	@ (80050b4 <HAL_RCC_OscConfig+0x274>)
 8004f72:	5ccb      	ldrb	r3, [r1, r3]
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7c:	4a4e      	ldr	r2, [pc, #312]	@ (80050b8 <HAL_RCC_OscConfig+0x278>)
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	4b4e      	ldr	r3, [pc, #312]	@ (80050bc <HAL_RCC_OscConfig+0x27c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fc ff69 	bl	8001e5c <HAL_InitTick>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	73fb      	strb	r3, [r7, #15]
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d052      	beq.n	800503a <HAL_RCC_OscConfig+0x1fa>
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	e327      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d032      	beq.n	8005006 <HAL_RCC_OscConfig+0x1c6>
 8004fa0:	4b43      	ldr	r3, [pc, #268]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a42      	ldr	r2, [pc, #264]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	f7fc ffa6 	bl	8001efc <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x186>
 8004fb4:	f7fc ffa2 	bl	8001efc <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x186>
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e310      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 8004fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x174>
 8004fd2:	4b37      	ldr	r3, [pc, #220]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a36      	ldr	r2, [pc, #216]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fd8:	f043 0308 	orr.w	r3, r3, #8
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	4b34      	ldr	r3, [pc, #208]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	4931      	ldr	r1, [pc, #196]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]
 8004ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	492c      	ldr	r1, [pc, #176]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8005000:	4313      	orrs	r3, r2
 8005002:	604b      	str	r3, [r1, #4]
 8005004:	e01a      	b.n	800503c <HAL_RCC_OscConfig+0x1fc>
 8005006:	4b2a      	ldr	r3, [pc, #168]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a29      	ldr	r2, [pc, #164]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	f7fc ff73 	bl	8001efc <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x1ec>
 800501a:	f7fc ff6f 	bl	8001efc <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x1ec>
 8005028:	2303      	movs	r3, #3
 800502a:	e2dd      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 800502c:	4b20      	ldr	r3, [pc, #128]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1f0      	bne.n	800501a <HAL_RCC_OscConfig+0x1da>
 8005038:	e000      	b.n	800503c <HAL_RCC_OscConfig+0x1fc>
 800503a:	bf00      	nop
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d074      	beq.n	8005132 <HAL_RCC_OscConfig+0x2f2>
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b08      	cmp	r3, #8
 800504c:	d005      	beq.n	800505a <HAL_RCC_OscConfig+0x21a>
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b0c      	cmp	r3, #12
 8005052:	d10e      	bne.n	8005072 <HAL_RCC_OscConfig+0x232>
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b03      	cmp	r3, #3
 8005058:	d10b      	bne.n	8005072 <HAL_RCC_OscConfig+0x232>
 800505a:	4b15      	ldr	r3, [pc, #84]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d064      	beq.n	8005130 <HAL_RCC_OscConfig+0x2f0>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d160      	bne.n	8005130 <HAL_RCC_OscConfig+0x2f0>
 800506e:	2301      	movs	r3, #1
 8005070:	e2ba      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800507a:	d106      	bne.n	800508a <HAL_RCC_OscConfig+0x24a>
 800507c:	4b0c      	ldr	r3, [pc, #48]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a0b      	ldr	r2, [pc, #44]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8005082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	e026      	b.n	80050d8 <HAL_RCC_OscConfig+0x298>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005092:	d115      	bne.n	80050c0 <HAL_RCC_OscConfig+0x280>
 8005094:	4b06      	ldr	r3, [pc, #24]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a05      	ldr	r2, [pc, #20]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 800509a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	4b03      	ldr	r3, [pc, #12]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a02      	ldr	r2, [pc, #8]	@ (80050b0 <HAL_RCC_OscConfig+0x270>)
 80050a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	e014      	b.n	80050d8 <HAL_RCC_OscConfig+0x298>
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000
 80050b4:	0800bd70 	.word	0x0800bd70
 80050b8:	20000008 	.word	0x20000008
 80050bc:	2000000c 	.word	0x2000000c
 80050c0:	4ba0      	ldr	r3, [pc, #640]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a9f      	ldr	r2, [pc, #636]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80050c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	4b9d      	ldr	r3, [pc, #628]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a9c      	ldr	r2, [pc, #624]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80050d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050d6:	6013      	str	r3, [r2, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d013      	beq.n	8005108 <HAL_RCC_OscConfig+0x2c8>
 80050e0:	f7fc ff0c 	bl	8001efc <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x2ba>
 80050e8:	f7fc ff08 	bl	8001efc <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	@ 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x2ba>
 80050f6:	2303      	movs	r3, #3
 80050f8:	e276      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 80050fa:	4b92      	ldr	r3, [pc, #584]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCC_OscConfig+0x2a8>
 8005106:	e014      	b.n	8005132 <HAL_RCC_OscConfig+0x2f2>
 8005108:	f7fc fef8 	bl	8001efc <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x2e2>
 8005110:	f7fc fef4 	bl	8001efc <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b64      	cmp	r3, #100	@ 0x64
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x2e2>
 800511e:	2303      	movs	r3, #3
 8005120:	e262      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 8005122:	4b88      	ldr	r3, [pc, #544]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x2d0>
 800512e:	e000      	b.n	8005132 <HAL_RCC_OscConfig+0x2f2>
 8005130:	bf00      	nop
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d060      	beq.n	8005200 <HAL_RCC_OscConfig+0x3c0>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b04      	cmp	r3, #4
 8005142:	d005      	beq.n	8005150 <HAL_RCC_OscConfig+0x310>
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	2b0c      	cmp	r3, #12
 8005148:	d119      	bne.n	800517e <HAL_RCC_OscConfig+0x33e>
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d116      	bne.n	800517e <HAL_RCC_OscConfig+0x33e>
 8005150:	4b7c      	ldr	r3, [pc, #496]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <HAL_RCC_OscConfig+0x328>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_OscConfig+0x328>
 8005164:	2301      	movs	r3, #1
 8005166:	e23f      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 8005168:	4b76      	ldr	r3, [pc, #472]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	061b      	lsls	r3, r3, #24
 8005176:	4973      	ldr	r1, [pc, #460]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005178:	4313      	orrs	r3, r2
 800517a:	604b      	str	r3, [r1, #4]
 800517c:	e040      	b.n	8005200 <HAL_RCC_OscConfig+0x3c0>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d023      	beq.n	80051ce <HAL_RCC_OscConfig+0x38e>
 8005186:	4b6f      	ldr	r3, [pc, #444]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a6e      	ldr	r2, [pc, #440]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 800518c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	f7fc feb3 	bl	8001efc <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x36c>
 800519a:	f7fc feaf 	bl	8001efc <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x36c>
 80051a8:	2303      	movs	r3, #3
 80051aa:	e21d      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 80051ac:	4b65      	ldr	r3, [pc, #404]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x35a>
 80051b8:	4b62      	ldr	r3, [pc, #392]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	061b      	lsls	r3, r3, #24
 80051c6:	495f      	ldr	r1, [pc, #380]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	604b      	str	r3, [r1, #4]
 80051cc:	e018      	b.n	8005200 <HAL_RCC_OscConfig+0x3c0>
 80051ce:	4b5d      	ldr	r3, [pc, #372]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a5c      	ldr	r2, [pc, #368]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80051d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	f7fc fe8f 	bl	8001efc <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x3b4>
 80051e2:	f7fc fe8b 	bl	8001efc <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x3b4>
 80051f0:	2303      	movs	r3, #3
 80051f2:	e1f9      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 80051f4:	4b53      	ldr	r3, [pc, #332]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f0      	bne.n	80051e2 <HAL_RCC_OscConfig+0x3a2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0308 	and.w	r3, r3, #8
 8005208:	2b00      	cmp	r3, #0
 800520a:	d03c      	beq.n	8005286 <HAL_RCC_OscConfig+0x446>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01c      	beq.n	800524e <HAL_RCC_OscConfig+0x40e>
 8005214:	4b4b      	ldr	r3, [pc, #300]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800521a:	4a4a      	ldr	r2, [pc, #296]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005224:	f7fc fe6a 	bl	8001efc <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x3fe>
 800522c:	f7fc fe66 	bl	8001efc <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x3fe>
 800523a:	2303      	movs	r3, #3
 800523c:	e1d4      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 800523e:	4b41      	ldr	r3, [pc, #260]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0ef      	beq.n	800522c <HAL_RCC_OscConfig+0x3ec>
 800524c:	e01b      	b.n	8005286 <HAL_RCC_OscConfig+0x446>
 800524e:	4b3d      	ldr	r3, [pc, #244]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005254:	4a3b      	ldr	r2, [pc, #236]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005256:	f023 0301 	bic.w	r3, r3, #1
 800525a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800525e:	f7fc fe4d 	bl	8001efc <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]
 8005264:	e008      	b.n	8005278 <HAL_RCC_OscConfig+0x438>
 8005266:	f7fc fe49 	bl	8001efc <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x438>
 8005274:	2303      	movs	r3, #3
 8005276:	e1b7      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 8005278:	4b32      	ldr	r3, [pc, #200]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 800527a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1ef      	bne.n	8005266 <HAL_RCC_OscConfig+0x426>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 80a6 	beq.w	80053e0 <HAL_RCC_OscConfig+0x5a0>
 8005294:	2300      	movs	r3, #0
 8005296:	77fb      	strb	r3, [r7, #31]
 8005298:	4b2a      	ldr	r3, [pc, #168]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 800529a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10d      	bne.n	80052c0 <HAL_RCC_OscConfig+0x480>
 80052a4:	4b27      	ldr	r3, [pc, #156]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80052a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a8:	4a26      	ldr	r2, [pc, #152]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80052aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80052b0:	4b24      	ldr	r3, [pc, #144]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 80052b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052b8:	60bb      	str	r3, [r7, #8]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2301      	movs	r3, #1
 80052be:	77fb      	strb	r3, [r7, #31]
 80052c0:	4b21      	ldr	r3, [pc, #132]	@ (8005348 <HAL_RCC_OscConfig+0x508>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d118      	bne.n	80052fe <HAL_RCC_OscConfig+0x4be>
 80052cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005348 <HAL_RCC_OscConfig+0x508>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005348 <HAL_RCC_OscConfig+0x508>)
 80052d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	f7fc fe10 	bl	8001efc <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x4b2>
 80052e0:	f7fc fe0c 	bl	8001efc <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x4b2>
 80052ee:	2303      	movs	r3, #3
 80052f0:	e17a      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 80052f2:	4b15      	ldr	r3, [pc, #84]	@ (8005348 <HAL_RCC_OscConfig+0x508>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x4a0>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d108      	bne.n	8005318 <HAL_RCC_OscConfig+0x4d8>
 8005306:	4b0f      	ldr	r3, [pc, #60]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530c:	4a0d      	ldr	r2, [pc, #52]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 800530e:	f043 0301 	orr.w	r3, r3, #1
 8005312:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005316:	e029      	b.n	800536c <HAL_RCC_OscConfig+0x52c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2b05      	cmp	r3, #5
 800531e:	d115      	bne.n	800534c <HAL_RCC_OscConfig+0x50c>
 8005320:	4b08      	ldr	r3, [pc, #32]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005326:	4a07      	ldr	r2, [pc, #28]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005328:	f043 0304 	orr.w	r3, r3, #4
 800532c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005330:	4b04      	ldr	r3, [pc, #16]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005336:	4a03      	ldr	r2, [pc, #12]	@ (8005344 <HAL_RCC_OscConfig+0x504>)
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005340:	e014      	b.n	800536c <HAL_RCC_OscConfig+0x52c>
 8005342:	bf00      	nop
 8005344:	40021000 	.word	0x40021000
 8005348:	40007000 	.word	0x40007000
 800534c:	4b9c      	ldr	r3, [pc, #624]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005352:	4a9b      	ldr	r2, [pc, #620]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800535c:	4b98      	ldr	r3, [pc, #608]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005362:	4a97      	ldr	r2, [pc, #604]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 8005364:	f023 0304 	bic.w	r3, r3, #4
 8005368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d016      	beq.n	80053a2 <HAL_RCC_OscConfig+0x562>
 8005374:	f7fc fdc2 	bl	8001efc <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]
 800537a:	e00a      	b.n	8005392 <HAL_RCC_OscConfig+0x552>
 800537c:	f7fc fdbe 	bl	8001efc <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x552>
 800538e:	2303      	movs	r3, #3
 8005390:	e12a      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 8005392:	4b8b      	ldr	r3, [pc, #556]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0ed      	beq.n	800537c <HAL_RCC_OscConfig+0x53c>
 80053a0:	e015      	b.n	80053ce <HAL_RCC_OscConfig+0x58e>
 80053a2:	f7fc fdab 	bl	8001efc <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]
 80053a8:	e00a      	b.n	80053c0 <HAL_RCC_OscConfig+0x580>
 80053aa:	f7fc fda7 	bl	8001efc <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x580>
 80053bc:	2303      	movs	r3, #3
 80053be:	e113      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 80053c0:	4b7f      	ldr	r3, [pc, #508]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ed      	bne.n	80053aa <HAL_RCC_OscConfig+0x56a>
 80053ce:	7ffb      	ldrb	r3, [r7, #31]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d105      	bne.n	80053e0 <HAL_RCC_OscConfig+0x5a0>
 80053d4:	4b7a      	ldr	r3, [pc, #488]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 80053d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d8:	4a79      	ldr	r2, [pc, #484]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 80053da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053de:	6593      	str	r3, [r2, #88]	@ 0x58
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80fe 	beq.w	80055e6 <HAL_RCC_OscConfig+0x7a6>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	f040 80d0 	bne.w	8005594 <HAL_RCC_OscConfig+0x754>
 80053f4:	4b72      	ldr	r3, [pc, #456]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f003 0203 	and.w	r2, r3, #3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005404:	429a      	cmp	r2, r3
 8005406:	d130      	bne.n	800546a <HAL_RCC_OscConfig+0x62a>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005412:	3b01      	subs	r3, #1
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	429a      	cmp	r2, r3
 8005418:	d127      	bne.n	800546a <HAL_RCC_OscConfig+0x62a>
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	429a      	cmp	r2, r3
 8005428:	d11f      	bne.n	800546a <HAL_RCC_OscConfig+0x62a>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005434:	2a07      	cmp	r2, #7
 8005436:	bf14      	ite	ne
 8005438:	2201      	movne	r2, #1
 800543a:	2200      	moveq	r2, #0
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	4293      	cmp	r3, r2
 8005440:	d113      	bne.n	800546a <HAL_RCC_OscConfig+0x62a>
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544c:	085b      	lsrs	r3, r3, #1
 800544e:	3b01      	subs	r3, #1
 8005450:	055b      	lsls	r3, r3, #21
 8005452:	429a      	cmp	r2, r3
 8005454:	d109      	bne.n	800546a <HAL_RCC_OscConfig+0x62a>
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	3b01      	subs	r3, #1
 8005464:	065b      	lsls	r3, r3, #25
 8005466:	429a      	cmp	r2, r3
 8005468:	d06e      	beq.n	8005548 <HAL_RCC_OscConfig+0x708>
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b0c      	cmp	r3, #12
 800546e:	d069      	beq.n	8005544 <HAL_RCC_OscConfig+0x704>
 8005470:	4b53      	ldr	r3, [pc, #332]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d105      	bne.n	8005488 <HAL_RCC_OscConfig+0x648>
 800547c:	4b50      	ldr	r3, [pc, #320]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_RCC_OscConfig+0x64c>
 8005488:	2301      	movs	r3, #1
 800548a:	e0ad      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 800548c:	4b4c      	ldr	r3, [pc, #304]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a4b      	ldr	r2, [pc, #300]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 8005492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	f7fc fd30 	bl	8001efc <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x672>
 80054a0:	f7fc fd2c 	bl	8001efc <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x672>
 80054ae:	2303      	movs	r3, #3
 80054b0:	e09a      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 80054b2:	4b43      	ldr	r3, [pc, #268]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x660>
 80054be:	4b40      	ldr	r3, [pc, #256]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	4b40      	ldr	r3, [pc, #256]	@ (80055c4 <HAL_RCC_OscConfig+0x784>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80054ce:	3a01      	subs	r2, #1
 80054d0:	0112      	lsls	r2, r2, #4
 80054d2:	4311      	orrs	r1, r2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80054d8:	0212      	lsls	r2, r2, #8
 80054da:	4311      	orrs	r1, r2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80054e0:	0852      	lsrs	r2, r2, #1
 80054e2:	3a01      	subs	r2, #1
 80054e4:	0552      	lsls	r2, r2, #21
 80054e6:	4311      	orrs	r1, r2
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80054ec:	0852      	lsrs	r2, r2, #1
 80054ee:	3a01      	subs	r2, #1
 80054f0:	0652      	lsls	r2, r2, #25
 80054f2:	4311      	orrs	r1, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80054f8:	0912      	lsrs	r2, r2, #4
 80054fa:	0452      	lsls	r2, r2, #17
 80054fc:	430a      	orrs	r2, r1
 80054fe:	4930      	ldr	r1, [pc, #192]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 8005500:	4313      	orrs	r3, r2
 8005502:	60cb      	str	r3, [r1, #12]
 8005504:	4b2e      	ldr	r3, [pc, #184]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a2d      	ldr	r2, [pc, #180]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 800550a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	4b2b      	ldr	r3, [pc, #172]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4a2a      	ldr	r2, [pc, #168]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 8005516:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800551a:	60d3      	str	r3, [r2, #12]
 800551c:	f7fc fcee 	bl	8001efc <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x6f6>
 8005524:	f7fc fcea 	bl	8001efc <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x6f6>
 8005532:	2303      	movs	r3, #3
 8005534:	e058      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 8005536:	4b22      	ldr	r3, [pc, #136]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_RCC_OscConfig+0x6e4>
 8005542:	e050      	b.n	80055e6 <HAL_RCC_OscConfig+0x7a6>
 8005544:	2301      	movs	r3, #1
 8005546:	e04f      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 8005548:	4b1d      	ldr	r3, [pc, #116]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d148      	bne.n	80055e6 <HAL_RCC_OscConfig+0x7a6>
 8005554:	4b1a      	ldr	r3, [pc, #104]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a19      	ldr	r2, [pc, #100]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 800555a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	4b17      	ldr	r3, [pc, #92]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	4a16      	ldr	r2, [pc, #88]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 8005566:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800556a:	60d3      	str	r3, [r2, #12]
 800556c:	f7fc fcc6 	bl	8001efc <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x746>
 8005574:	f7fc fcc2 	bl	8001efc <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x746>
 8005582:	2303      	movs	r3, #3
 8005584:	e030      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 8005586:	4b0e      	ldr	r3, [pc, #56]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f0      	beq.n	8005574 <HAL_RCC_OscConfig+0x734>
 8005592:	e028      	b.n	80055e6 <HAL_RCC_OscConfig+0x7a6>
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	2b0c      	cmp	r3, #12
 8005598:	d023      	beq.n	80055e2 <HAL_RCC_OscConfig+0x7a2>
 800559a:	4b09      	ldr	r3, [pc, #36]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a08      	ldr	r2, [pc, #32]	@ (80055c0 <HAL_RCC_OscConfig+0x780>)
 80055a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	f7fc fca9 	bl	8001efc <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]
 80055ac:	e00c      	b.n	80055c8 <HAL_RCC_OscConfig+0x788>
 80055ae:	f7fc fca5 	bl	8001efc <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d905      	bls.n	80055c8 <HAL_RCC_OscConfig+0x788>
 80055bc:	2303      	movs	r3, #3
 80055be:	e013      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 80055c0:	40021000 	.word	0x40021000
 80055c4:	f99d808c 	.word	0xf99d808c
 80055c8:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <HAL_RCC_OscConfig+0x7b0>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1ec      	bne.n	80055ae <HAL_RCC_OscConfig+0x76e>
 80055d4:	4b06      	ldr	r3, [pc, #24]	@ (80055f0 <HAL_RCC_OscConfig+0x7b0>)
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	4905      	ldr	r1, [pc, #20]	@ (80055f0 <HAL_RCC_OscConfig+0x7b0>)
 80055da:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <HAL_RCC_OscConfig+0x7b4>)
 80055dc:	4013      	ands	r3, r2
 80055de:	60cb      	str	r3, [r1, #12]
 80055e0:	e001      	b.n	80055e6 <HAL_RCC_OscConfig+0x7a6>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <HAL_RCC_OscConfig+0x7a8>
 80055e6:	2300      	movs	r3, #0
 80055e8:	4618      	mov	r0, r3
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40021000 	.word	0x40021000
 80055f4:	feeefffc 	.word	0xfeeefffc

080055f8 <HAL_RCC_ClockConfig>:
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_RCC_ClockConfig+0x14>
 8005608:	2301      	movs	r3, #1
 800560a:	e0e7      	b.n	80057dc <HAL_RCC_ClockConfig+0x1e4>
 800560c:	4b75      	ldr	r3, [pc, #468]	@ (80057e4 <HAL_RCC_ClockConfig+0x1ec>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d910      	bls.n	800563c <HAL_RCC_ClockConfig+0x44>
 800561a:	4b72      	ldr	r3, [pc, #456]	@ (80057e4 <HAL_RCC_ClockConfig+0x1ec>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 0207 	bic.w	r2, r3, #7
 8005622:	4970      	ldr	r1, [pc, #448]	@ (80057e4 <HAL_RCC_ClockConfig+0x1ec>)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	4313      	orrs	r3, r2
 8005628:	600b      	str	r3, [r1, #0]
 800562a:	4b6e      	ldr	r3, [pc, #440]	@ (80057e4 <HAL_RCC_ClockConfig+0x1ec>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_ClockConfig+0x44>
 8005638:	2301      	movs	r3, #1
 800563a:	e0cf      	b.n	80057dc <HAL_RCC_ClockConfig+0x1e4>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d010      	beq.n	800566a <HAL_RCC_ClockConfig+0x72>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	4b66      	ldr	r3, [pc, #408]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005654:	429a      	cmp	r2, r3
 8005656:	d908      	bls.n	800566a <HAL_RCC_ClockConfig+0x72>
 8005658:	4b63      	ldr	r3, [pc, #396]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4960      	ldr	r1, [pc, #384]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005666:	4313      	orrs	r3, r2
 8005668:	608b      	str	r3, [r1, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d04c      	beq.n	8005710 <HAL_RCC_ClockConfig+0x118>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b03      	cmp	r3, #3
 800567c:	d107      	bne.n	800568e <HAL_RCC_ClockConfig+0x96>
 800567e:	4b5a      	ldr	r3, [pc, #360]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d121      	bne.n	80056ce <HAL_RCC_ClockConfig+0xd6>
 800568a:	2301      	movs	r3, #1
 800568c:	e0a6      	b.n	80057dc <HAL_RCC_ClockConfig+0x1e4>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d107      	bne.n	80056a6 <HAL_RCC_ClockConfig+0xae>
 8005696:	4b54      	ldr	r3, [pc, #336]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d115      	bne.n	80056ce <HAL_RCC_ClockConfig+0xd6>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e09a      	b.n	80057dc <HAL_RCC_ClockConfig+0x1e4>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d107      	bne.n	80056be <HAL_RCC_ClockConfig+0xc6>
 80056ae:	4b4e      	ldr	r3, [pc, #312]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d109      	bne.n	80056ce <HAL_RCC_ClockConfig+0xd6>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e08e      	b.n	80057dc <HAL_RCC_ClockConfig+0x1e4>
 80056be:	4b4a      	ldr	r3, [pc, #296]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_RCC_ClockConfig+0xd6>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e086      	b.n	80057dc <HAL_RCC_ClockConfig+0x1e4>
 80056ce:	4b46      	ldr	r3, [pc, #280]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f023 0203 	bic.w	r2, r3, #3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	4943      	ldr	r1, [pc, #268]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	608b      	str	r3, [r1, #8]
 80056e0:	f7fc fc0c 	bl	8001efc <HAL_GetTick>
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	e00a      	b.n	80056fe <HAL_RCC_ClockConfig+0x106>
 80056e8:	f7fc fc08 	bl	8001efc <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_ClockConfig+0x106>
 80056fa:	2303      	movs	r3, #3
 80056fc:	e06e      	b.n	80057dc <HAL_RCC_ClockConfig+0x1e4>
 80056fe:	4b3a      	ldr	r3, [pc, #232]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 020c 	and.w	r2, r3, #12
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	429a      	cmp	r2, r3
 800570e:	d1eb      	bne.n	80056e8 <HAL_RCC_ClockConfig+0xf0>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d010      	beq.n	800573e <HAL_RCC_ClockConfig+0x146>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	4b31      	ldr	r3, [pc, #196]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005728:	429a      	cmp	r2, r3
 800572a:	d208      	bcs.n	800573e <HAL_RCC_ClockConfig+0x146>
 800572c:	4b2e      	ldr	r3, [pc, #184]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	492b      	ldr	r1, [pc, #172]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
 800573e:	4b29      	ldr	r3, [pc, #164]	@ (80057e4 <HAL_RCC_ClockConfig+0x1ec>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d210      	bcs.n	800576e <HAL_RCC_ClockConfig+0x176>
 800574c:	4b25      	ldr	r3, [pc, #148]	@ (80057e4 <HAL_RCC_ClockConfig+0x1ec>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f023 0207 	bic.w	r2, r3, #7
 8005754:	4923      	ldr	r1, [pc, #140]	@ (80057e4 <HAL_RCC_ClockConfig+0x1ec>)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	4313      	orrs	r3, r2
 800575a:	600b      	str	r3, [r1, #0]
 800575c:	4b21      	ldr	r3, [pc, #132]	@ (80057e4 <HAL_RCC_ClockConfig+0x1ec>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d001      	beq.n	800576e <HAL_RCC_ClockConfig+0x176>
 800576a:	2301      	movs	r3, #1
 800576c:	e036      	b.n	80057dc <HAL_RCC_ClockConfig+0x1e4>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <HAL_RCC_ClockConfig+0x194>
 800577a:	4b1b      	ldr	r3, [pc, #108]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	4918      	ldr	r1, [pc, #96]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005788:	4313      	orrs	r3, r2
 800578a:	608b      	str	r3, [r1, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b00      	cmp	r3, #0
 8005796:	d009      	beq.n	80057ac <HAL_RCC_ClockConfig+0x1b4>
 8005798:	4b13      	ldr	r3, [pc, #76]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	4910      	ldr	r1, [pc, #64]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	608b      	str	r3, [r1, #8]
 80057ac:	f000 f824 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 80057b0:	4602      	mov	r2, r0
 80057b2:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <HAL_RCC_ClockConfig+0x1f0>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	091b      	lsrs	r3, r3, #4
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	490b      	ldr	r1, [pc, #44]	@ (80057ec <HAL_RCC_ClockConfig+0x1f4>)
 80057be:	5ccb      	ldrb	r3, [r1, r3]
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	fa22 f303 	lsr.w	r3, r2, r3
 80057c8:	4a09      	ldr	r2, [pc, #36]	@ (80057f0 <HAL_RCC_ClockConfig+0x1f8>)
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	4b09      	ldr	r3, [pc, #36]	@ (80057f4 <HAL_RCC_ClockConfig+0x1fc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fc fb43 	bl	8001e5c <HAL_InitTick>
 80057d6:	4603      	mov	r3, r0
 80057d8:	72fb      	strb	r3, [r7, #11]
 80057da:	7afb      	ldrb	r3, [r7, #11]
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40022000 	.word	0x40022000
 80057e8:	40021000 	.word	0x40021000
 80057ec:	0800bd70 	.word	0x0800bd70
 80057f0:	20000008 	.word	0x20000008
 80057f4:	2000000c 	.word	0x2000000c

080057f8 <HAL_RCC_GetSysClockFreq>:
 80057f8:	b480      	push	{r7}
 80057fa:	b089      	sub	sp, #36	@ 0x24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	2300      	movs	r3, #0
 8005804:	61bb      	str	r3, [r7, #24]
 8005806:	4b3e      	ldr	r3, [pc, #248]	@ (8005900 <HAL_RCC_GetSysClockFreq+0x108>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 030c 	and.w	r3, r3, #12
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	4b3b      	ldr	r3, [pc, #236]	@ (8005900 <HAL_RCC_GetSysClockFreq+0x108>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0303 	and.w	r3, r3, #3
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <HAL_RCC_GetSysClockFreq+0x34>
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2b0c      	cmp	r3, #12
 8005824:	d121      	bne.n	800586a <HAL_RCC_GetSysClockFreq+0x72>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d11e      	bne.n	800586a <HAL_RCC_GetSysClockFreq+0x72>
 800582c:	4b34      	ldr	r3, [pc, #208]	@ (8005900 <HAL_RCC_GetSysClockFreq+0x108>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b00      	cmp	r3, #0
 8005836:	d107      	bne.n	8005848 <HAL_RCC_GetSysClockFreq+0x50>
 8005838:	4b31      	ldr	r3, [pc, #196]	@ (8005900 <HAL_RCC_GetSysClockFreq+0x108>)
 800583a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800583e:	0a1b      	lsrs	r3, r3, #8
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	e005      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x5c>
 8005848:	4b2d      	ldr	r3, [pc, #180]	@ (8005900 <HAL_RCC_GetSysClockFreq+0x108>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	091b      	lsrs	r3, r3, #4
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	61fb      	str	r3, [r7, #28]
 8005854:	4a2b      	ldr	r2, [pc, #172]	@ (8005904 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800585c:	61fb      	str	r3, [r7, #28]
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10d      	bne.n	8005880 <HAL_RCC_GetSysClockFreq+0x88>
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	e00a      	b.n	8005880 <HAL_RCC_GetSysClockFreq+0x88>
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2b04      	cmp	r3, #4
 800586e:	d102      	bne.n	8005876 <HAL_RCC_GetSysClockFreq+0x7e>
 8005870:	4b25      	ldr	r3, [pc, #148]	@ (8005908 <HAL_RCC_GetSysClockFreq+0x110>)
 8005872:	61bb      	str	r3, [r7, #24]
 8005874:	e004      	b.n	8005880 <HAL_RCC_GetSysClockFreq+0x88>
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b08      	cmp	r3, #8
 800587a:	d101      	bne.n	8005880 <HAL_RCC_GetSysClockFreq+0x88>
 800587c:	4b23      	ldr	r3, [pc, #140]	@ (800590c <HAL_RCC_GetSysClockFreq+0x114>)
 800587e:	61bb      	str	r3, [r7, #24]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b0c      	cmp	r3, #12
 8005884:	d134      	bne.n	80058f0 <HAL_RCC_GetSysClockFreq+0xf8>
 8005886:	4b1e      	ldr	r3, [pc, #120]	@ (8005900 <HAL_RCC_GetSysClockFreq+0x108>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	60bb      	str	r3, [r7, #8]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d003      	beq.n	800589e <HAL_RCC_GetSysClockFreq+0xa6>
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b03      	cmp	r3, #3
 800589a:	d003      	beq.n	80058a4 <HAL_RCC_GetSysClockFreq+0xac>
 800589c:	e005      	b.n	80058aa <HAL_RCC_GetSysClockFreq+0xb2>
 800589e:	4b1a      	ldr	r3, [pc, #104]	@ (8005908 <HAL_RCC_GetSysClockFreq+0x110>)
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	e005      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0xb8>
 80058a4:	4b19      	ldr	r3, [pc, #100]	@ (800590c <HAL_RCC_GetSysClockFreq+0x114>)
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e002      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0xb8>
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	bf00      	nop
 80058b0:	4b13      	ldr	r3, [pc, #76]	@ (8005900 <HAL_RCC_GetSysClockFreq+0x108>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	091b      	lsrs	r3, r3, #4
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	3301      	adds	r3, #1
 80058bc:	607b      	str	r3, [r7, #4]
 80058be:	4b10      	ldr	r3, [pc, #64]	@ (8005900 <HAL_RCC_GetSysClockFreq+0x108>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	0a1b      	lsrs	r3, r3, #8
 80058c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	fb03 f202 	mul.w	r2, r3, r2
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005900 <HAL_RCC_GetSysClockFreq+0x108>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	0e5b      	lsrs	r3, r3, #25
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	3301      	adds	r3, #1
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	603b      	str	r3, [r7, #0]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	4618      	mov	r0, r3
 80058f4:	3724      	adds	r7, #36	@ 0x24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40021000 	.word	0x40021000
 8005904:	0800bd88 	.word	0x0800bd88
 8005908:	00f42400 	.word	0x00f42400
 800590c:	007a1200 	.word	0x007a1200

08005910 <HAL_RCC_GetHCLKFreq>:
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
 8005914:	4b03      	ldr	r3, [pc, #12]	@ (8005924 <HAL_RCC_GetHCLKFreq+0x14>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	20000008 	.word	0x20000008

08005928 <HAL_RCC_GetPCLK1Freq>:
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
 800592c:	f7ff fff0 	bl	8005910 <HAL_RCC_GetHCLKFreq>
 8005930:	4602      	mov	r2, r0
 8005932:	4b06      	ldr	r3, [pc, #24]	@ (800594c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	0a1b      	lsrs	r3, r3, #8
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	4904      	ldr	r1, [pc, #16]	@ (8005950 <HAL_RCC_GetPCLK1Freq+0x28>)
 800593e:	5ccb      	ldrb	r3, [r1, r3]
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	fa22 f303 	lsr.w	r3, r2, r3
 8005948:	4618      	mov	r0, r3
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40021000 	.word	0x40021000
 8005950:	0800bd80 	.word	0x0800bd80

08005954 <HAL_RCC_GetPCLK2Freq>:
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
 8005958:	f7ff ffda 	bl	8005910 <HAL_RCC_GetHCLKFreq>
 800595c:	4602      	mov	r2, r0
 800595e:	4b06      	ldr	r3, [pc, #24]	@ (8005978 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	0adb      	lsrs	r3, r3, #11
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	4904      	ldr	r1, [pc, #16]	@ (800597c <HAL_RCC_GetPCLK2Freq+0x28>)
 800596a:	5ccb      	ldrb	r3, [r1, r3]
 800596c:	f003 031f 	and.w	r3, r3, #31
 8005970:	fa22 f303 	lsr.w	r3, r2, r3
 8005974:	4618      	mov	r0, r3
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40021000 	.word	0x40021000
 800597c:	0800bd80 	.word	0x0800bd80

08005980 <RCC_SetFlashLatencyFromMSIRange>:
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	2300      	movs	r3, #0
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	4b2a      	ldr	r3, [pc, #168]	@ (8005a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800598e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
 8005998:	f7ff f9ee 	bl	8004d78 <HAL_PWREx_GetVoltageRange>
 800599c:	6178      	str	r0, [r7, #20]
 800599e:	e014      	b.n	80059ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
 80059a0:	4b25      	ldr	r3, [pc, #148]	@ (8005a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a4:	4a24      	ldr	r2, [pc, #144]	@ (8005a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ac:	4b22      	ldr	r3, [pc, #136]	@ (8005a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f7ff f9de 	bl	8004d78 <HAL_PWREx_GetVoltageRange>
 80059bc:	6178      	str	r0, [r7, #20]
 80059be:	4b1e      	ldr	r3, [pc, #120]	@ (8005a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059d0:	d10b      	bne.n	80059ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b80      	cmp	r3, #128	@ 0x80
 80059d6:	d919      	bls.n	8005a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2ba0      	cmp	r3, #160	@ 0xa0
 80059dc:	d902      	bls.n	80059e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
 80059de:	2302      	movs	r3, #2
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	e013      	b.n	8005a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80059e4:	2301      	movs	r3, #1
 80059e6:	613b      	str	r3, [r7, #16]
 80059e8:	e010      	b.n	8005a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b80      	cmp	r3, #128	@ 0x80
 80059ee:	d902      	bls.n	80059f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
 80059f0:	2303      	movs	r3, #3
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	e00a      	b.n	8005a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b80      	cmp	r3, #128	@ 0x80
 80059fa:	d102      	bne.n	8005a02 <RCC_SetFlashLatencyFromMSIRange+0x82>
 80059fc:	2302      	movs	r3, #2
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	e004      	b.n	8005a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b70      	cmp	r3, #112	@ 0x70
 8005a06:	d101      	bne.n	8005a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f023 0207 	bic.w	r2, r3, #7
 8005a14:	4909      	ldr	r1, [pc, #36]	@ (8005a3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	600b      	str	r3, [r1, #0]
 8005a1c:	4b07      	ldr	r3, [pc, #28]	@ (8005a3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d001      	beq.n	8005a2e <RCC_SetFlashLatencyFromMSIRange+0xae>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	4618      	mov	r0, r3
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	40022000 	.word	0x40022000

08005a40 <HAL_RCCEx_PeriphCLKConfig>:
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	74fb      	strb	r3, [r7, #19]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	74bb      	strb	r3, [r7, #18]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d041      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a60:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005a64:	d02a      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a66:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005a6a:	d824      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a70:	d008      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a76:	d81e      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a80:	d010      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a82:	e018      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a84:	4b86      	ldr	r3, [pc, #536]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	4a85      	ldr	r2, [pc, #532]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a8e:	60d3      	str	r3, [r2, #12]
 8005a90:	e015      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3304      	adds	r3, #4
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 f829 	bl	8006af0 <RCCEx_PLLSAI1_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	74fb      	strb	r3, [r7, #19]
 8005aa2:	e00c      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3320      	adds	r3, #32
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f001 f914 	bl	8006cd8 <RCCEx_PLLSAI2_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	74fb      	strb	r3, [r7, #19]
 8005ab4:	e003      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	74fb      	strb	r3, [r7, #19]
 8005aba:	e000      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8005abc:	bf00      	nop
 8005abe:	7cfb      	ldrb	r3, [r7, #19]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10b      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8005ac4:	4b76      	ldr	r3, [pc, #472]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ad2:	4973      	ldr	r1, [pc, #460]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005ada:	e001      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005adc:	7cfb      	ldrb	r3, [r7, #19]
 8005ade:	74bb      	strb	r3, [r7, #18]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d041      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005af0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005af4:	d02a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005af6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005afa:	d824      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005afc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b00:	d008      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b06:	d81e      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b10:	d010      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b12:	e018      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b14:	4b62      	ldr	r3, [pc, #392]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	4a61      	ldr	r2, [pc, #388]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b1e:	60d3      	str	r3, [r2, #12]
 8005b20:	e015      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	2100      	movs	r1, #0
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 ffe1 	bl	8006af0 <RCCEx_PLLSAI1_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	74fb      	strb	r3, [r7, #19]
 8005b32:	e00c      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3320      	adds	r3, #32
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f001 f8cc 	bl	8006cd8 <RCCEx_PLLSAI2_Config>
 8005b40:	4603      	mov	r3, r0
 8005b42:	74fb      	strb	r3, [r7, #19]
 8005b44:	e003      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8005b46:	2301      	movs	r3, #1
 8005b48:	74fb      	strb	r3, [r7, #19]
 8005b4a:	e000      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8005b4c:	bf00      	nop
 8005b4e:	7cfb      	ldrb	r3, [r7, #19]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10b      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8005b54:	4b52      	ldr	r3, [pc, #328]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b62:	494f      	ldr	r1, [pc, #316]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005b6a:	e001      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8005b6c:	7cfb      	ldrb	r3, [r7, #19]
 8005b6e:	74bb      	strb	r3, [r7, #18]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80a0 	beq.w	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	747b      	strb	r3, [r7, #17]
 8005b82:	4b47      	ldr	r3, [pc, #284]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005b92:	2300      	movs	r3, #0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00d      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005b98:	4b41      	ldr	r3, [pc, #260]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9c:	4a40      	ldr	r2, [pc, #256]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ba2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	747b      	strb	r3, [r7, #17]
 8005bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	f7fc f99c 	bl	8001efc <HAL_GetTick>
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	e009      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005bc8:	f7fc f998 	bl	8001efc <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d902      	bls.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	74fb      	strb	r3, [r7, #19]
 8005bda:	e005      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005bdc:	4b31      	ldr	r3, [pc, #196]	@ (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0ef      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005be8:	7cfb      	ldrb	r3, [r7, #19]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d15c      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8005bee:	4b2c      	ldr	r3, [pc, #176]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01f      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d019      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c0c:	4b24      	ldr	r3, [pc, #144]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	4b21      	ldr	r3, [pc, #132]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c1e:	4a20      	ldr	r2, [pc, #128]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c28:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c38:	4a19      	ldr	r2, [pc, #100]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d016      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005c4a:	f7fc f957 	bl	8001efc <HAL_GetTick>
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	e00b      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c52:	f7fc f953 	bl	8001efc <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d902      	bls.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c64:	2303      	movs	r3, #3
 8005c66:	74fb      	strb	r3, [r7, #19]
 8005c68:	e006      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0ec      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005c78:	7cfb      	ldrb	r3, [r7, #19]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10c      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8005c7e:	4b08      	ldr	r3, [pc, #32]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c8e:	4904      	ldr	r1, [pc, #16]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c96:	e009      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005c98:	7cfb      	ldrb	r3, [r7, #19]
 8005c9a:	74bb      	strb	r3, [r7, #18]
 8005c9c:	e006      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005c9e:	bf00      	nop
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	40007000 	.word	0x40007000
 8005ca8:	7cfb      	ldrb	r3, [r7, #19]
 8005caa:	74bb      	strb	r3, [r7, #18]
 8005cac:	7c7b      	ldrb	r3, [r7, #17]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d105      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8005cb2:	4b9e      	ldr	r3, [pc, #632]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb6:	4a9d      	ldr	r2, [pc, #628]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005cca:	4b98      	ldr	r3, [pc, #608]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd0:	f023 0203 	bic.w	r2, r3, #3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd8:	4994      	ldr	r1, [pc, #592]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005cec:	4b8f      	ldr	r3, [pc, #572]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf2:	f023 020c 	bic.w	r2, r3, #12
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfa:	498c      	ldr	r1, [pc, #560]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8005d0e:	4b87      	ldr	r3, [pc, #540]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1c:	4983      	ldr	r1, [pc, #524]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8005d30:	4b7e      	ldr	r3, [pc, #504]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3e:	497b      	ldr	r1, [pc, #492]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005d52:	4b76      	ldr	r3, [pc, #472]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d60:	4972      	ldr	r1, [pc, #456]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d74:	4b6d      	ldr	r3, [pc, #436]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d82:	496a      	ldr	r1, [pc, #424]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005d96:	4b65      	ldr	r3, [pc, #404]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da4:	4961      	ldr	r1, [pc, #388]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8005db8:	4b5c      	ldr	r3, [pc, #368]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc6:	4959      	ldr	r1, [pc, #356]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8005dda:	4b54      	ldr	r3, [pc, #336]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de8:	4950      	ldr	r1, [pc, #320]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8005dfc:	4b4b      	ldr	r3, [pc, #300]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e02:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0a:	4948      	ldr	r1, [pc, #288]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005e1e:	4b43      	ldr	r3, [pc, #268]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2c:	493f      	ldr	r1, [pc, #252]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d028      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005e40:	4b3a      	ldr	r3, [pc, #232]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e4e:	4937      	ldr	r1, [pc, #220]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e5e:	d106      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005e60:	4b32      	ldr	r3, [pc, #200]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4a31      	ldr	r2, [pc, #196]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e6a:	60d3      	str	r3, [r2, #12]
 8005e6c:	e011      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e76:	d10c      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fe36 	bl	8006af0 <RCCEx_PLLSAI1_Config>
 8005e84:	4603      	mov	r3, r0
 8005e86:	74fb      	strb	r3, [r7, #19]
 8005e88:	7cfb      	ldrb	r3, [r7, #19]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005e8e:	7cfb      	ldrb	r3, [r7, #19]
 8005e90:	74bb      	strb	r3, [r7, #18]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d028      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005e9e:	4b23      	ldr	r3, [pc, #140]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eac:	491f      	ldr	r1, [pc, #124]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ebc:	d106      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ec8:	60d3      	str	r3, [r2, #12]
 8005eca:	e011      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	2101      	movs	r1, #1
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fe07 	bl	8006af0 <RCCEx_PLLSAI1_Config>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	74fb      	strb	r3, [r7, #19]
 8005ee6:	7cfb      	ldrb	r3, [r7, #19]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005eec:	7cfb      	ldrb	r3, [r7, #19]
 8005eee:	74bb      	strb	r3, [r7, #18]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d02b      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005efc:	4b0b      	ldr	r3, [pc, #44]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f0a:	4908      	ldr	r1, [pc, #32]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f1a:	d109      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005f1c:	4b03      	ldr	r3, [pc, #12]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4a02      	ldr	r2, [pc, #8]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f26:	60d3      	str	r3, [r2, #12]
 8005f28:	e014      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f2a:	bf00      	nop
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f38:	d10c      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	2101      	movs	r1, #1
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fdd5 	bl	8006af0 <RCCEx_PLLSAI1_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	74fb      	strb	r3, [r7, #19]
 8005f4a:	7cfb      	ldrb	r3, [r7, #19]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f50:	7cfb      	ldrb	r3, [r7, #19]
 8005f52:	74bb      	strb	r3, [r7, #18]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d02f      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8005f60:	4b2b      	ldr	r3, [pc, #172]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f66:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f6e:	4928      	ldr	r1, [pc, #160]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f7e:	d10d      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x55c>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3304      	adds	r3, #4
 8005f84:	2102      	movs	r1, #2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fdb2 	bl	8006af0 <RCCEx_PLLSAI1_Config>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	74fb      	strb	r3, [r7, #19]
 8005f90:	7cfb      	ldrb	r3, [r7, #19]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d014      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8005f96:	7cfb      	ldrb	r3, [r7, #19]
 8005f98:	74bb      	strb	r3, [r7, #18]
 8005f9a:	e011      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fa4:	d10c      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3320      	adds	r3, #32
 8005faa:	2102      	movs	r1, #2
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fe93 	bl	8006cd8 <RCCEx_PLLSAI2_Config>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	74fb      	strb	r3, [r7, #19]
 8005fb6:	7cfb      	ldrb	r3, [r7, #19]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8005fbc:	7cfb      	ldrb	r3, [r7, #19]
 8005fbe:	74bb      	strb	r3, [r7, #18]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005fcc:	4b10      	ldr	r3, [pc, #64]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fda:	490d      	ldr	r1, [pc, #52]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
 8005fee:	4b08      	ldr	r3, [pc, #32]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ffe:	4904      	ldr	r1, [pc, #16]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006006:	7cbb      	ldrb	r3, [r7, #18]
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	40021000 	.word	0x40021000

08006014 <HAL_RCCEx_GetPeriphCLKFreq>:
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	2300      	movs	r3, #0
 800601e:	61fb      	str	r3, [r7, #28]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006026:	d13e      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 8006028:	4bb2      	ldr	r3, [pc, #712]	@ (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800602e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800603a:	d028      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006042:	f200 8542 	bhi.w	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800604c:	d005      	beq.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006054:	d00e      	beq.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8006056:	f000 bd38 	b.w	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800605a:	4ba6      	ldr	r3, [pc, #664]	@ (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800605c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b02      	cmp	r3, #2
 8006066:	f040 8532 	bne.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
 800606a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800606e:	61fb      	str	r3, [r7, #28]
 8006070:	f000 bd2d 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
 8006074:	4b9f      	ldr	r3, [pc, #636]	@ (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b02      	cmp	r3, #2
 8006080:	f040 8527 	bne.w	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8006084:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	f000 bd22 	b.w	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800608e:	4b99      	ldr	r3, [pc, #612]	@ (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006096:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800609a:	f040 851c 	bne.w	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 800609e:	4b96      	ldr	r3, [pc, #600]	@ (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	f000 bd18 	b.w	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 80060a6:	4b93      	ldr	r3, [pc, #588]	@ (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d036      	beq.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d840      	bhi.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d003      	beq.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d020      	beq.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80060c8:	e039      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80060ca:	4b8a      	ldr	r3, [pc, #552]	@ (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d116      	bne.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 80060d6:	4b87      	ldr	r3, [pc, #540]	@ (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80060e2:	4b84      	ldr	r3, [pc, #528]	@ (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	091b      	lsrs	r3, r3, #4
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	e005      	b.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80060ee:	4b81      	ldr	r3, [pc, #516]	@ (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060f4:	0a1b      	lsrs	r3, r3, #8
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	4a80      	ldr	r2, [pc, #512]	@ (80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80060fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006100:	61bb      	str	r3, [r7, #24]
 8006102:	e01f      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8006104:	2300      	movs	r3, #0
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	e01c      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800610a:	4b7a      	ldr	r3, [pc, #488]	@ (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006116:	d102      	bne.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
 8006118:	4b79      	ldr	r3, [pc, #484]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800611a:	61bb      	str	r3, [r7, #24]
 800611c:	e012      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800611e:	2300      	movs	r3, #0
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	e00f      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8006124:	4b73      	ldr	r3, [pc, #460]	@ (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800612c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006130:	d102      	bne.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006132:	4b74      	ldr	r3, [pc, #464]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006134:	61bb      	str	r3, [r7, #24]
 8006136:	e005      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8006138:	2300      	movs	r3, #0
 800613a:	61bb      	str	r3, [r7, #24]
 800613c:	e002      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800613e:	2300      	movs	r3, #0
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	bf00      	nop
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800614a:	f000 80dd 	beq.w	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006154:	f200 84c1 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800615e:	f000 80d3 	beq.w	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006168:	f200 84b7 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006172:	f000 835f 	beq.w	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800617c:	f200 84ad 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006186:	f000 847e 	beq.w	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006190:	f200 84a3 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800619a:	f000 82cd 	beq.w	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061a4:	f200 8499 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ae:	f000 80ab 	beq.w	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061b8:	f200 848f 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c2:	f000 8090 	beq.w	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061cc:	f200 8485 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061d6:	d07f      	beq.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061de:	f200 847c 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061e8:	f000 8403 	beq.w	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061f2:	f200 8472 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061fc:	f000 83af 	beq.w	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006206:	f200 8468 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006210:	f000 8379 	beq.w	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800621a:	f200 845e 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b80      	cmp	r3, #128	@ 0x80
 8006222:	f000 8344 	beq.w	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b80      	cmp	r3, #128	@ 0x80
 800622a:	f200 8456 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b20      	cmp	r3, #32
 8006232:	d84b      	bhi.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	f000 844f 	beq.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3b01      	subs	r3, #1
 8006240:	2b1f      	cmp	r3, #31
 8006242:	f200 844a 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006246:	a201      	add	r2, pc, #4	@ (adr r2, 800624c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	08006435 	.word	0x08006435
 8006250:	080064a3 	.word	0x080064a3
 8006254:	08006adb 	.word	0x08006adb
 8006258:	08006537 	.word	0x08006537
 800625c:	08006adb 	.word	0x08006adb
 8006260:	08006adb 	.word	0x08006adb
 8006264:	08006adb 	.word	0x08006adb
 8006268:	080065bd 	.word	0x080065bd
 800626c:	08006adb 	.word	0x08006adb
 8006270:	08006adb 	.word	0x08006adb
 8006274:	08006adb 	.word	0x08006adb
 8006278:	08006adb 	.word	0x08006adb
 800627c:	08006adb 	.word	0x08006adb
 8006280:	08006adb 	.word	0x08006adb
 8006284:	08006adb 	.word	0x08006adb
 8006288:	08006635 	.word	0x08006635
 800628c:	08006adb 	.word	0x08006adb
 8006290:	08006adb 	.word	0x08006adb
 8006294:	08006adb 	.word	0x08006adb
 8006298:	08006adb 	.word	0x08006adb
 800629c:	08006adb 	.word	0x08006adb
 80062a0:	08006adb 	.word	0x08006adb
 80062a4:	08006adb 	.word	0x08006adb
 80062a8:	08006adb 	.word	0x08006adb
 80062ac:	08006adb 	.word	0x08006adb
 80062b0:	08006adb 	.word	0x08006adb
 80062b4:	08006adb 	.word	0x08006adb
 80062b8:	08006adb 	.word	0x08006adb
 80062bc:	08006adb 	.word	0x08006adb
 80062c0:	08006adb 	.word	0x08006adb
 80062c4:	08006adb 	.word	0x08006adb
 80062c8:	080066b7 	.word	0x080066b7
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b40      	cmp	r3, #64	@ 0x40
 80062d0:	f000 82c1 	beq.w	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80062d4:	f000 bc01 	b.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80062d8:	69b9      	ldr	r1, [r7, #24]
 80062da:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80062de:	f000 fdd9 	bl	8006e94 <RCCEx_GetSAIxPeriphCLKFreq>
 80062e2:	61f8      	str	r0, [r7, #28]
 80062e4:	e3fa      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80062e6:	69b9      	ldr	r1, [r7, #24]
 80062e8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80062ec:	f000 fdd2 	bl	8006e94 <RCCEx_GetSAIxPeriphCLKFreq>
 80062f0:	61f8      	str	r0, [r7, #28]
 80062f2:	e3f3      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80062f4:	40021000 	.word	0x40021000
 80062f8:	0003d090 	.word	0x0003d090
 80062fc:	0800bd88 	.word	0x0800bd88
 8006300:	00f42400 	.word	0x00f42400
 8006304:	007a1200 	.word	0x007a1200
 8006308:	4ba9      	ldr	r3, [pc, #676]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800630a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800630e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006312:	613b      	str	r3, [r7, #16]
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800631a:	d00c      	beq.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006322:	d87f      	bhi.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800632a:	d04e      	beq.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006332:	d01d      	beq.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8006334:	e076      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8006336:	4b9e      	ldr	r3, [pc, #632]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b02      	cmp	r3, #2
 8006340:	d172      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006342:	4b9b      	ldr	r3, [pc, #620]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 800634e:	4b98      	ldr	r3, [pc, #608]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	091b      	lsrs	r3, r3, #4
 8006354:	f003 030f 	and.w	r3, r3, #15
 8006358:	e005      	b.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800635a:	4b95      	ldr	r3, [pc, #596]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800635c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006360:	0a1b      	lsrs	r3, r3, #8
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	4a93      	ldr	r2, [pc, #588]	@ (80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800636c:	61fb      	str	r3, [r7, #28]
 800636e:	e05b      	b.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006370:	4b8f      	ldr	r3, [pc, #572]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006378:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800637c:	d156      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800637e:	4b8c      	ldr	r3, [pc, #560]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800638a:	d14f      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800638c:	4b88      	ldr	r3, [pc, #544]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	0a1b      	lsrs	r3, r3, #8
 8006392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	fb03 f202 	mul.w	r2, r3, r2
 80063a0:	4b83      	ldr	r3, [pc, #524]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	091b      	lsrs	r3, r3, #4
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	3301      	adds	r3, #1
 80063ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	4b7f      	ldr	r3, [pc, #508]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	0d5b      	lsrs	r3, r3, #21
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	3301      	adds	r3, #1
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c6:	61fb      	str	r3, [r7, #28]
 80063c8:	e030      	b.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80063ca:	4b79      	ldr	r3, [pc, #484]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063d6:	d12b      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 80063d8:	4b75      	ldr	r3, [pc, #468]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063e4:	d124      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 80063e6:	4b72      	ldr	r3, [pc, #456]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	0a1b      	lsrs	r3, r3, #8
 80063ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	fb03 f202 	mul.w	r2, r3, r2
 80063fa:	4b6d      	ldr	r3, [pc, #436]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	091b      	lsrs	r3, r3, #4
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	3301      	adds	r3, #1
 8006406:	fbb2 f3f3 	udiv	r3, r2, r3
 800640a:	61bb      	str	r3, [r7, #24]
 800640c:	4b68      	ldr	r3, [pc, #416]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	0d5b      	lsrs	r3, r3, #21
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	3301      	adds	r3, #1
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006420:	61fb      	str	r3, [r7, #28]
 8006422:	e005      	b.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8006424:	bf00      	nop
 8006426:	e359      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006428:	bf00      	nop
 800642a:	e357      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800642c:	bf00      	nop
 800642e:	e355      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006430:	bf00      	nop
 8006432:	e353      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006434:	4b5e      	ldr	r3, [pc, #376]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b03      	cmp	r3, #3
 8006444:	d827      	bhi.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8006446:	a201      	add	r2, pc, #4	@ (adr r2, 800644c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	0800645d 	.word	0x0800645d
 8006450:	08006465 	.word	0x08006465
 8006454:	0800646d 	.word	0x0800646d
 8006458:	08006481 	.word	0x08006481
 800645c:	f7ff fa7a 	bl	8005954 <HAL_RCC_GetPCLK2Freq>
 8006460:	61f8      	str	r0, [r7, #28]
 8006462:	e01d      	b.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8006464:	f7ff f9c8 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 8006468:	61f8      	str	r0, [r7, #28]
 800646a:	e019      	b.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 800646c:	4b50      	ldr	r3, [pc, #320]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006478:	d10f      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800647a:	4b4f      	ldr	r3, [pc, #316]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	e00c      	b.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8006480:	4b4b      	ldr	r3, [pc, #300]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b02      	cmp	r3, #2
 800648c:	d107      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800648e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	e003      	b.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006496:	bf00      	nop
 8006498:	e320      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800649a:	bf00      	nop
 800649c:	e31e      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800649e:	bf00      	nop
 80064a0:	e31c      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80064a2:	4b43      	ldr	r3, [pc, #268]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80064a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a8:	f003 030c 	and.w	r3, r3, #12
 80064ac:	613b      	str	r3, [r7, #16]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b0c      	cmp	r3, #12
 80064b2:	d83a      	bhi.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80064b4:	a201      	add	r2, pc, #4	@ (adr r2, 80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	080064f1 	.word	0x080064f1
 80064c0:	0800652b 	.word	0x0800652b
 80064c4:	0800652b 	.word	0x0800652b
 80064c8:	0800652b 	.word	0x0800652b
 80064cc:	080064f9 	.word	0x080064f9
 80064d0:	0800652b 	.word	0x0800652b
 80064d4:	0800652b 	.word	0x0800652b
 80064d8:	0800652b 	.word	0x0800652b
 80064dc:	08006501 	.word	0x08006501
 80064e0:	0800652b 	.word	0x0800652b
 80064e4:	0800652b 	.word	0x0800652b
 80064e8:	0800652b 	.word	0x0800652b
 80064ec:	08006515 	.word	0x08006515
 80064f0:	f7ff fa1a 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 80064f4:	61f8      	str	r0, [r7, #28]
 80064f6:	e01d      	b.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80064f8:	f7ff f97e 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 80064fc:	61f8      	str	r0, [r7, #28]
 80064fe:	e019      	b.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8006500:	4b2b      	ldr	r3, [pc, #172]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800650c:	d10f      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 800650e:	4b2a      	ldr	r3, [pc, #168]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006510:	61fb      	str	r3, [r7, #28]
 8006512:	e00c      	b.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8006514:	4b26      	ldr	r3, [pc, #152]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b02      	cmp	r3, #2
 8006520:	d107      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8006522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	e003      	b.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800652a:	bf00      	nop
 800652c:	e2d6      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800652e:	bf00      	nop
 8006530:	e2d4      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006532:	bf00      	nop
 8006534:	e2d2      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006536:	4b1e      	ldr	r3, [pc, #120]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b30      	cmp	r3, #48	@ 0x30
 8006546:	d021      	beq.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	2b30      	cmp	r3, #48	@ 0x30
 800654c:	d829      	bhi.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b20      	cmp	r3, #32
 8006552:	d011      	beq.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b20      	cmp	r3, #32
 8006558:	d823      	bhi.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2b10      	cmp	r3, #16
 8006564:	d004      	beq.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8006566:	e01c      	b.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006568:	f7ff f9de 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 800656c:	61f8      	str	r0, [r7, #28]
 800656e:	e01d      	b.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006570:	f7ff f942 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 8006574:	61f8      	str	r0, [r7, #28]
 8006576:	e019      	b.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006578:	4b0d      	ldr	r3, [pc, #52]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006584:	d10f      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8006586:	4b0c      	ldr	r3, [pc, #48]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	e00c      	b.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 800658c:	4b08      	ldr	r3, [pc, #32]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800658e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b02      	cmp	r3, #2
 8006598:	d107      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800659a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	e003      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80065a2:	bf00      	nop
 80065a4:	e29a      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80065a6:	bf00      	nop
 80065a8:	e298      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80065aa:	bf00      	nop
 80065ac:	e296      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000
 80065b4:	0800bd88 	.word	0x0800bd88
 80065b8:	00f42400 	.word	0x00f42400
 80065bc:	4b9b      	ldr	r3, [pc, #620]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065c6:	613b      	str	r3, [r7, #16]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80065cc:	d021      	beq.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80065d2:	d829      	bhi.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b80      	cmp	r3, #128	@ 0x80
 80065d8:	d011      	beq.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	2b80      	cmp	r3, #128	@ 0x80
 80065de:	d823      	bhi.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b40      	cmp	r3, #64	@ 0x40
 80065ea:	d004      	beq.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 80065ec:	e01c      	b.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80065ee:	f7ff f99b 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 80065f2:	61f8      	str	r0, [r7, #28]
 80065f4:	e01d      	b.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
 80065f6:	f7ff f8ff 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 80065fa:	61f8      	str	r0, [r7, #28]
 80065fc:	e019      	b.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
 80065fe:	4b8b      	ldr	r3, [pc, #556]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800660a:	d10f      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800660c:	4b88      	ldr	r3, [pc, #544]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	e00c      	b.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006612:	4b86      	ldr	r3, [pc, #536]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b02      	cmp	r3, #2
 800661e:	d107      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8006620:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006624:	61fb      	str	r3, [r7, #28]
 8006626:	e003      	b.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8006628:	bf00      	nop
 800662a:	e257      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800662c:	bf00      	nop
 800662e:	e255      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006630:	bf00      	nop
 8006632:	e253      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006634:	4b7d      	ldr	r3, [pc, #500]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800663a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006646:	d025      	beq.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800664e:	d82c      	bhi.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006656:	d013      	beq.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800665e:	d824      	bhi.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d004      	beq.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800666c:	d004      	beq.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800666e:	e01c      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006670:	f7ff f95a 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 8006674:	61f8      	str	r0, [r7, #28]
 8006676:	e01d      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8006678:	f7ff f8be 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 800667c:	61f8      	str	r0, [r7, #28]
 800667e:	e019      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8006680:	4b6a      	ldr	r3, [pc, #424]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800668c:	d10f      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 800668e:	4b68      	ldr	r3, [pc, #416]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006690:	61fb      	str	r3, [r7, #28]
 8006692:	e00c      	b.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8006694:	4b65      	ldr	r3, [pc, #404]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d107      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 80066a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066a6:	61fb      	str	r3, [r7, #28]
 80066a8:	e003      	b.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 80066aa:	bf00      	nop
 80066ac:	e216      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80066ae:	bf00      	nop
 80066b0:	e214      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80066b2:	bf00      	nop
 80066b4:	e212      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80066b6:	4b5d      	ldr	r3, [pc, #372]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066c8:	d025      	beq.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066d0:	d82c      	bhi.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066d8:	d013      	beq.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066e0:	d824      	bhi.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d004      	beq.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ee:	d004      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
 80066f0:	e01c      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80066f2:	f7ff f919 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 80066f6:	61f8      	str	r0, [r7, #28]
 80066f8:	e01d      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
 80066fa:	f7ff f87d 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 80066fe:	61f8      	str	r0, [r7, #28]
 8006700:	e019      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
 8006702:	4b4a      	ldr	r3, [pc, #296]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800670a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800670e:	d10f      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8006710:	4b47      	ldr	r3, [pc, #284]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006712:	61fb      	str	r3, [r7, #28]
 8006714:	e00c      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8006716:	4b45      	ldr	r3, [pc, #276]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b02      	cmp	r3, #2
 8006722:	d107      	bne.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006724:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	e003      	b.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800672c:	bf00      	nop
 800672e:	e1d5      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006730:	bf00      	nop
 8006732:	e1d3      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006734:	bf00      	nop
 8006736:	e1d1      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006738:	4b3c      	ldr	r3, [pc, #240]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800673a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800673e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800674a:	d00c      	beq.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006752:	d864      	bhi.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800675a:	d008      	beq.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006762:	d030      	beq.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8006764:	e05b      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8006766:	f7ff f847 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 800676a:	61f8      	str	r0, [r7, #28]
 800676c:	e05c      	b.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800676e:	4b2f      	ldr	r3, [pc, #188]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800677a:	d152      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800677c:	4b2b      	ldr	r3, [pc, #172]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d04c      	beq.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8006788:	4b28      	ldr	r3, [pc, #160]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	0a1b      	lsrs	r3, r3, #8
 800678e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	fb03 f202 	mul.w	r2, r3, r2
 800679c:	4b23      	ldr	r3, [pc, #140]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	091b      	lsrs	r3, r3, #4
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	3301      	adds	r3, #1
 80067a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	4b1f      	ldr	r3, [pc, #124]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	0e5b      	lsrs	r3, r3, #25
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	3301      	adds	r3, #1
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	e02d      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80067c6:	4b19      	ldr	r3, [pc, #100]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067d2:	d128      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80067d4:	4b15      	ldr	r3, [pc, #84]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d022      	beq.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80067e0:	4b12      	ldr	r3, [pc, #72]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	0a1b      	lsrs	r3, r3, #8
 80067e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	fb03 f202 	mul.w	r2, r3, r2
 80067f4:	4b0d      	ldr	r3, [pc, #52]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	091b      	lsrs	r3, r3, #4
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	3301      	adds	r3, #1
 8006800:	fbb2 f3f3 	udiv	r3, r2, r3
 8006804:	61bb      	str	r3, [r7, #24]
 8006806:	4b09      	ldr	r3, [pc, #36]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	0e5b      	lsrs	r3, r3, #25
 800680c:	f003 0303 	and.w	r3, r3, #3
 8006810:	3301      	adds	r3, #1
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	fbb2 f3f3 	udiv	r3, r2, r3
 800681a:	61fb      	str	r3, [r7, #28]
 800681c:	e003      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800681e:	bf00      	nop
 8006820:	e15c      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006822:	bf00      	nop
 8006824:	e15a      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006826:	bf00      	nop
 8006828:	e158      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800682a:	bf00      	nop
 800682c:	40021000 	.word	0x40021000
 8006830:	00f42400 	.word	0x00f42400
 8006834:	4b9d      	ldr	r3, [pc, #628]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d103      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006846:	f7ff f885 	bl	8005954 <HAL_RCC_GetPCLK2Freq>
 800684a:	61f8      	str	r0, [r7, #28]
 800684c:	e146      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800684e:	f7fe ffd3 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 8006852:	61f8      	str	r0, [r7, #28]
 8006854:	e142      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006856:	4b95      	ldr	r3, [pc, #596]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006868:	d013      	beq.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006870:	d819      	bhi.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d004      	beq.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800687e:	d004      	beq.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8006880:	e011      	b.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8006882:	f7ff f851 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 8006886:	61f8      	str	r0, [r7, #28]
 8006888:	e010      	b.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 800688a:	f7fe ffb5 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 800688e:	61f8      	str	r0, [r7, #28]
 8006890:	e00c      	b.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8006892:	4b86      	ldr	r3, [pc, #536]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800689a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800689e:	d104      	bne.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x896>
 80068a0:	4b83      	ldr	r3, [pc, #524]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80068a2:	61fb      	str	r3, [r7, #28]
 80068a4:	e001      	b.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x896>
 80068a6:	bf00      	nop
 80068a8:	e118      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80068aa:	bf00      	nop
 80068ac:	e116      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80068ae:	4b7f      	ldr	r3, [pc, #508]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80068b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068c0:	d013      	beq.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068c8:	d819      	bhi.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068d6:	d004      	beq.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80068d8:	e011      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80068da:	f7ff f825 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 80068de:	61f8      	str	r0, [r7, #28]
 80068e0:	e010      	b.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 80068e2:	f7fe ff89 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 80068e6:	61f8      	str	r0, [r7, #28]
 80068e8:	e00c      	b.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 80068ea:	4b70      	ldr	r3, [pc, #448]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f6:	d104      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
 80068f8:	4b6d      	ldr	r3, [pc, #436]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	e001      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
 80068fe:	bf00      	nop
 8006900:	e0ec      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006902:	bf00      	nop
 8006904:	e0ea      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006906:	4b69      	ldr	r3, [pc, #420]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800690c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006910:	613b      	str	r3, [r7, #16]
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006918:	d013      	beq.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006920:	d819      	bhi.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d004      	beq.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800692e:	d004      	beq.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8006930:	e011      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8006932:	f7fe fff9 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 8006936:	61f8      	str	r0, [r7, #28]
 8006938:	e010      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 800693a:	f7fe ff5d 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 800693e:	61f8      	str	r0, [r7, #28]
 8006940:	e00c      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8006942:	4b5a      	ldr	r3, [pc, #360]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800694a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800694e:	d104      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
 8006950:	4b57      	ldr	r3, [pc, #348]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	e001      	b.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
 8006956:	bf00      	nop
 8006958:	e0c0      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800695a:	bf00      	nop
 800695c:	e0be      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800695e:	4b53      	ldr	r3, [pc, #332]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006964:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006970:	d02c      	beq.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006978:	d833      	bhi.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006980:	d01a      	beq.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006988:	d82b      	bhi.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d004      	beq.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006996:	d004      	beq.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8006998:	e023      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800699a:	f7fe ffc5 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 800699e:	61f8      	str	r0, [r7, #28]
 80069a0:	e026      	b.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80069a2:	4b42      	ldr	r3, [pc, #264]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80069a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d11a      	bne.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 80069b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	e016      	b.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 80069b8:	4b3c      	ldr	r3, [pc, #240]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069c4:	d111      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 80069c6:	4b3a      	ldr	r3, [pc, #232]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80069c8:	61fb      	str	r3, [r7, #28]
 80069ca:	e00e      	b.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 80069cc:	4b37      	ldr	r3, [pc, #220]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80069ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d109      	bne.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 80069da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069de:	61fb      	str	r3, [r7, #28]
 80069e0:	e005      	b.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 80069e2:	bf00      	nop
 80069e4:	e07a      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80069e6:	bf00      	nop
 80069e8:	e078      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80069ea:	bf00      	nop
 80069ec:	e076      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80069ee:	bf00      	nop
 80069f0:	e074      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80069f2:	4b2e      	ldr	r3, [pc, #184]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80069f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80069fc:	613b      	str	r3, [r7, #16]
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a04:	d02c      	beq.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a0c:	d833      	bhi.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a14:	d01a      	beq.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a1c:	d82b      	bhi.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d004      	beq.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a2a:	d004      	beq.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8006a2c:	e023      	b.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006a2e:	f7fe ff7b 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 8006a32:	61f8      	str	r0, [r7, #28]
 8006a34:	e026      	b.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006a36:	4b1d      	ldr	r3, [pc, #116]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d11a      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 8006a44:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a48:	61fb      	str	r3, [r7, #28]
 8006a4a:	e016      	b.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 8006a4c:	4b17      	ldr	r3, [pc, #92]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a58:	d111      	bne.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8006a5a:	4b15      	ldr	r3, [pc, #84]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	e00e      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8006a60:	4b12      	ldr	r3, [pc, #72]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d109      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8006a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a72:	61fb      	str	r3, [r7, #28]
 8006a74:	e005      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8006a76:	bf00      	nop
 8006a78:	e030      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006a7a:	bf00      	nop
 8006a7c:	e02e      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006a7e:	bf00      	nop
 8006a80:	e02c      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006a82:	bf00      	nop
 8006a84:	e02a      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006a86:	4b09      	ldr	r3, [pc, #36]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006a90:	613b      	str	r3, [r7, #16]
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d004      	beq.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9e:	d009      	beq.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8006aa0:	e012      	b.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8006aa2:	f7fe ff41 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 8006aa6:	61f8      	str	r0, [r7, #28]
 8006aa8:	e00e      	b.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8006aaa:	bf00      	nop
 8006aac:	40021000 	.word	0x40021000
 8006ab0:	00f42400 	.word	0x00f42400
 8006ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac0:	d101      	bne.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 8006ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	bf00      	nop
 8006ac8:	e008      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006aca:	bf00      	nop
 8006acc:	e006      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006ace:	bf00      	nop
 8006ad0:	e004      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006ad2:	bf00      	nop
 8006ad4:	e002      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006ad6:	bf00      	nop
 8006ad8:	e000      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006ada:	bf00      	nop
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3720      	adds	r7, #32
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	00f42400 	.word	0x00f42400

08006af0 <RCCEx_PLLSAI1_Config>:
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]
 8006afe:	4b75      	ldr	r3, [pc, #468]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d018      	beq.n	8006b3c <RCCEx_PLLSAI1_Config+0x4c>
 8006b0a:	4b72      	ldr	r3, [pc, #456]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f003 0203 	and.w	r2, r3, #3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d10d      	bne.n	8006b36 <RCCEx_PLLSAI1_Config+0x46>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d009      	beq.n	8006b36 <RCCEx_PLLSAI1_Config+0x46>
 8006b22:	4b6c      	ldr	r3, [pc, #432]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	091b      	lsrs	r3, r3, #4
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d047      	beq.n	8006bc6 <RCCEx_PLLSAI1_Config+0xd6>
 8006b36:	2301      	movs	r3, #1
 8006b38:	73fb      	strb	r3, [r7, #15]
 8006b3a:	e044      	b.n	8006bc6 <RCCEx_PLLSAI1_Config+0xd6>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b03      	cmp	r3, #3
 8006b42:	d018      	beq.n	8006b76 <RCCEx_PLLSAI1_Config+0x86>
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d825      	bhi.n	8006b94 <RCCEx_PLLSAI1_Config+0xa4>
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d002      	beq.n	8006b52 <RCCEx_PLLSAI1_Config+0x62>
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d009      	beq.n	8006b64 <RCCEx_PLLSAI1_Config+0x74>
 8006b50:	e020      	b.n	8006b94 <RCCEx_PLLSAI1_Config+0xa4>
 8006b52:	4b60      	ldr	r3, [pc, #384]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d11d      	bne.n	8006b9a <RCCEx_PLLSAI1_Config+0xaa>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	73fb      	strb	r3, [r7, #15]
 8006b62:	e01a      	b.n	8006b9a <RCCEx_PLLSAI1_Config+0xaa>
 8006b64:	4b5b      	ldr	r3, [pc, #364]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d116      	bne.n	8006b9e <RCCEx_PLLSAI1_Config+0xae>
 8006b70:	2301      	movs	r3, #1
 8006b72:	73fb      	strb	r3, [r7, #15]
 8006b74:	e013      	b.n	8006b9e <RCCEx_PLLSAI1_Config+0xae>
 8006b76:	4b57      	ldr	r3, [pc, #348]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10f      	bne.n	8006ba2 <RCCEx_PLLSAI1_Config+0xb2>
 8006b82:	4b54      	ldr	r3, [pc, #336]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d109      	bne.n	8006ba2 <RCCEx_PLLSAI1_Config+0xb2>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	73fb      	strb	r3, [r7, #15]
 8006b92:	e006      	b.n	8006ba2 <RCCEx_PLLSAI1_Config+0xb2>
 8006b94:	2301      	movs	r3, #1
 8006b96:	73fb      	strb	r3, [r7, #15]
 8006b98:	e004      	b.n	8006ba4 <RCCEx_PLLSAI1_Config+0xb4>
 8006b9a:	bf00      	nop
 8006b9c:	e002      	b.n	8006ba4 <RCCEx_PLLSAI1_Config+0xb4>
 8006b9e:	bf00      	nop
 8006ba0:	e000      	b.n	8006ba4 <RCCEx_PLLSAI1_Config+0xb4>
 8006ba2:	bf00      	nop
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10d      	bne.n	8006bc6 <RCCEx_PLLSAI1_Config+0xd6>
 8006baa:	4b4a      	ldr	r3, [pc, #296]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6819      	ldr	r1, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	430b      	orrs	r3, r1
 8006bc0:	4944      	ldr	r1, [pc, #272]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60cb      	str	r3, [r1, #12]
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d17d      	bne.n	8006cc8 <RCCEx_PLLSAI1_Config+0x1d8>
 8006bcc:	4b41      	ldr	r3, [pc, #260]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a40      	ldr	r2, [pc, #256]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	f7fb f990 	bl	8001efc <HAL_GetTick>
 8006bdc:	60b8      	str	r0, [r7, #8]
 8006bde:	e009      	b.n	8006bf4 <RCCEx_PLLSAI1_Config+0x104>
 8006be0:	f7fb f98c 	bl	8001efc <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d902      	bls.n	8006bf4 <RCCEx_PLLSAI1_Config+0x104>
 8006bee:	2303      	movs	r3, #3
 8006bf0:	73fb      	strb	r3, [r7, #15]
 8006bf2:	e005      	b.n	8006c00 <RCCEx_PLLSAI1_Config+0x110>
 8006bf4:	4b37      	ldr	r3, [pc, #220]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1ef      	bne.n	8006be0 <RCCEx_PLLSAI1_Config+0xf0>
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d160      	bne.n	8006cc8 <RCCEx_PLLSAI1_Config+0x1d8>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d111      	bne.n	8006c30 <RCCEx_PLLSAI1_Config+0x140>
 8006c0c:	4b31      	ldr	r3, [pc, #196]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	6892      	ldr	r2, [r2, #8]
 8006c1c:	0211      	lsls	r1, r2, #8
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	68d2      	ldr	r2, [r2, #12]
 8006c22:	0912      	lsrs	r2, r2, #4
 8006c24:	0452      	lsls	r2, r2, #17
 8006c26:	430a      	orrs	r2, r1
 8006c28:	492a      	ldr	r1, [pc, #168]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	610b      	str	r3, [r1, #16]
 8006c2e:	e027      	b.n	8006c80 <RCCEx_PLLSAI1_Config+0x190>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d112      	bne.n	8006c5c <RCCEx_PLLSAI1_Config+0x16c>
 8006c36:	4b27      	ldr	r3, [pc, #156]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006c3e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	6892      	ldr	r2, [r2, #8]
 8006c46:	0211      	lsls	r1, r2, #8
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6912      	ldr	r2, [r2, #16]
 8006c4c:	0852      	lsrs	r2, r2, #1
 8006c4e:	3a01      	subs	r2, #1
 8006c50:	0552      	lsls	r2, r2, #21
 8006c52:	430a      	orrs	r2, r1
 8006c54:	491f      	ldr	r1, [pc, #124]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	610b      	str	r3, [r1, #16]
 8006c5a:	e011      	b.n	8006c80 <RCCEx_PLLSAI1_Config+0x190>
 8006c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006c64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6892      	ldr	r2, [r2, #8]
 8006c6c:	0211      	lsls	r1, r2, #8
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6952      	ldr	r2, [r2, #20]
 8006c72:	0852      	lsrs	r2, r2, #1
 8006c74:	3a01      	subs	r2, #1
 8006c76:	0652      	lsls	r2, r2, #25
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	4916      	ldr	r1, [pc, #88]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	610b      	str	r3, [r1, #16]
 8006c80:	4b14      	ldr	r3, [pc, #80]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a13      	ldr	r2, [pc, #76]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	f7fb f936 	bl	8001efc <HAL_GetTick>
 8006c90:	60b8      	str	r0, [r7, #8]
 8006c92:	e009      	b.n	8006ca8 <RCCEx_PLLSAI1_Config+0x1b8>
 8006c94:	f7fb f932 	bl	8001efc <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d902      	bls.n	8006ca8 <RCCEx_PLLSAI1_Config+0x1b8>
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	73fb      	strb	r3, [r7, #15]
 8006ca6:	e005      	b.n	8006cb4 <RCCEx_PLLSAI1_Config+0x1c4>
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0ef      	beq.n	8006c94 <RCCEx_PLLSAI1_Config+0x1a4>
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <RCCEx_PLLSAI1_Config+0x1d8>
 8006cba:	4b06      	ldr	r3, [pc, #24]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cbc:	691a      	ldr	r2, [r3, #16]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	4904      	ldr	r1, [pc, #16]	@ (8006cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	610b      	str	r3, [r1, #16]
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40021000 	.word	0x40021000

08006cd8 <RCCEx_PLLSAI2_Config>:
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]
 8006ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f003 0303 	and.w	r3, r3, #3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d018      	beq.n	8006d24 <RCCEx_PLLSAI2_Config+0x4c>
 8006cf2:	4b67      	ldr	r3, [pc, #412]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f003 0203 	and.w	r2, r3, #3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d10d      	bne.n	8006d1e <RCCEx_PLLSAI2_Config+0x46>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d009      	beq.n	8006d1e <RCCEx_PLLSAI2_Config+0x46>
 8006d0a:	4b61      	ldr	r3, [pc, #388]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	091b      	lsrs	r3, r3, #4
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d047      	beq.n	8006dae <RCCEx_PLLSAI2_Config+0xd6>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	73fb      	strb	r3, [r7, #15]
 8006d22:	e044      	b.n	8006dae <RCCEx_PLLSAI2_Config+0xd6>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b03      	cmp	r3, #3
 8006d2a:	d018      	beq.n	8006d5e <RCCEx_PLLSAI2_Config+0x86>
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d825      	bhi.n	8006d7c <RCCEx_PLLSAI2_Config+0xa4>
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d002      	beq.n	8006d3a <RCCEx_PLLSAI2_Config+0x62>
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d009      	beq.n	8006d4c <RCCEx_PLLSAI2_Config+0x74>
 8006d38:	e020      	b.n	8006d7c <RCCEx_PLLSAI2_Config+0xa4>
 8006d3a:	4b55      	ldr	r3, [pc, #340]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d11d      	bne.n	8006d82 <RCCEx_PLLSAI2_Config+0xaa>
 8006d46:	2301      	movs	r3, #1
 8006d48:	73fb      	strb	r3, [r7, #15]
 8006d4a:	e01a      	b.n	8006d82 <RCCEx_PLLSAI2_Config+0xaa>
 8006d4c:	4b50      	ldr	r3, [pc, #320]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d116      	bne.n	8006d86 <RCCEx_PLLSAI2_Config+0xae>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	73fb      	strb	r3, [r7, #15]
 8006d5c:	e013      	b.n	8006d86 <RCCEx_PLLSAI2_Config+0xae>
 8006d5e:	4b4c      	ldr	r3, [pc, #304]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10f      	bne.n	8006d8a <RCCEx_PLLSAI2_Config+0xb2>
 8006d6a:	4b49      	ldr	r3, [pc, #292]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d109      	bne.n	8006d8a <RCCEx_PLLSAI2_Config+0xb2>
 8006d76:	2301      	movs	r3, #1
 8006d78:	73fb      	strb	r3, [r7, #15]
 8006d7a:	e006      	b.n	8006d8a <RCCEx_PLLSAI2_Config+0xb2>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	73fb      	strb	r3, [r7, #15]
 8006d80:	e004      	b.n	8006d8c <RCCEx_PLLSAI2_Config+0xb4>
 8006d82:	bf00      	nop
 8006d84:	e002      	b.n	8006d8c <RCCEx_PLLSAI2_Config+0xb4>
 8006d86:	bf00      	nop
 8006d88:	e000      	b.n	8006d8c <RCCEx_PLLSAI2_Config+0xb4>
 8006d8a:	bf00      	nop
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10d      	bne.n	8006dae <RCCEx_PLLSAI2_Config+0xd6>
 8006d92:	4b3f      	ldr	r3, [pc, #252]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6819      	ldr	r1, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	430b      	orrs	r3, r1
 8006da8:	4939      	ldr	r1, [pc, #228]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60cb      	str	r3, [r1, #12]
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d167      	bne.n	8006e84 <RCCEx_PLLSAI2_Config+0x1ac>
 8006db4:	4b36      	ldr	r3, [pc, #216]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a35      	ldr	r2, [pc, #212]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dbe:	6013      	str	r3, [r2, #0]
 8006dc0:	f7fb f89c 	bl	8001efc <HAL_GetTick>
 8006dc4:	60b8      	str	r0, [r7, #8]
 8006dc6:	e009      	b.n	8006ddc <RCCEx_PLLSAI2_Config+0x104>
 8006dc8:	f7fb f898 	bl	8001efc <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d902      	bls.n	8006ddc <RCCEx_PLLSAI2_Config+0x104>
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	73fb      	strb	r3, [r7, #15]
 8006dda:	e005      	b.n	8006de8 <RCCEx_PLLSAI2_Config+0x110>
 8006ddc:	4b2c      	ldr	r3, [pc, #176]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1ef      	bne.n	8006dc8 <RCCEx_PLLSAI2_Config+0xf0>
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d14a      	bne.n	8006e84 <RCCEx_PLLSAI2_Config+0x1ac>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d111      	bne.n	8006e18 <RCCEx_PLLSAI2_Config+0x140>
 8006df4:	4b26      	ldr	r3, [pc, #152]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6892      	ldr	r2, [r2, #8]
 8006e04:	0211      	lsls	r1, r2, #8
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	68d2      	ldr	r2, [r2, #12]
 8006e0a:	0912      	lsrs	r2, r2, #4
 8006e0c:	0452      	lsls	r2, r2, #17
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	491f      	ldr	r1, [pc, #124]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	614b      	str	r3, [r1, #20]
 8006e16:	e011      	b.n	8006e3c <RCCEx_PLLSAI2_Config+0x164>
 8006e18:	4b1d      	ldr	r3, [pc, #116]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006e20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	6892      	ldr	r2, [r2, #8]
 8006e28:	0211      	lsls	r1, r2, #8
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6912      	ldr	r2, [r2, #16]
 8006e2e:	0852      	lsrs	r2, r2, #1
 8006e30:	3a01      	subs	r2, #1
 8006e32:	0652      	lsls	r2, r2, #25
 8006e34:	430a      	orrs	r2, r1
 8006e36:	4916      	ldr	r1, [pc, #88]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	614b      	str	r3, [r1, #20]
 8006e3c:	4b14      	ldr	r3, [pc, #80]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a13      	ldr	r2, [pc, #76]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	f7fb f858 	bl	8001efc <HAL_GetTick>
 8006e4c:	60b8      	str	r0, [r7, #8]
 8006e4e:	e009      	b.n	8006e64 <RCCEx_PLLSAI2_Config+0x18c>
 8006e50:	f7fb f854 	bl	8001efc <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d902      	bls.n	8006e64 <RCCEx_PLLSAI2_Config+0x18c>
 8006e5e:	2303      	movs	r3, #3
 8006e60:	73fb      	strb	r3, [r7, #15]
 8006e62:	e005      	b.n	8006e70 <RCCEx_PLLSAI2_Config+0x198>
 8006e64:	4b0a      	ldr	r3, [pc, #40]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0ef      	beq.n	8006e50 <RCCEx_PLLSAI2_Config+0x178>
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d106      	bne.n	8006e84 <RCCEx_PLLSAI2_Config+0x1ac>
 8006e76:	4b06      	ldr	r3, [pc, #24]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e78:	695a      	ldr	r2, [r3, #20]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	4904      	ldr	r1, [pc, #16]	@ (8006e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	614b      	str	r3, [r1, #20]
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	40021000 	.word	0x40021000

08006e94 <RCCEx_GetSAIxPeriphCLKFreq>:
 8006e94:	b480      	push	{r7}
 8006e96:	b089      	sub	sp, #36	@ 0x24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61fb      	str	r3, [r7, #28]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61bb      	str	r3, [r7, #24]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006eb0:	d10c      	bne.n	8006ecc <RCCEx_GetSAIxPeriphCLKFreq+0x38>
 8006eb2:	4b6e      	ldr	r3, [pc, #440]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ec4:	d112      	bne.n	8006eec <RCCEx_GetSAIxPeriphCLKFreq+0x58>
 8006ec6:	4b6a      	ldr	r3, [pc, #424]	@ (8007070 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006ec8:	61fb      	str	r3, [r7, #28]
 8006eca:	e00f      	b.n	8006eec <RCCEx_GetSAIxPeriphCLKFreq+0x58>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ed2:	d10b      	bne.n	8006eec <RCCEx_GetSAIxPeriphCLKFreq+0x58>
 8006ed4:	4b65      	ldr	r3, [pc, #404]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eda:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006ede:	61bb      	str	r3, [r7, #24]
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ee6:	d101      	bne.n	8006eec <RCCEx_GetSAIxPeriphCLKFreq+0x58>
 8006ee8:	4b61      	ldr	r3, [pc, #388]	@ (8007070 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f040 80b4 	bne.w	800705c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	613b      	str	r3, [r7, #16]
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006efe:	d003      	beq.n	8006f08 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f06:	d135      	bne.n	8006f74 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
 8006f08:	4b58      	ldr	r3, [pc, #352]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f14:	f040 80a1 	bne.w	800705a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8006f18:	4b54      	ldr	r3, [pc, #336]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 809a 	beq.w	800705a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8006f26:	4b51      	ldr	r3, [pc, #324]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	091b      	lsrs	r3, r3, #4
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	3301      	adds	r3, #1
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	4b4c      	ldr	r3, [pc, #304]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	0a1b      	lsrs	r3, r3, #8
 8006f40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
 8006f4c:	4b47      	ldr	r3, [pc, #284]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
 8006f58:	2311      	movs	r3, #17
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	e001      	b.n	8006f62 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
 8006f5e:	2307      	movs	r3, #7
 8006f60:	617b      	str	r3, [r7, #20]
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	fb03 f202 	mul.w	r2, r3, r2
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	e072      	b.n	800705a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d133      	bne.n	8006fe2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
 8006f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f86:	d169      	bne.n	800705c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006f88:	4b38      	ldr	r3, [pc, #224]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d063      	beq.n	800705c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006f94:	4b35      	ldr	r3, [pc, #212]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	091b      	lsrs	r3, r3, #4
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	4b30      	ldr	r3, [pc, #192]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	0a1b      	lsrs	r3, r3, #8
 8006fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10a      	bne.n	8006fd0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
 8006fba:	4b2c      	ldr	r3, [pc, #176]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x138>
 8006fc6:	2311      	movs	r3, #17
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	e001      	b.n	8006fd0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
 8006fcc:	2307      	movs	r3, #7
 8006fce:	617b      	str	r3, [r7, #20]
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	fb03 f202 	mul.w	r2, r3, r2
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fde:	61fb      	str	r3, [r7, #28]
 8006fe0:	e03c      	b.n	800705c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fe8:	d003      	beq.n	8006ff2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ff0:	d134      	bne.n	800705c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ffe:	d12d      	bne.n	800705c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8007000:	4b1a      	ldr	r3, [pc, #104]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d027      	beq.n	800705c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800700c:	4b17      	ldr	r3, [pc, #92]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	091b      	lsrs	r3, r3, #4
 8007012:	f003 0307 	and.w	r3, r3, #7
 8007016:	3301      	adds	r3, #1
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	fbb2 f3f3 	udiv	r3, r2, r3
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	4b12      	ldr	r3, [pc, #72]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	0a1b      	lsrs	r3, r3, #8
 8007026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10a      	bne.n	8007048 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
 8007032:	4b0e      	ldr	r3, [pc, #56]	@ (800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
 800703e:	2311      	movs	r3, #17
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	e001      	b.n	8007048 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
 8007044:	2307      	movs	r3, #7
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	fb03 f202 	mul.w	r2, r3, r2
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	fbb2 f3f3 	udiv	r3, r2, r3
 8007056:	61fb      	str	r3, [r7, #28]
 8007058:	e000      	b.n	800705c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800705a:	bf00      	nop
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	4618      	mov	r0, r3
 8007060:	3724      	adds	r7, #36	@ 0x24
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40021000 	.word	0x40021000
 8007070:	001fff68 	.word	0x001fff68

08007074 <HAL_SAI_InitProtocol>:
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d904      	bls.n	8007092 <HAL_SAI_InitProtocol+0x1e>
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	3b03      	subs	r3, #3
 800708c:	2b01      	cmp	r3, #1
 800708e:	d812      	bhi.n	80070b6 <HAL_SAI_InitProtocol+0x42>
 8007090:	e008      	b.n	80070a4 <HAL_SAI_InitProtocol+0x30>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	68b9      	ldr	r1, [r7, #8]
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 fc5d 	bl	8007958 <SAI_InitI2S>
 800709e:	4603      	mov	r3, r0
 80070a0:	75fb      	strb	r3, [r7, #23]
 80070a2:	e00b      	b.n	80070bc <HAL_SAI_InitProtocol+0x48>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fd06 	bl	8007abc <SAI_InitPCM>
 80070b0:	4603      	mov	r3, r0
 80070b2:	75fb      	strb	r3, [r7, #23]
 80070b4:	e002      	b.n	80070bc <HAL_SAI_InitProtocol+0x48>
 80070b6:	2301      	movs	r3, #1
 80070b8:	75fb      	strb	r3, [r7, #23]
 80070ba:	bf00      	nop
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d104      	bne.n	80070cc <HAL_SAI_InitProtocol+0x58>
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f808 	bl	80070d8 <HAL_SAI_Init>
 80070c8:	4603      	mov	r3, r0
 80070ca:	75fb      	strb	r3, [r7, #23]
 80070cc:	7dfb      	ldrb	r3, [r7, #23]
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <HAL_SAI_Init>:
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_SAI_Init+0x12>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e155      	b.n	8007396 <HAL_SAI_Init+0x2be>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <HAL_SAI_Init+0x2c>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7f9 fe7a 	bl	8000df8 <HAL_SAI_MspInit>
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fd93 	bl	8007c30 <SAI_Disable>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <HAL_SAI_Init+0x3c>
 8007110:	2301      	movs	r3, #1
 8007112:	e140      	b.n	8007396 <HAL_SAI_Init+0x2be>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	2b02      	cmp	r3, #2
 8007122:	d00c      	beq.n	800713e <HAL_SAI_Init+0x66>
 8007124:	2b02      	cmp	r3, #2
 8007126:	d80d      	bhi.n	8007144 <HAL_SAI_Init+0x6c>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <HAL_SAI_Init+0x5a>
 800712c:	2b01      	cmp	r3, #1
 800712e:	d003      	beq.n	8007138 <HAL_SAI_Init+0x60>
 8007130:	e008      	b.n	8007144 <HAL_SAI_Init+0x6c>
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	e008      	b.n	800714a <HAL_SAI_Init+0x72>
 8007138:	2310      	movs	r3, #16
 800713a:	61fb      	str	r3, [r7, #28]
 800713c:	e005      	b.n	800714a <HAL_SAI_Init+0x72>
 800713e:	2320      	movs	r3, #32
 8007140:	61fb      	str	r3, [r7, #28]
 8007142:	e002      	b.n	800714a <HAL_SAI_Init+0x72>
 8007144:	2300      	movs	r3, #0
 8007146:	61fb      	str	r3, [r7, #28]
 8007148:	bf00      	nop
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	2b03      	cmp	r3, #3
 8007150:	d81d      	bhi.n	800718e <HAL_SAI_Init+0xb6>
 8007152:	a201      	add	r2, pc, #4	@ (adr r2, 8007158 <HAL_SAI_Init+0x80>)
 8007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007158:	08007169 	.word	0x08007169
 800715c:	0800716f 	.word	0x0800716f
 8007160:	08007177 	.word	0x08007177
 8007164:	0800717f 	.word	0x0800717f
 8007168:	2300      	movs	r3, #0
 800716a:	617b      	str	r3, [r7, #20]
 800716c:	e012      	b.n	8007194 <HAL_SAI_Init+0xbc>
 800716e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007172:	617b      	str	r3, [r7, #20]
 8007174:	e00e      	b.n	8007194 <HAL_SAI_Init+0xbc>
 8007176:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	e00a      	b.n	8007194 <HAL_SAI_Init+0xbc>
 800717e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	f043 0301 	orr.w	r3, r3, #1
 800718a:	61fb      	str	r3, [r7, #28]
 800718c:	e002      	b.n	8007194 <HAL_SAI_Init+0xbc>
 800718e:	2300      	movs	r3, #0
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	bf00      	nop
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a81      	ldr	r2, [pc, #516]	@ (80073a0 <HAL_SAI_Init+0x2c8>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d004      	beq.n	80071a8 <HAL_SAI_Init+0xd0>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a80      	ldr	r2, [pc, #512]	@ (80073a4 <HAL_SAI_Init+0x2cc>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d103      	bne.n	80071b0 <HAL_SAI_Init+0xd8>
 80071a8:	4a7f      	ldr	r2, [pc, #508]	@ (80073a8 <HAL_SAI_Init+0x2d0>)
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	e002      	b.n	80071b6 <HAL_SAI_Init+0xde>
 80071b0:	4a7e      	ldr	r2, [pc, #504]	@ (80073ac <HAL_SAI_Init+0x2d4>)
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d041      	beq.n	8007242 <HAL_SAI_Init+0x16a>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a77      	ldr	r2, [pc, #476]	@ (80073a0 <HAL_SAI_Init+0x2c8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d004      	beq.n	80071d2 <HAL_SAI_Init+0xfa>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a75      	ldr	r2, [pc, #468]	@ (80073a4 <HAL_SAI_Init+0x2cc>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d105      	bne.n	80071de <HAL_SAI_Init+0x106>
 80071d2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80071d6:	f7fe ff1d 	bl	8006014 <HAL_RCCEx_GetPeriphCLKFreq>
 80071da:	6138      	str	r0, [r7, #16]
 80071dc:	e004      	b.n	80071e8 <HAL_SAI_Init+0x110>
 80071de:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80071e2:	f7fe ff17 	bl	8006014 <HAL_RCCEx_GetPeriphCLKFreq>
 80071e6:	6138      	str	r0, [r7, #16]
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4613      	mov	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	005b      	lsls	r3, r3, #1
 80071f2:	461a      	mov	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	025b      	lsls	r3, r3, #9
 80071fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4a6b      	ldr	r2, [pc, #428]	@ (80073b0 <HAL_SAI_Init+0x2d8>)
 8007204:	fba2 2303 	umull	r2, r3, r2, r3
 8007208:	08da      	lsrs	r2, r3, #3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	621a      	str	r2, [r3, #32]
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	4b67      	ldr	r3, [pc, #412]	@ (80073b0 <HAL_SAI_Init+0x2d8>)
 8007212:	fba3 2301 	umull	r2, r3, r3, r1
 8007216:	08da      	lsrs	r2, r3, #3
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	1aca      	subs	r2, r1, r3
 8007222:	2a08      	cmp	r2, #8
 8007224:	d904      	bls.n	8007230 <HAL_SAI_Init+0x158>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	621a      	str	r2, [r3, #32]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007234:	2b04      	cmp	r3, #4
 8007236:	d104      	bne.n	8007242 <HAL_SAI_Init+0x16a>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	085a      	lsrs	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	621a      	str	r2, [r3, #32]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_SAI_Init+0x17a>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d109      	bne.n	8007266 <HAL_SAI_Init+0x18e>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007256:	2b01      	cmp	r3, #1
 8007258:	d101      	bne.n	800725e <HAL_SAI_Init+0x186>
 800725a:	2300      	movs	r3, #0
 800725c:	e001      	b.n	8007262 <HAL_SAI_Init+0x18a>
 800725e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007262:	61bb      	str	r3, [r7, #24]
 8007264:	e008      	b.n	8007278 <HAL_SAI_Init+0x1a0>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800726a:	2b01      	cmp	r3, #1
 800726c:	d102      	bne.n	8007274 <HAL_SAI_Init+0x19c>
 800726e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007272:	e000      	b.n	8007276 <HAL_SAI_Init+0x19e>
 8007274:	2300      	movs	r3, #0
 8007276:	61bb      	str	r3, [r7, #24]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6819      	ldr	r1, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	4b4c      	ldr	r3, [pc, #304]	@ (80073b4 <HAL_SAI_Init+0x2dc>)
 8007284:	400b      	ands	r3, r1
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6819      	ldr	r1, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800729c:	431a      	orrs	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a2:	431a      	orrs	r2, r3
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	431a      	orrs	r2, r3
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b0:	431a      	orrs	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	431a      	orrs	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	431a      	orrs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	051b      	lsls	r3, r3, #20
 80072c4:	431a      	orrs	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6812      	ldr	r2, [r2, #0]
 80072d8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80072dc:	f023 030f 	bic.w	r3, r3, #15
 80072e0:	6053      	str	r3, [r2, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6859      	ldr	r1, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	699a      	ldr	r2, [r3, #24]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f0:	431a      	orrs	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f6:	431a      	orrs	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	605a      	str	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6899      	ldr	r1, [r3, #8]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b2b      	ldr	r3, [pc, #172]	@ (80073b8 <HAL_SAI_Init+0x2e0>)
 800730c:	400b      	ands	r3, r1
 800730e:	6093      	str	r3, [r2, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6899      	ldr	r1, [r3, #8]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	1e5a      	subs	r2, r3, #1
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800732c:	431a      	orrs	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007332:	3b01      	subs	r3, #1
 8007334:	021b      	lsls	r3, r3, #8
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	609a      	str	r2, [r3, #8]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68d9      	ldr	r1, [r3, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800734e:	400b      	ands	r3, r1
 8007350:	60d3      	str	r3, [r2, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68d9      	ldr	r1, [r3, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007360:	431a      	orrs	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007366:	041b      	lsls	r3, r3, #16
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800736e:	3b01      	subs	r3, #1
 8007370:	021b      	lsls	r3, r3, #8
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	60da      	str	r2, [r3, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8007394:	2300      	movs	r3, #0
 8007396:	4618      	mov	r0, r3
 8007398:	3720      	adds	r7, #32
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	40015404 	.word	0x40015404
 80073a4:	40015424 	.word	0x40015424
 80073a8:	40015400 	.word	0x40015400
 80073ac:	40015800 	.word	0x40015800
 80073b0:	cccccccd 	.word	0xcccccccd
 80073b4:	ff05c010 	.word	0xff05c010
 80073b8:	fff88000 	.word	0xfff88000

080073bc <HAL_SAI_Abort>:
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d101      	bne.n	80073d6 <HAL_SAI_Abort+0x1a>
 80073d2:	2302      	movs	r3, #2
 80073d4:	e053      	b.n	800747e <HAL_SAI_Abort+0xc2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fc26 	bl	8007c30 <SAI_Disable>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <HAL_SAI_Abort+0x32>
 80073ea:	2301      	movs	r3, #1
 80073ec:	73fb      	strb	r3, [r7, #15]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073fc:	d125      	bne.n	800744a <HAL_SAI_Abort+0x8e>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b12      	cmp	r3, #18
 8007418:	d108      	bne.n	800742c <HAL_SAI_Abort+0x70>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d004      	beq.n	800742c <HAL_SAI_Abort+0x70>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007426:	4618      	mov	r0, r3
 8007428:	f7fc f8ae 	bl	8003588 <HAL_DMA_Abort>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b22      	cmp	r3, #34	@ 0x22
 8007436:	d108      	bne.n	800744a <HAL_SAI_Abort+0x8e>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800743c:	2b00      	cmp	r3, #0
 800743e:	d004      	beq.n	800744a <HAL_SAI_Abort+0x8e>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007444:	4618      	mov	r0, r3
 8007446:	f7fc f89f 	bl	8003588 <HAL_DMA_Abort>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2200      	movs	r2, #0
 8007450:	611a      	str	r2, [r3, #16]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800745a:	619a      	str	r2, [r3, #24]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0208 	orr.w	r2, r2, #8
 800746a:	605a      	str	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <HAL_SAI_Transmit_DMA>:
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	4613      	mov	r3, r2
 8007494:	80fb      	strh	r3, [r7, #6]
 8007496:	f7fa fd31 	bl	8001efc <HAL_GetTick>
 800749a:	6178      	str	r0, [r7, #20]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_SAI_Transmit_DMA+0x20>
 80074a2:	88fb      	ldrh	r3, [r7, #6]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <HAL_SAI_Transmit_DMA+0x24>
 80074a8:	2301      	movs	r3, #1
 80074aa:	e093      	b.n	80075d4 <HAL_SAI_Transmit_DMA+0x14c>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	f040 808c 	bne.w	80075d2 <HAL_SAI_Transmit_DMA+0x14a>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_SAI_Transmit_DMA+0x40>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e085      	b.n	80075d4 <HAL_SAI_Transmit_DMA+0x14c>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	665a      	str	r2, [r3, #100]	@ 0x64
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	88fa      	ldrh	r2, [r7, #6]
 80074da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	88fa      	ldrh	r2, [r7, #6]
 80074e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2212      	movs	r2, #18
 80074f2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074fa:	4a38      	ldr	r2, [pc, #224]	@ (80075dc <HAL_SAI_Transmit_DMA+0x154>)
 80074fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007502:	4a37      	ldr	r2, [pc, #220]	@ (80075e0 <HAL_SAI_Transmit_DMA+0x158>)
 8007504:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800750a:	4a36      	ldr	r2, [pc, #216]	@ (80075e4 <HAL_SAI_Transmit_DMA+0x15c>)
 800750c:	635a      	str	r2, [r3, #52]	@ 0x34
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007512:	2200      	movs	r2, #0
 8007514:	639a      	str	r2, [r3, #56]	@ 0x38
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800751e:	4619      	mov	r1, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	331c      	adds	r3, #28
 8007526:	461a      	mov	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800752e:	f7fb ffcb 	bl	80034c8 <HAL_DMA_Start_IT>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <HAL_SAI_Transmit_DMA+0xbc>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8007540:	2301      	movs	r3, #1
 8007542:	e047      	b.n	80075d4 <HAL_SAI_Transmit_DMA+0x14c>
 8007544:	2100      	movs	r1, #0
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 fb3a 	bl	8007bc0 <SAI_InterruptFlag>
 800754c:	4601      	mov	r1, r0
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	611a      	str	r2, [r3, #16]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	e015      	b.n	800759a <HAL_SAI_Transmit_DMA+0x112>
 800756e:	f7fa fcc5 	bl	8001efc <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800757c:	d90d      	bls.n	800759a <HAL_SAI_Transmit_DMA+0x112>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007584:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8007596:	2303      	movs	r3, #3
 8007598:	e01c      	b.n	80075d4 <HAL_SAI_Transmit_DMA+0x14c>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d0e2      	beq.n	800756e <HAL_SAI_Transmit_DMA+0xe6>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d107      	bne.n	80075c6 <HAL_SAI_Transmit_DMA+0x13e>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 80075ce:	2300      	movs	r3, #0
 80075d0:	e000      	b.n	80075d4 <HAL_SAI_Transmit_DMA+0x14c>
 80075d2:	2302      	movs	r3, #2
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	08007d03 	.word	0x08007d03
 80075e0:	08007ca5 	.word	0x08007ca5
 80075e4:	08007d1f 	.word	0x08007d1f

080075e8 <HAL_SAI_IRQHandler>:
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 8192 	beq.w	8007922 <HAL_SAI_IRQHandler+0x33a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	617b      	str	r3, [r7, #20]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60fb      	str	r3, [r7, #12]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f003 0308 	and.w	r3, r3, #8
 800761c:	2b00      	cmp	r3, #0
 800761e:	d009      	beq.n	8007634 <HAL_SAI_IRQHandler+0x4c>
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d004      	beq.n	8007634 <HAL_SAI_IRQHandler+0x4c>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	4798      	blx	r3
 8007632:	e176      	b.n	8007922 <HAL_SAI_IRQHandler+0x33a>
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d01e      	beq.n	800767c <HAL_SAI_IRQHandler+0x94>
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d019      	beq.n	800767c <HAL_SAI_IRQHandler+0x94>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2201      	movs	r2, #1
 800764e:	619a      	str	r2, [r3, #24]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b22      	cmp	r3, #34	@ 0x22
 800765a:	d101      	bne.n	8007660 <HAL_SAI_IRQHandler+0x78>
 800765c:	2301      	movs	r3, #1
 800765e:	e000      	b.n	8007662 <HAL_SAI_IRQHandler+0x7a>
 8007660:	2302      	movs	r3, #2
 8007662:	60bb      	str	r3, [r7, #8]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	431a      	orrs	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f965 	bl	8007944 <HAL_SAI_ErrorCallback>
 800767a:	e152      	b.n	8007922 <HAL_SAI_IRQHandler+0x33a>
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d011      	beq.n	80076aa <HAL_SAI_IRQHandler+0xc2>
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00c      	beq.n	80076aa <HAL_SAI_IRQHandler+0xc2>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2202      	movs	r2, #2
 8007696:	619a      	str	r2, [r3, #24]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 8140 	beq.w	8007922 <HAL_SAI_IRQHandler+0x33a>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076a6:	4798      	blx	r3
 80076a8:	e13b      	b.n	8007922 <HAL_SAI_IRQHandler+0x33a>
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f003 0320 	and.w	r3, r3, #32
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d055      	beq.n	8007760 <HAL_SAI_IRQHandler+0x178>
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f003 0320 	and.w	r3, r3, #32
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d050      	beq.n	8007760 <HAL_SAI_IRQHandler+0x178>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2220      	movs	r2, #32
 80076c4:	619a      	str	r2, [r3, #24]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076cc:	f043 0204 	orr.w	r2, r3, #4
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d038      	beq.n	8007752 <HAL_SAI_IRQHandler+0x16a>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d016      	beq.n	8007716 <HAL_SAI_IRQHandler+0x12e>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076ec:	4a8f      	ldr	r2, [pc, #572]	@ (800792c <HAL_SAI_IRQHandler+0x344>)
 80076ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fb ff85 	bl	8003604 <HAL_DMA_Abort_IT>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <HAL_SAI_IRQHandler+0x12e>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007706:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f917 	bl	8007944 <HAL_SAI_ErrorCallback>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 80fc 	beq.w	8007918 <HAL_SAI_IRQHandler+0x330>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007724:	4a81      	ldr	r2, [pc, #516]	@ (800792c <HAL_SAI_IRQHandler+0x344>)
 8007726:	639a      	str	r2, [r3, #56]	@ 0x38
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800772c:	4618      	mov	r0, r3
 800772e:	f7fb ff69 	bl	8003604 <HAL_DMA_Abort_IT>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 80ef 	beq.w	8007918 <HAL_SAI_IRQHandler+0x330>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007740:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f8fa 	bl	8007944 <HAL_SAI_ErrorCallback>
 8007750:	e0e2      	b.n	8007918 <HAL_SAI_IRQHandler+0x330>
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff fe32 	bl	80073bc <HAL_SAI_Abort>
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f8f3 	bl	8007944 <HAL_SAI_ErrorCallback>
 800775e:	e0db      	b.n	8007918 <HAL_SAI_IRQHandler+0x330>
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d055      	beq.n	8007816 <HAL_SAI_IRQHandler+0x22e>
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007770:	2b00      	cmp	r3, #0
 8007772:	d050      	beq.n	8007816 <HAL_SAI_IRQHandler+0x22e>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2240      	movs	r2, #64	@ 0x40
 800777a:	619a      	str	r2, [r3, #24]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007782:	f043 0208 	orr.w	r2, r3, #8
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d038      	beq.n	8007808 <HAL_SAI_IRQHandler+0x220>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800779a:	2b00      	cmp	r3, #0
 800779c:	d016      	beq.n	80077cc <HAL_SAI_IRQHandler+0x1e4>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077a2:	4a62      	ldr	r2, [pc, #392]	@ (800792c <HAL_SAI_IRQHandler+0x344>)
 80077a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fb ff2a 	bl	8003604 <HAL_DMA_Abort_IT>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <HAL_SAI_IRQHandler+0x1e4>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f8bc 	bl	8007944 <HAL_SAI_ErrorCallback>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 80a3 	beq.w	800791c <HAL_SAI_IRQHandler+0x334>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077da:	4a54      	ldr	r2, [pc, #336]	@ (800792c <HAL_SAI_IRQHandler+0x344>)
 80077dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fb ff0e 	bl	8003604 <HAL_DMA_Abort_IT>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 8096 	beq.w	800791c <HAL_SAI_IRQHandler+0x334>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f89f 	bl	8007944 <HAL_SAI_ErrorCallback>
 8007806:	e089      	b.n	800791c <HAL_SAI_IRQHandler+0x334>
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7ff fdd7 	bl	80073bc <HAL_SAI_Abort>
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f898 	bl	8007944 <HAL_SAI_ErrorCallback>
 8007814:	e082      	b.n	800791c <HAL_SAI_IRQHandler+0x334>
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d061      	beq.n	80078e4 <HAL_SAI_IRQHandler+0x2fc>
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	d05c      	beq.n	80078e4 <HAL_SAI_IRQHandler+0x2fc>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2204      	movs	r2, #4
 8007830:	619a      	str	r2, [r3, #24]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007838:	f043 0220 	orr.w	r2, r3, #32
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d036      	beq.n	80078ba <HAL_SAI_IRQHandler+0x2d2>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007850:	2b00      	cmp	r3, #0
 8007852:	d016      	beq.n	8007882 <HAL_SAI_IRQHandler+0x29a>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007858:	4a34      	ldr	r2, [pc, #208]	@ (800792c <HAL_SAI_IRQHandler+0x344>)
 800785a:	639a      	str	r2, [r3, #56]	@ 0x38
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007860:	4618      	mov	r0, r3
 8007862:	f7fb fecf 	bl	8003604 <HAL_DMA_Abort_IT>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <HAL_SAI_IRQHandler+0x29a>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007872:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f861 	bl	8007944 <HAL_SAI_ErrorCallback>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007886:	2b00      	cmp	r3, #0
 8007888:	d04a      	beq.n	8007920 <HAL_SAI_IRQHandler+0x338>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800788e:	4a27      	ldr	r2, [pc, #156]	@ (800792c <HAL_SAI_IRQHandler+0x344>)
 8007890:	639a      	str	r2, [r3, #56]	@ 0x38
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007896:	4618      	mov	r0, r3
 8007898:	f7fb feb4 	bl	8003604 <HAL_DMA_Abort_IT>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d03e      	beq.n	8007920 <HAL_SAI_IRQHandler+0x338>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f846 	bl	8007944 <HAL_SAI_ErrorCallback>
 80078b8:	e032      	b.n	8007920 <HAL_SAI_IRQHandler+0x338>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2200      	movs	r2, #0
 80078c0:	611a      	str	r2, [r3, #16]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078ca:	619a      	str	r2, [r3, #24]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f831 	bl	8007944 <HAL_SAI_ErrorCallback>
 80078e2:	e01d      	b.n	8007920 <HAL_SAI_IRQHandler+0x338>
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f003 0310 	and.w	r3, r3, #16
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d019      	beq.n	8007922 <HAL_SAI_IRQHandler+0x33a>
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d014      	beq.n	8007922 <HAL_SAI_IRQHandler+0x33a>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2210      	movs	r2, #16
 80078fe:	619a      	str	r2, [r3, #24]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007906:	f043 0210 	orr.w	r2, r3, #16
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f817 	bl	8007944 <HAL_SAI_ErrorCallback>
 8007916:	e004      	b.n	8007922 <HAL_SAI_IRQHandler+0x33a>
 8007918:	bf00      	nop
 800791a:	e002      	b.n	8007922 <HAL_SAI_IRQHandler+0x33a>
 800791c:	bf00      	nop
 800791e:	e000      	b.n	8007922 <HAL_SAI_IRQHandler+0x33a>
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	08007d71 	.word	0x08007d71

08007930 <HAL_SAI_TxHalfCpltCallback>:
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_SAI_ErrorCallback>:
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <SAI_InitI2S>:
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	603b      	str	r3, [r7, #0]
 8007966:	2300      	movs	r3, #0
 8007968:	75fb      	strb	r3, [r7, #23]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	639a      	str	r2, [r3, #56]	@ 0x38
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <SAI_InitI2S+0x2e>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	2b02      	cmp	r3, #2
 8007984:	d103      	bne.n	800798e <SAI_InitI2S+0x36>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800798c:	e002      	b.n	8007994 <SAI_InitI2S+0x3c>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2201      	movs	r2, #1
 8007992:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800799a:	649a      	str	r2, [r3, #72]	@ 0x48
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80079a2:	661a      	str	r2, [r3, #96]	@ 0x60
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	655a      	str	r2, [r3, #84]	@ 0x54
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <SAI_InitI2S+0x66>
 80079ba:	2301      	movs	r3, #1
 80079bc:	e077      	b.n	8007aae <SAI_InitI2S+0x156>
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d107      	bne.n	80079d4 <SAI_InitI2S+0x7c>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80079d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80079d2:	e006      	b.n	80079e2 <SAI_InitI2S+0x8a>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80079da:	64da      	str	r2, [r3, #76]	@ 0x4c
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d84f      	bhi.n	8007a88 <SAI_InitI2S+0x130>
 80079e8:	a201      	add	r2, pc, #4	@ (adr r2, 80079f0 <SAI_InitI2S+0x98>)
 80079ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ee:	bf00      	nop
 80079f0:	08007a01 	.word	0x08007a01
 80079f4:	08007a23 	.word	0x08007a23
 80079f8:	08007a45 	.word	0x08007a45
 80079fc:	08007a67 	.word	0x08007a67
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2280      	movs	r2, #128	@ 0x80
 8007a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	085b      	lsrs	r3, r3, #1
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	085b      	lsrs	r3, r3, #1
 8007a14:	011a      	lsls	r2, r3, #4
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	645a      	str	r2, [r3, #68]	@ 0x44
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2240      	movs	r2, #64	@ 0x40
 8007a1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a20:	e035      	b.n	8007a8e <SAI_InitI2S+0x136>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2280      	movs	r2, #128	@ 0x80
 8007a26:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	085b      	lsrs	r3, r3, #1
 8007a2c:	019a      	lsls	r2, r3, #6
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	641a      	str	r2, [r3, #64]	@ 0x40
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	085b      	lsrs	r3, r3, #1
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	645a      	str	r2, [r3, #68]	@ 0x44
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2280      	movs	r2, #128	@ 0x80
 8007a40:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a42:	e024      	b.n	8007a8e <SAI_InitI2S+0x136>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	22c0      	movs	r2, #192	@ 0xc0
 8007a48:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	085b      	lsrs	r3, r3, #1
 8007a4e:	019a      	lsls	r2, r3, #6
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	641a      	str	r2, [r3, #64]	@ 0x40
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	085b      	lsrs	r3, r3, #1
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	645a      	str	r2, [r3, #68]	@ 0x44
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2280      	movs	r2, #128	@ 0x80
 8007a62:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a64:	e013      	b.n	8007a8e <SAI_InitI2S+0x136>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	22e0      	movs	r2, #224	@ 0xe0
 8007a6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	085b      	lsrs	r3, r3, #1
 8007a70:	019a      	lsls	r2, r3, #6
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	641a      	str	r2, [r3, #64]	@ 0x40
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	085b      	lsrs	r3, r3, #1
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	645a      	str	r2, [r3, #68]	@ 0x44
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2280      	movs	r2, #128	@ 0x80
 8007a84:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a86:	e002      	b.n	8007a8e <SAI_InitI2S+0x136>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	75fb      	strb	r3, [r7, #23]
 8007a8c:	bf00      	nop
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d10b      	bne.n	8007aac <SAI_InitI2S+0x154>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d102      	bne.n	8007aa0 <SAI_InitI2S+0x148>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2210      	movs	r2, #16
 8007a9e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d102      	bne.n	8007aac <SAI_InitI2S+0x154>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2208      	movs	r2, #8
 8007aaa:	655a      	str	r2, [r3, #84]	@ 0x54
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop

08007abc <SAI_InitPCM>:
 8007abc:	b480      	push	{r7}
 8007abe:	b087      	sub	sp, #28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
 8007ac8:	603b      	str	r3, [r7, #0]
 8007aca:	2300      	movs	r3, #0
 8007acc:	75fb      	strb	r3, [r7, #23]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	639a      	str	r2, [r3, #56]	@ 0x38
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <SAI_InitPCM+0x2e>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d103      	bne.n	8007af2 <SAI_InitPCM+0x36>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007af0:	e002      	b.n	8007af8 <SAI_InitPCM+0x3c>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	649a      	str	r2, [r3, #72]	@ 0x48
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007b04:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007b0c:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	655a      	str	r2, [r3, #84]	@ 0x54
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b20:	661a      	str	r2, [r3, #96]	@ 0x60
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2b04      	cmp	r3, #4
 8007b26:	d103      	bne.n	8007b30 <SAI_InitPCM+0x74>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	645a      	str	r2, [r3, #68]	@ 0x44
 8007b2e:	e002      	b.n	8007b36 <SAI_InitPCM+0x7a>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	220d      	movs	r2, #13
 8007b34:	645a      	str	r2, [r3, #68]	@ 0x44
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d837      	bhi.n	8007bac <SAI_InitPCM+0xf0>
 8007b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b44 <SAI_InitPCM+0x88>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007b55 	.word	0x08007b55
 8007b48:	08007b6b 	.word	0x08007b6b
 8007b4c:	08007b81 	.word	0x08007b81
 8007b50:	08007b97 	.word	0x08007b97
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2280      	movs	r2, #128	@ 0x80
 8007b58:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	011a      	lsls	r2, r3, #4
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	641a      	str	r2, [r3, #64]	@ 0x40
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2240      	movs	r2, #64	@ 0x40
 8007b66:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b68:	e023      	b.n	8007bb2 <SAI_InitPCM+0xf6>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2280      	movs	r2, #128	@ 0x80
 8007b6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	641a      	str	r2, [r3, #64]	@ 0x40
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2280      	movs	r2, #128	@ 0x80
 8007b7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b7e:	e018      	b.n	8007bb2 <SAI_InitPCM+0xf6>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	22c0      	movs	r2, #192	@ 0xc0
 8007b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2280      	movs	r2, #128	@ 0x80
 8007b92:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b94:	e00d      	b.n	8007bb2 <SAI_InitPCM+0xf6>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	22e0      	movs	r2, #224	@ 0xe0
 8007b9a:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	641a      	str	r2, [r3, #64]	@ 0x40
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2280      	movs	r2, #128	@ 0x80
 8007ba8:	659a      	str	r2, [r3, #88]	@ 0x58
 8007baa:	e002      	b.n	8007bb2 <SAI_InitPCM+0xf6>
 8007bac:	2301      	movs	r3, #1
 8007bae:	75fb      	strb	r3, [r7, #23]
 8007bb0:	bf00      	nop
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	371c      	adds	r7, #28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <SAI_InterruptFlag>:
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
 8007bcc:	2301      	movs	r3, #1
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d103      	bne.n	8007bde <SAI_InterruptFlag+0x1e>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f043 0308 	orr.w	r3, r3, #8
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be2:	2b08      	cmp	r3, #8
 8007be4:	d10b      	bne.n	8007bfe <SAI_InterruptFlag+0x3e>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d003      	beq.n	8007bf6 <SAI_InterruptFlag+0x36>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d103      	bne.n	8007bfe <SAI_InterruptFlag+0x3e>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f043 0310 	orr.w	r3, r3, #16
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d003      	beq.n	8007c0e <SAI_InterruptFlag+0x4e>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d104      	bne.n	8007c18 <SAI_InterruptFlag+0x58>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	e003      	b.n	8007c20 <SAI_InterruptFlag+0x60>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f043 0304 	orr.w	r3, r3, #4
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
	...

08007c30 <SAI_Disable>:
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	4b18      	ldr	r3, [pc, #96]	@ (8007c9c <SAI_Disable+0x6c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a18      	ldr	r2, [pc, #96]	@ (8007ca0 <SAI_Disable+0x70>)
 8007c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c42:	0b1b      	lsrs	r3, r3, #12
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	72fb      	strb	r3, [r7, #11]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <SAI_Disable+0x48>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007c72:	2303      	movs	r3, #3
 8007c74:	72fb      	strb	r3, [r7, #11]
 8007c76:	e009      	b.n	8007c8c <SAI_Disable+0x5c>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e7      	bne.n	8007c5c <SAI_Disable+0x2c>
 8007c8c:	7afb      	ldrb	r3, [r7, #11]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	20000008 	.word	0x20000008
 8007ca0:	95cbec1b 	.word	0x95cbec1b

08007ca4 <SAI_DMATxCplt>:
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d01c      	beq.n	8007cf4 <SAI_DMATxCplt+0x50>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f7ff ff73 	bl	8007bc0 <SAI_InterruptFlag>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	43d9      	mvns	r1, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	691a      	ldr	r2, [r3, #16]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	400a      	ands	r2, r1
 8007cea:	611a      	str	r2, [r3, #16]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f7fa f851 	bl	8001d9c <HAL_SAI_TxCpltCallback>
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <SAI_DMATxHalfCplt>:
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7ff fe0d 	bl	8007930 <HAL_SAI_TxHalfCpltCallback>
 8007d16:	bf00      	nop
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <SAI_DMAError>:
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff ff6f 	bl	8007c30 <SAI_Disable>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f7ff fdee 	bl	8007944 <HAL_SAI_ErrorCallback>
 8007d68:	bf00      	nop
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <SAI_DMAAbort>:
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7c:	60fb      	str	r3, [r7, #12]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2200      	movs	r2, #0
 8007d94:	611a      	str	r2, [r3, #16]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d9e:	619a      	str	r2, [r3, #24]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da6:	2b20      	cmp	r3, #32
 8007da8:	d00a      	beq.n	8007dc0 <SAI_DMAAbort+0x50>
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7ff ff40 	bl	8007c30 <SAI_Disable>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f042 0208 	orr.w	r2, r2, #8
 8007dbe:	605a      	str	r2, [r3, #4]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f7ff fdb7 	bl	8007944 <HAL_SAI_ErrorCallback>
 8007dd6:	bf00      	nop
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <HAL_SPI_Init>:
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <HAL_SPI_Init+0x12>
 8007dec:	2301      	movs	r3, #1
 8007dee:	e095      	b.n	8007f1c <HAL_SPI_Init+0x13e>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d108      	bne.n	8007e0a <HAL_SPI_Init+0x2c>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e00:	d009      	beq.n	8007e16 <HAL_SPI_Init+0x38>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	61da      	str	r2, [r3, #28]
 8007e08:	e005      	b.n	8007e16 <HAL_SPI_Init+0x38>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	611a      	str	r2, [r3, #16]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	615a      	str	r2, [r3, #20]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d106      	bne.n	8007e36 <HAL_SPI_Init+0x58>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7f9 fb4b 	bl	80014cc <HAL_SPI_MspInit>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2202      	movs	r2, #2
 8007e3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e56:	d902      	bls.n	8007e5e <HAL_SPI_Init+0x80>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	e002      	b.n	8007e64 <HAL_SPI_Init+0x86>
 8007e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007e6c:	d007      	beq.n	8007e7e <HAL_SPI_Init+0xa0>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e76:	d002      	beq.n	8007e7e <HAL_SPI_Init+0xa0>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	f003 0302 	and.w	r3, r3, #2
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ec0:	ea42 0103 	orr.w	r1, r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	0c1b      	lsrs	r3, r3, #16
 8007eda:	f003 0204 	and.w	r2, r3, #4
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee2:	f003 0310 	and.w	r3, r3, #16
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eec:	f003 0308 	and.w	r3, r3, #8
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007efa:	ea42 0103 	orr.w	r1, r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	605a      	str	r2, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	661a      	str	r2, [r3, #96]	@ 0x60
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_SPI_Transmit>:
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	4613      	mov	r3, r2
 8007f32:	80fb      	strh	r3, [r7, #6]
 8007f34:	f7f9 ffe2 	bl	8001efc <HAL_GetTick>
 8007f38:	61f8      	str	r0, [r7, #28]
 8007f3a:	88fb      	ldrh	r3, [r7, #6]
 8007f3c:	837b      	strh	r3, [r7, #26]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d001      	beq.n	8007f4e <HAL_SPI_Transmit+0x2a>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e15c      	b.n	8008208 <HAL_SPI_Transmit+0x2e4>
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <HAL_SPI_Transmit+0x36>
 8007f54:	88fb      	ldrh	r3, [r7, #6]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_SPI_Transmit+0x3a>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e154      	b.n	8008208 <HAL_SPI_Transmit+0x2e4>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_SPI_Transmit+0x48>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e14d      	b.n	8008208 <HAL_SPI_Transmit+0x2e4>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2203      	movs	r2, #3
 8007f78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	661a      	str	r2, [r3, #96]	@ 0x60
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	88fa      	ldrh	r2, [r7, #6]
 8007f8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	88fa      	ldrh	r2, [r7, #6]
 8007f92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	641a      	str	r2, [r3, #64]	@ 0x40
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	651a      	str	r2, [r3, #80]	@ 0x50
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fbe:	d10f      	bne.n	8007fe0 <HAL_SPI_Transmit+0xbc>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fea:	2b40      	cmp	r3, #64	@ 0x40
 8007fec:	d007      	beq.n	8007ffe <HAL_SPI_Transmit+0xda>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008006:	d952      	bls.n	80080ae <HAL_SPI_Transmit+0x18a>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <HAL_SPI_Transmit+0xf2>
 8008010:	8b7b      	ldrh	r3, [r7, #26]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d145      	bne.n	80080a2 <HAL_SPI_Transmit+0x17e>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801a:	881a      	ldrh	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	60da      	str	r2, [r3, #12]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008026:	1c9a      	adds	r2, r3, #2
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	639a      	str	r2, [r3, #56]	@ 0x38
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800803a:	e032      	b.n	80080a2 <HAL_SPI_Transmit+0x17e>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b02      	cmp	r3, #2
 8008048:	d112      	bne.n	8008070 <HAL_SPI_Transmit+0x14c>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800804e:	881a      	ldrh	r2, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	60da      	str	r2, [r3, #12]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805a:	1c9a      	adds	r2, r3, #2
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008064:	b29b      	uxth	r3, r3
 8008066:	3b01      	subs	r3, #1
 8008068:	b29a      	uxth	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800806e:	e018      	b.n	80080a2 <HAL_SPI_Transmit+0x17e>
 8008070:	f7f9 ff44 	bl	8001efc <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	429a      	cmp	r2, r3
 800807e:	d803      	bhi.n	8008088 <HAL_SPI_Transmit+0x164>
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008086:	d102      	bne.n	800808e <HAL_SPI_Transmit+0x16a>
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d109      	bne.n	80080a2 <HAL_SPI_Transmit+0x17e>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800809e:	2303      	movs	r3, #3
 80080a0:	e0b2      	b.n	8008208 <HAL_SPI_Transmit+0x2e4>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1c7      	bne.n	800803c <HAL_SPI_Transmit+0x118>
 80080ac:	e083      	b.n	80081b6 <HAL_SPI_Transmit+0x292>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d002      	beq.n	80080bc <HAL_SPI_Transmit+0x198>
 80080b6:	8b7b      	ldrh	r3, [r7, #26]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d177      	bne.n	80081ac <HAL_SPI_Transmit+0x288>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d912      	bls.n	80080ec <HAL_SPI_Transmit+0x1c8>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ca:	881a      	ldrh	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	60da      	str	r2, [r3, #12]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d6:	1c9a      	adds	r2, r3, #2
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	639a      	str	r2, [r3, #56]	@ 0x38
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	3b02      	subs	r3, #2
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80080ea:	e05f      	b.n	80081ac <HAL_SPI_Transmit+0x288>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	330c      	adds	r3, #12
 80080f6:	7812      	ldrb	r2, [r2, #0]
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	639a      	str	r2, [r3, #56]	@ 0x38
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008108:	b29b      	uxth	r3, r3
 800810a:	3b01      	subs	r3, #1
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008112:	e04b      	b.n	80081ac <HAL_SPI_Transmit+0x288>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b02      	cmp	r3, #2
 8008120:	d12b      	bne.n	800817a <HAL_SPI_Transmit+0x256>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008126:	b29b      	uxth	r3, r3
 8008128:	2b01      	cmp	r3, #1
 800812a:	d912      	bls.n	8008152 <HAL_SPI_Transmit+0x22e>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008130:	881a      	ldrh	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60da      	str	r2, [r3, #12]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813c:	1c9a      	adds	r2, r3, #2
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	639a      	str	r2, [r3, #56]	@ 0x38
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008146:	b29b      	uxth	r3, r3
 8008148:	3b02      	subs	r3, #2
 800814a:	b29a      	uxth	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008150:	e02c      	b.n	80081ac <HAL_SPI_Transmit+0x288>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	330c      	adds	r3, #12
 800815c:	7812      	ldrb	r2, [r2, #0]
 800815e:	701a      	strb	r2, [r3, #0]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	639a      	str	r2, [r3, #56]	@ 0x38
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800816e:	b29b      	uxth	r3, r3
 8008170:	3b01      	subs	r3, #1
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008178:	e018      	b.n	80081ac <HAL_SPI_Transmit+0x288>
 800817a:	f7f9 febf 	bl	8001efc <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	429a      	cmp	r2, r3
 8008188:	d803      	bhi.n	8008192 <HAL_SPI_Transmit+0x26e>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008190:	d102      	bne.n	8008198 <HAL_SPI_Transmit+0x274>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d109      	bne.n	80081ac <HAL_SPI_Transmit+0x288>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80081a8:	2303      	movs	r3, #3
 80081aa:	e02d      	b.n	8008208 <HAL_SPI_Transmit+0x2e4>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1ae      	bne.n	8008114 <HAL_SPI_Transmit+0x1f0>
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f000 f946 	bl	800844c <SPI_EndRxTxTransaction>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <HAL_SPI_Transmit+0x2a8>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2220      	movs	r2, #32
 80081ca:	661a      	str	r2, [r3, #96]	@ 0x60
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10a      	bne.n	80081ea <HAL_SPI_Transmit+0x2c6>
 80081d4:	2300      	movs	r3, #0
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	617b      	str	r3, [r7, #20]
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <HAL_SPI_Transmit+0x2e2>
 8008202:	2301      	movs	r3, #1
 8008204:	e000      	b.n	8008208 <HAL_SPI_Transmit+0x2e4>
 8008206:	2300      	movs	r3, #0
 8008208:	4618      	mov	r0, r3
 800820a:	3720      	adds	r7, #32
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <SPI_WaitFlagStateUntilTimeout>:
 8008210:	b580      	push	{r7, lr}
 8008212:	b088      	sub	sp, #32
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	4613      	mov	r3, r2
 800821e:	71fb      	strb	r3, [r7, #7]
 8008220:	f7f9 fe6c 	bl	8001efc <HAL_GetTick>
 8008224:	4602      	mov	r2, r0
 8008226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008228:	1a9b      	subs	r3, r3, r2
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	4413      	add	r3, r2
 800822e:	61fb      	str	r3, [r7, #28]
 8008230:	f7f9 fe64 	bl	8001efc <HAL_GetTick>
 8008234:	61b8      	str	r0, [r7, #24]
 8008236:	4b39      	ldr	r3, [pc, #228]	@ (800831c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	015b      	lsls	r3, r3, #5
 800823c:	0d1b      	lsrs	r3, r3, #20
 800823e:	69fa      	ldr	r2, [r7, #28]
 8008240:	fb02 f303 	mul.w	r3, r2, r3
 8008244:	617b      	str	r3, [r7, #20]
 8008246:	e054      	b.n	80082f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800824e:	d050      	beq.n	80082f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8008250:	f7f9 fe54 	bl	8001efc <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	429a      	cmp	r2, r3
 800825e:	d902      	bls.n	8008266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d13d      	bne.n	80082e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008274:	605a      	str	r2, [r3, #4]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800827e:	d111      	bne.n	80082a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008288:	d004      	beq.n	8008294 <SPI_WaitFlagStateUntilTimeout+0x84>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008292:	d107      	bne.n	80082a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082ac:	d10f      	bne.n	80082ce <SPI_WaitFlagStateUntilTimeout+0xbe>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80082de:	2303      	movs	r3, #3
 80082e0:	e017      	b.n	8008312 <SPI_WaitFlagStateUntilTimeout+0x102>
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <SPI_WaitFlagStateUntilTimeout+0xdc>
 80082e8:	2300      	movs	r3, #0
 80082ea:	61fb      	str	r3, [r7, #28]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	617b      	str	r3, [r7, #20]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4013      	ands	r3, r2
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	429a      	cmp	r2, r3
 8008300:	bf0c      	ite	eq
 8008302:	2301      	moveq	r3, #1
 8008304:	2300      	movne	r3, #0
 8008306:	b2db      	uxtb	r3, r3
 8008308:	461a      	mov	r2, r3
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	429a      	cmp	r2, r3
 800830e:	d19b      	bne.n	8008248 <SPI_WaitFlagStateUntilTimeout+0x38>
 8008310:	2300      	movs	r3, #0
 8008312:	4618      	mov	r0, r3
 8008314:	3720      	adds	r7, #32
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20000008 	.word	0x20000008

08008320 <SPI_WaitFifoStateUntilTimeout>:
 8008320:	b580      	push	{r7, lr}
 8008322:	b08a      	sub	sp, #40	@ 0x28
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
 800832e:	2300      	movs	r3, #0
 8008330:	75fb      	strb	r3, [r7, #23]
 8008332:	f7f9 fde3 	bl	8001efc <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833a:	1a9b      	subs	r3, r3, r2
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	4413      	add	r3, r2
 8008340:	627b      	str	r3, [r7, #36]	@ 0x24
 8008342:	f7f9 fddb 	bl	8001efc <HAL_GetTick>
 8008346:	6238      	str	r0, [r7, #32]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	330c      	adds	r3, #12
 800834e:	61fb      	str	r3, [r7, #28]
 8008350:	4b3d      	ldr	r3, [pc, #244]	@ (8008448 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	00da      	lsls	r2, r3, #3
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	0d1b      	lsrs	r3, r3, #20
 8008360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008362:	fb02 f303 	mul.w	r3, r2, r3
 8008366:	61bb      	str	r3, [r7, #24]
 8008368:	e060      	b.n	800842c <SPI_WaitFifoStateUntilTimeout+0x10c>
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008370:	d107      	bne.n	8008382 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d104      	bne.n	8008382 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	75fb      	strb	r3, [r7, #23]
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008388:	d050      	beq.n	800842c <SPI_WaitFifoStateUntilTimeout+0x10c>
 800838a:	f7f9 fdb7 	bl	8001efc <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	6a3b      	ldr	r3, [r7, #32]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008396:	429a      	cmp	r2, r3
 8008398:	d902      	bls.n	80083a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800839a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839c:	2b00      	cmp	r3, #0
 800839e:	d13d      	bne.n	800841c <SPI_WaitFifoStateUntilTimeout+0xfc>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80083ae:	605a      	str	r2, [r3, #4]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083b8:	d111      	bne.n	80083de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083c2:	d004      	beq.n	80083ce <SPI_WaitFifoStateUntilTimeout+0xae>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083cc:	d107      	bne.n	80083de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083e6:	d10f      	bne.n	8008408 <SPI_WaitFifoStateUntilTimeout+0xe8>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8008418:	2303      	movs	r3, #3
 800841a:	e010      	b.n	800843e <SPI_WaitFifoStateUntilTimeout+0x11e>
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <SPI_WaitFifoStateUntilTimeout+0x106>
 8008422:	2300      	movs	r3, #0
 8008424:	627b      	str	r3, [r7, #36]	@ 0x24
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	3b01      	subs	r3, #1
 800842a:	61bb      	str	r3, [r7, #24]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689a      	ldr	r2, [r3, #8]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	4013      	ands	r3, r2
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	429a      	cmp	r2, r3
 800843a:	d196      	bne.n	800836a <SPI_WaitFifoStateUntilTimeout+0x4a>
 800843c:	2300      	movs	r3, #0
 800843e:	4618      	mov	r0, r3
 8008440:	3728      	adds	r7, #40	@ 0x28
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20000008 	.word	0x20000008

0800844c <SPI_EndRxTxTransaction>:
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af02      	add	r7, sp, #8
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2200      	movs	r2, #0
 8008460:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f7ff ff5b 	bl	8008320 <SPI_WaitFifoStateUntilTimeout>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d007      	beq.n	8008480 <SPI_EndRxTxTransaction+0x34>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008474:	f043 0220 	orr.w	r2, r3, #32
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	661a      	str	r2, [r3, #96]	@ 0x60
 800847c:	2303      	movs	r3, #3
 800847e:	e027      	b.n	80084d0 <SPI_EndRxTxTransaction+0x84>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2200      	movs	r2, #0
 8008488:	2180      	movs	r1, #128	@ 0x80
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f7ff fec0 	bl	8008210 <SPI_WaitFlagStateUntilTimeout>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d007      	beq.n	80084a6 <SPI_EndRxTxTransaction+0x5a>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800849a:	f043 0220 	orr.w	r2, r3, #32
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80084a2:	2303      	movs	r3, #3
 80084a4:	e014      	b.n	80084d0 <SPI_EndRxTxTransaction+0x84>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f7ff ff34 	bl	8008320 <SPI_WaitFifoStateUntilTimeout>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d007      	beq.n	80084ce <SPI_EndRxTxTransaction+0x82>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084c2:	f043 0220 	orr.w	r2, r3, #32
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	661a      	str	r2, [r3, #96]	@ 0x60
 80084ca:	2303      	movs	r3, #3
 80084cc:	e000      	b.n	80084d0 <SPI_EndRxTxTransaction+0x84>
 80084ce:	2300      	movs	r3, #0
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_UART_Init>:
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <HAL_UART_Init+0x12>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e040      	b.n	800856c <HAL_UART_Init+0x94>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d106      	bne.n	8008500 <HAL_UART_Init+0x28>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7f9 f9d4 	bl	80018a8 <HAL_UART_MspInit>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2224      	movs	r2, #36	@ 0x24
 8008504:	67da      	str	r2, [r3, #124]	@ 0x7c
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f022 0201 	bic.w	r2, r2, #1
 8008514:	601a      	str	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <HAL_UART_Init+0x4c>
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fc32 	bl	8008d88 <UART_AdvFeatureConfig>
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f977 	bl	8008818 <UART_SetConfig>
 800852a:	4603      	mov	r3, r0
 800852c:	2b01      	cmp	r3, #1
 800852e:	d101      	bne.n	8008534 <HAL_UART_Init+0x5c>
 8008530:	2301      	movs	r3, #1
 8008532:	e01b      	b.n	800856c <HAL_UART_Init+0x94>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008542:	605a      	str	r2, [r3, #4]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689a      	ldr	r2, [r3, #8]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008552:	609a      	str	r2, [r3, #8]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fcb1 	bl	8008ecc <UART_CheckIdleState>
 800856a:	4603      	mov	r3, r0
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <HAL_UART_Transmit>:
 8008574:	b580      	push	{r7, lr}
 8008576:	b08a      	sub	sp, #40	@ 0x28
 8008578:	af02      	add	r7, sp, #8
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	4613      	mov	r3, r2
 8008582:	80fb      	strh	r3, [r7, #6]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008588:	2b20      	cmp	r3, #32
 800858a:	d177      	bne.n	800867c <HAL_UART_Transmit+0x108>
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <HAL_UART_Transmit+0x24>
 8008592:	88fb      	ldrh	r3, [r7, #6]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <HAL_UART_Transmit+0x28>
 8008598:	2301      	movs	r3, #1
 800859a:	e070      	b.n	800867e <HAL_UART_Transmit+0x10a>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2221      	movs	r2, #33	@ 0x21
 80085a8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80085aa:	f7f9 fca7 	bl	8001efc <HAL_GetTick>
 80085ae:	6178      	str	r0, [r7, #20]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	88fa      	ldrh	r2, [r7, #6]
 80085b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	88fa      	ldrh	r2, [r7, #6]
 80085bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085c8:	d108      	bne.n	80085dc <HAL_UART_Transmit+0x68>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d104      	bne.n	80085dc <HAL_UART_Transmit+0x68>
 80085d2:	2300      	movs	r3, #0
 80085d4:	61fb      	str	r3, [r7, #28]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	61bb      	str	r3, [r7, #24]
 80085da:	e003      	b.n	80085e4 <HAL_UART_Transmit+0x70>
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	61fb      	str	r3, [r7, #28]
 80085e0:	2300      	movs	r3, #0
 80085e2:	61bb      	str	r3, [r7, #24]
 80085e4:	e02f      	b.n	8008646 <HAL_UART_Transmit+0xd2>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2200      	movs	r2, #0
 80085ee:	2180      	movs	r1, #128	@ 0x80
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 fd13 	bl	800901c <UART_WaitOnFlagUntilTimeout>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d004      	beq.n	8008606 <HAL_UART_Transmit+0x92>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2220      	movs	r2, #32
 8008600:	67da      	str	r2, [r3, #124]	@ 0x7c
 8008602:	2303      	movs	r3, #3
 8008604:	e03b      	b.n	800867e <HAL_UART_Transmit+0x10a>
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10b      	bne.n	8008624 <HAL_UART_Transmit+0xb0>
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	881a      	ldrh	r2, [r3, #0]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008618:	b292      	uxth	r2, r2
 800861a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	3302      	adds	r3, #2
 8008620:	61bb      	str	r3, [r7, #24]
 8008622:	e007      	b.n	8008634 <HAL_UART_Transmit+0xc0>
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	781a      	ldrb	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	3301      	adds	r3, #1
 8008632:	61fb      	str	r3, [r7, #28]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800863a:	b29b      	uxth	r3, r3
 800863c:	3b01      	subs	r3, #1
 800863e:	b29a      	uxth	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800864c:	b29b      	uxth	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1c9      	bne.n	80085e6 <HAL_UART_Transmit+0x72>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2200      	movs	r2, #0
 800865a:	2140      	movs	r1, #64	@ 0x40
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 fcdd 	bl	800901c <UART_WaitOnFlagUntilTimeout>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d004      	beq.n	8008672 <HAL_UART_Transmit+0xfe>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2220      	movs	r2, #32
 800866c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800866e:	2303      	movs	r3, #3
 8008670:	e005      	b.n	800867e <HAL_UART_Transmit+0x10a>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2220      	movs	r2, #32
 8008676:	67da      	str	r2, [r3, #124]	@ 0x7c
 8008678:	2300      	movs	r3, #0
 800867a:	e000      	b.n	800867e <HAL_UART_Transmit+0x10a>
 800867c:	2302      	movs	r3, #2
 800867e:	4618      	mov	r0, r3
 8008680:	3720      	adds	r7, #32
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <HAL_UART_Receive>:
 8008686:	b580      	push	{r7, lr}
 8008688:	b08a      	sub	sp, #40	@ 0x28
 800868a:	af02      	add	r7, sp, #8
 800868c:	60f8      	str	r0, [r7, #12]
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	603b      	str	r3, [r7, #0]
 8008692:	4613      	mov	r3, r2
 8008694:	80fb      	strh	r3, [r7, #6]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800869c:	2b20      	cmp	r3, #32
 800869e:	f040 80b6 	bne.w	800880e <HAL_UART_Receive+0x188>
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <HAL_UART_Receive+0x28>
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_UART_Receive+0x2c>
 80086ae:	2301      	movs	r3, #1
 80086b0:	e0ae      	b.n	8008810 <HAL_UART_Receive+0x18a>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2222      	movs	r2, #34	@ 0x22
 80086be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	661a      	str	r2, [r3, #96]	@ 0x60
 80086c8:	f7f9 fc18 	bl	8001efc <HAL_GetTick>
 80086cc:	6178      	str	r0, [r7, #20]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	88fa      	ldrh	r2, [r7, #6]
 80086d2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	88fa      	ldrh	r2, [r7, #6]
 80086da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086e6:	d10e      	bne.n	8008706 <HAL_UART_Receive+0x80>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d105      	bne.n	80086fc <HAL_UART_Receive+0x76>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80086f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80086fa:	e02d      	b.n	8008758 <HAL_UART_Receive+0xd2>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	22ff      	movs	r2, #255	@ 0xff
 8008700:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008704:	e028      	b.n	8008758 <HAL_UART_Receive+0xd2>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10d      	bne.n	800872a <HAL_UART_Receive+0xa4>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d104      	bne.n	8008720 <HAL_UART_Receive+0x9a>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	22ff      	movs	r2, #255	@ 0xff
 800871a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800871e:	e01b      	b.n	8008758 <HAL_UART_Receive+0xd2>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	227f      	movs	r2, #127	@ 0x7f
 8008724:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008728:	e016      	b.n	8008758 <HAL_UART_Receive+0xd2>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008732:	d10d      	bne.n	8008750 <HAL_UART_Receive+0xca>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d104      	bne.n	8008746 <HAL_UART_Receive+0xc0>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	227f      	movs	r2, #127	@ 0x7f
 8008740:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008744:	e008      	b.n	8008758 <HAL_UART_Receive+0xd2>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	223f      	movs	r2, #63	@ 0x3f
 800874a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800874e:	e003      	b.n	8008758 <HAL_UART_Receive+0xd2>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800875e:	827b      	strh	r3, [r7, #18]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008768:	d108      	bne.n	800877c <HAL_UART_Receive+0xf6>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d104      	bne.n	800877c <HAL_UART_Receive+0xf6>
 8008772:	2300      	movs	r3, #0
 8008774:	61fb      	str	r3, [r7, #28]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	61bb      	str	r3, [r7, #24]
 800877a:	e003      	b.n	8008784 <HAL_UART_Receive+0xfe>
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	61fb      	str	r3, [r7, #28]
 8008780:	2300      	movs	r3, #0
 8008782:	61bb      	str	r3, [r7, #24]
 8008784:	e037      	b.n	80087f6 <HAL_UART_Receive+0x170>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2200      	movs	r2, #0
 800878e:	2120      	movs	r1, #32
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 fc43 	bl	800901c <UART_WaitOnFlagUntilTimeout>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d005      	beq.n	80087a8 <HAL_UART_Receive+0x122>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2220      	movs	r2, #32
 80087a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80087a4:	2303      	movs	r3, #3
 80087a6:	e033      	b.n	8008810 <HAL_UART_Receive+0x18a>
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10c      	bne.n	80087c8 <HAL_UART_Receive+0x142>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	8a7b      	ldrh	r3, [r7, #18]
 80087b8:	4013      	ands	r3, r2
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	801a      	strh	r2, [r3, #0]
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	3302      	adds	r3, #2
 80087c4:	61bb      	str	r3, [r7, #24]
 80087c6:	e00d      	b.n	80087e4 <HAL_UART_Receive+0x15e>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	8a7b      	ldrh	r3, [r7, #18]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	4013      	ands	r3, r2
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	701a      	strb	r2, [r3, #0]
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	3301      	adds	r3, #1
 80087e2:	61fb      	str	r3, [r7, #28]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	3b01      	subs	r3, #1
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1c1      	bne.n	8008786 <HAL_UART_Receive+0x100>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2220      	movs	r2, #32
 8008806:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800880a:	2300      	movs	r3, #0
 800880c:	e000      	b.n	8008810 <HAL_UART_Receive+0x18a>
 800880e:	2302      	movs	r3, #2
 8008810:	4618      	mov	r0, r3
 8008812:	3720      	adds	r7, #32
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <UART_SetConfig>:
 8008818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800881c:	b08a      	sub	sp, #40	@ 0x28
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	2300      	movs	r3, #0
 8008824:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	431a      	orrs	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	431a      	orrs	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	4313      	orrs	r3, r2
 800883e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	4ba4      	ldr	r3, [pc, #656]	@ (8008ad8 <UART_SetConfig+0x2c0>)
 8008848:	4013      	ands	r3, r2
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	6812      	ldr	r2, [r2, #0]
 800884e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008850:	430b      	orrs	r3, r1
 8008852:	6013      	str	r3, [r2, #0]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	605a      	str	r2, [r3, #4]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a99      	ldr	r2, [pc, #612]	@ (8008adc <UART_SetConfig+0x2c4>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d004      	beq.n	8008884 <UART_SetConfig+0x6c>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008880:	4313      	orrs	r3, r2
 8008882:	627b      	str	r3, [r7, #36]	@ 0x24
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008894:	430a      	orrs	r2, r1
 8008896:	609a      	str	r2, [r3, #8]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a90      	ldr	r2, [pc, #576]	@ (8008ae0 <UART_SetConfig+0x2c8>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d126      	bne.n	80088f0 <UART_SetConfig+0xd8>
 80088a2:	4b90      	ldr	r3, [pc, #576]	@ (8008ae4 <UART_SetConfig+0x2cc>)
 80088a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088a8:	f003 0303 	and.w	r3, r3, #3
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d81b      	bhi.n	80088e8 <UART_SetConfig+0xd0>
 80088b0:	a201      	add	r2, pc, #4	@ (adr r2, 80088b8 <UART_SetConfig+0xa0>)
 80088b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b6:	bf00      	nop
 80088b8:	080088c9 	.word	0x080088c9
 80088bc:	080088d9 	.word	0x080088d9
 80088c0:	080088d1 	.word	0x080088d1
 80088c4:	080088e1 	.word	0x080088e1
 80088c8:	2301      	movs	r3, #1
 80088ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088ce:	e116      	b.n	8008afe <UART_SetConfig+0x2e6>
 80088d0:	2302      	movs	r3, #2
 80088d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088d6:	e112      	b.n	8008afe <UART_SetConfig+0x2e6>
 80088d8:	2304      	movs	r3, #4
 80088da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088de:	e10e      	b.n	8008afe <UART_SetConfig+0x2e6>
 80088e0:	2308      	movs	r3, #8
 80088e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088e6:	e10a      	b.n	8008afe <UART_SetConfig+0x2e6>
 80088e8:	2310      	movs	r3, #16
 80088ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088ee:	e106      	b.n	8008afe <UART_SetConfig+0x2e6>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a7c      	ldr	r2, [pc, #496]	@ (8008ae8 <UART_SetConfig+0x2d0>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d138      	bne.n	800896c <UART_SetConfig+0x154>
 80088fa:	4b7a      	ldr	r3, [pc, #488]	@ (8008ae4 <UART_SetConfig+0x2cc>)
 80088fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008900:	f003 030c 	and.w	r3, r3, #12
 8008904:	2b0c      	cmp	r3, #12
 8008906:	d82d      	bhi.n	8008964 <UART_SetConfig+0x14c>
 8008908:	a201      	add	r2, pc, #4	@ (adr r2, 8008910 <UART_SetConfig+0xf8>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	08008945 	.word	0x08008945
 8008914:	08008965 	.word	0x08008965
 8008918:	08008965 	.word	0x08008965
 800891c:	08008965 	.word	0x08008965
 8008920:	08008955 	.word	0x08008955
 8008924:	08008965 	.word	0x08008965
 8008928:	08008965 	.word	0x08008965
 800892c:	08008965 	.word	0x08008965
 8008930:	0800894d 	.word	0x0800894d
 8008934:	08008965 	.word	0x08008965
 8008938:	08008965 	.word	0x08008965
 800893c:	08008965 	.word	0x08008965
 8008940:	0800895d 	.word	0x0800895d
 8008944:	2300      	movs	r3, #0
 8008946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800894a:	e0d8      	b.n	8008afe <UART_SetConfig+0x2e6>
 800894c:	2302      	movs	r3, #2
 800894e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008952:	e0d4      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008954:	2304      	movs	r3, #4
 8008956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800895a:	e0d0      	b.n	8008afe <UART_SetConfig+0x2e6>
 800895c:	2308      	movs	r3, #8
 800895e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008962:	e0cc      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008964:	2310      	movs	r3, #16
 8008966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800896a:	e0c8      	b.n	8008afe <UART_SetConfig+0x2e6>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a5e      	ldr	r2, [pc, #376]	@ (8008aec <UART_SetConfig+0x2d4>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d125      	bne.n	80089c2 <UART_SetConfig+0x1aa>
 8008976:	4b5b      	ldr	r3, [pc, #364]	@ (8008ae4 <UART_SetConfig+0x2cc>)
 8008978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800897c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008980:	2b30      	cmp	r3, #48	@ 0x30
 8008982:	d016      	beq.n	80089b2 <UART_SetConfig+0x19a>
 8008984:	2b30      	cmp	r3, #48	@ 0x30
 8008986:	d818      	bhi.n	80089ba <UART_SetConfig+0x1a2>
 8008988:	2b20      	cmp	r3, #32
 800898a:	d00a      	beq.n	80089a2 <UART_SetConfig+0x18a>
 800898c:	2b20      	cmp	r3, #32
 800898e:	d814      	bhi.n	80089ba <UART_SetConfig+0x1a2>
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <UART_SetConfig+0x182>
 8008994:	2b10      	cmp	r3, #16
 8008996:	d008      	beq.n	80089aa <UART_SetConfig+0x192>
 8008998:	e00f      	b.n	80089ba <UART_SetConfig+0x1a2>
 800899a:	2300      	movs	r3, #0
 800899c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089a0:	e0ad      	b.n	8008afe <UART_SetConfig+0x2e6>
 80089a2:	2302      	movs	r3, #2
 80089a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089a8:	e0a9      	b.n	8008afe <UART_SetConfig+0x2e6>
 80089aa:	2304      	movs	r3, #4
 80089ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089b0:	e0a5      	b.n	8008afe <UART_SetConfig+0x2e6>
 80089b2:	2308      	movs	r3, #8
 80089b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089b8:	e0a1      	b.n	8008afe <UART_SetConfig+0x2e6>
 80089ba:	2310      	movs	r3, #16
 80089bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089c0:	e09d      	b.n	8008afe <UART_SetConfig+0x2e6>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a4a      	ldr	r2, [pc, #296]	@ (8008af0 <UART_SetConfig+0x2d8>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d125      	bne.n	8008a18 <UART_SetConfig+0x200>
 80089cc:	4b45      	ldr	r3, [pc, #276]	@ (8008ae4 <UART_SetConfig+0x2cc>)
 80089ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80089d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80089d8:	d016      	beq.n	8008a08 <UART_SetConfig+0x1f0>
 80089da:	2bc0      	cmp	r3, #192	@ 0xc0
 80089dc:	d818      	bhi.n	8008a10 <UART_SetConfig+0x1f8>
 80089de:	2b80      	cmp	r3, #128	@ 0x80
 80089e0:	d00a      	beq.n	80089f8 <UART_SetConfig+0x1e0>
 80089e2:	2b80      	cmp	r3, #128	@ 0x80
 80089e4:	d814      	bhi.n	8008a10 <UART_SetConfig+0x1f8>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <UART_SetConfig+0x1d8>
 80089ea:	2b40      	cmp	r3, #64	@ 0x40
 80089ec:	d008      	beq.n	8008a00 <UART_SetConfig+0x1e8>
 80089ee:	e00f      	b.n	8008a10 <UART_SetConfig+0x1f8>
 80089f0:	2300      	movs	r3, #0
 80089f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089f6:	e082      	b.n	8008afe <UART_SetConfig+0x2e6>
 80089f8:	2302      	movs	r3, #2
 80089fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089fe:	e07e      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a00:	2304      	movs	r3, #4
 8008a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a06:	e07a      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a08:	2308      	movs	r3, #8
 8008a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a0e:	e076      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a10:	2310      	movs	r3, #16
 8008a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a16:	e072      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a35      	ldr	r2, [pc, #212]	@ (8008af4 <UART_SetConfig+0x2dc>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d12a      	bne.n	8008a78 <UART_SetConfig+0x260>
 8008a22:	4b30      	ldr	r3, [pc, #192]	@ (8008ae4 <UART_SetConfig+0x2cc>)
 8008a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a30:	d01a      	beq.n	8008a68 <UART_SetConfig+0x250>
 8008a32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a36:	d81b      	bhi.n	8008a70 <UART_SetConfig+0x258>
 8008a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a3c:	d00c      	beq.n	8008a58 <UART_SetConfig+0x240>
 8008a3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a42:	d815      	bhi.n	8008a70 <UART_SetConfig+0x258>
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <UART_SetConfig+0x238>
 8008a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a4c:	d008      	beq.n	8008a60 <UART_SetConfig+0x248>
 8008a4e:	e00f      	b.n	8008a70 <UART_SetConfig+0x258>
 8008a50:	2300      	movs	r3, #0
 8008a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a56:	e052      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a5e:	e04e      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a60:	2304      	movs	r3, #4
 8008a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a66:	e04a      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a68:	2308      	movs	r3, #8
 8008a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a6e:	e046      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a70:	2310      	movs	r3, #16
 8008a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a76:	e042      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a17      	ldr	r2, [pc, #92]	@ (8008adc <UART_SetConfig+0x2c4>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d13a      	bne.n	8008af8 <UART_SetConfig+0x2e0>
 8008a82:	4b18      	ldr	r3, [pc, #96]	@ (8008ae4 <UART_SetConfig+0x2cc>)
 8008a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008a8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a90:	d01a      	beq.n	8008ac8 <UART_SetConfig+0x2b0>
 8008a92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a96:	d81b      	bhi.n	8008ad0 <UART_SetConfig+0x2b8>
 8008a98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a9c:	d00c      	beq.n	8008ab8 <UART_SetConfig+0x2a0>
 8008a9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008aa2:	d815      	bhi.n	8008ad0 <UART_SetConfig+0x2b8>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <UART_SetConfig+0x298>
 8008aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aac:	d008      	beq.n	8008ac0 <UART_SetConfig+0x2a8>
 8008aae:	e00f      	b.n	8008ad0 <UART_SetConfig+0x2b8>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ab6:	e022      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008abe:	e01e      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008ac0:	2304      	movs	r3, #4
 8008ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ac6:	e01a      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008ac8:	2308      	movs	r3, #8
 8008aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ace:	e016      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008ad0:	2310      	movs	r3, #16
 8008ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ad6:	e012      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008ad8:	efff69f3 	.word	0xefff69f3
 8008adc:	40008000 	.word	0x40008000
 8008ae0:	40013800 	.word	0x40013800
 8008ae4:	40021000 	.word	0x40021000
 8008ae8:	40004400 	.word	0x40004400
 8008aec:	40004800 	.word	0x40004800
 8008af0:	40004c00 	.word	0x40004c00
 8008af4:	40005000 	.word	0x40005000
 8008af8:	2310      	movs	r3, #16
 8008afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a9f      	ldr	r2, [pc, #636]	@ (8008d80 <UART_SetConfig+0x568>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d17a      	bne.n	8008bfe <UART_SetConfig+0x3e6>
 8008b08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b0c:	2b08      	cmp	r3, #8
 8008b0e:	d824      	bhi.n	8008b5a <UART_SetConfig+0x342>
 8008b10:	a201      	add	r2, pc, #4	@ (adr r2, 8008b18 <UART_SetConfig+0x300>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008b3d 	.word	0x08008b3d
 8008b1c:	08008b5b 	.word	0x08008b5b
 8008b20:	08008b45 	.word	0x08008b45
 8008b24:	08008b5b 	.word	0x08008b5b
 8008b28:	08008b4b 	.word	0x08008b4b
 8008b2c:	08008b5b 	.word	0x08008b5b
 8008b30:	08008b5b 	.word	0x08008b5b
 8008b34:	08008b5b 	.word	0x08008b5b
 8008b38:	08008b53 	.word	0x08008b53
 8008b3c:	f7fc fef4 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 8008b40:	61f8      	str	r0, [r7, #28]
 8008b42:	e010      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008b44:	4b8f      	ldr	r3, [pc, #572]	@ (8008d84 <UART_SetConfig+0x56c>)
 8008b46:	61fb      	str	r3, [r7, #28]
 8008b48:	e00d      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008b4a:	f7fc fe55 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 8008b4e:	61f8      	str	r0, [r7, #28]
 8008b50:	e009      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b56:	61fb      	str	r3, [r7, #28]
 8008b58:	e005      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	61fb      	str	r3, [r7, #28]
 8008b5e:	2301      	movs	r3, #1
 8008b60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008b64:	bf00      	nop
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 80fb 	beq.w	8008d64 <UART_SetConfig+0x54c>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	4613      	mov	r3, r2
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	4413      	add	r3, r2
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d305      	bcc.n	8008b8a <UART_SetConfig+0x372>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	031b      	lsls	r3, r3, #12
 8008b84:	69fa      	ldr	r2, [r7, #28]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d903      	bls.n	8008b92 <UART_SetConfig+0x37a>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008b90:	e0e8      	b.n	8008d64 <UART_SetConfig+0x54c>
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	2200      	movs	r2, #0
 8008b96:	461c      	mov	r4, r3
 8008b98:	4615      	mov	r5, r2
 8008b9a:	f04f 0200 	mov.w	r2, #0
 8008b9e:	f04f 0300 	mov.w	r3, #0
 8008ba2:	022b      	lsls	r3, r5, #8
 8008ba4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008ba8:	0222      	lsls	r2, r4, #8
 8008baa:	68f9      	ldr	r1, [r7, #12]
 8008bac:	6849      	ldr	r1, [r1, #4]
 8008bae:	0849      	lsrs	r1, r1, #1
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	4688      	mov	r8, r1
 8008bb4:	4681      	mov	r9, r0
 8008bb6:	eb12 0a08 	adds.w	sl, r2, r8
 8008bba:	eb43 0b09 	adc.w	fp, r3, r9
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	603b      	str	r3, [r7, #0]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bcc:	4650      	mov	r0, sl
 8008bce:	4659      	mov	r1, fp
 8008bd0:	f7f7 fb5e 	bl	8000290 <__aeabi_uldivmod>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4613      	mov	r3, r2
 8008bda:	61bb      	str	r3, [r7, #24]
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008be2:	d308      	bcc.n	8008bf6 <UART_SetConfig+0x3de>
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bea:	d204      	bcs.n	8008bf6 <UART_SetConfig+0x3de>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	60da      	str	r2, [r3, #12]
 8008bf4:	e0b6      	b.n	8008d64 <UART_SetConfig+0x54c>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008bfc:	e0b2      	b.n	8008d64 <UART_SetConfig+0x54c>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c06:	d15e      	bne.n	8008cc6 <UART_SetConfig+0x4ae>
 8008c08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d828      	bhi.n	8008c62 <UART_SetConfig+0x44a>
 8008c10:	a201      	add	r2, pc, #4	@ (adr r2, 8008c18 <UART_SetConfig+0x400>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008c3d 	.word	0x08008c3d
 8008c1c:	08008c45 	.word	0x08008c45
 8008c20:	08008c4d 	.word	0x08008c4d
 8008c24:	08008c63 	.word	0x08008c63
 8008c28:	08008c53 	.word	0x08008c53
 8008c2c:	08008c63 	.word	0x08008c63
 8008c30:	08008c63 	.word	0x08008c63
 8008c34:	08008c63 	.word	0x08008c63
 8008c38:	08008c5b 	.word	0x08008c5b
 8008c3c:	f7fc fe74 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 8008c40:	61f8      	str	r0, [r7, #28]
 8008c42:	e014      	b.n	8008c6e <UART_SetConfig+0x456>
 8008c44:	f7fc fe86 	bl	8005954 <HAL_RCC_GetPCLK2Freq>
 8008c48:	61f8      	str	r0, [r7, #28]
 8008c4a:	e010      	b.n	8008c6e <UART_SetConfig+0x456>
 8008c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8008d84 <UART_SetConfig+0x56c>)
 8008c4e:	61fb      	str	r3, [r7, #28]
 8008c50:	e00d      	b.n	8008c6e <UART_SetConfig+0x456>
 8008c52:	f7fc fdd1 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 8008c56:	61f8      	str	r0, [r7, #28]
 8008c58:	e009      	b.n	8008c6e <UART_SetConfig+0x456>
 8008c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c5e:	61fb      	str	r3, [r7, #28]
 8008c60:	e005      	b.n	8008c6e <UART_SetConfig+0x456>
 8008c62:	2300      	movs	r3, #0
 8008c64:	61fb      	str	r3, [r7, #28]
 8008c66:	2301      	movs	r3, #1
 8008c68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008c6c:	bf00      	nop
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d077      	beq.n	8008d64 <UART_SetConfig+0x54c>
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	005a      	lsls	r2, r3, #1
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	085b      	lsrs	r3, r3, #1
 8008c7e:	441a      	add	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c88:	61bb      	str	r3, [r7, #24]
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	2b0f      	cmp	r3, #15
 8008c8e:	d916      	bls.n	8008cbe <UART_SetConfig+0x4a6>
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c96:	d212      	bcs.n	8008cbe <UART_SetConfig+0x4a6>
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	f023 030f 	bic.w	r3, r3, #15
 8008ca0:	82fb      	strh	r3, [r7, #22]
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	085b      	lsrs	r3, r3, #1
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	8afb      	ldrh	r3, [r7, #22]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	82fb      	strh	r3, [r7, #22]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	8afa      	ldrh	r2, [r7, #22]
 8008cba:	60da      	str	r2, [r3, #12]
 8008cbc:	e052      	b.n	8008d64 <UART_SetConfig+0x54c>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008cc4:	e04e      	b.n	8008d64 <UART_SetConfig+0x54c>
 8008cc6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008cca:	2b08      	cmp	r3, #8
 8008ccc:	d827      	bhi.n	8008d1e <UART_SetConfig+0x506>
 8008cce:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd4 <UART_SetConfig+0x4bc>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008cf9 	.word	0x08008cf9
 8008cd8:	08008d01 	.word	0x08008d01
 8008cdc:	08008d09 	.word	0x08008d09
 8008ce0:	08008d1f 	.word	0x08008d1f
 8008ce4:	08008d0f 	.word	0x08008d0f
 8008ce8:	08008d1f 	.word	0x08008d1f
 8008cec:	08008d1f 	.word	0x08008d1f
 8008cf0:	08008d1f 	.word	0x08008d1f
 8008cf4:	08008d17 	.word	0x08008d17
 8008cf8:	f7fc fe16 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 8008cfc:	61f8      	str	r0, [r7, #28]
 8008cfe:	e014      	b.n	8008d2a <UART_SetConfig+0x512>
 8008d00:	f7fc fe28 	bl	8005954 <HAL_RCC_GetPCLK2Freq>
 8008d04:	61f8      	str	r0, [r7, #28]
 8008d06:	e010      	b.n	8008d2a <UART_SetConfig+0x512>
 8008d08:	4b1e      	ldr	r3, [pc, #120]	@ (8008d84 <UART_SetConfig+0x56c>)
 8008d0a:	61fb      	str	r3, [r7, #28]
 8008d0c:	e00d      	b.n	8008d2a <UART_SetConfig+0x512>
 8008d0e:	f7fc fd73 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 8008d12:	61f8      	str	r0, [r7, #28]
 8008d14:	e009      	b.n	8008d2a <UART_SetConfig+0x512>
 8008d16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d1a:	61fb      	str	r3, [r7, #28]
 8008d1c:	e005      	b.n	8008d2a <UART_SetConfig+0x512>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61fb      	str	r3, [r7, #28]
 8008d22:	2301      	movs	r3, #1
 8008d24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008d28:	bf00      	nop
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d019      	beq.n	8008d64 <UART_SetConfig+0x54c>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	085a      	lsrs	r2, r3, #1
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	441a      	add	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	2b0f      	cmp	r3, #15
 8008d48:	d909      	bls.n	8008d5e <UART_SetConfig+0x546>
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d50:	d205      	bcs.n	8008d5e <UART_SetConfig+0x546>
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60da      	str	r2, [r3, #12]
 8008d5c:	e002      	b.n	8008d64 <UART_SetConfig+0x54c>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	669a      	str	r2, [r3, #104]	@ 0x68
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008d70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008d74:	4618      	mov	r0, r3
 8008d76:	3728      	adds	r7, #40	@ 0x28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d7e:	bf00      	nop
 8008d80:	40008000 	.word	0x40008000
 8008d84:	00f42400 	.word	0x00f42400

08008d88 <UART_AdvFeatureConfig>:
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d94:	f003 0308 	and.w	r3, r3, #8
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00a      	beq.n	8008db2 <UART_AdvFeatureConfig+0x2a>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	430a      	orrs	r2, r1
 8008db0:	605a      	str	r2, [r3, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00a      	beq.n	8008dd4 <UART_AdvFeatureConfig+0x4c>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	605a      	str	r2, [r3, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00a      	beq.n	8008df6 <UART_AdvFeatureConfig+0x6e>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	430a      	orrs	r2, r1
 8008df4:	605a      	str	r2, [r3, #4]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfa:	f003 0304 	and.w	r3, r3, #4
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00a      	beq.n	8008e18 <UART_AdvFeatureConfig+0x90>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	430a      	orrs	r2, r1
 8008e16:	605a      	str	r2, [r3, #4]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e1c:	f003 0310 	and.w	r3, r3, #16
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00a      	beq.n	8008e3a <UART_AdvFeatureConfig+0xb2>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	430a      	orrs	r2, r1
 8008e38:	609a      	str	r2, [r3, #8]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e3e:	f003 0320 	and.w	r3, r3, #32
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00a      	beq.n	8008e5c <UART_AdvFeatureConfig+0xd4>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	609a      	str	r2, [r3, #8]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01a      	beq.n	8008e9e <UART_AdvFeatureConfig+0x116>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	605a      	str	r2, [r3, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e86:	d10a      	bne.n	8008e9e <UART_AdvFeatureConfig+0x116>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	605a      	str	r2, [r3, #4]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00a      	beq.n	8008ec0 <UART_AdvFeatureConfig+0x138>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	430a      	orrs	r2, r1
 8008ebe:	605a      	str	r2, [r3, #4]
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <UART_CheckIdleState>:
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b098      	sub	sp, #96	@ 0x60
 8008ed0:	af02      	add	r7, sp, #8
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8008edc:	f7f9 f80e 	bl	8001efc <HAL_GetTick>
 8008ee0:	6578      	str	r0, [r7, #84]	@ 0x54
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0308 	and.w	r3, r3, #8
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d12e      	bne.n	8008f4e <UART_CheckIdleState+0x82>
 8008ef0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f88c 	bl	800901c <UART_WaitOnFlagUntilTimeout>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d021      	beq.n	8008f4e <UART_CheckIdleState+0x82>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e6      	bne.n	8008f0a <UART_CheckIdleState+0x3e>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	67da      	str	r2, [r3, #124]	@ 0x7c
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e062      	b.n	8009014 <UART_CheckIdleState+0x148>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b04      	cmp	r3, #4
 8008f5a:	d149      	bne.n	8008ff0 <UART_CheckIdleState+0x124>
 8008f5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f64:	2200      	movs	r2, #0
 8008f66:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f856 	bl	800901c <UART_WaitOnFlagUntilTimeout>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d03c      	beq.n	8008ff0 <UART_CheckIdleState+0x124>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	623b      	str	r3, [r7, #32]
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	461a      	mov	r2, r3
 8008f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e6      	bne.n	8008f76 <UART_CheckIdleState+0xaa>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3308      	adds	r3, #8
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	e853 3f00 	ldrex	r3, [r3]
 8008fb6:	60fb      	str	r3, [r7, #12]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f023 0301 	bic.w	r3, r3, #1
 8008fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3308      	adds	r3, #8
 8008fc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fc8:	61fa      	str	r2, [r7, #28]
 8008fca:	61bb      	str	r3, [r7, #24]
 8008fcc:	69b9      	ldr	r1, [r7, #24]
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	e841 2300 	strex	r3, r2, [r1]
 8008fd4:	617b      	str	r3, [r7, #20]
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e5      	bne.n	8008fa8 <UART_CheckIdleState+0xdc>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8008fec:	2303      	movs	r3, #3
 8008fee:	e011      	b.n	8009014 <UART_CheckIdleState+0x148>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2220      	movs	r2, #32
 8008ffa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	661a      	str	r2, [r3, #96]	@ 0x60
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	665a      	str	r2, [r3, #100]	@ 0x64
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8009012:	2300      	movs	r3, #0
 8009014:	4618      	mov	r0, r3
 8009016:	3758      	adds	r7, #88	@ 0x58
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <UART_WaitOnFlagUntilTimeout>:
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	4613      	mov	r3, r2
 800902a:	71fb      	strb	r3, [r7, #7]
 800902c:	e04f      	b.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009034:	d04b      	beq.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8009036:	f7f8 ff61 	bl	8001efc <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	429a      	cmp	r2, r3
 8009044:	d302      	bcc.n	800904c <UART_WaitOnFlagUntilTimeout+0x30>
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <UART_WaitOnFlagUntilTimeout+0x34>
 800904c:	2303      	movs	r3, #3
 800904e:	e04e      	b.n	80090ee <UART_WaitOnFlagUntilTimeout+0xd2>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	2b00      	cmp	r3, #0
 800905c:	d037      	beq.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2b80      	cmp	r3, #128	@ 0x80
 8009062:	d034      	beq.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	2b40      	cmp	r3, #64	@ 0x40
 8009068:	d031      	beq.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	f003 0308 	and.w	r3, r3, #8
 8009074:	2b08      	cmp	r3, #8
 8009076:	d110      	bne.n	800909a <UART_WaitOnFlagUntilTimeout+0x7e>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2208      	movs	r2, #8
 800907e:	621a      	str	r2, [r3, #32]
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 f838 	bl	80090f6 <UART_EndRxTransfer>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2208      	movs	r2, #8
 800908a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8009096:	2301      	movs	r3, #1
 8009098:	e029      	b.n	80090ee <UART_WaitOnFlagUntilTimeout+0xd2>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090a8:	d111      	bne.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090b2:	621a      	str	r2, [r3, #32]
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 f81e 	bl	80090f6 <UART_EndRxTransfer>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2220      	movs	r2, #32
 80090be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80090ca:	2303      	movs	r3, #3
 80090cc:	e00f      	b.n	80090ee <UART_WaitOnFlagUntilTimeout+0xd2>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	69da      	ldr	r2, [r3, #28]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	4013      	ands	r3, r2
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	429a      	cmp	r2, r3
 80090dc:	bf0c      	ite	eq
 80090de:	2301      	moveq	r3, #1
 80090e0:	2300      	movne	r3, #0
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	461a      	mov	r2, r3
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d0a0      	beq.n	800902e <UART_WaitOnFlagUntilTimeout+0x12>
 80090ec:	2300      	movs	r3, #0
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <UART_EndRxTransfer>:
 80090f6:	b480      	push	{r7}
 80090f8:	b095      	sub	sp, #84	@ 0x54
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	637b      	str	r3, [r7, #52]	@ 0x34
 8009104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	633b      	str	r3, [r7, #48]	@ 0x30
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009112:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	461a      	mov	r2, r3
 800911a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800911c:	643b      	str	r3, [r7, #64]	@ 0x40
 800911e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009120:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009122:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009124:	e841 2300 	strex	r3, r2, [r1]
 8009128:	63bb      	str	r3, [r7, #56]	@ 0x38
 800912a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e6      	bne.n	80090fe <UART_EndRxTransfer+0x8>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3308      	adds	r3, #8
 8009136:	623b      	str	r3, [r7, #32]
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	e853 3f00 	ldrex	r3, [r3]
 800913e:	61fb      	str	r3, [r7, #28]
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	f023 0301 	bic.w	r3, r3, #1
 8009146:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	3308      	adds	r3, #8
 800914e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009150:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009152:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009154:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009158:	e841 2300 	strex	r3, r2, [r1]
 800915c:	627b      	str	r3, [r7, #36]	@ 0x24
 800915e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1e5      	bne.n	8009130 <UART_EndRxTransfer+0x3a>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009168:	2b01      	cmp	r3, #1
 800916a:	d118      	bne.n	800919e <UART_EndRxTransfer+0xa8>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	60fb      	str	r3, [r7, #12]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	60bb      	str	r3, [r7, #8]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	f023 0310 	bic.w	r3, r3, #16
 8009180:	647b      	str	r3, [r7, #68]	@ 0x44
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800918a:	61bb      	str	r3, [r7, #24]
 800918c:	617a      	str	r2, [r7, #20]
 800918e:	6979      	ldr	r1, [r7, #20]
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	e841 2300 	strex	r3, r2, [r1]
 8009196:	613b      	str	r3, [r7, #16]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e6      	bne.n	800916c <UART_EndRxTransfer+0x76>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2220      	movs	r2, #32
 80091a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	661a      	str	r2, [r3, #96]	@ 0x60
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	669a      	str	r2, [r3, #104]	@ 0x68
 80091b2:	bf00      	nop
 80091b4:	3754      	adds	r7, #84	@ 0x54
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <makeFreeRtosPriority>:
 80091be:	b480      	push	{r7}
 80091c0:	b085      	sub	sp, #20
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	4603      	mov	r3, r0
 80091c6:	80fb      	strh	r3, [r7, #6]
 80091c8:	2300      	movs	r3, #0
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091d0:	2b84      	cmp	r3, #132	@ 0x84
 80091d2:	d005      	beq.n	80091e0 <makeFreeRtosPriority+0x22>
 80091d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	3303      	adds	r3, #3
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	4618      	mov	r0, r3
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <osKernelStart>:
 80091ee:	b580      	push	{r7, lr}
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	f000 fae5 	bl	80097c0 <vTaskStartScheduler>
 80091f6:	2300      	movs	r3, #0
 80091f8:	4618      	mov	r0, r3
 80091fa:	bd80      	pop	{r7, pc}

080091fc <osThreadCreate>:
 80091fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091fe:	b089      	sub	sp, #36	@ 0x24
 8009200:	af04      	add	r7, sp, #16
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d020      	beq.n	8009250 <osThreadCreate+0x54>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d01c      	beq.n	8009250 <osThreadCreate+0x54>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685c      	ldr	r4, [r3, #4]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681d      	ldr	r5, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691e      	ldr	r6, [r3, #16]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009228:	4618      	mov	r0, r3
 800922a:	f7ff ffc8 	bl	80091be <makeFreeRtosPriority>
 800922e:	4601      	mov	r1, r0
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	6992      	ldr	r2, [r2, #24]
 8009238:	9202      	str	r2, [sp, #8]
 800923a:	9301      	str	r3, [sp, #4]
 800923c:	9100      	str	r1, [sp, #0]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	4632      	mov	r2, r6
 8009242:	4629      	mov	r1, r5
 8009244:	4620      	mov	r0, r4
 8009246:	f000 f8ed 	bl	8009424 <xTaskCreateStatic>
 800924a:	4603      	mov	r3, r0
 800924c:	60fb      	str	r3, [r7, #12]
 800924e:	e01c      	b.n	800928a <osThreadCreate+0x8e>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685c      	ldr	r4, [r3, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681d      	ldr	r5, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	b29e      	uxth	r6, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff ffaa 	bl	80091be <makeFreeRtosPriority>
 800926a:	4602      	mov	r2, r0
 800926c:	f107 030c 	add.w	r3, r7, #12
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	9200      	str	r2, [sp, #0]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	4632      	mov	r2, r6
 8009278:	4629      	mov	r1, r5
 800927a:	4620      	mov	r0, r4
 800927c:	f000 f932 	bl	80094e4 <xTaskCreate>
 8009280:	4603      	mov	r3, r0
 8009282:	2b01      	cmp	r3, #1
 8009284:	d001      	beq.n	800928a <osThreadCreate+0x8e>
 8009286:	2300      	movs	r3, #0
 8009288:	e000      	b.n	800928c <osThreadCreate+0x90>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009294 <osDelay>:
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	60fb      	str	r3, [r7, #12]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <osDelay+0x16>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	e000      	b.n	80092ac <osDelay+0x18>
 80092aa:	2301      	movs	r3, #1
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 fa51 	bl	8009754 <vTaskDelay>
 80092b2:	2300      	movs	r3, #0
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <vListInitialise>:
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f103 0208 	add.w	r2, r3, #8
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	605a      	str	r2, [r3, #4]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092d4:	609a      	str	r2, [r3, #8]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f103 0208 	add.w	r2, r3, #8
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	60da      	str	r2, [r3, #12]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f103 0208 	add.w	r2, r3, #8
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	611a      	str	r2, [r3, #16]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	601a      	str	r2, [r3, #0]
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <vListInitialiseItem>:
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	611a      	str	r2, [r3, #16]
 800930a:	bf00      	nop
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <vListInsertEnd>:
 8009316:	b480      	push	{r7}
 8009318:	b085      	sub	sp, #20
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	6039      	str	r1, [r7, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	60fb      	str	r3, [r7, #12]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	605a      	str	r2, [r3, #4]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	689a      	ldr	r2, [r3, #8]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	609a      	str	r2, [r3, #8]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	605a      	str	r2, [r3, #4]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	609a      	str	r2, [r3, #8]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	611a      	str	r2, [r3, #16]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	bf00      	nop
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <vListInsert>:
 800935e:	b480      	push	{r7}
 8009360:	b085      	sub	sp, #20
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	6039      	str	r1, [r7, #0]
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60bb      	str	r3, [r7, #8]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009374:	d103      	bne.n	800937e <vListInsert+0x20>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	e00c      	b.n	8009398 <vListInsert+0x3a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3308      	adds	r3, #8
 8009382:	60fb      	str	r3, [r7, #12]
 8009384:	e002      	b.n	800938c <vListInsert+0x2e>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	429a      	cmp	r2, r3
 8009396:	d2f6      	bcs.n	8009386 <vListInsert+0x28>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	605a      	str	r2, [r3, #4]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	683a      	ldr	r2, [r7, #0]
 80093a6:	609a      	str	r2, [r3, #8]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	609a      	str	r2, [r3, #8]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	605a      	str	r2, [r3, #4]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	611a      	str	r2, [r3, #16]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	bf00      	nop
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <uxListRemove>:
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	6892      	ldr	r2, [r2, #8]
 80093e6:	609a      	str	r2, [r3, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	6852      	ldr	r2, [r2, #4]
 80093f0:	605a      	str	r2, [r3, #4]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d103      	bne.n	8009404 <uxListRemove+0x34>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	605a      	str	r2, [r3, #4]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	611a      	str	r2, [r3, #16]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	1e5a      	subs	r2, r3, #1
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <xTaskCreateStatic>:
 8009424:	b580      	push	{r7, lr}
 8009426:	b08e      	sub	sp, #56	@ 0x38
 8009428:	af04      	add	r7, sp, #16
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	603b      	str	r3, [r7, #0]
 8009432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10b      	bne.n	8009450 <xTaskCreateStatic+0x2c>
 8009438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	623b      	str	r3, [r7, #32]
 800944a:	bf00      	nop
 800944c:	bf00      	nop
 800944e:	e7fd      	b.n	800944c <xTaskCreateStatic+0x28>
 8009450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10b      	bne.n	800946e <xTaskCreateStatic+0x4a>
 8009456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	61fb      	str	r3, [r7, #28]
 8009468:	bf00      	nop
 800946a:	bf00      	nop
 800946c:	e7fd      	b.n	800946a <xTaskCreateStatic+0x46>
 800946e:	2354      	movs	r3, #84	@ 0x54
 8009470:	613b      	str	r3, [r7, #16]
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	2b54      	cmp	r3, #84	@ 0x54
 8009476:	d00b      	beq.n	8009490 <xTaskCreateStatic+0x6c>
 8009478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	61bb      	str	r3, [r7, #24]
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	e7fd      	b.n	800948c <xTaskCreateStatic+0x68>
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009494:	2b00      	cmp	r3, #0
 8009496:	d01e      	beq.n	80094d6 <xTaskCreateStatic+0xb2>
 8009498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800949a:	2b00      	cmp	r3, #0
 800949c:	d01b      	beq.n	80094d6 <xTaskCreateStatic+0xb2>
 800949e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80094a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80094a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80094b0:	2300      	movs	r3, #0
 80094b2:	9303      	str	r3, [sp, #12]
 80094b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b6:	9302      	str	r3, [sp, #8]
 80094b8:	f107 0314 	add.w	r3, r7, #20
 80094bc:	9301      	str	r3, [sp, #4]
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 f850 	bl	800956e <prvInitialiseNewTask>
 80094ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094d0:	f000 f8d6 	bl	8009680 <prvAddNewTaskToReadyList>
 80094d4:	e001      	b.n	80094da <xTaskCreateStatic+0xb6>
 80094d6:	2300      	movs	r3, #0
 80094d8:	617b      	str	r3, [r7, #20]
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	4618      	mov	r0, r3
 80094de:	3728      	adds	r7, #40	@ 0x28
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <xTaskCreate>:
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b08c      	sub	sp, #48	@ 0x30
 80094e8:	af04      	add	r7, sp, #16
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	603b      	str	r3, [r7, #0]
 80094f0:	4613      	mov	r3, r2
 80094f2:	80fb      	strh	r3, [r7, #6]
 80094f4:	88fb      	ldrh	r3, [r7, #6]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 feed 	bl	800a2d8 <pvPortMalloc>
 80094fe:	6178      	str	r0, [r7, #20]
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00e      	beq.n	8009524 <xTaskCreate+0x40>
 8009506:	2054      	movs	r0, #84	@ 0x54
 8009508:	f000 fee6 	bl	800a2d8 <pvPortMalloc>
 800950c:	61f8      	str	r0, [r7, #28]
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d003      	beq.n	800951c <xTaskCreate+0x38>
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	631a      	str	r2, [r3, #48]	@ 0x30
 800951a:	e005      	b.n	8009528 <xTaskCreate+0x44>
 800951c:	6978      	ldr	r0, [r7, #20]
 800951e:	f000 ffa9 	bl	800a474 <vPortFree>
 8009522:	e001      	b.n	8009528 <xTaskCreate+0x44>
 8009524:	2300      	movs	r3, #0
 8009526:	61fb      	str	r3, [r7, #28]
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d017      	beq.n	800955e <xTaskCreate+0x7a>
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8009536:	88fa      	ldrh	r2, [r7, #6]
 8009538:	2300      	movs	r3, #0
 800953a:	9303      	str	r3, [sp, #12]
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	9302      	str	r3, [sp, #8]
 8009540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009542:	9301      	str	r3, [sp, #4]
 8009544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	68b9      	ldr	r1, [r7, #8]
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 f80e 	bl	800956e <prvInitialiseNewTask>
 8009552:	69f8      	ldr	r0, [r7, #28]
 8009554:	f000 f894 	bl	8009680 <prvAddNewTaskToReadyList>
 8009558:	2301      	movs	r3, #1
 800955a:	61bb      	str	r3, [r7, #24]
 800955c:	e002      	b.n	8009564 <xTaskCreate+0x80>
 800955e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009562:	61bb      	str	r3, [r7, #24]
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	4618      	mov	r0, r3
 8009568:	3720      	adds	r7, #32
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <prvInitialiseNewTask>:
 800956e:	b580      	push	{r7, lr}
 8009570:	b088      	sub	sp, #32
 8009572:	af00      	add	r7, sp, #0
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	607a      	str	r2, [r7, #4]
 800957a:	603b      	str	r3, [r7, #0]
 800957c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009586:	3b01      	subs	r3, #1
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	61bb      	str	r3, [r7, #24]
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	f023 0307 	bic.w	r3, r3, #7
 8009594:	61bb      	str	r3, [r7, #24]
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	f003 0307 	and.w	r3, r3, #7
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00b      	beq.n	80095b8 <prvInitialiseNewTask+0x4a>
 80095a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	617b      	str	r3, [r7, #20]
 80095b2:	bf00      	nop
 80095b4:	bf00      	nop
 80095b6:	e7fd      	b.n	80095b4 <prvInitialiseNewTask+0x46>
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d01f      	beq.n	80095fe <prvInitialiseNewTask+0x90>
 80095be:	2300      	movs	r3, #0
 80095c0:	61fb      	str	r3, [r7, #28]
 80095c2:	e012      	b.n	80095ea <prvInitialiseNewTask+0x7c>
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	4413      	add	r3, r2
 80095ca:	7819      	ldrb	r1, [r3, #0]
 80095cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	4413      	add	r3, r2
 80095d2:	3334      	adds	r3, #52	@ 0x34
 80095d4:	460a      	mov	r2, r1
 80095d6:	701a      	strb	r2, [r3, #0]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	4413      	add	r3, r2
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d006      	beq.n	80095f2 <prvInitialiseNewTask+0x84>
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	3301      	adds	r3, #1
 80095e8:	61fb      	str	r3, [r7, #28]
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	2b0f      	cmp	r3, #15
 80095ee:	d9e9      	bls.n	80095c4 <prvInitialiseNewTask+0x56>
 80095f0:	e000      	b.n	80095f4 <prvInitialiseNewTask+0x86>
 80095f2:	bf00      	nop
 80095f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80095fc:	e003      	b.n	8009606 <prvInitialiseNewTask+0x98>
 80095fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8009606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009608:	2b06      	cmp	r3, #6
 800960a:	d901      	bls.n	8009610 <prvInitialiseNewTask+0xa2>
 800960c:	2306      	movs	r3, #6
 800960e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009612:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009614:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009618:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800961a:	645a      	str	r2, [r3, #68]	@ 0x44
 800961c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961e:	2200      	movs	r2, #0
 8009620:	649a      	str	r2, [r3, #72]	@ 0x48
 8009622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009624:	3304      	adds	r3, #4
 8009626:	4618      	mov	r0, r3
 8009628:	f7ff fe68 	bl	80092fc <vListInitialiseItem>
 800962c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962e:	3318      	adds	r3, #24
 8009630:	4618      	mov	r0, r3
 8009632:	f7ff fe63 	bl	80092fc <vListInitialiseItem>
 8009636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800963a:	611a      	str	r2, [r3, #16]
 800963c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963e:	f1c3 0207 	rsb	r2, r3, #7
 8009642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009644:	619a      	str	r2, [r3, #24]
 8009646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800964a:	625a      	str	r2, [r3, #36]	@ 0x24
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	2200      	movs	r2, #0
 8009650:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	68f9      	ldr	r1, [r7, #12]
 800965e:	69b8      	ldr	r0, [r7, #24]
 8009660:	f000 fc2c 	bl	8009ebc <pxPortInitialiseStack>
 8009664:	4602      	mov	r2, r0
 8009666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966c:	2b00      	cmp	r3, #0
 800966e:	d002      	beq.n	8009676 <prvInitialiseNewTask+0x108>
 8009670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009674:	601a      	str	r2, [r3, #0]
 8009676:	bf00      	nop
 8009678:	3720      	adds	r7, #32
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
	...

08009680 <prvAddNewTaskToReadyList>:
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	f000 fd46 	bl	800a118 <vPortEnterCritical>
 800968c:	4b2a      	ldr	r3, [pc, #168]	@ (8009738 <prvAddNewTaskToReadyList+0xb8>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3301      	adds	r3, #1
 8009692:	4a29      	ldr	r2, [pc, #164]	@ (8009738 <prvAddNewTaskToReadyList+0xb8>)
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	4b29      	ldr	r3, [pc, #164]	@ (800973c <prvAddNewTaskToReadyList+0xbc>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d109      	bne.n	80096b2 <prvAddNewTaskToReadyList+0x32>
 800969e:	4a27      	ldr	r2, [pc, #156]	@ (800973c <prvAddNewTaskToReadyList+0xbc>)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	4b24      	ldr	r3, [pc, #144]	@ (8009738 <prvAddNewTaskToReadyList+0xb8>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d110      	bne.n	80096ce <prvAddNewTaskToReadyList+0x4e>
 80096ac:	f000 fac4 	bl	8009c38 <prvInitialiseTaskLists>
 80096b0:	e00d      	b.n	80096ce <prvAddNewTaskToReadyList+0x4e>
 80096b2:	4b23      	ldr	r3, [pc, #140]	@ (8009740 <prvAddNewTaskToReadyList+0xc0>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d109      	bne.n	80096ce <prvAddNewTaskToReadyList+0x4e>
 80096ba:	4b20      	ldr	r3, [pc, #128]	@ (800973c <prvAddNewTaskToReadyList+0xbc>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d802      	bhi.n	80096ce <prvAddNewTaskToReadyList+0x4e>
 80096c8:	4a1c      	ldr	r2, [pc, #112]	@ (800973c <prvAddNewTaskToReadyList+0xbc>)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6013      	str	r3, [r2, #0]
 80096ce:	4b1d      	ldr	r3, [pc, #116]	@ (8009744 <prvAddNewTaskToReadyList+0xc4>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3301      	adds	r3, #1
 80096d4:	4a1b      	ldr	r2, [pc, #108]	@ (8009744 <prvAddNewTaskToReadyList+0xc4>)
 80096d6:	6013      	str	r3, [r2, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096dc:	2201      	movs	r2, #1
 80096de:	409a      	lsls	r2, r3
 80096e0:	4b19      	ldr	r3, [pc, #100]	@ (8009748 <prvAddNewTaskToReadyList+0xc8>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	4a18      	ldr	r2, [pc, #96]	@ (8009748 <prvAddNewTaskToReadyList+0xc8>)
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ee:	4613      	mov	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4a15      	ldr	r2, [pc, #84]	@ (800974c <prvAddNewTaskToReadyList+0xcc>)
 80096f8:	441a      	add	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3304      	adds	r3, #4
 80096fe:	4619      	mov	r1, r3
 8009700:	4610      	mov	r0, r2
 8009702:	f7ff fe08 	bl	8009316 <vListInsertEnd>
 8009706:	f000 fd39 	bl	800a17c <vPortExitCritical>
 800970a:	4b0d      	ldr	r3, [pc, #52]	@ (8009740 <prvAddNewTaskToReadyList+0xc0>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00e      	beq.n	8009730 <prvAddNewTaskToReadyList+0xb0>
 8009712:	4b0a      	ldr	r3, [pc, #40]	@ (800973c <prvAddNewTaskToReadyList+0xbc>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971c:	429a      	cmp	r2, r3
 800971e:	d207      	bcs.n	8009730 <prvAddNewTaskToReadyList+0xb0>
 8009720:	4b0b      	ldr	r3, [pc, #44]	@ (8009750 <prvAddNewTaskToReadyList+0xd0>)
 8009722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009726:	601a      	str	r2, [r3, #0]
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20000ac4 	.word	0x20000ac4
 800973c:	200009c4 	.word	0x200009c4
 8009740:	20000ad0 	.word	0x20000ad0
 8009744:	20000ae0 	.word	0x20000ae0
 8009748:	20000acc 	.word	0x20000acc
 800974c:	200009c8 	.word	0x200009c8
 8009750:	e000ed04 	.word	0xe000ed04

08009754 <vTaskDelay>:
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	2300      	movs	r3, #0
 800975e:	60fb      	str	r3, [r7, #12]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d018      	beq.n	8009798 <vTaskDelay+0x44>
 8009766:	4b14      	ldr	r3, [pc, #80]	@ (80097b8 <vTaskDelay+0x64>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00b      	beq.n	8009786 <vTaskDelay+0x32>
 800976e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	60bb      	str	r3, [r7, #8]
 8009780:	bf00      	nop
 8009782:	bf00      	nop
 8009784:	e7fd      	b.n	8009782 <vTaskDelay+0x2e>
 8009786:	f000 f87d 	bl	8009884 <vTaskSuspendAll>
 800978a:	2100      	movs	r1, #0
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fb2f 	bl	8009df0 <prvAddCurrentTaskToDelayedList>
 8009792:	f000 f885 	bl	80098a0 <xTaskResumeAll>
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d107      	bne.n	80097ae <vTaskDelay+0x5a>
 800979e:	4b07      	ldr	r3, [pc, #28]	@ (80097bc <vTaskDelay+0x68>)
 80097a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	bf00      	nop
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	20000aec 	.word	0x20000aec
 80097bc:	e000ed04 	.word	0xe000ed04

080097c0 <vTaskStartScheduler>:
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08a      	sub	sp, #40	@ 0x28
 80097c4:	af04      	add	r7, sp, #16
 80097c6:	2300      	movs	r3, #0
 80097c8:	60bb      	str	r3, [r7, #8]
 80097ca:	2300      	movs	r3, #0
 80097cc:	607b      	str	r3, [r7, #4]
 80097ce:	463a      	mov	r2, r7
 80097d0:	1d39      	adds	r1, r7, #4
 80097d2:	f107 0308 	add.w	r3, r7, #8
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7f7 f846 	bl	8000868 <vApplicationGetIdleTaskMemory>
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	9202      	str	r2, [sp, #8]
 80097e4:	9301      	str	r3, [sp, #4]
 80097e6:	2300      	movs	r3, #0
 80097e8:	9300      	str	r3, [sp, #0]
 80097ea:	2300      	movs	r3, #0
 80097ec:	460a      	mov	r2, r1
 80097ee:	491f      	ldr	r1, [pc, #124]	@ (800986c <vTaskStartScheduler+0xac>)
 80097f0:	481f      	ldr	r0, [pc, #124]	@ (8009870 <vTaskStartScheduler+0xb0>)
 80097f2:	f7ff fe17 	bl	8009424 <xTaskCreateStatic>
 80097f6:	4603      	mov	r3, r0
 80097f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009874 <vTaskStartScheduler+0xb4>)
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009874 <vTaskStartScheduler+0xb4>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <vTaskStartScheduler+0x4a>
 8009804:	2301      	movs	r3, #1
 8009806:	617b      	str	r3, [r7, #20]
 8009808:	e001      	b.n	800980e <vTaskStartScheduler+0x4e>
 800980a:	2300      	movs	r3, #0
 800980c:	617b      	str	r3, [r7, #20]
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d116      	bne.n	8009842 <vTaskStartScheduler+0x82>
 8009814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	613b      	str	r3, [r7, #16]
 8009826:	bf00      	nop
 8009828:	4b13      	ldr	r3, [pc, #76]	@ (8009878 <vTaskStartScheduler+0xb8>)
 800982a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	4b12      	ldr	r3, [pc, #72]	@ (800987c <vTaskStartScheduler+0xbc>)
 8009832:	2201      	movs	r2, #1
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	4b12      	ldr	r3, [pc, #72]	@ (8009880 <vTaskStartScheduler+0xc0>)
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]
 800983c:	f000 fbc8 	bl	8009fd0 <xPortStartScheduler>
 8009840:	e00f      	b.n	8009862 <vTaskStartScheduler+0xa2>
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009848:	d10b      	bne.n	8009862 <vTaskStartScheduler+0xa2>
 800984a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	bf00      	nop
 800985e:	bf00      	nop
 8009860:	e7fd      	b.n	800985e <vTaskStartScheduler+0x9e>
 8009862:	bf00      	nop
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	0800bd24 	.word	0x0800bd24
 8009870:	08009c09 	.word	0x08009c09
 8009874:	20000ae8 	.word	0x20000ae8
 8009878:	20000ae4 	.word	0x20000ae4
 800987c:	20000ad0 	.word	0x20000ad0
 8009880:	20000ac8 	.word	0x20000ac8

08009884 <vTaskSuspendAll>:
 8009884:	b480      	push	{r7}
 8009886:	af00      	add	r7, sp, #0
 8009888:	4b04      	ldr	r3, [pc, #16]	@ (800989c <vTaskSuspendAll+0x18>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3301      	adds	r3, #1
 800988e:	4a03      	ldr	r2, [pc, #12]	@ (800989c <vTaskSuspendAll+0x18>)
 8009890:	6013      	str	r3, [r2, #0]
 8009892:	bf00      	nop
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	20000aec 	.word	0x20000aec

080098a0 <xTaskResumeAll>:
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	2300      	movs	r3, #0
 80098a8:	60fb      	str	r3, [r7, #12]
 80098aa:	2300      	movs	r3, #0
 80098ac:	60bb      	str	r3, [r7, #8]
 80098ae:	4b42      	ldr	r3, [pc, #264]	@ (80099b8 <xTaskResumeAll+0x118>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10b      	bne.n	80098ce <xTaskResumeAll+0x2e>
 80098b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	603b      	str	r3, [r7, #0]
 80098c8:	bf00      	nop
 80098ca:	bf00      	nop
 80098cc:	e7fd      	b.n	80098ca <xTaskResumeAll+0x2a>
 80098ce:	f000 fc23 	bl	800a118 <vPortEnterCritical>
 80098d2:	4b39      	ldr	r3, [pc, #228]	@ (80099b8 <xTaskResumeAll+0x118>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3b01      	subs	r3, #1
 80098d8:	4a37      	ldr	r2, [pc, #220]	@ (80099b8 <xTaskResumeAll+0x118>)
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	4b36      	ldr	r3, [pc, #216]	@ (80099b8 <xTaskResumeAll+0x118>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d161      	bne.n	80099a8 <xTaskResumeAll+0x108>
 80098e4:	4b35      	ldr	r3, [pc, #212]	@ (80099bc <xTaskResumeAll+0x11c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d05d      	beq.n	80099a8 <xTaskResumeAll+0x108>
 80098ec:	e02e      	b.n	800994c <xTaskResumeAll+0xac>
 80098ee:	4b34      	ldr	r3, [pc, #208]	@ (80099c0 <xTaskResumeAll+0x120>)
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	60fb      	str	r3, [r7, #12]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3318      	adds	r3, #24
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff fd68 	bl	80093d0 <uxListRemove>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3304      	adds	r3, #4
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff fd63 	bl	80093d0 <uxListRemove>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990e:	2201      	movs	r2, #1
 8009910:	409a      	lsls	r2, r3
 8009912:	4b2c      	ldr	r3, [pc, #176]	@ (80099c4 <xTaskResumeAll+0x124>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4313      	orrs	r3, r2
 8009918:	4a2a      	ldr	r2, [pc, #168]	@ (80099c4 <xTaskResumeAll+0x124>)
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009920:	4613      	mov	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4a27      	ldr	r2, [pc, #156]	@ (80099c8 <xTaskResumeAll+0x128>)
 800992a:	441a      	add	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3304      	adds	r3, #4
 8009930:	4619      	mov	r1, r3
 8009932:	4610      	mov	r0, r2
 8009934:	f7ff fcef 	bl	8009316 <vListInsertEnd>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800993c:	4b23      	ldr	r3, [pc, #140]	@ (80099cc <xTaskResumeAll+0x12c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009942:	429a      	cmp	r2, r3
 8009944:	d302      	bcc.n	800994c <xTaskResumeAll+0xac>
 8009946:	4b22      	ldr	r3, [pc, #136]	@ (80099d0 <xTaskResumeAll+0x130>)
 8009948:	2201      	movs	r2, #1
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	4b1c      	ldr	r3, [pc, #112]	@ (80099c0 <xTaskResumeAll+0x120>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1cc      	bne.n	80098ee <xTaskResumeAll+0x4e>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <xTaskResumeAll+0xbe>
 800995a:	f000 fa0b 	bl	8009d74 <prvResetNextTaskUnblockTime>
 800995e:	4b1d      	ldr	r3, [pc, #116]	@ (80099d4 <xTaskResumeAll+0x134>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	607b      	str	r3, [r7, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d010      	beq.n	800998c <xTaskResumeAll+0xec>
 800996a:	f000 f837 	bl	80099dc <xTaskIncrementTick>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d002      	beq.n	800997a <xTaskResumeAll+0xda>
 8009974:	4b16      	ldr	r3, [pc, #88]	@ (80099d0 <xTaskResumeAll+0x130>)
 8009976:	2201      	movs	r2, #1
 8009978:	601a      	str	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3b01      	subs	r3, #1
 800997e:	607b      	str	r3, [r7, #4]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1f1      	bne.n	800996a <xTaskResumeAll+0xca>
 8009986:	4b13      	ldr	r3, [pc, #76]	@ (80099d4 <xTaskResumeAll+0x134>)
 8009988:	2200      	movs	r2, #0
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	4b10      	ldr	r3, [pc, #64]	@ (80099d0 <xTaskResumeAll+0x130>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d009      	beq.n	80099a8 <xTaskResumeAll+0x108>
 8009994:	2301      	movs	r3, #1
 8009996:	60bb      	str	r3, [r7, #8]
 8009998:	4b0f      	ldr	r3, [pc, #60]	@ (80099d8 <xTaskResumeAll+0x138>)
 800999a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f000 fbe8 	bl	800a17c <vPortExitCritical>
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20000aec 	.word	0x20000aec
 80099bc:	20000ac4 	.word	0x20000ac4
 80099c0:	20000a84 	.word	0x20000a84
 80099c4:	20000acc 	.word	0x20000acc
 80099c8:	200009c8 	.word	0x200009c8
 80099cc:	200009c4 	.word	0x200009c4
 80099d0:	20000ad8 	.word	0x20000ad8
 80099d4:	20000ad4 	.word	0x20000ad4
 80099d8:	e000ed04 	.word	0xe000ed04

080099dc <xTaskIncrementTick>:
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	2300      	movs	r3, #0
 80099e4:	617b      	str	r3, [r7, #20]
 80099e6:	4b4f      	ldr	r3, [pc, #316]	@ (8009b24 <xTaskIncrementTick+0x148>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f040 808f 	bne.w	8009b0e <xTaskIncrementTick+0x132>
 80099f0:	4b4d      	ldr	r3, [pc, #308]	@ (8009b28 <xTaskIncrementTick+0x14c>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3301      	adds	r3, #1
 80099f6:	613b      	str	r3, [r7, #16]
 80099f8:	4a4b      	ldr	r2, [pc, #300]	@ (8009b28 <xTaskIncrementTick+0x14c>)
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d121      	bne.n	8009a48 <xTaskIncrementTick+0x6c>
 8009a04:	4b49      	ldr	r3, [pc, #292]	@ (8009b2c <xTaskIncrementTick+0x150>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00b      	beq.n	8009a26 <xTaskIncrementTick+0x4a>
 8009a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	603b      	str	r3, [r7, #0]
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop
 8009a24:	e7fd      	b.n	8009a22 <xTaskIncrementTick+0x46>
 8009a26:	4b41      	ldr	r3, [pc, #260]	@ (8009b2c <xTaskIncrementTick+0x150>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	60fb      	str	r3, [r7, #12]
 8009a2c:	4b40      	ldr	r3, [pc, #256]	@ (8009b30 <xTaskIncrementTick+0x154>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a3e      	ldr	r2, [pc, #248]	@ (8009b2c <xTaskIncrementTick+0x150>)
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	4a3e      	ldr	r2, [pc, #248]	@ (8009b30 <xTaskIncrementTick+0x154>)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8009b34 <xTaskIncrementTick+0x158>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	4a3c      	ldr	r2, [pc, #240]	@ (8009b34 <xTaskIncrementTick+0x158>)
 8009a42:	6013      	str	r3, [r2, #0]
 8009a44:	f000 f996 	bl	8009d74 <prvResetNextTaskUnblockTime>
 8009a48:	4b3b      	ldr	r3, [pc, #236]	@ (8009b38 <xTaskIncrementTick+0x15c>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d348      	bcc.n	8009ae4 <xTaskIncrementTick+0x108>
 8009a52:	4b36      	ldr	r3, [pc, #216]	@ (8009b2c <xTaskIncrementTick+0x150>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d104      	bne.n	8009a66 <xTaskIncrementTick+0x8a>
 8009a5c:	4b36      	ldr	r3, [pc, #216]	@ (8009b38 <xTaskIncrementTick+0x15c>)
 8009a5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	e03e      	b.n	8009ae4 <xTaskIncrementTick+0x108>
 8009a66:	4b31      	ldr	r3, [pc, #196]	@ (8009b2c <xTaskIncrementTick+0x150>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	60bb      	str	r3, [r7, #8]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	607b      	str	r3, [r7, #4]
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d203      	bcs.n	8009a86 <xTaskIncrementTick+0xaa>
 8009a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8009b38 <xTaskIncrementTick+0x15c>)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	e02e      	b.n	8009ae4 <xTaskIncrementTick+0x108>
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	3304      	adds	r3, #4
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff fca0 	bl	80093d0 <uxListRemove>
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d004      	beq.n	8009aa2 <xTaskIncrementTick+0xc6>
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	3318      	adds	r3, #24
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7ff fc97 	bl	80093d0 <uxListRemove>
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	409a      	lsls	r2, r3
 8009aaa:	4b24      	ldr	r3, [pc, #144]	@ (8009b3c <xTaskIncrementTick+0x160>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	4a22      	ldr	r2, [pc, #136]	@ (8009b3c <xTaskIncrementTick+0x160>)
 8009ab2:	6013      	str	r3, [r2, #0]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ab8:	4613      	mov	r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4413      	add	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8009b40 <xTaskIncrementTick+0x164>)
 8009ac2:	441a      	add	r2, r3
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	4619      	mov	r1, r3
 8009aca:	4610      	mov	r0, r2
 8009acc:	f7ff fc23 	bl	8009316 <vListInsertEnd>
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8009b44 <xTaskIncrementTick+0x168>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d3b9      	bcc.n	8009a52 <xTaskIncrementTick+0x76>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	617b      	str	r3, [r7, #20]
 8009ae2:	e7b6      	b.n	8009a52 <xTaskIncrementTick+0x76>
 8009ae4:	4b17      	ldr	r3, [pc, #92]	@ (8009b44 <xTaskIncrementTick+0x168>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aea:	4915      	ldr	r1, [pc, #84]	@ (8009b40 <xTaskIncrementTick+0x164>)
 8009aec:	4613      	mov	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	440b      	add	r3, r1
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d901      	bls.n	8009b00 <xTaskIncrementTick+0x124>
 8009afc:	2301      	movs	r3, #1
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	4b11      	ldr	r3, [pc, #68]	@ (8009b48 <xTaskIncrementTick+0x16c>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d007      	beq.n	8009b18 <xTaskIncrementTick+0x13c>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	617b      	str	r3, [r7, #20]
 8009b0c:	e004      	b.n	8009b18 <xTaskIncrementTick+0x13c>
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b4c <xTaskIncrementTick+0x170>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3301      	adds	r3, #1
 8009b14:	4a0d      	ldr	r2, [pc, #52]	@ (8009b4c <xTaskIncrementTick+0x170>)
 8009b16:	6013      	str	r3, [r2, #0]
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	20000aec 	.word	0x20000aec
 8009b28:	20000ac8 	.word	0x20000ac8
 8009b2c:	20000a7c 	.word	0x20000a7c
 8009b30:	20000a80 	.word	0x20000a80
 8009b34:	20000adc 	.word	0x20000adc
 8009b38:	20000ae4 	.word	0x20000ae4
 8009b3c:	20000acc 	.word	0x20000acc
 8009b40:	200009c8 	.word	0x200009c8
 8009b44:	200009c4 	.word	0x200009c4
 8009b48:	20000ad8 	.word	0x20000ad8
 8009b4c:	20000ad4 	.word	0x20000ad4

08009b50 <vTaskSwitchContext>:
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4b27      	ldr	r3, [pc, #156]	@ (8009bf4 <vTaskSwitchContext+0xa4>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <vTaskSwitchContext+0x16>
 8009b5e:	4b26      	ldr	r3, [pc, #152]	@ (8009bf8 <vTaskSwitchContext+0xa8>)
 8009b60:	2201      	movs	r2, #1
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	e040      	b.n	8009be8 <vTaskSwitchContext+0x98>
 8009b66:	4b24      	ldr	r3, [pc, #144]	@ (8009bf8 <vTaskSwitchContext+0xa8>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	4b23      	ldr	r3, [pc, #140]	@ (8009bfc <vTaskSwitchContext+0xac>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	60fb      	str	r3, [r7, #12]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	fab3 f383 	clz	r3, r3
 8009b78:	72fb      	strb	r3, [r7, #11]
 8009b7a:	7afb      	ldrb	r3, [r7, #11]
 8009b7c:	f1c3 031f 	rsb	r3, r3, #31
 8009b80:	617b      	str	r3, [r7, #20]
 8009b82:	491f      	ldr	r1, [pc, #124]	@ (8009c00 <vTaskSwitchContext+0xb0>)
 8009b84:	697a      	ldr	r2, [r7, #20]
 8009b86:	4613      	mov	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	440b      	add	r3, r1
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10b      	bne.n	8009bae <vTaskSwitchContext+0x5e>
 8009b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	607b      	str	r3, [r7, #4]
 8009ba8:	bf00      	nop
 8009baa:	bf00      	nop
 8009bac:	e7fd      	b.n	8009baa <vTaskSwitchContext+0x5a>
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4a11      	ldr	r2, [pc, #68]	@ (8009c00 <vTaskSwitchContext+0xb0>)
 8009bba:	4413      	add	r3, r2
 8009bbc:	613b      	str	r3, [r7, #16]
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	605a      	str	r2, [r3, #4]
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	685a      	ldr	r2, [r3, #4]
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	3308      	adds	r3, #8
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d104      	bne.n	8009bde <vTaskSwitchContext+0x8e>
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	685a      	ldr	r2, [r3, #4]
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	605a      	str	r2, [r3, #4]
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	4a07      	ldr	r2, [pc, #28]	@ (8009c04 <vTaskSwitchContext+0xb4>)
 8009be6:	6013      	str	r3, [r2, #0]
 8009be8:	bf00      	nop
 8009bea:	371c      	adds	r7, #28
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr
 8009bf4:	20000aec 	.word	0x20000aec
 8009bf8:	20000ad8 	.word	0x20000ad8
 8009bfc:	20000acc 	.word	0x20000acc
 8009c00:	200009c8 	.word	0x200009c8
 8009c04:	200009c4 	.word	0x200009c4

08009c08 <prvIdleTask>:
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	f000 f852 	bl	8009cb8 <prvCheckTasksWaitingTermination>
 8009c14:	4b06      	ldr	r3, [pc, #24]	@ (8009c30 <prvIdleTask+0x28>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d9f9      	bls.n	8009c10 <prvIdleTask+0x8>
 8009c1c:	4b05      	ldr	r3, [pc, #20]	@ (8009c34 <prvIdleTask+0x2c>)
 8009c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c22:	601a      	str	r2, [r3, #0]
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	e7f0      	b.n	8009c10 <prvIdleTask+0x8>
 8009c2e:	bf00      	nop
 8009c30:	200009c8 	.word	0x200009c8
 8009c34:	e000ed04 	.word	0xe000ed04

08009c38 <prvInitialiseTaskLists>:
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	2300      	movs	r3, #0
 8009c40:	607b      	str	r3, [r7, #4]
 8009c42:	e00c      	b.n	8009c5e <prvInitialiseTaskLists+0x26>
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	4613      	mov	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4a12      	ldr	r2, [pc, #72]	@ (8009c98 <prvInitialiseTaskLists+0x60>)
 8009c50:	4413      	add	r3, r2
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7ff fb32 	bl	80092bc <vListInitialise>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	607b      	str	r3, [r7, #4]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b06      	cmp	r3, #6
 8009c62:	d9ef      	bls.n	8009c44 <prvInitialiseTaskLists+0xc>
 8009c64:	480d      	ldr	r0, [pc, #52]	@ (8009c9c <prvInitialiseTaskLists+0x64>)
 8009c66:	f7ff fb29 	bl	80092bc <vListInitialise>
 8009c6a:	480d      	ldr	r0, [pc, #52]	@ (8009ca0 <prvInitialiseTaskLists+0x68>)
 8009c6c:	f7ff fb26 	bl	80092bc <vListInitialise>
 8009c70:	480c      	ldr	r0, [pc, #48]	@ (8009ca4 <prvInitialiseTaskLists+0x6c>)
 8009c72:	f7ff fb23 	bl	80092bc <vListInitialise>
 8009c76:	480c      	ldr	r0, [pc, #48]	@ (8009ca8 <prvInitialiseTaskLists+0x70>)
 8009c78:	f7ff fb20 	bl	80092bc <vListInitialise>
 8009c7c:	480b      	ldr	r0, [pc, #44]	@ (8009cac <prvInitialiseTaskLists+0x74>)
 8009c7e:	f7ff fb1d 	bl	80092bc <vListInitialise>
 8009c82:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb0 <prvInitialiseTaskLists+0x78>)
 8009c84:	4a05      	ldr	r2, [pc, #20]	@ (8009c9c <prvInitialiseTaskLists+0x64>)
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb4 <prvInitialiseTaskLists+0x7c>)
 8009c8a:	4a05      	ldr	r2, [pc, #20]	@ (8009ca0 <prvInitialiseTaskLists+0x68>)
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	bf00      	nop
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	200009c8 	.word	0x200009c8
 8009c9c:	20000a54 	.word	0x20000a54
 8009ca0:	20000a68 	.word	0x20000a68
 8009ca4:	20000a84 	.word	0x20000a84
 8009ca8:	20000a98 	.word	0x20000a98
 8009cac:	20000ab0 	.word	0x20000ab0
 8009cb0:	20000a7c 	.word	0x20000a7c
 8009cb4:	20000a80 	.word	0x20000a80

08009cb8 <prvCheckTasksWaitingTermination>:
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	e019      	b.n	8009cf4 <prvCheckTasksWaitingTermination+0x3c>
 8009cc0:	f000 fa2a 	bl	800a118 <vPortEnterCritical>
 8009cc4:	4b10      	ldr	r3, [pc, #64]	@ (8009d08 <prvCheckTasksWaitingTermination+0x50>)
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	607b      	str	r3, [r7, #4]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7ff fb7d 	bl	80093d0 <uxListRemove>
 8009cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d0c <prvCheckTasksWaitingTermination+0x54>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8009d0c <prvCheckTasksWaitingTermination+0x54>)
 8009cde:	6013      	str	r3, [r2, #0]
 8009ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8009d10 <prvCheckTasksWaitingTermination+0x58>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8009d10 <prvCheckTasksWaitingTermination+0x58>)
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	f000 fa47 	bl	800a17c <vPortExitCritical>
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f810 	bl	8009d14 <prvDeleteTCB>
 8009cf4:	4b06      	ldr	r3, [pc, #24]	@ (8009d10 <prvCheckTasksWaitingTermination+0x58>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1e1      	bne.n	8009cc0 <prvCheckTasksWaitingTermination+0x8>
 8009cfc:	bf00      	nop
 8009cfe:	bf00      	nop
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20000a98 	.word	0x20000a98
 8009d0c:	20000ac4 	.word	0x20000ac4
 8009d10:	20000aac 	.word	0x20000aac

08009d14 <prvDeleteTCB>:
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d108      	bne.n	8009d38 <prvDeleteTCB+0x24>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 fba2 	bl	800a474 <vPortFree>
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fb9f 	bl	800a474 <vPortFree>
 8009d36:	e019      	b.n	8009d6c <prvDeleteTCB+0x58>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d103      	bne.n	8009d4a <prvDeleteTCB+0x36>
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fb96 	bl	800a474 <vPortFree>
 8009d48:	e010      	b.n	8009d6c <prvDeleteTCB+0x58>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d00b      	beq.n	8009d6c <prvDeleteTCB+0x58>
 8009d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	bf00      	nop
 8009d68:	bf00      	nop
 8009d6a:	e7fd      	b.n	8009d68 <prvDeleteTCB+0x54>
 8009d6c:	bf00      	nop
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <prvResetNextTaskUnblockTime>:
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8009dac <prvResetNextTaskUnblockTime+0x38>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d104      	bne.n	8009d8e <prvResetNextTaskUnblockTime+0x1a>
 8009d84:	4b0a      	ldr	r3, [pc, #40]	@ (8009db0 <prvResetNextTaskUnblockTime+0x3c>)
 8009d86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	e008      	b.n	8009da0 <prvResetNextTaskUnblockTime+0x2c>
 8009d8e:	4b07      	ldr	r3, [pc, #28]	@ (8009dac <prvResetNextTaskUnblockTime+0x38>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	607b      	str	r3, [r7, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	4a04      	ldr	r2, [pc, #16]	@ (8009db0 <prvResetNextTaskUnblockTime+0x3c>)
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	20000a7c 	.word	0x20000a7c
 8009db0:	20000ae4 	.word	0x20000ae4

08009db4 <xTaskGetSchedulerState>:
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	4b0b      	ldr	r3, [pc, #44]	@ (8009de8 <xTaskGetSchedulerState+0x34>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d102      	bne.n	8009dc8 <xTaskGetSchedulerState+0x14>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	607b      	str	r3, [r7, #4]
 8009dc6:	e008      	b.n	8009dda <xTaskGetSchedulerState+0x26>
 8009dc8:	4b08      	ldr	r3, [pc, #32]	@ (8009dec <xTaskGetSchedulerState+0x38>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d102      	bne.n	8009dd6 <xTaskGetSchedulerState+0x22>
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	607b      	str	r3, [r7, #4]
 8009dd4:	e001      	b.n	8009dda <xTaskGetSchedulerState+0x26>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	607b      	str	r3, [r7, #4]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	20000ad0 	.word	0x20000ad0
 8009dec:	20000aec 	.word	0x20000aec

08009df0 <prvAddCurrentTaskToDelayedList>:
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
 8009dfa:	4b29      	ldr	r3, [pc, #164]	@ (8009ea0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	4b28      	ldr	r3, [pc, #160]	@ (8009ea4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3304      	adds	r3, #4
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7ff fae2 	bl	80093d0 <uxListRemove>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10b      	bne.n	8009e2a <prvAddCurrentTaskToDelayedList+0x3a>
 8009e12:	4b24      	ldr	r3, [pc, #144]	@ (8009ea4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e18:	2201      	movs	r2, #1
 8009e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e1e:	43da      	mvns	r2, r3
 8009e20:	4b21      	ldr	r3, [pc, #132]	@ (8009ea8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4013      	ands	r3, r2
 8009e26:	4a20      	ldr	r2, [pc, #128]	@ (8009ea8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e28:	6013      	str	r3, [r2, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e30:	d10a      	bne.n	8009e48 <prvAddCurrentTaskToDelayedList+0x58>
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d007      	beq.n	8009e48 <prvAddCurrentTaskToDelayedList+0x58>
 8009e38:	4b1a      	ldr	r3, [pc, #104]	@ (8009ea4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	4619      	mov	r1, r3
 8009e40:	481a      	ldr	r0, [pc, #104]	@ (8009eac <prvAddCurrentTaskToDelayedList+0xbc>)
 8009e42:	f7ff fa68 	bl	8009316 <vListInsertEnd>
 8009e46:	e026      	b.n	8009e96 <prvAddCurrentTaskToDelayedList+0xa6>
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	60bb      	str	r3, [r7, #8]
 8009e50:	4b14      	ldr	r3, [pc, #80]	@ (8009ea4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68ba      	ldr	r2, [r7, #8]
 8009e56:	605a      	str	r2, [r3, #4]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d209      	bcs.n	8009e74 <prvAddCurrentTaskToDelayedList+0x84>
 8009e60:	4b13      	ldr	r3, [pc, #76]	@ (8009eb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	4b0f      	ldr	r3, [pc, #60]	@ (8009ea4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	f7ff fa76 	bl	800935e <vListInsert>
 8009e72:	e010      	b.n	8009e96 <prvAddCurrentTaskToDelayedList+0xa6>
 8009e74:	4b0f      	ldr	r3, [pc, #60]	@ (8009eb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	4b0a      	ldr	r3, [pc, #40]	@ (8009ea4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4610      	mov	r0, r2
 8009e82:	f7ff fa6c 	bl	800935e <vListInsert>
 8009e86:	4b0c      	ldr	r3, [pc, #48]	@ (8009eb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d202      	bcs.n	8009e96 <prvAddCurrentTaskToDelayedList+0xa6>
 8009e90:	4a09      	ldr	r2, [pc, #36]	@ (8009eb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	6013      	str	r3, [r2, #0]
 8009e96:	bf00      	nop
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	20000ac8 	.word	0x20000ac8
 8009ea4:	200009c4 	.word	0x200009c4
 8009ea8:	20000acc 	.word	0x20000acc
 8009eac:	20000ab0 	.word	0x20000ab0
 8009eb0:	20000a80 	.word	0x20000a80
 8009eb4:	20000a7c 	.word	0x20000a7c
 8009eb8:	20000ae4 	.word	0x20000ae4

08009ebc <pxPortInitialiseStack>:
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	3b04      	subs	r3, #4
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3b04      	subs	r3, #4
 8009eda:	60fb      	str	r3, [r7, #12]
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	f023 0201 	bic.w	r2, r3, #1
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	3b04      	subs	r3, #4
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	4a0c      	ldr	r2, [pc, #48]	@ (8009f20 <pxPortInitialiseStack+0x64>)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	601a      	str	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3b14      	subs	r3, #20
 8009ef6:	60fb      	str	r3, [r7, #12]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3b04      	subs	r3, #4
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f06f 0202 	mvn.w	r2, #2
 8009f0a:	601a      	str	r2, [r3, #0]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	3b20      	subs	r3, #32
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	4618      	mov	r0, r3
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	08009f25 	.word	0x08009f25

08009f24 <prvTaskExitError>:
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	607b      	str	r3, [r7, #4]
 8009f2e:	4b13      	ldr	r3, [pc, #76]	@ (8009f7c <prvTaskExitError+0x58>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f36:	d00b      	beq.n	8009f50 <prvTaskExitError+0x2c>
 8009f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	60fb      	str	r3, [r7, #12]
 8009f4a:	bf00      	nop
 8009f4c:	bf00      	nop
 8009f4e:	e7fd      	b.n	8009f4c <prvTaskExitError+0x28>
 8009f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f54:	f383 8811 	msr	BASEPRI, r3
 8009f58:	f3bf 8f6f 	isb	sy
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	60bb      	str	r3, [r7, #8]
 8009f62:	bf00      	nop
 8009f64:	bf00      	nop
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d0fc      	beq.n	8009f66 <prvTaskExitError+0x42>
 8009f6c:	bf00      	nop
 8009f6e:	bf00      	nop
 8009f70:	3714      	adds	r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	20000014 	.word	0x20000014

08009f80 <SVC_Handler>:
 8009f80:	4b07      	ldr	r3, [pc, #28]	@ (8009fa0 <pxCurrentTCBConst2>)
 8009f82:	6819      	ldr	r1, [r3, #0]
 8009f84:	6808      	ldr	r0, [r1, #0]
 8009f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8a:	f380 8809 	msr	PSP, r0
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f04f 0000 	mov.w	r0, #0
 8009f96:	f380 8811 	msr	BASEPRI, r0
 8009f9a:	4770      	bx	lr
 8009f9c:	f3af 8000 	nop.w

08009fa0 <pxCurrentTCBConst2>:
 8009fa0:	200009c4 	.word	0x200009c4
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop

08009fa8 <prvPortStartFirstTask>:
 8009fa8:	4808      	ldr	r0, [pc, #32]	@ (8009fcc <prvPortStartFirstTask+0x24>)
 8009faa:	6800      	ldr	r0, [r0, #0]
 8009fac:	6800      	ldr	r0, [r0, #0]
 8009fae:	f380 8808 	msr	MSP, r0
 8009fb2:	f04f 0000 	mov.w	r0, #0
 8009fb6:	f380 8814 	msr	CONTROL, r0
 8009fba:	b662      	cpsie	i
 8009fbc:	b661      	cpsie	f
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	df00      	svc	0
 8009fc8:	bf00      	nop
 8009fca:	bf00      	nop
 8009fcc:	e000ed08 	.word	0xe000ed08

08009fd0 <xPortStartScheduler>:
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	4b47      	ldr	r3, [pc, #284]	@ (800a0f4 <xPortStartScheduler+0x124>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a47      	ldr	r2, [pc, #284]	@ (800a0f8 <xPortStartScheduler+0x128>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d10b      	bne.n	8009ff8 <xPortStartScheduler+0x28>
 8009fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	613b      	str	r3, [r7, #16]
 8009ff2:	bf00      	nop
 8009ff4:	bf00      	nop
 8009ff6:	e7fd      	b.n	8009ff4 <xPortStartScheduler+0x24>
 8009ff8:	4b3e      	ldr	r3, [pc, #248]	@ (800a0f4 <xPortStartScheduler+0x124>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a3f      	ldr	r2, [pc, #252]	@ (800a0fc <xPortStartScheduler+0x12c>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d10b      	bne.n	800a01a <xPortStartScheduler+0x4a>
 800a002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	60fb      	str	r3, [r7, #12]
 800a014:	bf00      	nop
 800a016:	bf00      	nop
 800a018:	e7fd      	b.n	800a016 <xPortStartScheduler+0x46>
 800a01a:	4b39      	ldr	r3, [pc, #228]	@ (800a100 <xPortStartScheduler+0x130>)
 800a01c:	617b      	str	r3, [r7, #20]
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	b2db      	uxtb	r3, r3
 800a024:	607b      	str	r3, [r7, #4]
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	22ff      	movs	r2, #255	@ 0xff
 800a02a:	701a      	strb	r2, [r3, #0]
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	b2db      	uxtb	r3, r3
 800a032:	70fb      	strb	r3, [r7, #3]
 800a034:	78fb      	ldrb	r3, [r7, #3]
 800a036:	b2db      	uxtb	r3, r3
 800a038:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a03c:	b2da      	uxtb	r2, r3
 800a03e:	4b31      	ldr	r3, [pc, #196]	@ (800a104 <xPortStartScheduler+0x134>)
 800a040:	701a      	strb	r2, [r3, #0]
 800a042:	4b31      	ldr	r3, [pc, #196]	@ (800a108 <xPortStartScheduler+0x138>)
 800a044:	2207      	movs	r2, #7
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	e009      	b.n	800a05e <xPortStartScheduler+0x8e>
 800a04a:	4b2f      	ldr	r3, [pc, #188]	@ (800a108 <xPortStartScheduler+0x138>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3b01      	subs	r3, #1
 800a050:	4a2d      	ldr	r2, [pc, #180]	@ (800a108 <xPortStartScheduler+0x138>)
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	78fb      	ldrb	r3, [r7, #3]
 800a056:	b2db      	uxtb	r3, r3
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	70fb      	strb	r3, [r7, #3]
 800a05e:	78fb      	ldrb	r3, [r7, #3]
 800a060:	b2db      	uxtb	r3, r3
 800a062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a066:	2b80      	cmp	r3, #128	@ 0x80
 800a068:	d0ef      	beq.n	800a04a <xPortStartScheduler+0x7a>
 800a06a:	4b27      	ldr	r3, [pc, #156]	@ (800a108 <xPortStartScheduler+0x138>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f1c3 0307 	rsb	r3, r3, #7
 800a072:	2b04      	cmp	r3, #4
 800a074:	d00b      	beq.n	800a08e <xPortStartScheduler+0xbe>
 800a076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	60bb      	str	r3, [r7, #8]
 800a088:	bf00      	nop
 800a08a:	bf00      	nop
 800a08c:	e7fd      	b.n	800a08a <xPortStartScheduler+0xba>
 800a08e:	4b1e      	ldr	r3, [pc, #120]	@ (800a108 <xPortStartScheduler+0x138>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	021b      	lsls	r3, r3, #8
 800a094:	4a1c      	ldr	r2, [pc, #112]	@ (800a108 <xPortStartScheduler+0x138>)
 800a096:	6013      	str	r3, [r2, #0]
 800a098:	4b1b      	ldr	r3, [pc, #108]	@ (800a108 <xPortStartScheduler+0x138>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a0a0:	4a19      	ldr	r2, [pc, #100]	@ (800a108 <xPortStartScheduler+0x138>)
 800a0a2:	6013      	str	r3, [r2, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	701a      	strb	r2, [r3, #0]
 800a0ac:	4b17      	ldr	r3, [pc, #92]	@ (800a10c <xPortStartScheduler+0x13c>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a16      	ldr	r2, [pc, #88]	@ (800a10c <xPortStartScheduler+0x13c>)
 800a0b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	4b14      	ldr	r3, [pc, #80]	@ (800a10c <xPortStartScheduler+0x13c>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a13      	ldr	r2, [pc, #76]	@ (800a10c <xPortStartScheduler+0x13c>)
 800a0be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a0c2:	6013      	str	r3, [r2, #0]
 800a0c4:	f000 f8da 	bl	800a27c <vPortSetupTimerInterrupt>
 800a0c8:	4b11      	ldr	r3, [pc, #68]	@ (800a110 <xPortStartScheduler+0x140>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	f000 f8f9 	bl	800a2c4 <vPortEnableVFP>
 800a0d2:	4b10      	ldr	r3, [pc, #64]	@ (800a114 <xPortStartScheduler+0x144>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a0f      	ldr	r2, [pc, #60]	@ (800a114 <xPortStartScheduler+0x144>)
 800a0d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a0dc:	6013      	str	r3, [r2, #0]
 800a0de:	f7ff ff63 	bl	8009fa8 <prvPortStartFirstTask>
 800a0e2:	f7ff fd35 	bl	8009b50 <vTaskSwitchContext>
 800a0e6:	f7ff ff1d 	bl	8009f24 <prvTaskExitError>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3718      	adds	r7, #24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	e000ed00 	.word	0xe000ed00
 800a0f8:	410fc271 	.word	0x410fc271
 800a0fc:	410fc270 	.word	0x410fc270
 800a100:	e000e400 	.word	0xe000e400
 800a104:	20000af0 	.word	0x20000af0
 800a108:	20000af4 	.word	0x20000af4
 800a10c:	e000ed20 	.word	0xe000ed20
 800a110:	20000014 	.word	0x20000014
 800a114:	e000ef34 	.word	0xe000ef34

0800a118 <vPortEnterCritical>:
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	607b      	str	r3, [r7, #4]
 800a130:	bf00      	nop
 800a132:	4b10      	ldr	r3, [pc, #64]	@ (800a174 <vPortEnterCritical+0x5c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3301      	adds	r3, #1
 800a138:	4a0e      	ldr	r2, [pc, #56]	@ (800a174 <vPortEnterCritical+0x5c>)
 800a13a:	6013      	str	r3, [r2, #0]
 800a13c:	4b0d      	ldr	r3, [pc, #52]	@ (800a174 <vPortEnterCritical+0x5c>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d110      	bne.n	800a166 <vPortEnterCritical+0x4e>
 800a144:	4b0c      	ldr	r3, [pc, #48]	@ (800a178 <vPortEnterCritical+0x60>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00b      	beq.n	800a166 <vPortEnterCritical+0x4e>
 800a14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	603b      	str	r3, [r7, #0]
 800a160:	bf00      	nop
 800a162:	bf00      	nop
 800a164:	e7fd      	b.n	800a162 <vPortEnterCritical+0x4a>
 800a166:	bf00      	nop
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	20000014 	.word	0x20000014
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <vPortExitCritical>:
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	4b12      	ldr	r3, [pc, #72]	@ (800a1cc <vPortExitCritical+0x50>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10b      	bne.n	800a1a2 <vPortExitCritical+0x26>
 800a18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	607b      	str	r3, [r7, #4]
 800a19c:	bf00      	nop
 800a19e:	bf00      	nop
 800a1a0:	e7fd      	b.n	800a19e <vPortExitCritical+0x22>
 800a1a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a1cc <vPortExitCritical+0x50>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	4a08      	ldr	r2, [pc, #32]	@ (800a1cc <vPortExitCritical+0x50>)
 800a1aa:	6013      	str	r3, [r2, #0]
 800a1ac:	4b07      	ldr	r3, [pc, #28]	@ (800a1cc <vPortExitCritical+0x50>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d105      	bne.n	800a1c0 <vPortExitCritical+0x44>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	603b      	str	r3, [r7, #0]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	bf00      	nop
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	20000014 	.word	0x20000014

0800a1d0 <PendSV_Handler>:
 800a1d0:	f3ef 8009 	mrs	r0, PSP
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	4b15      	ldr	r3, [pc, #84]	@ (800a230 <pxCurrentTCBConst>)
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	f01e 0f10 	tst.w	lr, #16
 800a1e0:	bf08      	it	eq
 800a1e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ea:	6010      	str	r0, [r2, #0]
 800a1ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a1f4:	f380 8811 	msr	BASEPRI, r0
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f7ff fca6 	bl	8009b50 <vTaskSwitchContext>
 800a204:	f04f 0000 	mov.w	r0, #0
 800a208:	f380 8811 	msr	BASEPRI, r0
 800a20c:	bc09      	pop	{r0, r3}
 800a20e:	6819      	ldr	r1, [r3, #0]
 800a210:	6808      	ldr	r0, [r1, #0]
 800a212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a216:	f01e 0f10 	tst.w	lr, #16
 800a21a:	bf08      	it	eq
 800a21c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a220:	f380 8809 	msr	PSP, r0
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	f3af 8000 	nop.w

0800a230 <pxCurrentTCBConst>:
 800a230:	200009c4 	.word	0x200009c4
 800a234:	bf00      	nop
 800a236:	bf00      	nop

0800a238 <xPortSysTickHandler>:
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	607b      	str	r3, [r7, #4]
 800a250:	bf00      	nop
 800a252:	f7ff fbc3 	bl	80099dc <xTaskIncrementTick>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d003      	beq.n	800a264 <xPortSysTickHandler+0x2c>
 800a25c:	4b06      	ldr	r3, [pc, #24]	@ (800a278 <xPortSysTickHandler+0x40>)
 800a25e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	2300      	movs	r3, #0
 800a266:	603b      	str	r3, [r7, #0]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	bf00      	nop
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	e000ed04 	.word	0xe000ed04

0800a27c <vPortSetupTimerInterrupt>:
 800a27c:	b480      	push	{r7}
 800a27e:	af00      	add	r7, sp, #0
 800a280:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b0 <vPortSetupTimerInterrupt+0x34>)
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b4 <vPortSetupTimerInterrupt+0x38>)
 800a288:	2200      	movs	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]
 800a28c:	4b0a      	ldr	r3, [pc, #40]	@ (800a2b8 <vPortSetupTimerInterrupt+0x3c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a0a      	ldr	r2, [pc, #40]	@ (800a2bc <vPortSetupTimerInterrupt+0x40>)
 800a292:	fba2 2303 	umull	r2, r3, r2, r3
 800a296:	099b      	lsrs	r3, r3, #6
 800a298:	4a09      	ldr	r2, [pc, #36]	@ (800a2c0 <vPortSetupTimerInterrupt+0x44>)
 800a29a:	3b01      	subs	r3, #1
 800a29c:	6013      	str	r3, [r2, #0]
 800a29e:	4b04      	ldr	r3, [pc, #16]	@ (800a2b0 <vPortSetupTimerInterrupt+0x34>)
 800a2a0:	2207      	movs	r2, #7
 800a2a2:	601a      	str	r2, [r3, #0]
 800a2a4:	bf00      	nop
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	e000e010 	.word	0xe000e010
 800a2b4:	e000e018 	.word	0xe000e018
 800a2b8:	20000008 	.word	0x20000008
 800a2bc:	10624dd3 	.word	0x10624dd3
 800a2c0:	e000e014 	.word	0xe000e014

0800a2c4 <vPortEnableVFP>:
 800a2c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a2d4 <vPortEnableVFP+0x10>
 800a2c8:	6801      	ldr	r1, [r0, #0]
 800a2ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a2ce:	6001      	str	r1, [r0, #0]
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	e000ed88 	.word	0xe000ed88

0800a2d8 <pvPortMalloc>:
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08a      	sub	sp, #40	@ 0x28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	61fb      	str	r3, [r7, #28]
 800a2e4:	f7ff face 	bl	8009884 <vTaskSuspendAll>
 800a2e8:	4b5c      	ldr	r3, [pc, #368]	@ (800a45c <pvPortMalloc+0x184>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d101      	bne.n	800a2f4 <pvPortMalloc+0x1c>
 800a2f0:	f000 f924 	bl	800a53c <prvHeapInit>
 800a2f4:	4b5a      	ldr	r3, [pc, #360]	@ (800a460 <pvPortMalloc+0x188>)
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f040 8095 	bne.w	800a42c <pvPortMalloc+0x154>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d01e      	beq.n	800a346 <pvPortMalloc+0x6e>
 800a308:	2208      	movs	r2, #8
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4413      	add	r3, r2
 800a30e:	607b      	str	r3, [r7, #4]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f003 0307 	and.w	r3, r3, #7
 800a316:	2b00      	cmp	r3, #0
 800a318:	d015      	beq.n	800a346 <pvPortMalloc+0x6e>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f023 0307 	bic.w	r3, r3, #7
 800a320:	3308      	adds	r3, #8
 800a322:	607b      	str	r3, [r7, #4]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f003 0307 	and.w	r3, r3, #7
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00b      	beq.n	800a346 <pvPortMalloc+0x6e>
 800a32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	617b      	str	r3, [r7, #20]
 800a340:	bf00      	nop
 800a342:	bf00      	nop
 800a344:	e7fd      	b.n	800a342 <pvPortMalloc+0x6a>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d06f      	beq.n	800a42c <pvPortMalloc+0x154>
 800a34c:	4b45      	ldr	r3, [pc, #276]	@ (800a464 <pvPortMalloc+0x18c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	429a      	cmp	r2, r3
 800a354:	d86a      	bhi.n	800a42c <pvPortMalloc+0x154>
 800a356:	4b44      	ldr	r3, [pc, #272]	@ (800a468 <pvPortMalloc+0x190>)
 800a358:	623b      	str	r3, [r7, #32]
 800a35a:	4b43      	ldr	r3, [pc, #268]	@ (800a468 <pvPortMalloc+0x190>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a360:	e004      	b.n	800a36c <pvPortMalloc+0x94>
 800a362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a364:	623b      	str	r3, [r7, #32]
 800a366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	429a      	cmp	r2, r3
 800a374:	d903      	bls.n	800a37e <pvPortMalloc+0xa6>
 800a376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1f1      	bne.n	800a362 <pvPortMalloc+0x8a>
 800a37e:	4b37      	ldr	r3, [pc, #220]	@ (800a45c <pvPortMalloc+0x184>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a384:	429a      	cmp	r2, r3
 800a386:	d051      	beq.n	800a42c <pvPortMalloc+0x154>
 800a388:	6a3b      	ldr	r3, [r7, #32]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2208      	movs	r2, #8
 800a38e:	4413      	add	r3, r2
 800a390:	61fb      	str	r3, [r7, #28]
 800a392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	601a      	str	r2, [r3, #0]
 800a39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	1ad2      	subs	r2, r2, r3
 800a3a2:	2308      	movs	r3, #8
 800a3a4:	005b      	lsls	r3, r3, #1
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d920      	bls.n	800a3ec <pvPortMalloc+0x114>
 800a3aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	61bb      	str	r3, [r7, #24]
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	f003 0307 	and.w	r3, r3, #7
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00b      	beq.n	800a3d4 <pvPortMalloc+0xfc>
 800a3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	613b      	str	r3, [r7, #16]
 800a3ce:	bf00      	nop
 800a3d0:	bf00      	nop
 800a3d2:	e7fd      	b.n	800a3d0 <pvPortMalloc+0xf8>
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d6:	685a      	ldr	r2, [r3, #4]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	1ad2      	subs	r2, r2, r3
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	605a      	str	r2, [r3, #4]
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	605a      	str	r2, [r3, #4]
 800a3e6:	69b8      	ldr	r0, [r7, #24]
 800a3e8:	f000 f90a 	bl	800a600 <prvInsertBlockIntoFreeList>
 800a3ec:	4b1d      	ldr	r3, [pc, #116]	@ (800a464 <pvPortMalloc+0x18c>)
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	4a1b      	ldr	r2, [pc, #108]	@ (800a464 <pvPortMalloc+0x18c>)
 800a3f8:	6013      	str	r3, [r2, #0]
 800a3fa:	4b1a      	ldr	r3, [pc, #104]	@ (800a464 <pvPortMalloc+0x18c>)
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	4b1b      	ldr	r3, [pc, #108]	@ (800a46c <pvPortMalloc+0x194>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	429a      	cmp	r2, r3
 800a404:	d203      	bcs.n	800a40e <pvPortMalloc+0x136>
 800a406:	4b17      	ldr	r3, [pc, #92]	@ (800a464 <pvPortMalloc+0x18c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a18      	ldr	r2, [pc, #96]	@ (800a46c <pvPortMalloc+0x194>)
 800a40c:	6013      	str	r3, [r2, #0]
 800a40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a410:	685a      	ldr	r2, [r3, #4]
 800a412:	4b13      	ldr	r3, [pc, #76]	@ (800a460 <pvPortMalloc+0x188>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	431a      	orrs	r2, r3
 800a418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41a:	605a      	str	r2, [r3, #4]
 800a41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41e:	2200      	movs	r2, #0
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	4b13      	ldr	r3, [pc, #76]	@ (800a470 <pvPortMalloc+0x198>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	3301      	adds	r3, #1
 800a428:	4a11      	ldr	r2, [pc, #68]	@ (800a470 <pvPortMalloc+0x198>)
 800a42a:	6013      	str	r3, [r2, #0]
 800a42c:	f7ff fa38 	bl	80098a0 <xTaskResumeAll>
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00b      	beq.n	800a452 <pvPortMalloc+0x17a>
 800a43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	bf00      	nop
 800a44e:	bf00      	nop
 800a450:	e7fd      	b.n	800a44e <pvPortMalloc+0x176>
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	4618      	mov	r0, r3
 800a456:	3728      	adds	r7, #40	@ 0x28
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	200016b8 	.word	0x200016b8
 800a460:	200016cc 	.word	0x200016cc
 800a464:	200016bc 	.word	0x200016bc
 800a468:	200016b0 	.word	0x200016b0
 800a46c:	200016c0 	.word	0x200016c0
 800a470:	200016c4 	.word	0x200016c4

0800a474 <vPortFree>:
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	617b      	str	r3, [r7, #20]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d04f      	beq.n	800a526 <vPortFree+0xb2>
 800a486:	2308      	movs	r3, #8
 800a488:	425b      	negs	r3, r3
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	4413      	add	r3, r2
 800a48e:	617b      	str	r3, [r7, #20]
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	613b      	str	r3, [r7, #16]
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	685a      	ldr	r2, [r3, #4]
 800a498:	4b25      	ldr	r3, [pc, #148]	@ (800a530 <vPortFree+0xbc>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4013      	ands	r3, r2
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10b      	bne.n	800a4ba <vPortFree+0x46>
 800a4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	e7fd      	b.n	800a4b6 <vPortFree+0x42>
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00b      	beq.n	800a4da <vPortFree+0x66>
 800a4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	60bb      	str	r3, [r7, #8]
 800a4d4:	bf00      	nop
 800a4d6:	bf00      	nop
 800a4d8:	e7fd      	b.n	800a4d6 <vPortFree+0x62>
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	4b14      	ldr	r3, [pc, #80]	@ (800a530 <vPortFree+0xbc>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d01e      	beq.n	800a526 <vPortFree+0xb2>
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d11a      	bne.n	800a526 <vPortFree+0xb2>
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	4b0e      	ldr	r3, [pc, #56]	@ (800a530 <vPortFree+0xbc>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	43db      	mvns	r3, r3
 800a4fa:	401a      	ands	r2, r3
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	605a      	str	r2, [r3, #4]
 800a500:	f7ff f9c0 	bl	8009884 <vTaskSuspendAll>
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	685a      	ldr	r2, [r3, #4]
 800a508:	4b0a      	ldr	r3, [pc, #40]	@ (800a534 <vPortFree+0xc0>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4413      	add	r3, r2
 800a50e:	4a09      	ldr	r2, [pc, #36]	@ (800a534 <vPortFree+0xc0>)
 800a510:	6013      	str	r3, [r2, #0]
 800a512:	6938      	ldr	r0, [r7, #16]
 800a514:	f000 f874 	bl	800a600 <prvInsertBlockIntoFreeList>
 800a518:	4b07      	ldr	r3, [pc, #28]	@ (800a538 <vPortFree+0xc4>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	3301      	adds	r3, #1
 800a51e:	4a06      	ldr	r2, [pc, #24]	@ (800a538 <vPortFree+0xc4>)
 800a520:	6013      	str	r3, [r2, #0]
 800a522:	f7ff f9bd 	bl	80098a0 <xTaskResumeAll>
 800a526:	bf00      	nop
 800a528:	3718      	adds	r7, #24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	200016cc 	.word	0x200016cc
 800a534:	200016bc 	.word	0x200016bc
 800a538:	200016c8 	.word	0x200016c8

0800a53c <prvHeapInit>:
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a546:	60bb      	str	r3, [r7, #8]
 800a548:	4b27      	ldr	r3, [pc, #156]	@ (800a5e8 <prvHeapInit+0xac>)
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f003 0307 	and.w	r3, r3, #7
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00c      	beq.n	800a570 <prvHeapInit+0x34>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	3307      	adds	r3, #7
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f023 0307 	bic.w	r3, r3, #7
 800a562:	60fb      	str	r3, [r7, #12]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	4a1f      	ldr	r2, [pc, #124]	@ (800a5e8 <prvHeapInit+0xac>)
 800a56c:	4413      	add	r3, r2
 800a56e:	60bb      	str	r3, [r7, #8]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	607b      	str	r3, [r7, #4]
 800a574:	4a1d      	ldr	r2, [pc, #116]	@ (800a5ec <prvHeapInit+0xb0>)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6013      	str	r3, [r2, #0]
 800a57a:	4b1c      	ldr	r3, [pc, #112]	@ (800a5ec <prvHeapInit+0xb0>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	605a      	str	r2, [r3, #4]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	4413      	add	r3, r2
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	2208      	movs	r2, #8
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	1a9b      	subs	r3, r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f023 0307 	bic.w	r3, r3, #7
 800a596:	60fb      	str	r3, [r7, #12]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	4a15      	ldr	r2, [pc, #84]	@ (800a5f0 <prvHeapInit+0xb4>)
 800a59c:	6013      	str	r3, [r2, #0]
 800a59e:	4b14      	ldr	r3, [pc, #80]	@ (800a5f0 <prvHeapInit+0xb4>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	605a      	str	r2, [r3, #4]
 800a5a6:	4b12      	ldr	r3, [pc, #72]	@ (800a5f0 <prvHeapInit+0xb4>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	603b      	str	r3, [r7, #0]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	1ad2      	subs	r2, r2, r3
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	605a      	str	r2, [r3, #4]
 800a5bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a5f0 <prvHeapInit+0xb4>)
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	4a0a      	ldr	r2, [pc, #40]	@ (800a5f4 <prvHeapInit+0xb8>)
 800a5ca:	6013      	str	r3, [r2, #0]
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	4a09      	ldr	r2, [pc, #36]	@ (800a5f8 <prvHeapInit+0xbc>)
 800a5d2:	6013      	str	r3, [r2, #0]
 800a5d4:	4b09      	ldr	r3, [pc, #36]	@ (800a5fc <prvHeapInit+0xc0>)
 800a5d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	bf00      	nop
 800a5de:	3714      	adds	r7, #20
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr
 800a5e8:	20000af8 	.word	0x20000af8
 800a5ec:	200016b0 	.word	0x200016b0
 800a5f0:	200016b8 	.word	0x200016b8
 800a5f4:	200016c0 	.word	0x200016c0
 800a5f8:	200016bc 	.word	0x200016bc
 800a5fc:	200016cc 	.word	0x200016cc

0800a600 <prvInsertBlockIntoFreeList>:
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	4b28      	ldr	r3, [pc, #160]	@ (800a6ac <prvInsertBlockIntoFreeList+0xac>)
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	e002      	b.n	800a614 <prvInsertBlockIntoFreeList+0x14>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d8f7      	bhi.n	800a60e <prvInsertBlockIntoFreeList+0xe>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	60bb      	str	r3, [r7, #8]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	4413      	add	r3, r2
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d108      	bne.n	800a642 <prvInsertBlockIntoFreeList+0x42>
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	441a      	add	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	605a      	str	r2, [r3, #4]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	607b      	str	r3, [r7, #4]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	60bb      	str	r3, [r7, #8]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	441a      	add	r2, r3
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d118      	bne.n	800a688 <prvInsertBlockIntoFreeList+0x88>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	4b15      	ldr	r3, [pc, #84]	@ (800a6b0 <prvInsertBlockIntoFreeList+0xb0>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d00d      	beq.n	800a67e <prvInsertBlockIntoFreeList+0x7e>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	441a      	add	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	605a      	str	r2, [r3, #4]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	601a      	str	r2, [r3, #0]
 800a67c:	e008      	b.n	800a690 <prvInsertBlockIntoFreeList+0x90>
 800a67e:	4b0c      	ldr	r3, [pc, #48]	@ (800a6b0 <prvInsertBlockIntoFreeList+0xb0>)
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	601a      	str	r2, [r3, #0]
 800a686:	e003      	b.n	800a690 <prvInsertBlockIntoFreeList+0x90>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	429a      	cmp	r2, r3
 800a696:	d002      	beq.n	800a69e <prvInsertBlockIntoFreeList+0x9e>
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	bf00      	nop
 800a6a0:	3714      	adds	r7, #20
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	200016b0 	.word	0x200016b0
 800a6b0:	200016b8 	.word	0x200016b8

0800a6b4 <std>:
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	b510      	push	{r4, lr}
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a6be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6c2:	6083      	str	r3, [r0, #8]
 800a6c4:	8181      	strh	r1, [r0, #12]
 800a6c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a6c8:	81c2      	strh	r2, [r0, #14]
 800a6ca:	6183      	str	r3, [r0, #24]
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	2208      	movs	r2, #8
 800a6d0:	305c      	adds	r0, #92	@ 0x5c
 800a6d2:	f000 fa2d 	bl	800ab30 <memset>
 800a6d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a70c <std+0x58>)
 800a6d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a6da:	4b0d      	ldr	r3, [pc, #52]	@ (800a710 <std+0x5c>)
 800a6dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a6de:	4b0d      	ldr	r3, [pc, #52]	@ (800a714 <std+0x60>)
 800a6e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a718 <std+0x64>)
 800a6e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a71c <std+0x68>)
 800a6e8:	6224      	str	r4, [r4, #32]
 800a6ea:	429c      	cmp	r4, r3
 800a6ec:	d006      	beq.n	800a6fc <std+0x48>
 800a6ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a6f2:	4294      	cmp	r4, r2
 800a6f4:	d002      	beq.n	800a6fc <std+0x48>
 800a6f6:	33d0      	adds	r3, #208	@ 0xd0
 800a6f8:	429c      	cmp	r4, r3
 800a6fa:	d105      	bne.n	800a708 <std+0x54>
 800a6fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a704:	f000 bae8 	b.w	800acd8 <__retarget_lock_init_recursive>
 800a708:	bd10      	pop	{r4, pc}
 800a70a:	bf00      	nop
 800a70c:	0800a981 	.word	0x0800a981
 800a710:	0800a9a3 	.word	0x0800a9a3
 800a714:	0800a9db 	.word	0x0800a9db
 800a718:	0800a9ff 	.word	0x0800a9ff
 800a71c:	200016d0 	.word	0x200016d0

0800a720 <stdio_exit_handler>:
 800a720:	4a02      	ldr	r2, [pc, #8]	@ (800a72c <stdio_exit_handler+0xc>)
 800a722:	4903      	ldr	r1, [pc, #12]	@ (800a730 <stdio_exit_handler+0x10>)
 800a724:	4803      	ldr	r0, [pc, #12]	@ (800a734 <stdio_exit_handler+0x14>)
 800a726:	f000 b869 	b.w	800a7fc <_fwalk_sglue>
 800a72a:	bf00      	nop
 800a72c:	20000018 	.word	0x20000018
 800a730:	0800b891 	.word	0x0800b891
 800a734:	20000028 	.word	0x20000028

0800a738 <cleanup_stdio>:
 800a738:	6841      	ldr	r1, [r0, #4]
 800a73a:	4b0c      	ldr	r3, [pc, #48]	@ (800a76c <cleanup_stdio+0x34>)
 800a73c:	4299      	cmp	r1, r3
 800a73e:	b510      	push	{r4, lr}
 800a740:	4604      	mov	r4, r0
 800a742:	d001      	beq.n	800a748 <cleanup_stdio+0x10>
 800a744:	f001 f8a4 	bl	800b890 <_fflush_r>
 800a748:	68a1      	ldr	r1, [r4, #8]
 800a74a:	4b09      	ldr	r3, [pc, #36]	@ (800a770 <cleanup_stdio+0x38>)
 800a74c:	4299      	cmp	r1, r3
 800a74e:	d002      	beq.n	800a756 <cleanup_stdio+0x1e>
 800a750:	4620      	mov	r0, r4
 800a752:	f001 f89d 	bl	800b890 <_fflush_r>
 800a756:	68e1      	ldr	r1, [r4, #12]
 800a758:	4b06      	ldr	r3, [pc, #24]	@ (800a774 <cleanup_stdio+0x3c>)
 800a75a:	4299      	cmp	r1, r3
 800a75c:	d004      	beq.n	800a768 <cleanup_stdio+0x30>
 800a75e:	4620      	mov	r0, r4
 800a760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a764:	f001 b894 	b.w	800b890 <_fflush_r>
 800a768:	bd10      	pop	{r4, pc}
 800a76a:	bf00      	nop
 800a76c:	200016d0 	.word	0x200016d0
 800a770:	20001738 	.word	0x20001738
 800a774:	200017a0 	.word	0x200017a0

0800a778 <global_stdio_init.part.0>:
 800a778:	b510      	push	{r4, lr}
 800a77a:	4b0b      	ldr	r3, [pc, #44]	@ (800a7a8 <global_stdio_init.part.0+0x30>)
 800a77c:	4c0b      	ldr	r4, [pc, #44]	@ (800a7ac <global_stdio_init.part.0+0x34>)
 800a77e:	4a0c      	ldr	r2, [pc, #48]	@ (800a7b0 <global_stdio_init.part.0+0x38>)
 800a780:	601a      	str	r2, [r3, #0]
 800a782:	4620      	mov	r0, r4
 800a784:	2200      	movs	r2, #0
 800a786:	2104      	movs	r1, #4
 800a788:	f7ff ff94 	bl	800a6b4 <std>
 800a78c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a790:	2201      	movs	r2, #1
 800a792:	2109      	movs	r1, #9
 800a794:	f7ff ff8e 	bl	800a6b4 <std>
 800a798:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a79c:	2202      	movs	r2, #2
 800a79e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a2:	2112      	movs	r1, #18
 800a7a4:	f7ff bf86 	b.w	800a6b4 <std>
 800a7a8:	20001808 	.word	0x20001808
 800a7ac:	200016d0 	.word	0x200016d0
 800a7b0:	0800a721 	.word	0x0800a721

0800a7b4 <__sfp_lock_acquire>:
 800a7b4:	4801      	ldr	r0, [pc, #4]	@ (800a7bc <__sfp_lock_acquire+0x8>)
 800a7b6:	f000 ba90 	b.w	800acda <__retarget_lock_acquire_recursive>
 800a7ba:	bf00      	nop
 800a7bc:	20001811 	.word	0x20001811

0800a7c0 <__sfp_lock_release>:
 800a7c0:	4801      	ldr	r0, [pc, #4]	@ (800a7c8 <__sfp_lock_release+0x8>)
 800a7c2:	f000 ba8b 	b.w	800acdc <__retarget_lock_release_recursive>
 800a7c6:	bf00      	nop
 800a7c8:	20001811 	.word	0x20001811

0800a7cc <__sinit>:
 800a7cc:	b510      	push	{r4, lr}
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	f7ff fff0 	bl	800a7b4 <__sfp_lock_acquire>
 800a7d4:	6a23      	ldr	r3, [r4, #32]
 800a7d6:	b11b      	cbz	r3, 800a7e0 <__sinit+0x14>
 800a7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7dc:	f7ff bff0 	b.w	800a7c0 <__sfp_lock_release>
 800a7e0:	4b04      	ldr	r3, [pc, #16]	@ (800a7f4 <__sinit+0x28>)
 800a7e2:	6223      	str	r3, [r4, #32]
 800a7e4:	4b04      	ldr	r3, [pc, #16]	@ (800a7f8 <__sinit+0x2c>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1f5      	bne.n	800a7d8 <__sinit+0xc>
 800a7ec:	f7ff ffc4 	bl	800a778 <global_stdio_init.part.0>
 800a7f0:	e7f2      	b.n	800a7d8 <__sinit+0xc>
 800a7f2:	bf00      	nop
 800a7f4:	0800a739 	.word	0x0800a739
 800a7f8:	20001808 	.word	0x20001808

0800a7fc <_fwalk_sglue>:
 800a7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a800:	4607      	mov	r7, r0
 800a802:	4688      	mov	r8, r1
 800a804:	4614      	mov	r4, r2
 800a806:	2600      	movs	r6, #0
 800a808:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a80c:	f1b9 0901 	subs.w	r9, r9, #1
 800a810:	d505      	bpl.n	800a81e <_fwalk_sglue+0x22>
 800a812:	6824      	ldr	r4, [r4, #0]
 800a814:	2c00      	cmp	r4, #0
 800a816:	d1f7      	bne.n	800a808 <_fwalk_sglue+0xc>
 800a818:	4630      	mov	r0, r6
 800a81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a81e:	89ab      	ldrh	r3, [r5, #12]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d907      	bls.n	800a834 <_fwalk_sglue+0x38>
 800a824:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a828:	3301      	adds	r3, #1
 800a82a:	d003      	beq.n	800a834 <_fwalk_sglue+0x38>
 800a82c:	4629      	mov	r1, r5
 800a82e:	4638      	mov	r0, r7
 800a830:	47c0      	blx	r8
 800a832:	4306      	orrs	r6, r0
 800a834:	3568      	adds	r5, #104	@ 0x68
 800a836:	e7e9      	b.n	800a80c <_fwalk_sglue+0x10>

0800a838 <iprintf>:
 800a838:	b40f      	push	{r0, r1, r2, r3}
 800a83a:	b507      	push	{r0, r1, r2, lr}
 800a83c:	4906      	ldr	r1, [pc, #24]	@ (800a858 <iprintf+0x20>)
 800a83e:	ab04      	add	r3, sp, #16
 800a840:	6808      	ldr	r0, [r1, #0]
 800a842:	f853 2b04 	ldr.w	r2, [r3], #4
 800a846:	6881      	ldr	r1, [r0, #8]
 800a848:	9301      	str	r3, [sp, #4]
 800a84a:	f000 fcf7 	bl	800b23c <_vfiprintf_r>
 800a84e:	b003      	add	sp, #12
 800a850:	f85d eb04 	ldr.w	lr, [sp], #4
 800a854:	b004      	add	sp, #16
 800a856:	4770      	bx	lr
 800a858:	20000024 	.word	0x20000024

0800a85c <_puts_r>:
 800a85c:	6a03      	ldr	r3, [r0, #32]
 800a85e:	b570      	push	{r4, r5, r6, lr}
 800a860:	6884      	ldr	r4, [r0, #8]
 800a862:	4605      	mov	r5, r0
 800a864:	460e      	mov	r6, r1
 800a866:	b90b      	cbnz	r3, 800a86c <_puts_r+0x10>
 800a868:	f7ff ffb0 	bl	800a7cc <__sinit>
 800a86c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a86e:	07db      	lsls	r3, r3, #31
 800a870:	d405      	bmi.n	800a87e <_puts_r+0x22>
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	0598      	lsls	r0, r3, #22
 800a876:	d402      	bmi.n	800a87e <_puts_r+0x22>
 800a878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a87a:	f000 fa2e 	bl	800acda <__retarget_lock_acquire_recursive>
 800a87e:	89a3      	ldrh	r3, [r4, #12]
 800a880:	0719      	lsls	r1, r3, #28
 800a882:	d502      	bpl.n	800a88a <_puts_r+0x2e>
 800a884:	6923      	ldr	r3, [r4, #16]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d135      	bne.n	800a8f6 <_puts_r+0x9a>
 800a88a:	4621      	mov	r1, r4
 800a88c:	4628      	mov	r0, r5
 800a88e:	f000 f8f9 	bl	800aa84 <__swsetup_r>
 800a892:	b380      	cbz	r0, 800a8f6 <_puts_r+0x9a>
 800a894:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a898:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a89a:	07da      	lsls	r2, r3, #31
 800a89c:	d405      	bmi.n	800a8aa <_puts_r+0x4e>
 800a89e:	89a3      	ldrh	r3, [r4, #12]
 800a8a0:	059b      	lsls	r3, r3, #22
 800a8a2:	d402      	bmi.n	800a8aa <_puts_r+0x4e>
 800a8a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8a6:	f000 fa19 	bl	800acdc <__retarget_lock_release_recursive>
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	bd70      	pop	{r4, r5, r6, pc}
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	da04      	bge.n	800a8bc <_puts_r+0x60>
 800a8b2:	69a2      	ldr	r2, [r4, #24]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	dc17      	bgt.n	800a8e8 <_puts_r+0x8c>
 800a8b8:	290a      	cmp	r1, #10
 800a8ba:	d015      	beq.n	800a8e8 <_puts_r+0x8c>
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	6022      	str	r2, [r4, #0]
 800a8c2:	7019      	strb	r1, [r3, #0]
 800a8c4:	68a3      	ldr	r3, [r4, #8]
 800a8c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	60a3      	str	r3, [r4, #8]
 800a8ce:	2900      	cmp	r1, #0
 800a8d0:	d1ed      	bne.n	800a8ae <_puts_r+0x52>
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	da11      	bge.n	800a8fa <_puts_r+0x9e>
 800a8d6:	4622      	mov	r2, r4
 800a8d8:	210a      	movs	r1, #10
 800a8da:	4628      	mov	r0, r5
 800a8dc:	f000 f893 	bl	800aa06 <__swbuf_r>
 800a8e0:	3001      	adds	r0, #1
 800a8e2:	d0d7      	beq.n	800a894 <_puts_r+0x38>
 800a8e4:	250a      	movs	r5, #10
 800a8e6:	e7d7      	b.n	800a898 <_puts_r+0x3c>
 800a8e8:	4622      	mov	r2, r4
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	f000 f88b 	bl	800aa06 <__swbuf_r>
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	d1e7      	bne.n	800a8c4 <_puts_r+0x68>
 800a8f4:	e7ce      	b.n	800a894 <_puts_r+0x38>
 800a8f6:	3e01      	subs	r6, #1
 800a8f8:	e7e4      	b.n	800a8c4 <_puts_r+0x68>
 800a8fa:	6823      	ldr	r3, [r4, #0]
 800a8fc:	1c5a      	adds	r2, r3, #1
 800a8fe:	6022      	str	r2, [r4, #0]
 800a900:	220a      	movs	r2, #10
 800a902:	701a      	strb	r2, [r3, #0]
 800a904:	e7ee      	b.n	800a8e4 <_puts_r+0x88>
	...

0800a908 <puts>:
 800a908:	4b02      	ldr	r3, [pc, #8]	@ (800a914 <puts+0xc>)
 800a90a:	4601      	mov	r1, r0
 800a90c:	6818      	ldr	r0, [r3, #0]
 800a90e:	f7ff bfa5 	b.w	800a85c <_puts_r>
 800a912:	bf00      	nop
 800a914:	20000024 	.word	0x20000024

0800a918 <sniprintf>:
 800a918:	b40c      	push	{r2, r3}
 800a91a:	b530      	push	{r4, r5, lr}
 800a91c:	4b17      	ldr	r3, [pc, #92]	@ (800a97c <sniprintf+0x64>)
 800a91e:	1e0c      	subs	r4, r1, #0
 800a920:	681d      	ldr	r5, [r3, #0]
 800a922:	b09d      	sub	sp, #116	@ 0x74
 800a924:	da08      	bge.n	800a938 <sniprintf+0x20>
 800a926:	238b      	movs	r3, #139	@ 0x8b
 800a928:	602b      	str	r3, [r5, #0]
 800a92a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a92e:	b01d      	add	sp, #116	@ 0x74
 800a930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a934:	b002      	add	sp, #8
 800a936:	4770      	bx	lr
 800a938:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a93c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a940:	bf14      	ite	ne
 800a942:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a946:	4623      	moveq	r3, r4
 800a948:	9304      	str	r3, [sp, #16]
 800a94a:	9307      	str	r3, [sp, #28]
 800a94c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a950:	9002      	str	r0, [sp, #8]
 800a952:	9006      	str	r0, [sp, #24]
 800a954:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a958:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a95a:	ab21      	add	r3, sp, #132	@ 0x84
 800a95c:	a902      	add	r1, sp, #8
 800a95e:	4628      	mov	r0, r5
 800a960:	9301      	str	r3, [sp, #4]
 800a962:	f000 fb45 	bl	800aff0 <_svfiprintf_r>
 800a966:	1c43      	adds	r3, r0, #1
 800a968:	bfbc      	itt	lt
 800a96a:	238b      	movlt	r3, #139	@ 0x8b
 800a96c:	602b      	strlt	r3, [r5, #0]
 800a96e:	2c00      	cmp	r4, #0
 800a970:	d0dd      	beq.n	800a92e <sniprintf+0x16>
 800a972:	9b02      	ldr	r3, [sp, #8]
 800a974:	2200      	movs	r2, #0
 800a976:	701a      	strb	r2, [r3, #0]
 800a978:	e7d9      	b.n	800a92e <sniprintf+0x16>
 800a97a:	bf00      	nop
 800a97c:	20000024 	.word	0x20000024

0800a980 <__sread>:
 800a980:	b510      	push	{r4, lr}
 800a982:	460c      	mov	r4, r1
 800a984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a988:	f000 f958 	bl	800ac3c <_read_r>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	bfab      	itete	ge
 800a990:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a992:	89a3      	ldrhlt	r3, [r4, #12]
 800a994:	181b      	addge	r3, r3, r0
 800a996:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a99a:	bfac      	ite	ge
 800a99c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a99e:	81a3      	strhlt	r3, [r4, #12]
 800a9a0:	bd10      	pop	{r4, pc}

0800a9a2 <__swrite>:
 800a9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a6:	461f      	mov	r7, r3
 800a9a8:	898b      	ldrh	r3, [r1, #12]
 800a9aa:	05db      	lsls	r3, r3, #23
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	4616      	mov	r6, r2
 800a9b2:	d505      	bpl.n	800a9c0 <__swrite+0x1e>
 800a9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f000 f92c 	bl	800ac18 <_lseek_r>
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9ca:	81a3      	strh	r3, [r4, #12]
 800a9cc:	4632      	mov	r2, r6
 800a9ce:	463b      	mov	r3, r7
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d6:	f000 b943 	b.w	800ac60 <_write_r>

0800a9da <__sseek>:
 800a9da:	b510      	push	{r4, lr}
 800a9dc:	460c      	mov	r4, r1
 800a9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e2:	f000 f919 	bl	800ac18 <_lseek_r>
 800a9e6:	1c43      	adds	r3, r0, #1
 800a9e8:	89a3      	ldrh	r3, [r4, #12]
 800a9ea:	bf15      	itete	ne
 800a9ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a9ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a9f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a9f6:	81a3      	strheq	r3, [r4, #12]
 800a9f8:	bf18      	it	ne
 800a9fa:	81a3      	strhne	r3, [r4, #12]
 800a9fc:	bd10      	pop	{r4, pc}

0800a9fe <__sclose>:
 800a9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa02:	f000 b8f9 	b.w	800abf8 <_close_r>

0800aa06 <__swbuf_r>:
 800aa06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa08:	460e      	mov	r6, r1
 800aa0a:	4614      	mov	r4, r2
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	b118      	cbz	r0, 800aa18 <__swbuf_r+0x12>
 800aa10:	6a03      	ldr	r3, [r0, #32]
 800aa12:	b90b      	cbnz	r3, 800aa18 <__swbuf_r+0x12>
 800aa14:	f7ff feda 	bl	800a7cc <__sinit>
 800aa18:	69a3      	ldr	r3, [r4, #24]
 800aa1a:	60a3      	str	r3, [r4, #8]
 800aa1c:	89a3      	ldrh	r3, [r4, #12]
 800aa1e:	071a      	lsls	r2, r3, #28
 800aa20:	d501      	bpl.n	800aa26 <__swbuf_r+0x20>
 800aa22:	6923      	ldr	r3, [r4, #16]
 800aa24:	b943      	cbnz	r3, 800aa38 <__swbuf_r+0x32>
 800aa26:	4621      	mov	r1, r4
 800aa28:	4628      	mov	r0, r5
 800aa2a:	f000 f82b 	bl	800aa84 <__swsetup_r>
 800aa2e:	b118      	cbz	r0, 800aa38 <__swbuf_r+0x32>
 800aa30:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800aa34:	4638      	mov	r0, r7
 800aa36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	6922      	ldr	r2, [r4, #16]
 800aa3c:	1a98      	subs	r0, r3, r2
 800aa3e:	6963      	ldr	r3, [r4, #20]
 800aa40:	b2f6      	uxtb	r6, r6
 800aa42:	4283      	cmp	r3, r0
 800aa44:	4637      	mov	r7, r6
 800aa46:	dc05      	bgt.n	800aa54 <__swbuf_r+0x4e>
 800aa48:	4621      	mov	r1, r4
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	f000 ff20 	bl	800b890 <_fflush_r>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d1ed      	bne.n	800aa30 <__swbuf_r+0x2a>
 800aa54:	68a3      	ldr	r3, [r4, #8]
 800aa56:	3b01      	subs	r3, #1
 800aa58:	60a3      	str	r3, [r4, #8]
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	1c5a      	adds	r2, r3, #1
 800aa5e:	6022      	str	r2, [r4, #0]
 800aa60:	701e      	strb	r6, [r3, #0]
 800aa62:	6962      	ldr	r2, [r4, #20]
 800aa64:	1c43      	adds	r3, r0, #1
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d004      	beq.n	800aa74 <__swbuf_r+0x6e>
 800aa6a:	89a3      	ldrh	r3, [r4, #12]
 800aa6c:	07db      	lsls	r3, r3, #31
 800aa6e:	d5e1      	bpl.n	800aa34 <__swbuf_r+0x2e>
 800aa70:	2e0a      	cmp	r6, #10
 800aa72:	d1df      	bne.n	800aa34 <__swbuf_r+0x2e>
 800aa74:	4621      	mov	r1, r4
 800aa76:	4628      	mov	r0, r5
 800aa78:	f000 ff0a 	bl	800b890 <_fflush_r>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d0d9      	beq.n	800aa34 <__swbuf_r+0x2e>
 800aa80:	e7d6      	b.n	800aa30 <__swbuf_r+0x2a>
	...

0800aa84 <__swsetup_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4b29      	ldr	r3, [pc, #164]	@ (800ab2c <__swsetup_r+0xa8>)
 800aa88:	4605      	mov	r5, r0
 800aa8a:	6818      	ldr	r0, [r3, #0]
 800aa8c:	460c      	mov	r4, r1
 800aa8e:	b118      	cbz	r0, 800aa98 <__swsetup_r+0x14>
 800aa90:	6a03      	ldr	r3, [r0, #32]
 800aa92:	b90b      	cbnz	r3, 800aa98 <__swsetup_r+0x14>
 800aa94:	f7ff fe9a 	bl	800a7cc <__sinit>
 800aa98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa9c:	0719      	lsls	r1, r3, #28
 800aa9e:	d422      	bmi.n	800aae6 <__swsetup_r+0x62>
 800aaa0:	06da      	lsls	r2, r3, #27
 800aaa2:	d407      	bmi.n	800aab4 <__swsetup_r+0x30>
 800aaa4:	2209      	movs	r2, #9
 800aaa6:	602a      	str	r2, [r5, #0]
 800aaa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaac:	81a3      	strh	r3, [r4, #12]
 800aaae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aab2:	e033      	b.n	800ab1c <__swsetup_r+0x98>
 800aab4:	0758      	lsls	r0, r3, #29
 800aab6:	d512      	bpl.n	800aade <__swsetup_r+0x5a>
 800aab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aaba:	b141      	cbz	r1, 800aace <__swsetup_r+0x4a>
 800aabc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aac0:	4299      	cmp	r1, r3
 800aac2:	d002      	beq.n	800aaca <__swsetup_r+0x46>
 800aac4:	4628      	mov	r0, r5
 800aac6:	f000 f937 	bl	800ad38 <_free_r>
 800aaca:	2300      	movs	r3, #0
 800aacc:	6363      	str	r3, [r4, #52]	@ 0x34
 800aace:	89a3      	ldrh	r3, [r4, #12]
 800aad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aad4:	81a3      	strh	r3, [r4, #12]
 800aad6:	2300      	movs	r3, #0
 800aad8:	6063      	str	r3, [r4, #4]
 800aada:	6923      	ldr	r3, [r4, #16]
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	89a3      	ldrh	r3, [r4, #12]
 800aae0:	f043 0308 	orr.w	r3, r3, #8
 800aae4:	81a3      	strh	r3, [r4, #12]
 800aae6:	6923      	ldr	r3, [r4, #16]
 800aae8:	b94b      	cbnz	r3, 800aafe <__swsetup_r+0x7a>
 800aaea:	89a3      	ldrh	r3, [r4, #12]
 800aaec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aaf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aaf4:	d003      	beq.n	800aafe <__swsetup_r+0x7a>
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f000 ff29 	bl	800b950 <__smakebuf_r>
 800aafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab02:	f013 0201 	ands.w	r2, r3, #1
 800ab06:	d00a      	beq.n	800ab1e <__swsetup_r+0x9a>
 800ab08:	2200      	movs	r2, #0
 800ab0a:	60a2      	str	r2, [r4, #8]
 800ab0c:	6962      	ldr	r2, [r4, #20]
 800ab0e:	4252      	negs	r2, r2
 800ab10:	61a2      	str	r2, [r4, #24]
 800ab12:	6922      	ldr	r2, [r4, #16]
 800ab14:	b942      	cbnz	r2, 800ab28 <__swsetup_r+0xa4>
 800ab16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab1a:	d1c5      	bne.n	800aaa8 <__swsetup_r+0x24>
 800ab1c:	bd38      	pop	{r3, r4, r5, pc}
 800ab1e:	0799      	lsls	r1, r3, #30
 800ab20:	bf58      	it	pl
 800ab22:	6962      	ldrpl	r2, [r4, #20]
 800ab24:	60a2      	str	r2, [r4, #8]
 800ab26:	e7f4      	b.n	800ab12 <__swsetup_r+0x8e>
 800ab28:	2000      	movs	r0, #0
 800ab2a:	e7f7      	b.n	800ab1c <__swsetup_r+0x98>
 800ab2c:	20000024 	.word	0x20000024

0800ab30 <memset>:
 800ab30:	4402      	add	r2, r0
 800ab32:	4603      	mov	r3, r0
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d100      	bne.n	800ab3a <memset+0xa>
 800ab38:	4770      	bx	lr
 800ab3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab3e:	e7f9      	b.n	800ab34 <memset+0x4>

0800ab40 <strtok>:
 800ab40:	4b16      	ldr	r3, [pc, #88]	@ (800ab9c <strtok+0x5c>)
 800ab42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab46:	681f      	ldr	r7, [r3, #0]
 800ab48:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	460e      	mov	r6, r1
 800ab4e:	b9ec      	cbnz	r4, 800ab8c <strtok+0x4c>
 800ab50:	2050      	movs	r0, #80	@ 0x50
 800ab52:	f000 f93b 	bl	800adcc <malloc>
 800ab56:	4602      	mov	r2, r0
 800ab58:	6478      	str	r0, [r7, #68]	@ 0x44
 800ab5a:	b920      	cbnz	r0, 800ab66 <strtok+0x26>
 800ab5c:	4b10      	ldr	r3, [pc, #64]	@ (800aba0 <strtok+0x60>)
 800ab5e:	4811      	ldr	r0, [pc, #68]	@ (800aba4 <strtok+0x64>)
 800ab60:	215b      	movs	r1, #91	@ 0x5b
 800ab62:	f000 f8cb 	bl	800acfc <__assert_func>
 800ab66:	e9c0 4400 	strd	r4, r4, [r0]
 800ab6a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ab6e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ab72:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ab76:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ab7a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ab7e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ab82:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ab86:	6184      	str	r4, [r0, #24]
 800ab88:	7704      	strb	r4, [r0, #28]
 800ab8a:	6244      	str	r4, [r0, #36]	@ 0x24
 800ab8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab8e:	4631      	mov	r1, r6
 800ab90:	4628      	mov	r0, r5
 800ab92:	2301      	movs	r3, #1
 800ab94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab98:	f000 b806 	b.w	800aba8 <__strtok_r>
 800ab9c:	20000024 	.word	0x20000024
 800aba0:	0800bdb8 	.word	0x0800bdb8
 800aba4:	0800bdcf 	.word	0x0800bdcf

0800aba8 <__strtok_r>:
 800aba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abaa:	4604      	mov	r4, r0
 800abac:	b908      	cbnz	r0, 800abb2 <__strtok_r+0xa>
 800abae:	6814      	ldr	r4, [r2, #0]
 800abb0:	b144      	cbz	r4, 800abc4 <__strtok_r+0x1c>
 800abb2:	4620      	mov	r0, r4
 800abb4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800abb8:	460f      	mov	r7, r1
 800abba:	f817 6b01 	ldrb.w	r6, [r7], #1
 800abbe:	b91e      	cbnz	r6, 800abc8 <__strtok_r+0x20>
 800abc0:	b965      	cbnz	r5, 800abdc <__strtok_r+0x34>
 800abc2:	6015      	str	r5, [r2, #0]
 800abc4:	2000      	movs	r0, #0
 800abc6:	e005      	b.n	800abd4 <__strtok_r+0x2c>
 800abc8:	42b5      	cmp	r5, r6
 800abca:	d1f6      	bne.n	800abba <__strtok_r+0x12>
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1f0      	bne.n	800abb2 <__strtok_r+0xa>
 800abd0:	6014      	str	r4, [r2, #0]
 800abd2:	7003      	strb	r3, [r0, #0]
 800abd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abd6:	461c      	mov	r4, r3
 800abd8:	e00c      	b.n	800abf4 <__strtok_r+0x4c>
 800abda:	b915      	cbnz	r5, 800abe2 <__strtok_r+0x3a>
 800abdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800abe0:	460e      	mov	r6, r1
 800abe2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800abe6:	42ab      	cmp	r3, r5
 800abe8:	d1f7      	bne.n	800abda <__strtok_r+0x32>
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0f3      	beq.n	800abd6 <__strtok_r+0x2e>
 800abee:	2300      	movs	r3, #0
 800abf0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800abf4:	6014      	str	r4, [r2, #0]
 800abf6:	e7ed      	b.n	800abd4 <__strtok_r+0x2c>

0800abf8 <_close_r>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	4d06      	ldr	r5, [pc, #24]	@ (800ac14 <_close_r+0x1c>)
 800abfc:	2300      	movs	r3, #0
 800abfe:	4604      	mov	r4, r0
 800ac00:	4608      	mov	r0, r1
 800ac02:	602b      	str	r3, [r5, #0]
 800ac04:	f7f6 fda4 	bl	8001750 <_close>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d102      	bne.n	800ac12 <_close_r+0x1a>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	b103      	cbz	r3, 800ac12 <_close_r+0x1a>
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	2000180c 	.word	0x2000180c

0800ac18 <_lseek_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4d07      	ldr	r5, [pc, #28]	@ (800ac38 <_lseek_r+0x20>)
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	4608      	mov	r0, r1
 800ac20:	4611      	mov	r1, r2
 800ac22:	2200      	movs	r2, #0
 800ac24:	602a      	str	r2, [r5, #0]
 800ac26:	461a      	mov	r2, r3
 800ac28:	f7f6 fdb9 	bl	800179e <_lseek>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	d102      	bne.n	800ac36 <_lseek_r+0x1e>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	b103      	cbz	r3, 800ac36 <_lseek_r+0x1e>
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	bd38      	pop	{r3, r4, r5, pc}
 800ac38:	2000180c 	.word	0x2000180c

0800ac3c <_read_r>:
 800ac3c:	b538      	push	{r3, r4, r5, lr}
 800ac3e:	4d07      	ldr	r5, [pc, #28]	@ (800ac5c <_read_r+0x20>)
 800ac40:	4604      	mov	r4, r0
 800ac42:	4608      	mov	r0, r1
 800ac44:	4611      	mov	r1, r2
 800ac46:	2200      	movs	r2, #0
 800ac48:	602a      	str	r2, [r5, #0]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	f7f6 fd47 	bl	80016de <_read>
 800ac50:	1c43      	adds	r3, r0, #1
 800ac52:	d102      	bne.n	800ac5a <_read_r+0x1e>
 800ac54:	682b      	ldr	r3, [r5, #0]
 800ac56:	b103      	cbz	r3, 800ac5a <_read_r+0x1e>
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	2000180c 	.word	0x2000180c

0800ac60 <_write_r>:
 800ac60:	b538      	push	{r3, r4, r5, lr}
 800ac62:	4d07      	ldr	r5, [pc, #28]	@ (800ac80 <_write_r+0x20>)
 800ac64:	4604      	mov	r4, r0
 800ac66:	4608      	mov	r0, r1
 800ac68:	4611      	mov	r1, r2
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	602a      	str	r2, [r5, #0]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	f7f6 fd52 	bl	8001718 <_write>
 800ac74:	1c43      	adds	r3, r0, #1
 800ac76:	d102      	bne.n	800ac7e <_write_r+0x1e>
 800ac78:	682b      	ldr	r3, [r5, #0]
 800ac7a:	b103      	cbz	r3, 800ac7e <_write_r+0x1e>
 800ac7c:	6023      	str	r3, [r4, #0]
 800ac7e:	bd38      	pop	{r3, r4, r5, pc}
 800ac80:	2000180c 	.word	0x2000180c

0800ac84 <__errno>:
 800ac84:	4b01      	ldr	r3, [pc, #4]	@ (800ac8c <__errno+0x8>)
 800ac86:	6818      	ldr	r0, [r3, #0]
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	20000024 	.word	0x20000024

0800ac90 <__libc_init_array>:
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	4d0d      	ldr	r5, [pc, #52]	@ (800acc8 <__libc_init_array+0x38>)
 800ac94:	4c0d      	ldr	r4, [pc, #52]	@ (800accc <__libc_init_array+0x3c>)
 800ac96:	1b64      	subs	r4, r4, r5
 800ac98:	10a4      	asrs	r4, r4, #2
 800ac9a:	2600      	movs	r6, #0
 800ac9c:	42a6      	cmp	r6, r4
 800ac9e:	d109      	bne.n	800acb4 <__libc_init_array+0x24>
 800aca0:	4d0b      	ldr	r5, [pc, #44]	@ (800acd0 <__libc_init_array+0x40>)
 800aca2:	4c0c      	ldr	r4, [pc, #48]	@ (800acd4 <__libc_init_array+0x44>)
 800aca4:	f000 ff5e 	bl	800bb64 <_init>
 800aca8:	1b64      	subs	r4, r4, r5
 800acaa:	10a4      	asrs	r4, r4, #2
 800acac:	2600      	movs	r6, #0
 800acae:	42a6      	cmp	r6, r4
 800acb0:	d105      	bne.n	800acbe <__libc_init_array+0x2e>
 800acb2:	bd70      	pop	{r4, r5, r6, pc}
 800acb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800acb8:	4798      	blx	r3
 800acba:	3601      	adds	r6, #1
 800acbc:	e7ee      	b.n	800ac9c <__libc_init_array+0xc>
 800acbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800acc2:	4798      	blx	r3
 800acc4:	3601      	adds	r6, #1
 800acc6:	e7f2      	b.n	800acae <__libc_init_array+0x1e>
 800acc8:	0800bea0 	.word	0x0800bea0
 800accc:	0800bea0 	.word	0x0800bea0
 800acd0:	0800bea0 	.word	0x0800bea0
 800acd4:	0800bea4 	.word	0x0800bea4

0800acd8 <__retarget_lock_init_recursive>:
 800acd8:	4770      	bx	lr

0800acda <__retarget_lock_acquire_recursive>:
 800acda:	4770      	bx	lr

0800acdc <__retarget_lock_release_recursive>:
 800acdc:	4770      	bx	lr

0800acde <memcpy>:
 800acde:	440a      	add	r2, r1
 800ace0:	4291      	cmp	r1, r2
 800ace2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ace6:	d100      	bne.n	800acea <memcpy+0xc>
 800ace8:	4770      	bx	lr
 800acea:	b510      	push	{r4, lr}
 800acec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acf4:	4291      	cmp	r1, r2
 800acf6:	d1f9      	bne.n	800acec <memcpy+0xe>
 800acf8:	bd10      	pop	{r4, pc}
	...

0800acfc <__assert_func>:
 800acfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acfe:	4614      	mov	r4, r2
 800ad00:	461a      	mov	r2, r3
 800ad02:	4b09      	ldr	r3, [pc, #36]	@ (800ad28 <__assert_func+0x2c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4605      	mov	r5, r0
 800ad08:	68d8      	ldr	r0, [r3, #12]
 800ad0a:	b954      	cbnz	r4, 800ad22 <__assert_func+0x26>
 800ad0c:	4b07      	ldr	r3, [pc, #28]	@ (800ad2c <__assert_func+0x30>)
 800ad0e:	461c      	mov	r4, r3
 800ad10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad14:	9100      	str	r1, [sp, #0]
 800ad16:	462b      	mov	r3, r5
 800ad18:	4905      	ldr	r1, [pc, #20]	@ (800ad30 <__assert_func+0x34>)
 800ad1a:	f000 fde1 	bl	800b8e0 <fiprintf>
 800ad1e:	f000 fe9f 	bl	800ba60 <abort>
 800ad22:	4b04      	ldr	r3, [pc, #16]	@ (800ad34 <__assert_func+0x38>)
 800ad24:	e7f4      	b.n	800ad10 <__assert_func+0x14>
 800ad26:	bf00      	nop
 800ad28:	20000024 	.word	0x20000024
 800ad2c:	0800be64 	.word	0x0800be64
 800ad30:	0800be36 	.word	0x0800be36
 800ad34:	0800be29 	.word	0x0800be29

0800ad38 <_free_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	2900      	cmp	r1, #0
 800ad3e:	d041      	beq.n	800adc4 <_free_r+0x8c>
 800ad40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad44:	1f0c      	subs	r4, r1, #4
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	bfb8      	it	lt
 800ad4a:	18e4      	addlt	r4, r4, r3
 800ad4c:	f000 f8e8 	bl	800af20 <__malloc_lock>
 800ad50:	4a1d      	ldr	r2, [pc, #116]	@ (800adc8 <_free_r+0x90>)
 800ad52:	6813      	ldr	r3, [r2, #0]
 800ad54:	b933      	cbnz	r3, 800ad64 <_free_r+0x2c>
 800ad56:	6063      	str	r3, [r4, #4]
 800ad58:	6014      	str	r4, [r2, #0]
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad60:	f000 b8e4 	b.w	800af2c <__malloc_unlock>
 800ad64:	42a3      	cmp	r3, r4
 800ad66:	d908      	bls.n	800ad7a <_free_r+0x42>
 800ad68:	6820      	ldr	r0, [r4, #0]
 800ad6a:	1821      	adds	r1, r4, r0
 800ad6c:	428b      	cmp	r3, r1
 800ad6e:	bf01      	itttt	eq
 800ad70:	6819      	ldreq	r1, [r3, #0]
 800ad72:	685b      	ldreq	r3, [r3, #4]
 800ad74:	1809      	addeq	r1, r1, r0
 800ad76:	6021      	streq	r1, [r4, #0]
 800ad78:	e7ed      	b.n	800ad56 <_free_r+0x1e>
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	b10b      	cbz	r3, 800ad84 <_free_r+0x4c>
 800ad80:	42a3      	cmp	r3, r4
 800ad82:	d9fa      	bls.n	800ad7a <_free_r+0x42>
 800ad84:	6811      	ldr	r1, [r2, #0]
 800ad86:	1850      	adds	r0, r2, r1
 800ad88:	42a0      	cmp	r0, r4
 800ad8a:	d10b      	bne.n	800ada4 <_free_r+0x6c>
 800ad8c:	6820      	ldr	r0, [r4, #0]
 800ad8e:	4401      	add	r1, r0
 800ad90:	1850      	adds	r0, r2, r1
 800ad92:	4283      	cmp	r3, r0
 800ad94:	6011      	str	r1, [r2, #0]
 800ad96:	d1e0      	bne.n	800ad5a <_free_r+0x22>
 800ad98:	6818      	ldr	r0, [r3, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	6053      	str	r3, [r2, #4]
 800ad9e:	4408      	add	r0, r1
 800ada0:	6010      	str	r0, [r2, #0]
 800ada2:	e7da      	b.n	800ad5a <_free_r+0x22>
 800ada4:	d902      	bls.n	800adac <_free_r+0x74>
 800ada6:	230c      	movs	r3, #12
 800ada8:	602b      	str	r3, [r5, #0]
 800adaa:	e7d6      	b.n	800ad5a <_free_r+0x22>
 800adac:	6820      	ldr	r0, [r4, #0]
 800adae:	1821      	adds	r1, r4, r0
 800adb0:	428b      	cmp	r3, r1
 800adb2:	bf04      	itt	eq
 800adb4:	6819      	ldreq	r1, [r3, #0]
 800adb6:	685b      	ldreq	r3, [r3, #4]
 800adb8:	6063      	str	r3, [r4, #4]
 800adba:	bf04      	itt	eq
 800adbc:	1809      	addeq	r1, r1, r0
 800adbe:	6021      	streq	r1, [r4, #0]
 800adc0:	6054      	str	r4, [r2, #4]
 800adc2:	e7ca      	b.n	800ad5a <_free_r+0x22>
 800adc4:	bd38      	pop	{r3, r4, r5, pc}
 800adc6:	bf00      	nop
 800adc8:	20001818 	.word	0x20001818

0800adcc <malloc>:
 800adcc:	4b02      	ldr	r3, [pc, #8]	@ (800add8 <malloc+0xc>)
 800adce:	4601      	mov	r1, r0
 800add0:	6818      	ldr	r0, [r3, #0]
 800add2:	f000 b825 	b.w	800ae20 <_malloc_r>
 800add6:	bf00      	nop
 800add8:	20000024 	.word	0x20000024

0800addc <sbrk_aligned>:
 800addc:	b570      	push	{r4, r5, r6, lr}
 800adde:	4e0f      	ldr	r6, [pc, #60]	@ (800ae1c <sbrk_aligned+0x40>)
 800ade0:	460c      	mov	r4, r1
 800ade2:	6831      	ldr	r1, [r6, #0]
 800ade4:	4605      	mov	r5, r0
 800ade6:	b911      	cbnz	r1, 800adee <sbrk_aligned+0x12>
 800ade8:	f000 fe2a 	bl	800ba40 <_sbrk_r>
 800adec:	6030      	str	r0, [r6, #0]
 800adee:	4621      	mov	r1, r4
 800adf0:	4628      	mov	r0, r5
 800adf2:	f000 fe25 	bl	800ba40 <_sbrk_r>
 800adf6:	1c43      	adds	r3, r0, #1
 800adf8:	d103      	bne.n	800ae02 <sbrk_aligned+0x26>
 800adfa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800adfe:	4620      	mov	r0, r4
 800ae00:	bd70      	pop	{r4, r5, r6, pc}
 800ae02:	1cc4      	adds	r4, r0, #3
 800ae04:	f024 0403 	bic.w	r4, r4, #3
 800ae08:	42a0      	cmp	r0, r4
 800ae0a:	d0f8      	beq.n	800adfe <sbrk_aligned+0x22>
 800ae0c:	1a21      	subs	r1, r4, r0
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f000 fe16 	bl	800ba40 <_sbrk_r>
 800ae14:	3001      	adds	r0, #1
 800ae16:	d1f2      	bne.n	800adfe <sbrk_aligned+0x22>
 800ae18:	e7ef      	b.n	800adfa <sbrk_aligned+0x1e>
 800ae1a:	bf00      	nop
 800ae1c:	20001814 	.word	0x20001814

0800ae20 <_malloc_r>:
 800ae20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae24:	1ccd      	adds	r5, r1, #3
 800ae26:	f025 0503 	bic.w	r5, r5, #3
 800ae2a:	3508      	adds	r5, #8
 800ae2c:	2d0c      	cmp	r5, #12
 800ae2e:	bf38      	it	cc
 800ae30:	250c      	movcc	r5, #12
 800ae32:	2d00      	cmp	r5, #0
 800ae34:	4606      	mov	r6, r0
 800ae36:	db01      	blt.n	800ae3c <_malloc_r+0x1c>
 800ae38:	42a9      	cmp	r1, r5
 800ae3a:	d904      	bls.n	800ae46 <_malloc_r+0x26>
 800ae3c:	230c      	movs	r3, #12
 800ae3e:	6033      	str	r3, [r6, #0]
 800ae40:	2000      	movs	r0, #0
 800ae42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af1c <_malloc_r+0xfc>
 800ae4a:	f000 f869 	bl	800af20 <__malloc_lock>
 800ae4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae52:	461c      	mov	r4, r3
 800ae54:	bb44      	cbnz	r4, 800aea8 <_malloc_r+0x88>
 800ae56:	4629      	mov	r1, r5
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f7ff ffbf 	bl	800addc <sbrk_aligned>
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	4604      	mov	r4, r0
 800ae62:	d158      	bne.n	800af16 <_malloc_r+0xf6>
 800ae64:	f8d8 4000 	ldr.w	r4, [r8]
 800ae68:	4627      	mov	r7, r4
 800ae6a:	2f00      	cmp	r7, #0
 800ae6c:	d143      	bne.n	800aef6 <_malloc_r+0xd6>
 800ae6e:	2c00      	cmp	r4, #0
 800ae70:	d04b      	beq.n	800af0a <_malloc_r+0xea>
 800ae72:	6823      	ldr	r3, [r4, #0]
 800ae74:	4639      	mov	r1, r7
 800ae76:	4630      	mov	r0, r6
 800ae78:	eb04 0903 	add.w	r9, r4, r3
 800ae7c:	f000 fde0 	bl	800ba40 <_sbrk_r>
 800ae80:	4581      	cmp	r9, r0
 800ae82:	d142      	bne.n	800af0a <_malloc_r+0xea>
 800ae84:	6821      	ldr	r1, [r4, #0]
 800ae86:	1a6d      	subs	r5, r5, r1
 800ae88:	4629      	mov	r1, r5
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f7ff ffa6 	bl	800addc <sbrk_aligned>
 800ae90:	3001      	adds	r0, #1
 800ae92:	d03a      	beq.n	800af0a <_malloc_r+0xea>
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	442b      	add	r3, r5
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	bb62      	cbnz	r2, 800aefc <_malloc_r+0xdc>
 800aea2:	f8c8 7000 	str.w	r7, [r8]
 800aea6:	e00f      	b.n	800aec8 <_malloc_r+0xa8>
 800aea8:	6822      	ldr	r2, [r4, #0]
 800aeaa:	1b52      	subs	r2, r2, r5
 800aeac:	d420      	bmi.n	800aef0 <_malloc_r+0xd0>
 800aeae:	2a0b      	cmp	r2, #11
 800aeb0:	d917      	bls.n	800aee2 <_malloc_r+0xc2>
 800aeb2:	1961      	adds	r1, r4, r5
 800aeb4:	42a3      	cmp	r3, r4
 800aeb6:	6025      	str	r5, [r4, #0]
 800aeb8:	bf18      	it	ne
 800aeba:	6059      	strne	r1, [r3, #4]
 800aebc:	6863      	ldr	r3, [r4, #4]
 800aebe:	bf08      	it	eq
 800aec0:	f8c8 1000 	streq.w	r1, [r8]
 800aec4:	5162      	str	r2, [r4, r5]
 800aec6:	604b      	str	r3, [r1, #4]
 800aec8:	4630      	mov	r0, r6
 800aeca:	f000 f82f 	bl	800af2c <__malloc_unlock>
 800aece:	f104 000b 	add.w	r0, r4, #11
 800aed2:	1d23      	adds	r3, r4, #4
 800aed4:	f020 0007 	bic.w	r0, r0, #7
 800aed8:	1ac2      	subs	r2, r0, r3
 800aeda:	bf1c      	itt	ne
 800aedc:	1a1b      	subne	r3, r3, r0
 800aede:	50a3      	strne	r3, [r4, r2]
 800aee0:	e7af      	b.n	800ae42 <_malloc_r+0x22>
 800aee2:	6862      	ldr	r2, [r4, #4]
 800aee4:	42a3      	cmp	r3, r4
 800aee6:	bf0c      	ite	eq
 800aee8:	f8c8 2000 	streq.w	r2, [r8]
 800aeec:	605a      	strne	r2, [r3, #4]
 800aeee:	e7eb      	b.n	800aec8 <_malloc_r+0xa8>
 800aef0:	4623      	mov	r3, r4
 800aef2:	6864      	ldr	r4, [r4, #4]
 800aef4:	e7ae      	b.n	800ae54 <_malloc_r+0x34>
 800aef6:	463c      	mov	r4, r7
 800aef8:	687f      	ldr	r7, [r7, #4]
 800aefa:	e7b6      	b.n	800ae6a <_malloc_r+0x4a>
 800aefc:	461a      	mov	r2, r3
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	42a3      	cmp	r3, r4
 800af02:	d1fb      	bne.n	800aefc <_malloc_r+0xdc>
 800af04:	2300      	movs	r3, #0
 800af06:	6053      	str	r3, [r2, #4]
 800af08:	e7de      	b.n	800aec8 <_malloc_r+0xa8>
 800af0a:	230c      	movs	r3, #12
 800af0c:	6033      	str	r3, [r6, #0]
 800af0e:	4630      	mov	r0, r6
 800af10:	f000 f80c 	bl	800af2c <__malloc_unlock>
 800af14:	e794      	b.n	800ae40 <_malloc_r+0x20>
 800af16:	6005      	str	r5, [r0, #0]
 800af18:	e7d6      	b.n	800aec8 <_malloc_r+0xa8>
 800af1a:	bf00      	nop
 800af1c:	20001818 	.word	0x20001818

0800af20 <__malloc_lock>:
 800af20:	4801      	ldr	r0, [pc, #4]	@ (800af28 <__malloc_lock+0x8>)
 800af22:	f7ff beda 	b.w	800acda <__retarget_lock_acquire_recursive>
 800af26:	bf00      	nop
 800af28:	20001810 	.word	0x20001810

0800af2c <__malloc_unlock>:
 800af2c:	4801      	ldr	r0, [pc, #4]	@ (800af34 <__malloc_unlock+0x8>)
 800af2e:	f7ff bed5 	b.w	800acdc <__retarget_lock_release_recursive>
 800af32:	bf00      	nop
 800af34:	20001810 	.word	0x20001810

0800af38 <__ssputs_r>:
 800af38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af3c:	688e      	ldr	r6, [r1, #8]
 800af3e:	461f      	mov	r7, r3
 800af40:	42be      	cmp	r6, r7
 800af42:	680b      	ldr	r3, [r1, #0]
 800af44:	4682      	mov	sl, r0
 800af46:	460c      	mov	r4, r1
 800af48:	4690      	mov	r8, r2
 800af4a:	d82d      	bhi.n	800afa8 <__ssputs_r+0x70>
 800af4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800af54:	d026      	beq.n	800afa4 <__ssputs_r+0x6c>
 800af56:	6965      	ldr	r5, [r4, #20]
 800af58:	6909      	ldr	r1, [r1, #16]
 800af5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af5e:	eba3 0901 	sub.w	r9, r3, r1
 800af62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af66:	1c7b      	adds	r3, r7, #1
 800af68:	444b      	add	r3, r9
 800af6a:	106d      	asrs	r5, r5, #1
 800af6c:	429d      	cmp	r5, r3
 800af6e:	bf38      	it	cc
 800af70:	461d      	movcc	r5, r3
 800af72:	0553      	lsls	r3, r2, #21
 800af74:	d527      	bpl.n	800afc6 <__ssputs_r+0x8e>
 800af76:	4629      	mov	r1, r5
 800af78:	f7ff ff52 	bl	800ae20 <_malloc_r>
 800af7c:	4606      	mov	r6, r0
 800af7e:	b360      	cbz	r0, 800afda <__ssputs_r+0xa2>
 800af80:	6921      	ldr	r1, [r4, #16]
 800af82:	464a      	mov	r2, r9
 800af84:	f7ff feab 	bl	800acde <memcpy>
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800af8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af92:	81a3      	strh	r3, [r4, #12]
 800af94:	6126      	str	r6, [r4, #16]
 800af96:	6165      	str	r5, [r4, #20]
 800af98:	444e      	add	r6, r9
 800af9a:	eba5 0509 	sub.w	r5, r5, r9
 800af9e:	6026      	str	r6, [r4, #0]
 800afa0:	60a5      	str	r5, [r4, #8]
 800afa2:	463e      	mov	r6, r7
 800afa4:	42be      	cmp	r6, r7
 800afa6:	d900      	bls.n	800afaa <__ssputs_r+0x72>
 800afa8:	463e      	mov	r6, r7
 800afaa:	6820      	ldr	r0, [r4, #0]
 800afac:	4632      	mov	r2, r6
 800afae:	4641      	mov	r1, r8
 800afb0:	f000 fd0a 	bl	800b9c8 <memmove>
 800afb4:	68a3      	ldr	r3, [r4, #8]
 800afb6:	1b9b      	subs	r3, r3, r6
 800afb8:	60a3      	str	r3, [r4, #8]
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	4433      	add	r3, r6
 800afbe:	6023      	str	r3, [r4, #0]
 800afc0:	2000      	movs	r0, #0
 800afc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc6:	462a      	mov	r2, r5
 800afc8:	f000 fd51 	bl	800ba6e <_realloc_r>
 800afcc:	4606      	mov	r6, r0
 800afce:	2800      	cmp	r0, #0
 800afd0:	d1e0      	bne.n	800af94 <__ssputs_r+0x5c>
 800afd2:	6921      	ldr	r1, [r4, #16]
 800afd4:	4650      	mov	r0, sl
 800afd6:	f7ff feaf 	bl	800ad38 <_free_r>
 800afda:	230c      	movs	r3, #12
 800afdc:	f8ca 3000 	str.w	r3, [sl]
 800afe0:	89a3      	ldrh	r3, [r4, #12]
 800afe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afe6:	81a3      	strh	r3, [r4, #12]
 800afe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800afec:	e7e9      	b.n	800afc2 <__ssputs_r+0x8a>
	...

0800aff0 <_svfiprintf_r>:
 800aff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff4:	4698      	mov	r8, r3
 800aff6:	898b      	ldrh	r3, [r1, #12]
 800aff8:	061b      	lsls	r3, r3, #24
 800affa:	b09d      	sub	sp, #116	@ 0x74
 800affc:	4607      	mov	r7, r0
 800affe:	460d      	mov	r5, r1
 800b000:	4614      	mov	r4, r2
 800b002:	d510      	bpl.n	800b026 <_svfiprintf_r+0x36>
 800b004:	690b      	ldr	r3, [r1, #16]
 800b006:	b973      	cbnz	r3, 800b026 <_svfiprintf_r+0x36>
 800b008:	2140      	movs	r1, #64	@ 0x40
 800b00a:	f7ff ff09 	bl	800ae20 <_malloc_r>
 800b00e:	6028      	str	r0, [r5, #0]
 800b010:	6128      	str	r0, [r5, #16]
 800b012:	b930      	cbnz	r0, 800b022 <_svfiprintf_r+0x32>
 800b014:	230c      	movs	r3, #12
 800b016:	603b      	str	r3, [r7, #0]
 800b018:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b01c:	b01d      	add	sp, #116	@ 0x74
 800b01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b022:	2340      	movs	r3, #64	@ 0x40
 800b024:	616b      	str	r3, [r5, #20]
 800b026:	2300      	movs	r3, #0
 800b028:	9309      	str	r3, [sp, #36]	@ 0x24
 800b02a:	2320      	movs	r3, #32
 800b02c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b030:	f8cd 800c 	str.w	r8, [sp, #12]
 800b034:	2330      	movs	r3, #48	@ 0x30
 800b036:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b1d4 <_svfiprintf_r+0x1e4>
 800b03a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b03e:	f04f 0901 	mov.w	r9, #1
 800b042:	4623      	mov	r3, r4
 800b044:	469a      	mov	sl, r3
 800b046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b04a:	b10a      	cbz	r2, 800b050 <_svfiprintf_r+0x60>
 800b04c:	2a25      	cmp	r2, #37	@ 0x25
 800b04e:	d1f9      	bne.n	800b044 <_svfiprintf_r+0x54>
 800b050:	ebba 0b04 	subs.w	fp, sl, r4
 800b054:	d00b      	beq.n	800b06e <_svfiprintf_r+0x7e>
 800b056:	465b      	mov	r3, fp
 800b058:	4622      	mov	r2, r4
 800b05a:	4629      	mov	r1, r5
 800b05c:	4638      	mov	r0, r7
 800b05e:	f7ff ff6b 	bl	800af38 <__ssputs_r>
 800b062:	3001      	adds	r0, #1
 800b064:	f000 80a7 	beq.w	800b1b6 <_svfiprintf_r+0x1c6>
 800b068:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b06a:	445a      	add	r2, fp
 800b06c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b06e:	f89a 3000 	ldrb.w	r3, [sl]
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 809f 	beq.w	800b1b6 <_svfiprintf_r+0x1c6>
 800b078:	2300      	movs	r3, #0
 800b07a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b07e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b082:	f10a 0a01 	add.w	sl, sl, #1
 800b086:	9304      	str	r3, [sp, #16]
 800b088:	9307      	str	r3, [sp, #28]
 800b08a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b08e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b090:	4654      	mov	r4, sl
 800b092:	2205      	movs	r2, #5
 800b094:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b098:	484e      	ldr	r0, [pc, #312]	@ (800b1d4 <_svfiprintf_r+0x1e4>)
 800b09a:	f7f5 f8a9 	bl	80001f0 <memchr>
 800b09e:	9a04      	ldr	r2, [sp, #16]
 800b0a0:	b9d8      	cbnz	r0, 800b0da <_svfiprintf_r+0xea>
 800b0a2:	06d0      	lsls	r0, r2, #27
 800b0a4:	bf44      	itt	mi
 800b0a6:	2320      	movmi	r3, #32
 800b0a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0ac:	0711      	lsls	r1, r2, #28
 800b0ae:	bf44      	itt	mi
 800b0b0:	232b      	movmi	r3, #43	@ 0x2b
 800b0b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b0ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0bc:	d015      	beq.n	800b0ea <_svfiprintf_r+0xfa>
 800b0be:	9a07      	ldr	r2, [sp, #28]
 800b0c0:	4654      	mov	r4, sl
 800b0c2:	2000      	movs	r0, #0
 800b0c4:	f04f 0c0a 	mov.w	ip, #10
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0ce:	3b30      	subs	r3, #48	@ 0x30
 800b0d0:	2b09      	cmp	r3, #9
 800b0d2:	d94b      	bls.n	800b16c <_svfiprintf_r+0x17c>
 800b0d4:	b1b0      	cbz	r0, 800b104 <_svfiprintf_r+0x114>
 800b0d6:	9207      	str	r2, [sp, #28]
 800b0d8:	e014      	b.n	800b104 <_svfiprintf_r+0x114>
 800b0da:	eba0 0308 	sub.w	r3, r0, r8
 800b0de:	fa09 f303 	lsl.w	r3, r9, r3
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	9304      	str	r3, [sp, #16]
 800b0e6:	46a2      	mov	sl, r4
 800b0e8:	e7d2      	b.n	800b090 <_svfiprintf_r+0xa0>
 800b0ea:	9b03      	ldr	r3, [sp, #12]
 800b0ec:	1d19      	adds	r1, r3, #4
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	9103      	str	r1, [sp, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	bfbb      	ittet	lt
 800b0f6:	425b      	neglt	r3, r3
 800b0f8:	f042 0202 	orrlt.w	r2, r2, #2
 800b0fc:	9307      	strge	r3, [sp, #28]
 800b0fe:	9307      	strlt	r3, [sp, #28]
 800b100:	bfb8      	it	lt
 800b102:	9204      	strlt	r2, [sp, #16]
 800b104:	7823      	ldrb	r3, [r4, #0]
 800b106:	2b2e      	cmp	r3, #46	@ 0x2e
 800b108:	d10a      	bne.n	800b120 <_svfiprintf_r+0x130>
 800b10a:	7863      	ldrb	r3, [r4, #1]
 800b10c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b10e:	d132      	bne.n	800b176 <_svfiprintf_r+0x186>
 800b110:	9b03      	ldr	r3, [sp, #12]
 800b112:	1d1a      	adds	r2, r3, #4
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	9203      	str	r2, [sp, #12]
 800b118:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b11c:	3402      	adds	r4, #2
 800b11e:	9305      	str	r3, [sp, #20]
 800b120:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b1e4 <_svfiprintf_r+0x1f4>
 800b124:	7821      	ldrb	r1, [r4, #0]
 800b126:	2203      	movs	r2, #3
 800b128:	4650      	mov	r0, sl
 800b12a:	f7f5 f861 	bl	80001f0 <memchr>
 800b12e:	b138      	cbz	r0, 800b140 <_svfiprintf_r+0x150>
 800b130:	9b04      	ldr	r3, [sp, #16]
 800b132:	eba0 000a 	sub.w	r0, r0, sl
 800b136:	2240      	movs	r2, #64	@ 0x40
 800b138:	4082      	lsls	r2, r0
 800b13a:	4313      	orrs	r3, r2
 800b13c:	3401      	adds	r4, #1
 800b13e:	9304      	str	r3, [sp, #16]
 800b140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b144:	4824      	ldr	r0, [pc, #144]	@ (800b1d8 <_svfiprintf_r+0x1e8>)
 800b146:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b14a:	2206      	movs	r2, #6
 800b14c:	f7f5 f850 	bl	80001f0 <memchr>
 800b150:	2800      	cmp	r0, #0
 800b152:	d036      	beq.n	800b1c2 <_svfiprintf_r+0x1d2>
 800b154:	4b21      	ldr	r3, [pc, #132]	@ (800b1dc <_svfiprintf_r+0x1ec>)
 800b156:	bb1b      	cbnz	r3, 800b1a0 <_svfiprintf_r+0x1b0>
 800b158:	9b03      	ldr	r3, [sp, #12]
 800b15a:	3307      	adds	r3, #7
 800b15c:	f023 0307 	bic.w	r3, r3, #7
 800b160:	3308      	adds	r3, #8
 800b162:	9303      	str	r3, [sp, #12]
 800b164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b166:	4433      	add	r3, r6
 800b168:	9309      	str	r3, [sp, #36]	@ 0x24
 800b16a:	e76a      	b.n	800b042 <_svfiprintf_r+0x52>
 800b16c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b170:	460c      	mov	r4, r1
 800b172:	2001      	movs	r0, #1
 800b174:	e7a8      	b.n	800b0c8 <_svfiprintf_r+0xd8>
 800b176:	2300      	movs	r3, #0
 800b178:	3401      	adds	r4, #1
 800b17a:	9305      	str	r3, [sp, #20]
 800b17c:	4619      	mov	r1, r3
 800b17e:	f04f 0c0a 	mov.w	ip, #10
 800b182:	4620      	mov	r0, r4
 800b184:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b188:	3a30      	subs	r2, #48	@ 0x30
 800b18a:	2a09      	cmp	r2, #9
 800b18c:	d903      	bls.n	800b196 <_svfiprintf_r+0x1a6>
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d0c6      	beq.n	800b120 <_svfiprintf_r+0x130>
 800b192:	9105      	str	r1, [sp, #20]
 800b194:	e7c4      	b.n	800b120 <_svfiprintf_r+0x130>
 800b196:	fb0c 2101 	mla	r1, ip, r1, r2
 800b19a:	4604      	mov	r4, r0
 800b19c:	2301      	movs	r3, #1
 800b19e:	e7f0      	b.n	800b182 <_svfiprintf_r+0x192>
 800b1a0:	ab03      	add	r3, sp, #12
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	462a      	mov	r2, r5
 800b1a6:	4b0e      	ldr	r3, [pc, #56]	@ (800b1e0 <_svfiprintf_r+0x1f0>)
 800b1a8:	a904      	add	r1, sp, #16
 800b1aa:	4638      	mov	r0, r7
 800b1ac:	f3af 8000 	nop.w
 800b1b0:	1c42      	adds	r2, r0, #1
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	d1d6      	bne.n	800b164 <_svfiprintf_r+0x174>
 800b1b6:	89ab      	ldrh	r3, [r5, #12]
 800b1b8:	065b      	lsls	r3, r3, #25
 800b1ba:	f53f af2d 	bmi.w	800b018 <_svfiprintf_r+0x28>
 800b1be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1c0:	e72c      	b.n	800b01c <_svfiprintf_r+0x2c>
 800b1c2:	ab03      	add	r3, sp, #12
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	462a      	mov	r2, r5
 800b1c8:	4b05      	ldr	r3, [pc, #20]	@ (800b1e0 <_svfiprintf_r+0x1f0>)
 800b1ca:	a904      	add	r1, sp, #16
 800b1cc:	4638      	mov	r0, r7
 800b1ce:	f000 f9bb 	bl	800b548 <_printf_i>
 800b1d2:	e7ed      	b.n	800b1b0 <_svfiprintf_r+0x1c0>
 800b1d4:	0800be65 	.word	0x0800be65
 800b1d8:	0800be6f 	.word	0x0800be6f
 800b1dc:	00000000 	.word	0x00000000
 800b1e0:	0800af39 	.word	0x0800af39
 800b1e4:	0800be6b 	.word	0x0800be6b

0800b1e8 <__sfputc_r>:
 800b1e8:	6893      	ldr	r3, [r2, #8]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	b410      	push	{r4}
 800b1f0:	6093      	str	r3, [r2, #8]
 800b1f2:	da08      	bge.n	800b206 <__sfputc_r+0x1e>
 800b1f4:	6994      	ldr	r4, [r2, #24]
 800b1f6:	42a3      	cmp	r3, r4
 800b1f8:	db01      	blt.n	800b1fe <__sfputc_r+0x16>
 800b1fa:	290a      	cmp	r1, #10
 800b1fc:	d103      	bne.n	800b206 <__sfputc_r+0x1e>
 800b1fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b202:	f7ff bc00 	b.w	800aa06 <__swbuf_r>
 800b206:	6813      	ldr	r3, [r2, #0]
 800b208:	1c58      	adds	r0, r3, #1
 800b20a:	6010      	str	r0, [r2, #0]
 800b20c:	7019      	strb	r1, [r3, #0]
 800b20e:	4608      	mov	r0, r1
 800b210:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b214:	4770      	bx	lr

0800b216 <__sfputs_r>:
 800b216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b218:	4606      	mov	r6, r0
 800b21a:	460f      	mov	r7, r1
 800b21c:	4614      	mov	r4, r2
 800b21e:	18d5      	adds	r5, r2, r3
 800b220:	42ac      	cmp	r4, r5
 800b222:	d101      	bne.n	800b228 <__sfputs_r+0x12>
 800b224:	2000      	movs	r0, #0
 800b226:	e007      	b.n	800b238 <__sfputs_r+0x22>
 800b228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b22c:	463a      	mov	r2, r7
 800b22e:	4630      	mov	r0, r6
 800b230:	f7ff ffda 	bl	800b1e8 <__sfputc_r>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d1f3      	bne.n	800b220 <__sfputs_r+0xa>
 800b238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b23c <_vfiprintf_r>:
 800b23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b240:	460d      	mov	r5, r1
 800b242:	b09d      	sub	sp, #116	@ 0x74
 800b244:	4614      	mov	r4, r2
 800b246:	4698      	mov	r8, r3
 800b248:	4606      	mov	r6, r0
 800b24a:	b118      	cbz	r0, 800b254 <_vfiprintf_r+0x18>
 800b24c:	6a03      	ldr	r3, [r0, #32]
 800b24e:	b90b      	cbnz	r3, 800b254 <_vfiprintf_r+0x18>
 800b250:	f7ff fabc 	bl	800a7cc <__sinit>
 800b254:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b256:	07d9      	lsls	r1, r3, #31
 800b258:	d405      	bmi.n	800b266 <_vfiprintf_r+0x2a>
 800b25a:	89ab      	ldrh	r3, [r5, #12]
 800b25c:	059a      	lsls	r2, r3, #22
 800b25e:	d402      	bmi.n	800b266 <_vfiprintf_r+0x2a>
 800b260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b262:	f7ff fd3a 	bl	800acda <__retarget_lock_acquire_recursive>
 800b266:	89ab      	ldrh	r3, [r5, #12]
 800b268:	071b      	lsls	r3, r3, #28
 800b26a:	d501      	bpl.n	800b270 <_vfiprintf_r+0x34>
 800b26c:	692b      	ldr	r3, [r5, #16]
 800b26e:	b99b      	cbnz	r3, 800b298 <_vfiprintf_r+0x5c>
 800b270:	4629      	mov	r1, r5
 800b272:	4630      	mov	r0, r6
 800b274:	f7ff fc06 	bl	800aa84 <__swsetup_r>
 800b278:	b170      	cbz	r0, 800b298 <_vfiprintf_r+0x5c>
 800b27a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b27c:	07dc      	lsls	r4, r3, #31
 800b27e:	d504      	bpl.n	800b28a <_vfiprintf_r+0x4e>
 800b280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b284:	b01d      	add	sp, #116	@ 0x74
 800b286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28a:	89ab      	ldrh	r3, [r5, #12]
 800b28c:	0598      	lsls	r0, r3, #22
 800b28e:	d4f7      	bmi.n	800b280 <_vfiprintf_r+0x44>
 800b290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b292:	f7ff fd23 	bl	800acdc <__retarget_lock_release_recursive>
 800b296:	e7f3      	b.n	800b280 <_vfiprintf_r+0x44>
 800b298:	2300      	movs	r3, #0
 800b29a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b29c:	2320      	movs	r3, #32
 800b29e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2a6:	2330      	movs	r3, #48	@ 0x30
 800b2a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b458 <_vfiprintf_r+0x21c>
 800b2ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2b0:	f04f 0901 	mov.w	r9, #1
 800b2b4:	4623      	mov	r3, r4
 800b2b6:	469a      	mov	sl, r3
 800b2b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2bc:	b10a      	cbz	r2, 800b2c2 <_vfiprintf_r+0x86>
 800b2be:	2a25      	cmp	r2, #37	@ 0x25
 800b2c0:	d1f9      	bne.n	800b2b6 <_vfiprintf_r+0x7a>
 800b2c2:	ebba 0b04 	subs.w	fp, sl, r4
 800b2c6:	d00b      	beq.n	800b2e0 <_vfiprintf_r+0xa4>
 800b2c8:	465b      	mov	r3, fp
 800b2ca:	4622      	mov	r2, r4
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	f7ff ffa1 	bl	800b216 <__sfputs_r>
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	f000 80a7 	beq.w	800b428 <_vfiprintf_r+0x1ec>
 800b2da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2dc:	445a      	add	r2, fp
 800b2de:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 809f 	beq.w	800b428 <_vfiprintf_r+0x1ec>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b2f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2f4:	f10a 0a01 	add.w	sl, sl, #1
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	9307      	str	r3, [sp, #28]
 800b2fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b300:	931a      	str	r3, [sp, #104]	@ 0x68
 800b302:	4654      	mov	r4, sl
 800b304:	2205      	movs	r2, #5
 800b306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30a:	4853      	ldr	r0, [pc, #332]	@ (800b458 <_vfiprintf_r+0x21c>)
 800b30c:	f7f4 ff70 	bl	80001f0 <memchr>
 800b310:	9a04      	ldr	r2, [sp, #16]
 800b312:	b9d8      	cbnz	r0, 800b34c <_vfiprintf_r+0x110>
 800b314:	06d1      	lsls	r1, r2, #27
 800b316:	bf44      	itt	mi
 800b318:	2320      	movmi	r3, #32
 800b31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b31e:	0713      	lsls	r3, r2, #28
 800b320:	bf44      	itt	mi
 800b322:	232b      	movmi	r3, #43	@ 0x2b
 800b324:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b328:	f89a 3000 	ldrb.w	r3, [sl]
 800b32c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b32e:	d015      	beq.n	800b35c <_vfiprintf_r+0x120>
 800b330:	9a07      	ldr	r2, [sp, #28]
 800b332:	4654      	mov	r4, sl
 800b334:	2000      	movs	r0, #0
 800b336:	f04f 0c0a 	mov.w	ip, #10
 800b33a:	4621      	mov	r1, r4
 800b33c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b340:	3b30      	subs	r3, #48	@ 0x30
 800b342:	2b09      	cmp	r3, #9
 800b344:	d94b      	bls.n	800b3de <_vfiprintf_r+0x1a2>
 800b346:	b1b0      	cbz	r0, 800b376 <_vfiprintf_r+0x13a>
 800b348:	9207      	str	r2, [sp, #28]
 800b34a:	e014      	b.n	800b376 <_vfiprintf_r+0x13a>
 800b34c:	eba0 0308 	sub.w	r3, r0, r8
 800b350:	fa09 f303 	lsl.w	r3, r9, r3
 800b354:	4313      	orrs	r3, r2
 800b356:	9304      	str	r3, [sp, #16]
 800b358:	46a2      	mov	sl, r4
 800b35a:	e7d2      	b.n	800b302 <_vfiprintf_r+0xc6>
 800b35c:	9b03      	ldr	r3, [sp, #12]
 800b35e:	1d19      	adds	r1, r3, #4
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	9103      	str	r1, [sp, #12]
 800b364:	2b00      	cmp	r3, #0
 800b366:	bfbb      	ittet	lt
 800b368:	425b      	neglt	r3, r3
 800b36a:	f042 0202 	orrlt.w	r2, r2, #2
 800b36e:	9307      	strge	r3, [sp, #28]
 800b370:	9307      	strlt	r3, [sp, #28]
 800b372:	bfb8      	it	lt
 800b374:	9204      	strlt	r2, [sp, #16]
 800b376:	7823      	ldrb	r3, [r4, #0]
 800b378:	2b2e      	cmp	r3, #46	@ 0x2e
 800b37a:	d10a      	bne.n	800b392 <_vfiprintf_r+0x156>
 800b37c:	7863      	ldrb	r3, [r4, #1]
 800b37e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b380:	d132      	bne.n	800b3e8 <_vfiprintf_r+0x1ac>
 800b382:	9b03      	ldr	r3, [sp, #12]
 800b384:	1d1a      	adds	r2, r3, #4
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	9203      	str	r2, [sp, #12]
 800b38a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b38e:	3402      	adds	r4, #2
 800b390:	9305      	str	r3, [sp, #20]
 800b392:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b468 <_vfiprintf_r+0x22c>
 800b396:	7821      	ldrb	r1, [r4, #0]
 800b398:	2203      	movs	r2, #3
 800b39a:	4650      	mov	r0, sl
 800b39c:	f7f4 ff28 	bl	80001f0 <memchr>
 800b3a0:	b138      	cbz	r0, 800b3b2 <_vfiprintf_r+0x176>
 800b3a2:	9b04      	ldr	r3, [sp, #16]
 800b3a4:	eba0 000a 	sub.w	r0, r0, sl
 800b3a8:	2240      	movs	r2, #64	@ 0x40
 800b3aa:	4082      	lsls	r2, r0
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	3401      	adds	r4, #1
 800b3b0:	9304      	str	r3, [sp, #16]
 800b3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b6:	4829      	ldr	r0, [pc, #164]	@ (800b45c <_vfiprintf_r+0x220>)
 800b3b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3bc:	2206      	movs	r2, #6
 800b3be:	f7f4 ff17 	bl	80001f0 <memchr>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d03f      	beq.n	800b446 <_vfiprintf_r+0x20a>
 800b3c6:	4b26      	ldr	r3, [pc, #152]	@ (800b460 <_vfiprintf_r+0x224>)
 800b3c8:	bb1b      	cbnz	r3, 800b412 <_vfiprintf_r+0x1d6>
 800b3ca:	9b03      	ldr	r3, [sp, #12]
 800b3cc:	3307      	adds	r3, #7
 800b3ce:	f023 0307 	bic.w	r3, r3, #7
 800b3d2:	3308      	adds	r3, #8
 800b3d4:	9303      	str	r3, [sp, #12]
 800b3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3d8:	443b      	add	r3, r7
 800b3da:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3dc:	e76a      	b.n	800b2b4 <_vfiprintf_r+0x78>
 800b3de:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	2001      	movs	r0, #1
 800b3e6:	e7a8      	b.n	800b33a <_vfiprintf_r+0xfe>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	3401      	adds	r4, #1
 800b3ec:	9305      	str	r3, [sp, #20]
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	f04f 0c0a 	mov.w	ip, #10
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3fa:	3a30      	subs	r2, #48	@ 0x30
 800b3fc:	2a09      	cmp	r2, #9
 800b3fe:	d903      	bls.n	800b408 <_vfiprintf_r+0x1cc>
 800b400:	2b00      	cmp	r3, #0
 800b402:	d0c6      	beq.n	800b392 <_vfiprintf_r+0x156>
 800b404:	9105      	str	r1, [sp, #20]
 800b406:	e7c4      	b.n	800b392 <_vfiprintf_r+0x156>
 800b408:	fb0c 2101 	mla	r1, ip, r1, r2
 800b40c:	4604      	mov	r4, r0
 800b40e:	2301      	movs	r3, #1
 800b410:	e7f0      	b.n	800b3f4 <_vfiprintf_r+0x1b8>
 800b412:	ab03      	add	r3, sp, #12
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	462a      	mov	r2, r5
 800b418:	4b12      	ldr	r3, [pc, #72]	@ (800b464 <_vfiprintf_r+0x228>)
 800b41a:	a904      	add	r1, sp, #16
 800b41c:	4630      	mov	r0, r6
 800b41e:	f3af 8000 	nop.w
 800b422:	4607      	mov	r7, r0
 800b424:	1c78      	adds	r0, r7, #1
 800b426:	d1d6      	bne.n	800b3d6 <_vfiprintf_r+0x19a>
 800b428:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b42a:	07d9      	lsls	r1, r3, #31
 800b42c:	d405      	bmi.n	800b43a <_vfiprintf_r+0x1fe>
 800b42e:	89ab      	ldrh	r3, [r5, #12]
 800b430:	059a      	lsls	r2, r3, #22
 800b432:	d402      	bmi.n	800b43a <_vfiprintf_r+0x1fe>
 800b434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b436:	f7ff fc51 	bl	800acdc <__retarget_lock_release_recursive>
 800b43a:	89ab      	ldrh	r3, [r5, #12]
 800b43c:	065b      	lsls	r3, r3, #25
 800b43e:	f53f af1f 	bmi.w	800b280 <_vfiprintf_r+0x44>
 800b442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b444:	e71e      	b.n	800b284 <_vfiprintf_r+0x48>
 800b446:	ab03      	add	r3, sp, #12
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	462a      	mov	r2, r5
 800b44c:	4b05      	ldr	r3, [pc, #20]	@ (800b464 <_vfiprintf_r+0x228>)
 800b44e:	a904      	add	r1, sp, #16
 800b450:	4630      	mov	r0, r6
 800b452:	f000 f879 	bl	800b548 <_printf_i>
 800b456:	e7e4      	b.n	800b422 <_vfiprintf_r+0x1e6>
 800b458:	0800be65 	.word	0x0800be65
 800b45c:	0800be6f 	.word	0x0800be6f
 800b460:	00000000 	.word	0x00000000
 800b464:	0800b217 	.word	0x0800b217
 800b468:	0800be6b 	.word	0x0800be6b

0800b46c <_printf_common>:
 800b46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b470:	4616      	mov	r6, r2
 800b472:	4698      	mov	r8, r3
 800b474:	688a      	ldr	r2, [r1, #8]
 800b476:	690b      	ldr	r3, [r1, #16]
 800b478:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b47c:	4293      	cmp	r3, r2
 800b47e:	bfb8      	it	lt
 800b480:	4613      	movlt	r3, r2
 800b482:	6033      	str	r3, [r6, #0]
 800b484:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b488:	4607      	mov	r7, r0
 800b48a:	460c      	mov	r4, r1
 800b48c:	b10a      	cbz	r2, 800b492 <_printf_common+0x26>
 800b48e:	3301      	adds	r3, #1
 800b490:	6033      	str	r3, [r6, #0]
 800b492:	6823      	ldr	r3, [r4, #0]
 800b494:	0699      	lsls	r1, r3, #26
 800b496:	bf42      	ittt	mi
 800b498:	6833      	ldrmi	r3, [r6, #0]
 800b49a:	3302      	addmi	r3, #2
 800b49c:	6033      	strmi	r3, [r6, #0]
 800b49e:	6825      	ldr	r5, [r4, #0]
 800b4a0:	f015 0506 	ands.w	r5, r5, #6
 800b4a4:	d106      	bne.n	800b4b4 <_printf_common+0x48>
 800b4a6:	f104 0a19 	add.w	sl, r4, #25
 800b4aa:	68e3      	ldr	r3, [r4, #12]
 800b4ac:	6832      	ldr	r2, [r6, #0]
 800b4ae:	1a9b      	subs	r3, r3, r2
 800b4b0:	42ab      	cmp	r3, r5
 800b4b2:	dc26      	bgt.n	800b502 <_printf_common+0x96>
 800b4b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b4b8:	6822      	ldr	r2, [r4, #0]
 800b4ba:	3b00      	subs	r3, #0
 800b4bc:	bf18      	it	ne
 800b4be:	2301      	movne	r3, #1
 800b4c0:	0692      	lsls	r2, r2, #26
 800b4c2:	d42b      	bmi.n	800b51c <_printf_common+0xb0>
 800b4c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b4c8:	4641      	mov	r1, r8
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	47c8      	blx	r9
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	d01e      	beq.n	800b510 <_printf_common+0xa4>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	6922      	ldr	r2, [r4, #16]
 800b4d6:	f003 0306 	and.w	r3, r3, #6
 800b4da:	2b04      	cmp	r3, #4
 800b4dc:	bf02      	ittt	eq
 800b4de:	68e5      	ldreq	r5, [r4, #12]
 800b4e0:	6833      	ldreq	r3, [r6, #0]
 800b4e2:	1aed      	subeq	r5, r5, r3
 800b4e4:	68a3      	ldr	r3, [r4, #8]
 800b4e6:	bf0c      	ite	eq
 800b4e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4ec:	2500      	movne	r5, #0
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	bfc4      	itt	gt
 800b4f2:	1a9b      	subgt	r3, r3, r2
 800b4f4:	18ed      	addgt	r5, r5, r3
 800b4f6:	2600      	movs	r6, #0
 800b4f8:	341a      	adds	r4, #26
 800b4fa:	42b5      	cmp	r5, r6
 800b4fc:	d11a      	bne.n	800b534 <_printf_common+0xc8>
 800b4fe:	2000      	movs	r0, #0
 800b500:	e008      	b.n	800b514 <_printf_common+0xa8>
 800b502:	2301      	movs	r3, #1
 800b504:	4652      	mov	r2, sl
 800b506:	4641      	mov	r1, r8
 800b508:	4638      	mov	r0, r7
 800b50a:	47c8      	blx	r9
 800b50c:	3001      	adds	r0, #1
 800b50e:	d103      	bne.n	800b518 <_printf_common+0xac>
 800b510:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b518:	3501      	adds	r5, #1
 800b51a:	e7c6      	b.n	800b4aa <_printf_common+0x3e>
 800b51c:	18e1      	adds	r1, r4, r3
 800b51e:	1c5a      	adds	r2, r3, #1
 800b520:	2030      	movs	r0, #48	@ 0x30
 800b522:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b526:	4422      	add	r2, r4
 800b528:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b52c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b530:	3302      	adds	r3, #2
 800b532:	e7c7      	b.n	800b4c4 <_printf_common+0x58>
 800b534:	2301      	movs	r3, #1
 800b536:	4622      	mov	r2, r4
 800b538:	4641      	mov	r1, r8
 800b53a:	4638      	mov	r0, r7
 800b53c:	47c8      	blx	r9
 800b53e:	3001      	adds	r0, #1
 800b540:	d0e6      	beq.n	800b510 <_printf_common+0xa4>
 800b542:	3601      	adds	r6, #1
 800b544:	e7d9      	b.n	800b4fa <_printf_common+0x8e>
	...

0800b548 <_printf_i>:
 800b548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b54c:	7e0f      	ldrb	r7, [r1, #24]
 800b54e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b550:	2f78      	cmp	r7, #120	@ 0x78
 800b552:	4691      	mov	r9, r2
 800b554:	4680      	mov	r8, r0
 800b556:	460c      	mov	r4, r1
 800b558:	469a      	mov	sl, r3
 800b55a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b55e:	d807      	bhi.n	800b570 <_printf_i+0x28>
 800b560:	2f62      	cmp	r7, #98	@ 0x62
 800b562:	d80a      	bhi.n	800b57a <_printf_i+0x32>
 800b564:	2f00      	cmp	r7, #0
 800b566:	f000 80d2 	beq.w	800b70e <_printf_i+0x1c6>
 800b56a:	2f58      	cmp	r7, #88	@ 0x58
 800b56c:	f000 80b9 	beq.w	800b6e2 <_printf_i+0x19a>
 800b570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b574:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b578:	e03a      	b.n	800b5f0 <_printf_i+0xa8>
 800b57a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b57e:	2b15      	cmp	r3, #21
 800b580:	d8f6      	bhi.n	800b570 <_printf_i+0x28>
 800b582:	a101      	add	r1, pc, #4	@ (adr r1, 800b588 <_printf_i+0x40>)
 800b584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b588:	0800b5e1 	.word	0x0800b5e1
 800b58c:	0800b5f5 	.word	0x0800b5f5
 800b590:	0800b571 	.word	0x0800b571
 800b594:	0800b571 	.word	0x0800b571
 800b598:	0800b571 	.word	0x0800b571
 800b59c:	0800b571 	.word	0x0800b571
 800b5a0:	0800b5f5 	.word	0x0800b5f5
 800b5a4:	0800b571 	.word	0x0800b571
 800b5a8:	0800b571 	.word	0x0800b571
 800b5ac:	0800b571 	.word	0x0800b571
 800b5b0:	0800b571 	.word	0x0800b571
 800b5b4:	0800b6f5 	.word	0x0800b6f5
 800b5b8:	0800b61f 	.word	0x0800b61f
 800b5bc:	0800b6af 	.word	0x0800b6af
 800b5c0:	0800b571 	.word	0x0800b571
 800b5c4:	0800b571 	.word	0x0800b571
 800b5c8:	0800b717 	.word	0x0800b717
 800b5cc:	0800b571 	.word	0x0800b571
 800b5d0:	0800b61f 	.word	0x0800b61f
 800b5d4:	0800b571 	.word	0x0800b571
 800b5d8:	0800b571 	.word	0x0800b571
 800b5dc:	0800b6b7 	.word	0x0800b6b7
 800b5e0:	6833      	ldr	r3, [r6, #0]
 800b5e2:	1d1a      	adds	r2, r3, #4
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	6032      	str	r2, [r6, #0]
 800b5e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e09d      	b.n	800b730 <_printf_i+0x1e8>
 800b5f4:	6833      	ldr	r3, [r6, #0]
 800b5f6:	6820      	ldr	r0, [r4, #0]
 800b5f8:	1d19      	adds	r1, r3, #4
 800b5fa:	6031      	str	r1, [r6, #0]
 800b5fc:	0606      	lsls	r6, r0, #24
 800b5fe:	d501      	bpl.n	800b604 <_printf_i+0xbc>
 800b600:	681d      	ldr	r5, [r3, #0]
 800b602:	e003      	b.n	800b60c <_printf_i+0xc4>
 800b604:	0645      	lsls	r5, r0, #25
 800b606:	d5fb      	bpl.n	800b600 <_printf_i+0xb8>
 800b608:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b60c:	2d00      	cmp	r5, #0
 800b60e:	da03      	bge.n	800b618 <_printf_i+0xd0>
 800b610:	232d      	movs	r3, #45	@ 0x2d
 800b612:	426d      	negs	r5, r5
 800b614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b618:	4859      	ldr	r0, [pc, #356]	@ (800b780 <_printf_i+0x238>)
 800b61a:	230a      	movs	r3, #10
 800b61c:	e011      	b.n	800b642 <_printf_i+0xfa>
 800b61e:	6821      	ldr	r1, [r4, #0]
 800b620:	6833      	ldr	r3, [r6, #0]
 800b622:	0608      	lsls	r0, r1, #24
 800b624:	f853 5b04 	ldr.w	r5, [r3], #4
 800b628:	d402      	bmi.n	800b630 <_printf_i+0xe8>
 800b62a:	0649      	lsls	r1, r1, #25
 800b62c:	bf48      	it	mi
 800b62e:	b2ad      	uxthmi	r5, r5
 800b630:	2f6f      	cmp	r7, #111	@ 0x6f
 800b632:	4853      	ldr	r0, [pc, #332]	@ (800b780 <_printf_i+0x238>)
 800b634:	6033      	str	r3, [r6, #0]
 800b636:	bf14      	ite	ne
 800b638:	230a      	movne	r3, #10
 800b63a:	2308      	moveq	r3, #8
 800b63c:	2100      	movs	r1, #0
 800b63e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b642:	6866      	ldr	r6, [r4, #4]
 800b644:	60a6      	str	r6, [r4, #8]
 800b646:	2e00      	cmp	r6, #0
 800b648:	bfa2      	ittt	ge
 800b64a:	6821      	ldrge	r1, [r4, #0]
 800b64c:	f021 0104 	bicge.w	r1, r1, #4
 800b650:	6021      	strge	r1, [r4, #0]
 800b652:	b90d      	cbnz	r5, 800b658 <_printf_i+0x110>
 800b654:	2e00      	cmp	r6, #0
 800b656:	d04b      	beq.n	800b6f0 <_printf_i+0x1a8>
 800b658:	4616      	mov	r6, r2
 800b65a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b65e:	fb03 5711 	mls	r7, r3, r1, r5
 800b662:	5dc7      	ldrb	r7, [r0, r7]
 800b664:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b668:	462f      	mov	r7, r5
 800b66a:	42bb      	cmp	r3, r7
 800b66c:	460d      	mov	r5, r1
 800b66e:	d9f4      	bls.n	800b65a <_printf_i+0x112>
 800b670:	2b08      	cmp	r3, #8
 800b672:	d10b      	bne.n	800b68c <_printf_i+0x144>
 800b674:	6823      	ldr	r3, [r4, #0]
 800b676:	07df      	lsls	r7, r3, #31
 800b678:	d508      	bpl.n	800b68c <_printf_i+0x144>
 800b67a:	6923      	ldr	r3, [r4, #16]
 800b67c:	6861      	ldr	r1, [r4, #4]
 800b67e:	4299      	cmp	r1, r3
 800b680:	bfde      	ittt	le
 800b682:	2330      	movle	r3, #48	@ 0x30
 800b684:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b688:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b68c:	1b92      	subs	r2, r2, r6
 800b68e:	6122      	str	r2, [r4, #16]
 800b690:	f8cd a000 	str.w	sl, [sp]
 800b694:	464b      	mov	r3, r9
 800b696:	aa03      	add	r2, sp, #12
 800b698:	4621      	mov	r1, r4
 800b69a:	4640      	mov	r0, r8
 800b69c:	f7ff fee6 	bl	800b46c <_printf_common>
 800b6a0:	3001      	adds	r0, #1
 800b6a2:	d14a      	bne.n	800b73a <_printf_i+0x1f2>
 800b6a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6a8:	b004      	add	sp, #16
 800b6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	f043 0320 	orr.w	r3, r3, #32
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	4833      	ldr	r0, [pc, #204]	@ (800b784 <_printf_i+0x23c>)
 800b6b8:	2778      	movs	r7, #120	@ 0x78
 800b6ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	6831      	ldr	r1, [r6, #0]
 800b6c2:	061f      	lsls	r7, r3, #24
 800b6c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b6c8:	d402      	bmi.n	800b6d0 <_printf_i+0x188>
 800b6ca:	065f      	lsls	r7, r3, #25
 800b6cc:	bf48      	it	mi
 800b6ce:	b2ad      	uxthmi	r5, r5
 800b6d0:	6031      	str	r1, [r6, #0]
 800b6d2:	07d9      	lsls	r1, r3, #31
 800b6d4:	bf44      	itt	mi
 800b6d6:	f043 0320 	orrmi.w	r3, r3, #32
 800b6da:	6023      	strmi	r3, [r4, #0]
 800b6dc:	b11d      	cbz	r5, 800b6e6 <_printf_i+0x19e>
 800b6de:	2310      	movs	r3, #16
 800b6e0:	e7ac      	b.n	800b63c <_printf_i+0xf4>
 800b6e2:	4827      	ldr	r0, [pc, #156]	@ (800b780 <_printf_i+0x238>)
 800b6e4:	e7e9      	b.n	800b6ba <_printf_i+0x172>
 800b6e6:	6823      	ldr	r3, [r4, #0]
 800b6e8:	f023 0320 	bic.w	r3, r3, #32
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	e7f6      	b.n	800b6de <_printf_i+0x196>
 800b6f0:	4616      	mov	r6, r2
 800b6f2:	e7bd      	b.n	800b670 <_printf_i+0x128>
 800b6f4:	6833      	ldr	r3, [r6, #0]
 800b6f6:	6825      	ldr	r5, [r4, #0]
 800b6f8:	6961      	ldr	r1, [r4, #20]
 800b6fa:	1d18      	adds	r0, r3, #4
 800b6fc:	6030      	str	r0, [r6, #0]
 800b6fe:	062e      	lsls	r6, r5, #24
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	d501      	bpl.n	800b708 <_printf_i+0x1c0>
 800b704:	6019      	str	r1, [r3, #0]
 800b706:	e002      	b.n	800b70e <_printf_i+0x1c6>
 800b708:	0668      	lsls	r0, r5, #25
 800b70a:	d5fb      	bpl.n	800b704 <_printf_i+0x1bc>
 800b70c:	8019      	strh	r1, [r3, #0]
 800b70e:	2300      	movs	r3, #0
 800b710:	6123      	str	r3, [r4, #16]
 800b712:	4616      	mov	r6, r2
 800b714:	e7bc      	b.n	800b690 <_printf_i+0x148>
 800b716:	6833      	ldr	r3, [r6, #0]
 800b718:	1d1a      	adds	r2, r3, #4
 800b71a:	6032      	str	r2, [r6, #0]
 800b71c:	681e      	ldr	r6, [r3, #0]
 800b71e:	6862      	ldr	r2, [r4, #4]
 800b720:	2100      	movs	r1, #0
 800b722:	4630      	mov	r0, r6
 800b724:	f7f4 fd64 	bl	80001f0 <memchr>
 800b728:	b108      	cbz	r0, 800b72e <_printf_i+0x1e6>
 800b72a:	1b80      	subs	r0, r0, r6
 800b72c:	6060      	str	r0, [r4, #4]
 800b72e:	6863      	ldr	r3, [r4, #4]
 800b730:	6123      	str	r3, [r4, #16]
 800b732:	2300      	movs	r3, #0
 800b734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b738:	e7aa      	b.n	800b690 <_printf_i+0x148>
 800b73a:	6923      	ldr	r3, [r4, #16]
 800b73c:	4632      	mov	r2, r6
 800b73e:	4649      	mov	r1, r9
 800b740:	4640      	mov	r0, r8
 800b742:	47d0      	blx	sl
 800b744:	3001      	adds	r0, #1
 800b746:	d0ad      	beq.n	800b6a4 <_printf_i+0x15c>
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	079b      	lsls	r3, r3, #30
 800b74c:	d413      	bmi.n	800b776 <_printf_i+0x22e>
 800b74e:	68e0      	ldr	r0, [r4, #12]
 800b750:	9b03      	ldr	r3, [sp, #12]
 800b752:	4298      	cmp	r0, r3
 800b754:	bfb8      	it	lt
 800b756:	4618      	movlt	r0, r3
 800b758:	e7a6      	b.n	800b6a8 <_printf_i+0x160>
 800b75a:	2301      	movs	r3, #1
 800b75c:	4632      	mov	r2, r6
 800b75e:	4649      	mov	r1, r9
 800b760:	4640      	mov	r0, r8
 800b762:	47d0      	blx	sl
 800b764:	3001      	adds	r0, #1
 800b766:	d09d      	beq.n	800b6a4 <_printf_i+0x15c>
 800b768:	3501      	adds	r5, #1
 800b76a:	68e3      	ldr	r3, [r4, #12]
 800b76c:	9903      	ldr	r1, [sp, #12]
 800b76e:	1a5b      	subs	r3, r3, r1
 800b770:	42ab      	cmp	r3, r5
 800b772:	dcf2      	bgt.n	800b75a <_printf_i+0x212>
 800b774:	e7eb      	b.n	800b74e <_printf_i+0x206>
 800b776:	2500      	movs	r5, #0
 800b778:	f104 0619 	add.w	r6, r4, #25
 800b77c:	e7f5      	b.n	800b76a <_printf_i+0x222>
 800b77e:	bf00      	nop
 800b780:	0800be76 	.word	0x0800be76
 800b784:	0800be87 	.word	0x0800be87

0800b788 <__sflush_r>:
 800b788:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b790:	0716      	lsls	r6, r2, #28
 800b792:	4605      	mov	r5, r0
 800b794:	460c      	mov	r4, r1
 800b796:	d454      	bmi.n	800b842 <__sflush_r+0xba>
 800b798:	684b      	ldr	r3, [r1, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	dc02      	bgt.n	800b7a4 <__sflush_r+0x1c>
 800b79e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	dd48      	ble.n	800b836 <__sflush_r+0xae>
 800b7a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7a6:	2e00      	cmp	r6, #0
 800b7a8:	d045      	beq.n	800b836 <__sflush_r+0xae>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b7b0:	682f      	ldr	r7, [r5, #0]
 800b7b2:	6a21      	ldr	r1, [r4, #32]
 800b7b4:	602b      	str	r3, [r5, #0]
 800b7b6:	d030      	beq.n	800b81a <__sflush_r+0x92>
 800b7b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	0759      	lsls	r1, r3, #29
 800b7be:	d505      	bpl.n	800b7cc <__sflush_r+0x44>
 800b7c0:	6863      	ldr	r3, [r4, #4]
 800b7c2:	1ad2      	subs	r2, r2, r3
 800b7c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b7c6:	b10b      	cbz	r3, 800b7cc <__sflush_r+0x44>
 800b7c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b7ca:	1ad2      	subs	r2, r2, r3
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7d0:	6a21      	ldr	r1, [r4, #32]
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	47b0      	blx	r6
 800b7d6:	1c43      	adds	r3, r0, #1
 800b7d8:	89a3      	ldrh	r3, [r4, #12]
 800b7da:	d106      	bne.n	800b7ea <__sflush_r+0x62>
 800b7dc:	6829      	ldr	r1, [r5, #0]
 800b7de:	291d      	cmp	r1, #29
 800b7e0:	d82b      	bhi.n	800b83a <__sflush_r+0xb2>
 800b7e2:	4a2a      	ldr	r2, [pc, #168]	@ (800b88c <__sflush_r+0x104>)
 800b7e4:	410a      	asrs	r2, r1
 800b7e6:	07d6      	lsls	r6, r2, #31
 800b7e8:	d427      	bmi.n	800b83a <__sflush_r+0xb2>
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	6062      	str	r2, [r4, #4]
 800b7ee:	04d9      	lsls	r1, r3, #19
 800b7f0:	6922      	ldr	r2, [r4, #16]
 800b7f2:	6022      	str	r2, [r4, #0]
 800b7f4:	d504      	bpl.n	800b800 <__sflush_r+0x78>
 800b7f6:	1c42      	adds	r2, r0, #1
 800b7f8:	d101      	bne.n	800b7fe <__sflush_r+0x76>
 800b7fa:	682b      	ldr	r3, [r5, #0]
 800b7fc:	b903      	cbnz	r3, 800b800 <__sflush_r+0x78>
 800b7fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800b800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b802:	602f      	str	r7, [r5, #0]
 800b804:	b1b9      	cbz	r1, 800b836 <__sflush_r+0xae>
 800b806:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b80a:	4299      	cmp	r1, r3
 800b80c:	d002      	beq.n	800b814 <__sflush_r+0x8c>
 800b80e:	4628      	mov	r0, r5
 800b810:	f7ff fa92 	bl	800ad38 <_free_r>
 800b814:	2300      	movs	r3, #0
 800b816:	6363      	str	r3, [r4, #52]	@ 0x34
 800b818:	e00d      	b.n	800b836 <__sflush_r+0xae>
 800b81a:	2301      	movs	r3, #1
 800b81c:	4628      	mov	r0, r5
 800b81e:	47b0      	blx	r6
 800b820:	4602      	mov	r2, r0
 800b822:	1c50      	adds	r0, r2, #1
 800b824:	d1c9      	bne.n	800b7ba <__sflush_r+0x32>
 800b826:	682b      	ldr	r3, [r5, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d0c6      	beq.n	800b7ba <__sflush_r+0x32>
 800b82c:	2b1d      	cmp	r3, #29
 800b82e:	d001      	beq.n	800b834 <__sflush_r+0xac>
 800b830:	2b16      	cmp	r3, #22
 800b832:	d11e      	bne.n	800b872 <__sflush_r+0xea>
 800b834:	602f      	str	r7, [r5, #0]
 800b836:	2000      	movs	r0, #0
 800b838:	e022      	b.n	800b880 <__sflush_r+0xf8>
 800b83a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b83e:	b21b      	sxth	r3, r3
 800b840:	e01b      	b.n	800b87a <__sflush_r+0xf2>
 800b842:	690f      	ldr	r7, [r1, #16]
 800b844:	2f00      	cmp	r7, #0
 800b846:	d0f6      	beq.n	800b836 <__sflush_r+0xae>
 800b848:	0793      	lsls	r3, r2, #30
 800b84a:	680e      	ldr	r6, [r1, #0]
 800b84c:	bf08      	it	eq
 800b84e:	694b      	ldreq	r3, [r1, #20]
 800b850:	600f      	str	r7, [r1, #0]
 800b852:	bf18      	it	ne
 800b854:	2300      	movne	r3, #0
 800b856:	eba6 0807 	sub.w	r8, r6, r7
 800b85a:	608b      	str	r3, [r1, #8]
 800b85c:	f1b8 0f00 	cmp.w	r8, #0
 800b860:	dde9      	ble.n	800b836 <__sflush_r+0xae>
 800b862:	6a21      	ldr	r1, [r4, #32]
 800b864:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b866:	4643      	mov	r3, r8
 800b868:	463a      	mov	r2, r7
 800b86a:	4628      	mov	r0, r5
 800b86c:	47b0      	blx	r6
 800b86e:	2800      	cmp	r0, #0
 800b870:	dc08      	bgt.n	800b884 <__sflush_r+0xfc>
 800b872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b87a:	81a3      	strh	r3, [r4, #12]
 800b87c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b884:	4407      	add	r7, r0
 800b886:	eba8 0800 	sub.w	r8, r8, r0
 800b88a:	e7e7      	b.n	800b85c <__sflush_r+0xd4>
 800b88c:	dfbffffe 	.word	0xdfbffffe

0800b890 <_fflush_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	690b      	ldr	r3, [r1, #16]
 800b894:	4605      	mov	r5, r0
 800b896:	460c      	mov	r4, r1
 800b898:	b913      	cbnz	r3, 800b8a0 <_fflush_r+0x10>
 800b89a:	2500      	movs	r5, #0
 800b89c:	4628      	mov	r0, r5
 800b89e:	bd38      	pop	{r3, r4, r5, pc}
 800b8a0:	b118      	cbz	r0, 800b8aa <_fflush_r+0x1a>
 800b8a2:	6a03      	ldr	r3, [r0, #32]
 800b8a4:	b90b      	cbnz	r3, 800b8aa <_fflush_r+0x1a>
 800b8a6:	f7fe ff91 	bl	800a7cc <__sinit>
 800b8aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d0f3      	beq.n	800b89a <_fflush_r+0xa>
 800b8b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b8b4:	07d0      	lsls	r0, r2, #31
 800b8b6:	d404      	bmi.n	800b8c2 <_fflush_r+0x32>
 800b8b8:	0599      	lsls	r1, r3, #22
 800b8ba:	d402      	bmi.n	800b8c2 <_fflush_r+0x32>
 800b8bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8be:	f7ff fa0c 	bl	800acda <__retarget_lock_acquire_recursive>
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	4621      	mov	r1, r4
 800b8c6:	f7ff ff5f 	bl	800b788 <__sflush_r>
 800b8ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8cc:	07da      	lsls	r2, r3, #31
 800b8ce:	4605      	mov	r5, r0
 800b8d0:	d4e4      	bmi.n	800b89c <_fflush_r+0xc>
 800b8d2:	89a3      	ldrh	r3, [r4, #12]
 800b8d4:	059b      	lsls	r3, r3, #22
 800b8d6:	d4e1      	bmi.n	800b89c <_fflush_r+0xc>
 800b8d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8da:	f7ff f9ff 	bl	800acdc <__retarget_lock_release_recursive>
 800b8de:	e7dd      	b.n	800b89c <_fflush_r+0xc>

0800b8e0 <fiprintf>:
 800b8e0:	b40e      	push	{r1, r2, r3}
 800b8e2:	b503      	push	{r0, r1, lr}
 800b8e4:	4601      	mov	r1, r0
 800b8e6:	ab03      	add	r3, sp, #12
 800b8e8:	4805      	ldr	r0, [pc, #20]	@ (800b900 <fiprintf+0x20>)
 800b8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ee:	6800      	ldr	r0, [r0, #0]
 800b8f0:	9301      	str	r3, [sp, #4]
 800b8f2:	f7ff fca3 	bl	800b23c <_vfiprintf_r>
 800b8f6:	b002      	add	sp, #8
 800b8f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8fc:	b003      	add	sp, #12
 800b8fe:	4770      	bx	lr
 800b900:	20000024 	.word	0x20000024

0800b904 <__swhatbuf_r>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	460c      	mov	r4, r1
 800b908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b90c:	2900      	cmp	r1, #0
 800b90e:	b096      	sub	sp, #88	@ 0x58
 800b910:	4615      	mov	r5, r2
 800b912:	461e      	mov	r6, r3
 800b914:	da0d      	bge.n	800b932 <__swhatbuf_r+0x2e>
 800b916:	89a3      	ldrh	r3, [r4, #12]
 800b918:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b91c:	f04f 0100 	mov.w	r1, #0
 800b920:	bf14      	ite	ne
 800b922:	2340      	movne	r3, #64	@ 0x40
 800b924:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b928:	2000      	movs	r0, #0
 800b92a:	6031      	str	r1, [r6, #0]
 800b92c:	602b      	str	r3, [r5, #0]
 800b92e:	b016      	add	sp, #88	@ 0x58
 800b930:	bd70      	pop	{r4, r5, r6, pc}
 800b932:	466a      	mov	r2, sp
 800b934:	f000 f862 	bl	800b9fc <_fstat_r>
 800b938:	2800      	cmp	r0, #0
 800b93a:	dbec      	blt.n	800b916 <__swhatbuf_r+0x12>
 800b93c:	9901      	ldr	r1, [sp, #4]
 800b93e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b942:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b946:	4259      	negs	r1, r3
 800b948:	4159      	adcs	r1, r3
 800b94a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b94e:	e7eb      	b.n	800b928 <__swhatbuf_r+0x24>

0800b950 <__smakebuf_r>:
 800b950:	898b      	ldrh	r3, [r1, #12]
 800b952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b954:	079d      	lsls	r5, r3, #30
 800b956:	4606      	mov	r6, r0
 800b958:	460c      	mov	r4, r1
 800b95a:	d507      	bpl.n	800b96c <__smakebuf_r+0x1c>
 800b95c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	6123      	str	r3, [r4, #16]
 800b964:	2301      	movs	r3, #1
 800b966:	6163      	str	r3, [r4, #20]
 800b968:	b003      	add	sp, #12
 800b96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b96c:	ab01      	add	r3, sp, #4
 800b96e:	466a      	mov	r2, sp
 800b970:	f7ff ffc8 	bl	800b904 <__swhatbuf_r>
 800b974:	9f00      	ldr	r7, [sp, #0]
 800b976:	4605      	mov	r5, r0
 800b978:	4639      	mov	r1, r7
 800b97a:	4630      	mov	r0, r6
 800b97c:	f7ff fa50 	bl	800ae20 <_malloc_r>
 800b980:	b948      	cbnz	r0, 800b996 <__smakebuf_r+0x46>
 800b982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b986:	059a      	lsls	r2, r3, #22
 800b988:	d4ee      	bmi.n	800b968 <__smakebuf_r+0x18>
 800b98a:	f023 0303 	bic.w	r3, r3, #3
 800b98e:	f043 0302 	orr.w	r3, r3, #2
 800b992:	81a3      	strh	r3, [r4, #12]
 800b994:	e7e2      	b.n	800b95c <__smakebuf_r+0xc>
 800b996:	89a3      	ldrh	r3, [r4, #12]
 800b998:	6020      	str	r0, [r4, #0]
 800b99a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b99e:	81a3      	strh	r3, [r4, #12]
 800b9a0:	9b01      	ldr	r3, [sp, #4]
 800b9a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b9a6:	b15b      	cbz	r3, 800b9c0 <__smakebuf_r+0x70>
 800b9a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	f000 f837 	bl	800ba20 <_isatty_r>
 800b9b2:	b128      	cbz	r0, 800b9c0 <__smakebuf_r+0x70>
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	f023 0303 	bic.w	r3, r3, #3
 800b9ba:	f043 0301 	orr.w	r3, r3, #1
 800b9be:	81a3      	strh	r3, [r4, #12]
 800b9c0:	89a3      	ldrh	r3, [r4, #12]
 800b9c2:	431d      	orrs	r5, r3
 800b9c4:	81a5      	strh	r5, [r4, #12]
 800b9c6:	e7cf      	b.n	800b968 <__smakebuf_r+0x18>

0800b9c8 <memmove>:
 800b9c8:	4288      	cmp	r0, r1
 800b9ca:	b510      	push	{r4, lr}
 800b9cc:	eb01 0402 	add.w	r4, r1, r2
 800b9d0:	d902      	bls.n	800b9d8 <memmove+0x10>
 800b9d2:	4284      	cmp	r4, r0
 800b9d4:	4623      	mov	r3, r4
 800b9d6:	d807      	bhi.n	800b9e8 <memmove+0x20>
 800b9d8:	1e43      	subs	r3, r0, #1
 800b9da:	42a1      	cmp	r1, r4
 800b9dc:	d008      	beq.n	800b9f0 <memmove+0x28>
 800b9de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9e6:	e7f8      	b.n	800b9da <memmove+0x12>
 800b9e8:	4402      	add	r2, r0
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	428a      	cmp	r2, r1
 800b9ee:	d100      	bne.n	800b9f2 <memmove+0x2a>
 800b9f0:	bd10      	pop	{r4, pc}
 800b9f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9fa:	e7f7      	b.n	800b9ec <memmove+0x24>

0800b9fc <_fstat_r>:
 800b9fc:	b538      	push	{r3, r4, r5, lr}
 800b9fe:	4d07      	ldr	r5, [pc, #28]	@ (800ba1c <_fstat_r+0x20>)
 800ba00:	2300      	movs	r3, #0
 800ba02:	4604      	mov	r4, r0
 800ba04:	4608      	mov	r0, r1
 800ba06:	4611      	mov	r1, r2
 800ba08:	602b      	str	r3, [r5, #0]
 800ba0a:	f7f5 fead 	bl	8001768 <_fstat>
 800ba0e:	1c43      	adds	r3, r0, #1
 800ba10:	d102      	bne.n	800ba18 <_fstat_r+0x1c>
 800ba12:	682b      	ldr	r3, [r5, #0]
 800ba14:	b103      	cbz	r3, 800ba18 <_fstat_r+0x1c>
 800ba16:	6023      	str	r3, [r4, #0]
 800ba18:	bd38      	pop	{r3, r4, r5, pc}
 800ba1a:	bf00      	nop
 800ba1c:	2000180c 	.word	0x2000180c

0800ba20 <_isatty_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4d06      	ldr	r5, [pc, #24]	@ (800ba3c <_isatty_r+0x1c>)
 800ba24:	2300      	movs	r3, #0
 800ba26:	4604      	mov	r4, r0
 800ba28:	4608      	mov	r0, r1
 800ba2a:	602b      	str	r3, [r5, #0]
 800ba2c:	f7f5 feac 	bl	8001788 <_isatty>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d102      	bne.n	800ba3a <_isatty_r+0x1a>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	b103      	cbz	r3, 800ba3a <_isatty_r+0x1a>
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	bd38      	pop	{r3, r4, r5, pc}
 800ba3c:	2000180c 	.word	0x2000180c

0800ba40 <_sbrk_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4d06      	ldr	r5, [pc, #24]	@ (800ba5c <_sbrk_r+0x1c>)
 800ba44:	2300      	movs	r3, #0
 800ba46:	4604      	mov	r4, r0
 800ba48:	4608      	mov	r0, r1
 800ba4a:	602b      	str	r3, [r5, #0]
 800ba4c:	f7f5 feb4 	bl	80017b8 <_sbrk>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	d102      	bne.n	800ba5a <_sbrk_r+0x1a>
 800ba54:	682b      	ldr	r3, [r5, #0]
 800ba56:	b103      	cbz	r3, 800ba5a <_sbrk_r+0x1a>
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	bd38      	pop	{r3, r4, r5, pc}
 800ba5c:	2000180c 	.word	0x2000180c

0800ba60 <abort>:
 800ba60:	b508      	push	{r3, lr}
 800ba62:	2006      	movs	r0, #6
 800ba64:	f000 f85a 	bl	800bb1c <raise>
 800ba68:	2001      	movs	r0, #1
 800ba6a:	f7f5 fe2d 	bl	80016c8 <_exit>

0800ba6e <_realloc_r>:
 800ba6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba72:	4680      	mov	r8, r0
 800ba74:	4615      	mov	r5, r2
 800ba76:	460c      	mov	r4, r1
 800ba78:	b921      	cbnz	r1, 800ba84 <_realloc_r+0x16>
 800ba7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba7e:	4611      	mov	r1, r2
 800ba80:	f7ff b9ce 	b.w	800ae20 <_malloc_r>
 800ba84:	b92a      	cbnz	r2, 800ba92 <_realloc_r+0x24>
 800ba86:	f7ff f957 	bl	800ad38 <_free_r>
 800ba8a:	2400      	movs	r4, #0
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba92:	f000 f85f 	bl	800bb54 <_malloc_usable_size_r>
 800ba96:	4285      	cmp	r5, r0
 800ba98:	4606      	mov	r6, r0
 800ba9a:	d802      	bhi.n	800baa2 <_realloc_r+0x34>
 800ba9c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800baa0:	d8f4      	bhi.n	800ba8c <_realloc_r+0x1e>
 800baa2:	4629      	mov	r1, r5
 800baa4:	4640      	mov	r0, r8
 800baa6:	f7ff f9bb 	bl	800ae20 <_malloc_r>
 800baaa:	4607      	mov	r7, r0
 800baac:	2800      	cmp	r0, #0
 800baae:	d0ec      	beq.n	800ba8a <_realloc_r+0x1c>
 800bab0:	42b5      	cmp	r5, r6
 800bab2:	462a      	mov	r2, r5
 800bab4:	4621      	mov	r1, r4
 800bab6:	bf28      	it	cs
 800bab8:	4632      	movcs	r2, r6
 800baba:	f7ff f910 	bl	800acde <memcpy>
 800babe:	4621      	mov	r1, r4
 800bac0:	4640      	mov	r0, r8
 800bac2:	f7ff f939 	bl	800ad38 <_free_r>
 800bac6:	463c      	mov	r4, r7
 800bac8:	e7e0      	b.n	800ba8c <_realloc_r+0x1e>

0800baca <_raise_r>:
 800baca:	291f      	cmp	r1, #31
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4605      	mov	r5, r0
 800bad0:	460c      	mov	r4, r1
 800bad2:	d904      	bls.n	800bade <_raise_r+0x14>
 800bad4:	2316      	movs	r3, #22
 800bad6:	6003      	str	r3, [r0, #0]
 800bad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800badc:	bd38      	pop	{r3, r4, r5, pc}
 800bade:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bae0:	b112      	cbz	r2, 800bae8 <_raise_r+0x1e>
 800bae2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bae6:	b94b      	cbnz	r3, 800bafc <_raise_r+0x32>
 800bae8:	4628      	mov	r0, r5
 800baea:	f000 f831 	bl	800bb50 <_getpid_r>
 800baee:	4622      	mov	r2, r4
 800baf0:	4601      	mov	r1, r0
 800baf2:	4628      	mov	r0, r5
 800baf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baf8:	f000 b818 	b.w	800bb2c <_kill_r>
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d00a      	beq.n	800bb16 <_raise_r+0x4c>
 800bb00:	1c59      	adds	r1, r3, #1
 800bb02:	d103      	bne.n	800bb0c <_raise_r+0x42>
 800bb04:	2316      	movs	r3, #22
 800bb06:	6003      	str	r3, [r0, #0]
 800bb08:	2001      	movs	r0, #1
 800bb0a:	e7e7      	b.n	800badc <_raise_r+0x12>
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bb12:	4620      	mov	r0, r4
 800bb14:	4798      	blx	r3
 800bb16:	2000      	movs	r0, #0
 800bb18:	e7e0      	b.n	800badc <_raise_r+0x12>
	...

0800bb1c <raise>:
 800bb1c:	4b02      	ldr	r3, [pc, #8]	@ (800bb28 <raise+0xc>)
 800bb1e:	4601      	mov	r1, r0
 800bb20:	6818      	ldr	r0, [r3, #0]
 800bb22:	f7ff bfd2 	b.w	800baca <_raise_r>
 800bb26:	bf00      	nop
 800bb28:	20000024 	.word	0x20000024

0800bb2c <_kill_r>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4d07      	ldr	r5, [pc, #28]	@ (800bb4c <_kill_r+0x20>)
 800bb30:	2300      	movs	r3, #0
 800bb32:	4604      	mov	r4, r0
 800bb34:	4608      	mov	r0, r1
 800bb36:	4611      	mov	r1, r2
 800bb38:	602b      	str	r3, [r5, #0]
 800bb3a:	f7f5 fdb5 	bl	80016a8 <_kill>
 800bb3e:	1c43      	adds	r3, r0, #1
 800bb40:	d102      	bne.n	800bb48 <_kill_r+0x1c>
 800bb42:	682b      	ldr	r3, [r5, #0]
 800bb44:	b103      	cbz	r3, 800bb48 <_kill_r+0x1c>
 800bb46:	6023      	str	r3, [r4, #0]
 800bb48:	bd38      	pop	{r3, r4, r5, pc}
 800bb4a:	bf00      	nop
 800bb4c:	2000180c 	.word	0x2000180c

0800bb50 <_getpid_r>:
 800bb50:	f7f5 bda2 	b.w	8001698 <_getpid>

0800bb54 <_malloc_usable_size_r>:
 800bb54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb58:	1f18      	subs	r0, r3, #4
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	bfbc      	itt	lt
 800bb5e:	580b      	ldrlt	r3, [r1, r0]
 800bb60:	18c0      	addlt	r0, r0, r3
 800bb62:	4770      	bx	lr

0800bb64 <_init>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	bf00      	nop
 800bb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6a:	bc08      	pop	{r3}
 800bb6c:	469e      	mov	lr, r3
 800bb6e:	4770      	bx	lr

0800bb70 <_fini>:
 800bb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb72:	bf00      	nop
 800bb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb76:	bc08      	pop	{r3}
 800bb78:	469e      	mov	lr, r3
 800bb7a:	4770      	bx	lr
