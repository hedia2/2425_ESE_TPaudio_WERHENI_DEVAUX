
TP Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b140  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  0800b2d0  0800b2d0  0000c2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b614  0800b614  0000d06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b614  0800b614  0000c614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b61c  0800b61c  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b61c  0800b61c  0000c61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b620  0800b620  0000c620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800b624  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014dc  2000006c  0800b690  0000d06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001548  0800b690  0000d548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d739  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b49  00000000  00000000  0002a7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  0002f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012bd  00000000  00000000  00030b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c1c3  00000000  00000000  00031e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021ff7  00000000  00000000  0005e000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa800  00000000  00000000  0007fff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017a7f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ebc  00000000  00000000  0017a83c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001816f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2b8 	.word	0x0800b2b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800b2b8 	.word	0x0800b2b8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MCP23S17_WriteRegister>:
#include "components/MCP23S17.h"




HAL_StatusTypeDef MCP23S17_WriteRegister(uint8_t reg, uint8_t data){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
	uint8_t pData[3];

	pData[0] = MCP23S17_ADDR;
 8000590:	2340      	movs	r3, #64	@ 0x40
 8000592:	733b      	strb	r3, [r7, #12]
	pData[1] = reg;
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	737b      	strb	r3, [r7, #13]
	pData[2] = data;
 8000598:	79bb      	ldrb	r3, [r7, #6]
 800059a:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(CS_Vu_GPIO_Port, CS_Vu_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2180      	movs	r1, #128	@ 0x80
 80005a0:	480e      	ldr	r0, [pc, #56]	@ (80005dc <MCP23S17_WriteRegister+0x5c>)
 80005a2:	f001 ffd1 	bl	8002548 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80005a6:	200a      	movs	r0, #10
 80005a8:	f001 fa78 	bl	8001a9c <HAL_Delay>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&MCP23S17_SPI, pData, 3, HAL_MAX_DELAY);
 80005ac:	f107 010c 	add.w	r1, r7, #12
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	2203      	movs	r2, #3
 80005b6:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <MCP23S17_WriteRegister+0x60>)
 80005b8:	f005 fd94 	bl	80060e4 <HAL_SPI_Transmit>
 80005bc:	4603      	mov	r3, r0
 80005be:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80005c0:	200a      	movs	r0, #10
 80005c2:	f001 fa6b 	bl	8001a9c <HAL_Delay>
	HAL_GPIO_WritePin(CS_Vu_GPIO_Port, CS_Vu_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	4804      	ldr	r0, [pc, #16]	@ (80005dc <MCP23S17_WriteRegister+0x5c>)
 80005cc:	f001 ffbc 	bl	8002548 <HAL_GPIO_WritePin>
	return ret;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	48000400 	.word	0x48000400
 80005e0:	200005fc 	.word	0x200005fc

080005e4 <MCP23S17_Init>:

void MCP23S17_Init()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_Vu_GPIO_Port, RESET_Vu_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2101      	movs	r1, #1
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f0:	f001 ffaa 	bl	8002548 <HAL_GPIO_WritePin>
	MCP23S17_WriteRegister(IODIRA, CONFIG);
 80005f4:	2100      	movs	r1, #0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff ffc2 	bl	8000580 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(IODIRB, CONFIG);
 80005fc:	2100      	movs	r1, #0
 80005fe:	2001      	movs	r0, #1
 8000600:	f7ff ffbe 	bl	8000580 <MCP23S17_WriteRegister>
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <chenillard>:


void chenillard(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
    // Supposons que vous avez 8 LEDs (A0 à A7 sur le MCP23S17)
    for (int i = 0; i < 8; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	e025      	b.n	8000660 <chenillard+0x58>
        // Allumer la LED correspondante (i)
    	MCP23S17_WriteRegister(0x12, ~(1 << i)); // Éteindre toutes les autres LEDs
 8000614:	2201      	movs	r2, #1
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	fa02 f303 	lsl.w	r3, r2, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	43db      	mvns	r3, r3
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4619      	mov	r1, r3
 8000624:	2012      	movs	r0, #18
 8000626:	f7ff ffab 	bl	8000580 <MCP23S17_WriteRegister>
    	MCP23S17_WriteRegister(0x13, ~(1 << i));
 800062a:	2201      	movs	r2, #1
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	43db      	mvns	r3, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	4619      	mov	r1, r3
 800063a:	2013      	movs	r0, #19
 800063c:	f7ff ffa0 	bl	8000580 <MCP23S17_WriteRegister>
        printf("LED %d allumée\r\n", i + 1);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	4619      	mov	r1, r3
 8000646:	480a      	ldr	r0, [pc, #40]	@ (8000670 <chenillard+0x68>)
 8000648:	f009 fca0 	bl	8009f8c <iprintf>
        HAL_Delay(100); // Attendre 100 ms
 800064c:	2064      	movs	r0, #100	@ 0x64
 800064e:	f001 fa25 	bl	8001a9c <HAL_Delay>

        // Éteindre la LED actuelle avant de passer à la suivante
        MCP23S17_WriteRegister(0x12, 0xFF); // Éteindre toutes les LEDs
 8000652:	21ff      	movs	r1, #255	@ 0xff
 8000654:	2012      	movs	r0, #18
 8000656:	f7ff ff93 	bl	8000580 <MCP23S17_WriteRegister>
    for (int i = 0; i < 8; i++) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3301      	adds	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b07      	cmp	r3, #7
 8000664:	ddd6      	ble.n	8000614 <chenillard+0xc>
    }
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	0800b2d0 	.word	0x0800b2d0

08000674 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800067a:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <MX_DMA_Init+0x48>)
 800067c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800067e:	4a0f      	ldr	r2, [pc, #60]	@ (80006bc <MX_DMA_Init+0x48>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6493      	str	r3, [r2, #72]	@ 0x48
 8000686:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <MX_DMA_Init+0x48>)
 8000688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2105      	movs	r1, #5
 8000696:	2010      	movs	r0, #16
 8000698:	f001 faff 	bl	8001c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800069c:	2010      	movs	r0, #16
 800069e:	f001 fb18 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2105      	movs	r1, #5
 80006a6:	2011      	movs	r0, #17
 80006a8:	f001 faf7 	bl	8001c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006ac:	2011      	movs	r0, #17
 80006ae:	f001 fb10 	bl	8001cd2 <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <drv_uart2_receive>:


extern SemaphoreHandle_t sem_usart1;

uint8_t drv_uart2_receive(char * pData, uint16_t size)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart2, (uint8_t*)(pData), size);
 80006cc:	887b      	ldrh	r3, [r7, #2]
 80006ce:	461a      	mov	r2, r3
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	4807      	ldr	r0, [pc, #28]	@ (80006f0 <drv_uart2_receive+0x30>)
 80006d4:	f006 f8b8 	bl	8006848 <HAL_UART_Receive_IT>
	xSemaphoreTake(sem_usart1, portMAX_DELAY);
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <drv_uart2_receive+0x34>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f04f 31ff 	mov.w	r1, #4294967295
 80006e0:	4618      	mov	r0, r3
 80006e2:	f007 fe4b 	bl	800837c <xQueueSemaphoreTake>
	return 0;	// Life's too short for error management
 80006e6:	2300      	movs	r3, #0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000664 	.word	0x20000664
 80006f4:	200005f8 	.word	0x200005f8

080006f8 <drv_uart2_transmit>:

uint8_t drv_uart2_transmit(const char * pData, uint16_t size)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8000704:	887a      	ldrh	r2, [r7, #2]
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	4803      	ldr	r0, [pc, #12]	@ (800071c <drv_uart2_transmit+0x24>)
 800070e:	f006 f811 	bl	8006734 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000664 	.word	0x20000664

08000720 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4a07      	ldr	r2, [pc, #28]	@ (800074c <vApplicationGetIdleTaskMemory+0x2c>)
 8000730:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	4a06      	ldr	r2, [pc, #24]	@ (8000750 <vApplicationGetIdleTaskMemory+0x30>)
 8000736:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2280      	movs	r2, #128	@ 0x80
 800073c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	2000008c 	.word	0x2000008c
 8000750:	200000e0 	.word	0x200000e0

08000754 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000754:	b5b0      	push	{r4, r5, r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800075a:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <MX_FREERTOS_Init+0x30>)
 800075c:	1d3c      	adds	r4, r7, #4
 800075e:	461d      	mov	r5, r3
 8000760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000764:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000768:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f007 fb9a 	bl	8007eaa <osThreadCreate>
 8000776:	4603      	mov	r3, r0
 8000778:	4a03      	ldr	r2, [pc, #12]	@ (8000788 <MX_FREERTOS_Init+0x34>)
 800077a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800077c:	bf00      	nop
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bdb0      	pop	{r4, r5, r7, pc}
 8000784:	0800b2f0 	.word	0x0800b2f0
 8000788:	20000088 	.word	0x20000088

0800078c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000794:	2001      	movs	r0, #1
 8000796:	f007 fbd4 	bl	8007f42 <osDelay>
 800079a:	e7fb      	b.n	8000794 <StartDefaultTask+0x8>

0800079c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b38      	ldr	r3, [pc, #224]	@ (8000894 <MX_GPIO_Init+0xf8>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	4a37      	ldr	r2, [pc, #220]	@ (8000894 <MX_GPIO_Init+0xf8>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007be:	4b35      	ldr	r3, [pc, #212]	@ (8000894 <MX_GPIO_Init+0xf8>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	4b32      	ldr	r3, [pc, #200]	@ (8000894 <MX_GPIO_Init+0xf8>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	4a31      	ldr	r2, [pc, #196]	@ (8000894 <MX_GPIO_Init+0xf8>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <MX_GPIO_Init+0xf8>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <MX_GPIO_Init+0xf8>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a2b      	ldr	r2, [pc, #172]	@ (8000894 <MX_GPIO_Init+0xf8>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ee:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <MX_GPIO_Init+0xf8>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <MX_GPIO_Init+0xf8>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	4a25      	ldr	r2, [pc, #148]	@ (8000894 <MX_GPIO_Init+0xf8>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000806:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <MX_GPIO_Init+0xf8>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_Vu_GPIO_Port, RESET_Vu_Pin, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2101      	movs	r1, #1
 8000816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081a:	f001 fe95 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2120      	movs	r1, #32
 8000822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000826:	f001 fe8f 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_Vu_GPIO_Port, CS_Vu_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	481a      	ldr	r0, [pc, #104]	@ (8000898 <MX_GPIO_Init+0xfc>)
 8000830:	f001 fe8a 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000834:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800083a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	4814      	ldr	r0, [pc, #80]	@ (800089c <MX_GPIO_Init+0x100>)
 800084c:	f001 fcd2 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RESET_Vu_Pin|LD2_Pin;
 8000850:	2321      	movs	r3, #33	@ 0x21
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086a:	f001 fcc3 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Vu_Pin;
 800086e:	2380      	movs	r3, #128	@ 0x80
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_Vu_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_GPIO_Init+0xfc>)
 8000886:	f001 fcb5 	bl	80021f4 <HAL_GPIO_Init>

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	@ 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000
 8000898:	48000400 	.word	0x48000400
 800089c:	48000800 	.word	0x48000800

080008a0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <MX_I2C2_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008ac:	4a1b      	ldr	r2, [pc, #108]	@ (800091c <MX_I2C2_Init+0x7c>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008da:	480e      	ldr	r0, [pc, #56]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008dc:	f001 fe66 	bl	80025ac <HAL_I2C_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008e6:	f000 f9fd 	bl	8000ce4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4809      	ldr	r0, [pc, #36]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008ee:	f002 fa81 	bl	8002df4 <HAL_I2CEx_ConfigAnalogFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008f8:	f000 f9f4 	bl	8000ce4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_I2C2_Init+0x74>)
 8000900:	f002 fac3 	bl	8002e8a <HAL_I2CEx_ConfigDigitalFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 f9eb 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200002e0 	.word	0x200002e0
 8000918:	40005800 	.word	0x40005800
 800091c:	10d19ce4 	.word	0x10d19ce4

08000920 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b0ac      	sub	sp, #176	@ 0xb0
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2288      	movs	r2, #136	@ 0x88
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f009 fc9f 	bl	800a284 <memset>
  if(i2cHandle->Instance==I2C2)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a21      	ldr	r2, [pc, #132]	@ (80009d0 <HAL_I2C_MspInit+0xb0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d13b      	bne.n	80009c8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000950:	2380      	movs	r3, #128	@ 0x80
 8000952:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000954:	2300      	movs	r3, #0
 8000956:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f003 f945 	bl	8003bec <HAL_RCCEx_PeriphCLKConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000968:	f000 f9bc 	bl	8000ce4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <HAL_I2C_MspInit+0xb4>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000970:	4a18      	ldr	r2, [pc, #96]	@ (80009d4 <HAL_I2C_MspInit+0xb4>)
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000978:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <HAL_I2C_MspInit+0xb4>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000984:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000988:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098c:	2312      	movs	r3, #18
 800098e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800099e:	2304      	movs	r3, #4
 80009a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009a8:	4619      	mov	r1, r3
 80009aa:	480b      	ldr	r0, [pc, #44]	@ (80009d8 <HAL_I2C_MspInit+0xb8>)
 80009ac:	f001 fc22 	bl	80021f4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_I2C_MspInit+0xb4>)
 80009b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b4:	4a07      	ldr	r2, [pc, #28]	@ (80009d4 <HAL_I2C_MspInit+0xb4>)
 80009b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <HAL_I2C_MspInit+0xb4>)
 80009be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80009c8:	bf00      	nop
 80009ca:	37b0      	adds	r7, #176	@ 0xb0
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40005800 	.word	0x40005800
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000400 	.word	0x48000400

080009dc <Generate_Triangle_Wave>:
#define SAMPLES 100

#define BUFFER_SIZE 100
uint16_t audio_buffer[BUFFER_SIZE];

void Generate_Triangle_Wave(void) {
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
    for (int i = 0; i < BUFFER_SIZE / 2; i++) {
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	e014      	b.n	8000a12 <Generate_Triangle_Wave+0x36>
        audio_buffer[i] = i * (65535 / (BUFFER_SIZE / 2));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	461a      	mov	r2, r3
 80009ee:	0192      	lsls	r2, r2, #6
 80009f0:	441a      	add	r2, r3
 80009f2:	0052      	lsls	r2, r2, #1
 80009f4:	4413      	add	r3, r2
 80009f6:	461a      	mov	r2, r3
 80009f8:	0091      	lsls	r1, r2, #2
 80009fa:	461a      	mov	r2, r3
 80009fc:	460b      	mov	r3, r1
 80009fe:	4413      	add	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	b299      	uxth	r1, r3
 8000a04:	4a18      	ldr	r2, [pc, #96]	@ (8000a68 <Generate_Triangle_Wave+0x8c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < BUFFER_SIZE / 2; i++) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b31      	cmp	r3, #49	@ 0x31
 8000a16:	dde7      	ble.n	80009e8 <Generate_Triangle_Wave+0xc>
    }
    for (int i = BUFFER_SIZE / 2; i < BUFFER_SIZE; i++) {
 8000a18:	2332      	movs	r3, #50	@ 0x32
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	e019      	b.n	8000a52 <Generate_Triangle_Wave+0x76>
        audio_buffer[i] = 65535 - (i - BUFFER_SIZE / 2) * (65535 / (BUFFER_SIZE / 2));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	3b32      	subs	r3, #50	@ 0x32
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	461a      	mov	r2, r3
 8000a26:	0112      	lsls	r2, r2, #4
 8000a28:	1ad2      	subs	r2, r2, r3
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	1ad2      	subs	r2, r2, r3
 8000a2e:	0152      	lsls	r2, r2, #5
 8000a30:	4413      	add	r3, r2
 8000a32:	461a      	mov	r2, r3
 8000a34:	0111      	lsls	r1, r2, #4
 8000a36:	461a      	mov	r2, r3
 8000a38:	460b      	mov	r3, r1
 8000a3a:	4413      	add	r3, r2
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	3b01      	subs	r3, #1
 8000a42:	b299      	uxth	r1, r3
 8000a44:	4a08      	ldr	r2, [pc, #32]	@ (8000a68 <Generate_Triangle_Wave+0x8c>)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = BUFFER_SIZE / 2; i < BUFFER_SIZE; i++) {
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2b63      	cmp	r3, #99	@ 0x63
 8000a56:	dde2      	ble.n	8000a1e <Generate_Triangle_Wave+0x42>
    }
}
 8000a58:	bf00      	nop
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000394 	.word	0x20000394

08000a6c <getCHIP_ID>:



uint16_t getCHIP_ID(uint8_t reg, uint8_t I2C_addr)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af04      	add	r7, sp, #16
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]
   uint16_t data = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	81bb      	strh	r3, [r7, #12]
   HAL_StatusTypeDef status;

   status = HAL_I2C_Mem_Read(&hi2c2, I2C_addr, reg, I2C_MEMADD_SIZE_8BIT, &data, 2, HAL_MAX_DELAY);
 8000a80:	79bb      	ldrb	r3, [r7, #6]
 8000a82:	b299      	uxth	r1, r3
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	9302      	str	r3, [sp, #8]
 8000a8e:	2302      	movs	r3, #2
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	4808      	ldr	r0, [pc, #32]	@ (8000abc <getCHIP_ID+0x50>)
 8000a9c:	f001 fe22 	bl	80026e4 <HAL_I2C_Mem_Read>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	73fb      	strb	r3, [r7, #15]
   if (status != HAL_OK){
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d002      	beq.n	8000ab0 <getCHIP_ID+0x44>
       return -1;
 8000aaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000aae:	e000      	b.n	8000ab2 <getCHIP_ID+0x46>
   }
   return data;
 8000ab0:	89bb      	ldrh	r3, [r7, #12]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200002e0 	.word	0x200002e0

08000ac0 <task_usart1IT>:
		shell_run(&h_shell);

	}
}

void task_usart1IT(void){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0

	//shell_init(&h_shell);
	printf("partie d'interruption \r\n");
 8000ac4:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <task_usart1IT+0x14>)
 8000ac6:	f009 fac9 	bl	800a05c <puts>
	shell_run(&h_shell);
 8000aca:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <task_usart1IT+0x18>)
 8000acc:	f000 fc48 	bl	8001360 <shell_run>

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	0800b30c 	.word	0x0800b30c
 8000ad8:	20000334 	.word	0x20000334

08000adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae2:	f000 ff5f 	bl	80019a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae6:	f000 f85f 	bl	8000ba8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000aea:	f000 f8ae 	bl	8000c4a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aee:	f7ff fe55 	bl	800079c <MX_GPIO_Init>
  MX_DMA_Init();
 8000af2:	f7ff fdbf 	bl	8000674 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000af6:	f000 fe97 	bl	8001828 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000afa:	f000 fc8f 	bl	800141c <MX_SPI3_Init>
  MX_I2C2_Init();
 8000afe:	f7ff fecf 	bl	80008a0 <MX_I2C2_Init>
  MX_SAI2_Init();
 8000b02:	f000 f8f5 	bl	8000cf0 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */

	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8000b06:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <main+0xac>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b88 <main+0xac>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000b14:	601a      	str	r2, [r3, #0]

	h_shell.drv.receive = drv_uart2_receive;
 8000b16:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <main+0xb0>)
 8000b18:	4a1d      	ldr	r2, [pc, #116]	@ (8000b90 <main+0xb4>)
 8000b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
	h_shell.drv.transmit = drv_uart2_transmit;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <main+0xb0>)
 8000b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8000b94 <main+0xb8>)
 8000b20:	659a      	str	r2, [r3, #88]	@ 0x58

	xTaskCreate(task_usart1IT, "task_usart1IT", 256, NULL, 1, NULL);
 8000b22:	2300      	movs	r3, #0
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	2301      	movs	r3, #1
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b30:	4919      	ldr	r1, [pc, #100]	@ (8000b98 <main+0xbc>)
 8000b32:	481a      	ldr	r0, [pc, #104]	@ (8000b9c <main+0xc0>)
 8000b34:	f007 fe12 	bl	800875c <xTaskCreate>

	//MCP23S17_Init();
	//sgtl5000_init();
	//MCP23S17_WriteRegister(MCP23S17_GPIOA, 0x00);

	Generate_Triangle_Wave();
 8000b38:	f7ff ff50 	bl	80009dc <Generate_Triangle_Wave>
	uint16_t chip_ID = getCHIP_ID(CODEC_ID_REG, CODEC_ADDR);
 8000b3c:	2114      	movs	r1, #20
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff ff94 	bl	8000a6c <getCHIP_ID>
 8000b44:	4603      	mov	r3, r0
 8000b46:	80fb      	strh	r3, [r7, #6]
*/



	// CHIP ID = 160
	shell_init(&h_shell);
 8000b48:	4810      	ldr	r0, [pc, #64]	@ (8000b8c <main+0xb0>)
 8000b4a:	f000 fb5b 	bl	8001204 <shell_init>
	//shell_run(&h_shell);
	//xTaskCreate(TAskFonction, "Task1", 128, NULL, osPriorityNormal, NULL);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b4e:	f7ff fe01 	bl	8000754 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b52:	f007 f9a3 	bl	8007e9c <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t *)audio_buffer, BUFFER_SIZE);
 8000b56:	2264      	movs	r2, #100	@ 0x64
 8000b58:	4911      	ldr	r1, [pc, #68]	@ (8000ba0 <main+0xc4>)
 8000b5a:	480b      	ldr	r0, [pc, #44]	@ (8000b88 <main+0xac>)
 8000b5c:	f004 fd6a 	bl	8005634 <HAL_SAI_Transmit_DMA>
		HAL_Delay(1000); // Transmission périodique
 8000b60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b64:	f000 ff9a 	bl	8001a9c <HAL_Delay>
		printf("Toggle Led... \r\n");
 8000b68:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <main+0xc8>)
 8000b6a:	f009 fa77 	bl	800a05c <puts>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b6e:	2120      	movs	r1, #32
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b74:	f001 fd00 	bl	8002578 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000b78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b7c:	f000 ff8e 	bl	8001a9c <HAL_Delay>
		chenillard();
 8000b80:	f7ff fd42 	bl	8000608 <chenillard>
		HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t *)audio_buffer, BUFFER_SIZE);
 8000b84:	bf00      	nop
 8000b86:	e7e6      	b.n	8000b56 <main+0x7a>
 8000b88:	2000045c 	.word	0x2000045c
 8000b8c:	20000334 	.word	0x20000334
 8000b90:	080006c1 	.word	0x080006c1
 8000b94:	080006f9 	.word	0x080006f9
 8000b98:	0800b324 	.word	0x0800b324
 8000b9c:	08000ac1 	.word	0x08000ac1
 8000ba0:	20000394 	.word	0x20000394
 8000ba4:	0800b334 	.word	0x0800b334

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b096      	sub	sp, #88	@ 0x58
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	2244      	movs	r2, #68	@ 0x44
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f009 fb64 	bl	800a284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bce:	f002 f9b7 	bl	8002f40 <HAL_PWREx_ControlVoltageScaling>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bd8:	f000 f884 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000be4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be6:	2310      	movs	r3, #16
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bea:	2302      	movs	r3, #2
 8000bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bf6:	230a      	movs	r3, #10
 8000bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 f9ee 	bl	8002fec <HAL_RCC_OscConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c16:	f000 f865 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c2e:	463b      	mov	r3, r7
 8000c30:	2104      	movs	r1, #4
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 fdb6 	bl	80037a4 <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c3e:	f000 f851 	bl	8000ce4 <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	3758      	adds	r7, #88	@ 0x58
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b0a2      	sub	sp, #136	@ 0x88
 8000c4e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	2288      	movs	r2, #136	@ 0x88
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f009 fb14 	bl	800a284 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000c5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c60:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	66bb      	str	r3, [r7, #104]	@ 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c66:	2302      	movs	r3, #2
 8000c68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000c6e:	2308      	movs	r3, #8
 8000c70:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c72:	2307      	movs	r3, #7
 8000c74:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000c7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c82:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c84:	463b      	mov	r3, r7
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 ffb0 	bl	8003bec <HAL_RCCEx_PeriphCLKConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000c92:	f000 f827 	bl	8000ce4 <Error_Handler>
  }
}
 8000c96:	bf00      	nop
 8000c98:	3788      	adds	r7, #136	@ 0x88
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

        // Traitez les données reçues (rx_buffer contient l'octet reçu)
    	BaseType_t higher_priority_task_woken = pdFALSE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
    	xSemaphoreGiveFromISR(sem_usart1, &higher_priority_task_woken);
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <HAL_UART_RxCpltCallback+0x3c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f107 020c 	add.w	r2, r7, #12
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f007 fad0 	bl	800825c <xQueueGiveFromISR>
    	portYIELD_FROM_ISR(higher_priority_task_woken);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d007      	beq.n	8000cd2 <HAL_UART_RxCpltCallback+0x32>
 8000cc2:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x40>)
 8000cc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	f3bf 8f4f 	dsb	sy
 8000cce:	f3bf 8f6f 	isb	sy

}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200005f8 	.word	0x200005f8
 8000ce0:	e000ed04 	.word	0xe000ed04

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <Error_Handler+0x8>

08000cf0 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8000da0 <MX_SAI2_Init+0xb0>)
 8000cf6:	4a2b      	ldr	r2, [pc, #172]	@ (8000da4 <MX_SAI2_Init+0xb4>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cfa:	4b29      	ldr	r3, [pc, #164]	@ (8000da0 <MX_SAI2_Init+0xb0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d00:	4b27      	ldr	r3, [pc, #156]	@ (8000da0 <MX_SAI2_Init+0xb0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d06:	4b26      	ldr	r3, [pc, #152]	@ (8000da0 <MX_SAI2_Init+0xb0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d0c:	4b24      	ldr	r3, [pc, #144]	@ (8000da0 <MX_SAI2_Init+0xb0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d12:	4b23      	ldr	r3, [pc, #140]	@ (8000da0 <MX_SAI2_Init+0xb0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000d18:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <MX_SAI2_Init+0xb0>)
 8000d1a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000d1e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <MX_SAI2_Init+0xb0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <MX_SAI2_Init+0xb0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <MX_SAI2_Init+0xb0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d32:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <MX_SAI2_Init+0xb0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000d38:	2302      	movs	r3, #2
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4818      	ldr	r0, [pc, #96]	@ (8000da0 <MX_SAI2_Init+0xb0>)
 8000d40:	f004 fa6e 	bl	8005220 <HAL_SAI_InitProtocol>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000d4a:	f7ff ffcb 	bl	8000ce4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <MX_SAI2_Init+0xb8>)
 8000d50:	4a16      	ldr	r2, [pc, #88]	@ (8000dac <MX_SAI2_Init+0xbc>)
 8000d52:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d54:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <MX_SAI2_Init+0xb8>)
 8000d56:	2203      	movs	r2, #3
 8000d58:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <MX_SAI2_Init+0xb8>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <MX_SAI2_Init+0xb8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <MX_SAI2_Init+0xb8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <MX_SAI2_Init+0xb8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d72:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <MX_SAI2_Init+0xb8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d78:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <MX_SAI2_Init+0xb8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <MX_SAI2_Init+0xb8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000d84:	2302      	movs	r3, #2
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4807      	ldr	r0, [pc, #28]	@ (8000da8 <MX_SAI2_Init+0xb8>)
 8000d8c:	f004 fa48 	bl	8005220 <HAL_SAI_InitProtocol>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000d96:	f7ff ffa5 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000045c 	.word	0x2000045c
 8000da4:	40015804 	.word	0x40015804
 8000da8:	200004e0 	.word	0x200004e0
 8000dac:	40015824 	.word	0x40015824

08000db0 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	@ 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a64      	ldr	r2, [pc, #400]	@ (8000f50 <HAL_SAI_MspInit+0x1a0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d15e      	bne.n	8000e80 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000dc2:	4b64      	ldr	r3, [pc, #400]	@ (8000f54 <HAL_SAI_MspInit+0x1a4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d113      	bne.n	8000df2 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000dca:	4b63      	ldr	r3, [pc, #396]	@ (8000f58 <HAL_SAI_MspInit+0x1a8>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dce:	4a62      	ldr	r2, [pc, #392]	@ (8000f58 <HAL_SAI_MspInit+0x1a8>)
 8000dd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dd6:	4b60      	ldr	r3, [pc, #384]	@ (8000f58 <HAL_SAI_MspInit+0x1a8>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2105      	movs	r1, #5
 8000de6:	204b      	movs	r0, #75	@ 0x4b
 8000de8:	f000 ff57 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000dec:	204b      	movs	r0, #75	@ 0x4b
 8000dee:	f000 ff70 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000df2:	4b58      	ldr	r3, [pc, #352]	@ (8000f54 <HAL_SAI_MspInit+0x1a4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	4a56      	ldr	r2, [pc, #344]	@ (8000f54 <HAL_SAI_MspInit+0x1a4>)
 8000dfa:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000dfc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e0e:	230d      	movs	r3, #13
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4850      	ldr	r0, [pc, #320]	@ (8000f5c <HAL_SAI_MspInit+0x1ac>)
 8000e1a:	f001 f9eb 	bl	80021f4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000e1e:	4b50      	ldr	r3, [pc, #320]	@ (8000f60 <HAL_SAI_MspInit+0x1b0>)
 8000e20:	4a50      	ldr	r2, [pc, #320]	@ (8000f64 <HAL_SAI_MspInit+0x1b4>)
 8000e22:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000e24:	4b4e      	ldr	r3, [pc, #312]	@ (8000f60 <HAL_SAI_MspInit+0x1b0>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e2a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f60 <HAL_SAI_MspInit+0x1b0>)
 8000e2c:	2210      	movs	r2, #16
 8000e2e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e30:	4b4b      	ldr	r3, [pc, #300]	@ (8000f60 <HAL_SAI_MspInit+0x1b0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000e36:	4b4a      	ldr	r3, [pc, #296]	@ (8000f60 <HAL_SAI_MspInit+0x1b0>)
 8000e38:	2280      	movs	r2, #128	@ 0x80
 8000e3a:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e3c:	4b48      	ldr	r3, [pc, #288]	@ (8000f60 <HAL_SAI_MspInit+0x1b0>)
 8000e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e42:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e44:	4b46      	ldr	r3, [pc, #280]	@ (8000f60 <HAL_SAI_MspInit+0x1b0>)
 8000e46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e4a:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000e4c:	4b44      	ldr	r3, [pc, #272]	@ (8000f60 <HAL_SAI_MspInit+0x1b0>)
 8000e4e:	2220      	movs	r2, #32
 8000e50:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000e52:	4b43      	ldr	r3, [pc, #268]	@ (8000f60 <HAL_SAI_MspInit+0x1b0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000e58:	4841      	ldr	r0, [pc, #260]	@ (8000f60 <HAL_SAI_MspInit+0x1b0>)
 8000e5a:	f000 ff55 	bl	8001d08 <HAL_DMA_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000e64:	f7ff ff3e 	bl	8000ce4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f60 <HAL_SAI_MspInit+0x1b0>)
 8000e6c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e6e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f60 <HAL_SAI_MspInit+0x1b0>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a3a      	ldr	r2, [pc, #232]	@ (8000f60 <HAL_SAI_MspInit+0x1b0>)
 8000e78:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000e7a:	4a39      	ldr	r2, [pc, #228]	@ (8000f60 <HAL_SAI_MspInit+0x1b0>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a38      	ldr	r2, [pc, #224]	@ (8000f68 <HAL_SAI_MspInit+0x1b8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d15e      	bne.n	8000f48 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000e8a:	4b32      	ldr	r3, [pc, #200]	@ (8000f54 <HAL_SAI_MspInit+0x1a4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d113      	bne.n	8000eba <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000e92:	4b31      	ldr	r3, [pc, #196]	@ (8000f58 <HAL_SAI_MspInit+0x1a8>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e96:	4a30      	ldr	r2, [pc, #192]	@ (8000f58 <HAL_SAI_MspInit+0x1a8>)
 8000e98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f58 <HAL_SAI_MspInit+0x1a8>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2105      	movs	r1, #5
 8000eae:	204b      	movs	r0, #75	@ 0x4b
 8000eb0:	f000 fef3 	bl	8001c9a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000eb4:	204b      	movs	r0, #75	@ 0x4b
 8000eb6:	f000 ff0c 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000eba:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <HAL_SAI_MspInit+0x1a4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	4a24      	ldr	r2, [pc, #144]	@ (8000f54 <HAL_SAI_MspInit+0x1a4>)
 8000ec2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ec4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000ed6:	230d      	movs	r3, #13
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4822      	ldr	r0, [pc, #136]	@ (8000f6c <HAL_SAI_MspInit+0x1bc>)
 8000ee2:	f001 f987 	bl	80021f4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000ee6:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <HAL_SAI_MspInit+0x1c0>)
 8000ee8:	4a22      	ldr	r2, [pc, #136]	@ (8000f74 <HAL_SAI_MspInit+0x1c4>)
 8000eea:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000eec:	4b20      	ldr	r3, [pc, #128]	@ (8000f70 <HAL_SAI_MspInit+0x1c0>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f70 <HAL_SAI_MspInit+0x1c0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <HAL_SAI_MspInit+0x1c0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f70 <HAL_SAI_MspInit+0x1c0>)
 8000f00:	2280      	movs	r2, #128	@ 0x80
 8000f02:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <HAL_SAI_MspInit+0x1c0>)
 8000f06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f0a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <HAL_SAI_MspInit+0x1c0>)
 8000f0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f12:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <HAL_SAI_MspInit+0x1c0>)
 8000f16:	2220      	movs	r2, #32
 8000f18:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <HAL_SAI_MspInit+0x1c0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000f20:	4813      	ldr	r0, [pc, #76]	@ (8000f70 <HAL_SAI_MspInit+0x1c0>)
 8000f22:	f000 fef1 	bl	8001d08 <HAL_DMA_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000f2c:	f7ff feda 	bl	8000ce4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a0f      	ldr	r2, [pc, #60]	@ (8000f70 <HAL_SAI_MspInit+0x1c0>)
 8000f34:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f36:	4a0e      	ldr	r2, [pc, #56]	@ (8000f70 <HAL_SAI_MspInit+0x1c0>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f70 <HAL_SAI_MspInit+0x1c0>)
 8000f40:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f42:	4a0b      	ldr	r2, [pc, #44]	@ (8000f70 <HAL_SAI_MspInit+0x1c0>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	@ 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40015804 	.word	0x40015804
 8000f54:	200005f4 	.word	0x200005f4
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	20000564 	.word	0x20000564
 8000f64:	4002006c 	.word	0x4002006c
 8000f68:	40015824 	.word	0x40015824
 8000f6c:	48000800 	.word	0x48000800
 8000f70:	200005ac 	.word	0x200005ac
 8000f74:	40020080 	.word	0x40020080

08000f78 <sh_pins>:
#include "components/MCP23S17.h"


SemaphoreHandle_t sem_usart1;

static int sh_pins(h_shell_t * h_shell, int argc, char ** argv) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]


	MCP23S17_Init();
 8000f84:	f7ff fb2e 	bl	80005e4 <MCP23S17_Init>
	MCP23S17_WriteRegister(MCP23S17_GPIOA, 0x00);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2012      	movs	r0, #18
 8000f8c:	f7ff faf8 	bl	8000580 <MCP23S17_WriteRegister>

	return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <sh_status>:
static int sh_status(h_shell_t * h_shell, int argc, char ** argv) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	int size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3308      	adds	r3, #8
 8000fac:	4a09      	ldr	r2, [pc, #36]	@ (8000fd4 <sh_status+0x38>)
 8000fae:	2128      	movs	r1, #40	@ 0x28
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f009 f85b 	bl	800a06c <sniprintf>
 8000fb6:	6178      	str	r0, [r7, #20]
			"System status: OK\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	3208      	adds	r2, #8
 8000fc0:	6979      	ldr	r1, [r7, #20]
 8000fc2:	b289      	uxth	r1, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4798      	blx	r3
	return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	0800b344 	.word	0x0800b344

08000fd8 <sh_led>:

static int sh_led(h_shell_t * h_shell, int argc, char ** argv) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
	int size;

	if (argc != 2) {
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d012      	beq.n	8001010 <sh_led+0x38>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3308      	adds	r3, #8
 8000fee:	4a31      	ldr	r2, [pc, #196]	@ (80010b4 <sh_led+0xdc>)
 8000ff0:	2128      	movs	r1, #40	@ 0x28
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f009 f83a 	bl	800a06c <sniprintf>
 8000ff8:	6178      	str	r0, [r7, #20]
				"Usage: led <0|1>\r\n");
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	3208      	adds	r2, #8
 8001002:	6979      	ldr	r1, [r7, #20]
 8001004:	b289      	uxth	r1, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4798      	blx	r3
		return -1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e04d      	b.n	80010ac <sh_led+0xd4>
	}

	if (strcmp(argv[1], "0") == 0) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3304      	adds	r3, #4
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4928      	ldr	r1, [pc, #160]	@ (80010b8 <sh_led+0xe0>)
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff f8d9 	bl	80001d0 <strcmp>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d10e      	bne.n	8001042 <sh_led+0x6a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2120      	movs	r1, #32
 8001028:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102c:	f001 fa8c 	bl	8002548 <HAL_GPIO_WritePin>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "LED turned OFF\r\n");
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3308      	adds	r3, #8
 8001034:	4a21      	ldr	r2, [pc, #132]	@ (80010bc <sh_led+0xe4>)
 8001036:	2128      	movs	r1, #40	@ 0x28
 8001038:	4618      	mov	r0, r3
 800103a:	f009 f817 	bl	800a06c <sniprintf>
 800103e:	6178      	str	r0, [r7, #20]
 8001040:	e02b      	b.n	800109a <sh_led+0xc2>
	}
	else if (strcmp(argv[1], "1") == 0) {
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3304      	adds	r3, #4
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	491d      	ldr	r1, [pc, #116]	@ (80010c0 <sh_led+0xe8>)
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f8c0 	bl	80001d0 <strcmp>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10e      	bne.n	8001074 <sh_led+0x9c>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2120      	movs	r1, #32
 800105a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105e:	f001 fa73 	bl	8002548 <HAL_GPIO_WritePin>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "LED turned ON\r\n");
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3308      	adds	r3, #8
 8001066:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <sh_led+0xec>)
 8001068:	2128      	movs	r1, #40	@ 0x28
 800106a:	4618      	mov	r0, r3
 800106c:	f008 fffe 	bl	800a06c <sniprintf>
 8001070:	6178      	str	r0, [r7, #20]
 8001072:	e012      	b.n	800109a <sh_led+0xc2>
	}
	else {
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3308      	adds	r3, #8
 8001078:	4a13      	ldr	r2, [pc, #76]	@ (80010c8 <sh_led+0xf0>)
 800107a:	2128      	movs	r1, #40	@ 0x28
 800107c:	4618      	mov	r0, r3
 800107e:	f008 fff5 	bl	800a06c <sniprintf>
 8001082:	6178      	str	r0, [r7, #20]
				"Invalid argument. Use 0 or 1\r\n");
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	3208      	adds	r2, #8
 800108c:	6979      	ldr	r1, [r7, #20]
 800108e:	b289      	uxth	r1, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4798      	blx	r3
		return -1;
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	e008      	b.n	80010ac <sh_led+0xd4>
	}

	h_shell->drv.transmit(h_shell->print_buffer, size);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	3208      	adds	r2, #8
 80010a2:	6979      	ldr	r1, [r7, #20]
 80010a4:	b289      	uxth	r1, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4798      	blx	r3
	return 0;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	0800b358 	.word	0x0800b358
 80010b8:	0800b36c 	.word	0x0800b36c
 80010bc:	0800b370 	.word	0x0800b370
 80010c0:	0800b384 	.word	0x0800b384
 80010c4:	0800b388 	.word	0x0800b388
 80010c8:	0800b398 	.word	0x0800b398

080010cc <sh_help>:

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b089      	sub	sp, #36	@ 0x24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	int i;
	int size;

	if (argc > 1) {
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	dd59      	ble.n	8001192 <sh_help+0xc6>
		for (i = 0; i < h_shell->func_list_size; i++) {
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e03b      	b.n	800115c <sh_help+0x90>
			if (strcmp(h_shell->func_list[i].cmd_name, argv[1]) == 0) {
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6819      	ldr	r1, [r3, #0]
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3304      	adds	r3, #4
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4610      	mov	r0, r2
 8001100:	f7ff f866 	bl	80001d0 <strcmp>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d125      	bne.n	8001156 <sh_help+0x8a>
				size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f103 0008 	add.w	r0, r3, #8
						"%s: %s\r\n", h_shell->func_list[i].cmd_name,
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6819      	ldr	r1, [r3, #0]
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	681c      	ldr	r4, [r3, #0]
						h_shell->func_list[i].description);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6819      	ldr	r1, [r3, #0]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	689b      	ldr	r3, [r3, #8]
				size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	4623      	mov	r3, r4
 8001138:	4a30      	ldr	r2, [pc, #192]	@ (80011fc <sh_help+0x130>)
 800113a:	2128      	movs	r1, #40	@ 0x28
 800113c:	f008 ff96 	bl	800a06c <sniprintf>
 8001140:	6138      	str	r0, [r7, #16]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	3208      	adds	r2, #8
 800114a:	6939      	ldr	r1, [r7, #16]
 800114c:	b289      	uxth	r1, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4798      	blx	r3
				return 0;
 8001152:	2300      	movs	r3, #0
 8001154:	e04d      	b.n	80011f2 <sh_help+0x126>
		for (i = 0; i < h_shell->func_list_size; i++) {
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	429a      	cmp	r2, r3
 8001164:	dbbe      	blt.n	80010e4 <sh_help+0x18>
			}
		}
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f103 0008 	add.w	r0, r3, #8
				"Unknown command: %s\r\n", argv[1]);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3304      	adds	r3, #4
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a23      	ldr	r2, [pc, #140]	@ (8001200 <sh_help+0x134>)
 8001174:	2128      	movs	r1, #40	@ 0x28
 8001176:	f008 ff79 	bl	800a06c <sniprintf>
 800117a:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	3208      	adds	r2, #8
 8001184:	6939      	ldr	r1, [r7, #16]
 8001186:	b289      	uxth	r1, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4798      	blx	r3
		return -1;
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	e02f      	b.n	80011f2 <sh_help+0x126>
	}

	for(i = 0; i < h_shell->func_list_size; i++) {
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e026      	b.n	80011e6 <sh_help+0x11a>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f103 0008 	add.w	r0, r3, #8
				"%s: %s\r\n", h_shell->func_list[i].cmd_name,
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6819      	ldr	r1, [r3, #0]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	681c      	ldr	r4, [r3, #0]
				h_shell->func_list[i].description);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6819      	ldr	r1, [r3, #0]
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	689b      	ldr	r3, [r3, #8]
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	4623      	mov	r3, r4
 80011c6:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <sh_help+0x130>)
 80011c8:	2128      	movs	r1, #40	@ 0x28
 80011ca:	f008 ff4f 	bl	800a06c <sniprintf>
 80011ce:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	3208      	adds	r2, #8
 80011d8:	6939      	ldr	r1, [r7, #16]
 80011da:	b289      	uxth	r1, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4798      	blx	r3
	for(i = 0; i < h_shell->func_list_size; i++) {
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbd3      	blt.n	8001198 <sh_help+0xcc>
	}

	return 0;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	371c      	adds	r7, #28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	0800b3b8 	.word	0x0800b3b8
 8001200:	0800b3c4 	.word	0x0800b3c4

08001204 <shell_init>:



};

void shell_init(h_shell_t * h_shell) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	int size = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]

	h_shell->func_list = shell_functions;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a18      	ldr	r2, [pc, #96]	@ (8001274 <shell_init+0x70>)
 8001214:	601a      	str	r2, [r3, #0]
	h_shell->func_list_size = sizeof(shell_functions) / sizeof(shell_functions[0]);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2204      	movs	r2, #4
 800121a:	605a      	str	r2, [r3, #4]

	size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3308      	adds	r3, #8
 8001220:	4a15      	ldr	r2, [pc, #84]	@ (8001278 <shell_init+0x74>)
 8001222:	2128      	movs	r1, #40	@ 0x28
 8001224:	4618      	mov	r0, r3
 8001226:	f008 ff21 	bl	800a06c <sniprintf>
 800122a:	60f8      	str	r0, [r7, #12]
			"\r\n\r\n===== Super auto radio v1.0 =====\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	68f9      	ldr	r1, [r7, #12]
 8001236:	b289      	uxth	r1, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4798      	blx	r3

	size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3308      	adds	r3, #8
 8001240:	4a0e      	ldr	r2, [pc, #56]	@ (800127c <shell_init+0x78>)
 8001242:	2128      	movs	r1, #40	@ 0x28
 8001244:	4618      	mov	r0, r3
 8001246:	f008 ff11 	bl	800a06c <sniprintf>
 800124a:	60f8      	str	r0, [r7, #12]
			"Type 'help' for available commands\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	68f9      	ldr	r1, [r7, #12]
 8001256:	b289      	uxth	r1, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4798      	blx	r3
	sem_usart1 = xSemaphoreCreateBinary();
 800125c:	2203      	movs	r2, #3
 800125e:	2100      	movs	r1, #0
 8001260:	2001      	movs	r0, #1
 8001262:	f006 ffa1 	bl	80081a8 <xQueueGenericCreate>
 8001266:	4603      	mov	r3, r0
 8001268:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <shell_init+0x7c>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	0800b4a8 	.word	0x0800b4a8
 8001278:	0800b448 	.word	0x0800b448
 800127c:	0800b470 	.word	0x0800b470
 8001280:	200005f8 	.word	0x200005f8

08001284 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b08e      	sub	sp, #56	@ 0x38
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	int i;
	int argc = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	633b      	str	r3, [r7, #48]	@ 0x30
	char *argv[ARGC_MAX];
	char *token;

	token = strtok(buf, " ");
 8001292:	4931      	ldr	r1, [pc, #196]	@ (8001358 <shell_exec+0xd4>)
 8001294:	6838      	ldr	r0, [r7, #0]
 8001296:	f008 fffd 	bl	800a294 <strtok>
 800129a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	while (token != NULL && argc < ARGC_MAX) {
 800129c:	e00d      	b.n	80012ba <shell_exec+0x36>
		argv[argc++] = token;
 800129e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	3338      	adds	r3, #56	@ 0x38
 80012a8:	443b      	add	r3, r7
 80012aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012ac:	f843 2c30 	str.w	r2, [r3, #-48]
		token = strtok(NULL, " ");
 80012b0:	4929      	ldr	r1, [pc, #164]	@ (8001358 <shell_exec+0xd4>)
 80012b2:	2000      	movs	r0, #0
 80012b4:	f008 ffee 	bl	800a294 <strtok>
 80012b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
	while (token != NULL && argc < ARGC_MAX) {
 80012ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <shell_exec+0x42>
 80012c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012c2:	2b07      	cmp	r3, #7
 80012c4:	ddeb      	ble.n	800129e <shell_exec+0x1a>
	}

	if (argc == 0) return 0;
 80012c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <shell_exec+0x4c>
 80012cc:	2300      	movs	r3, #0
 80012ce:	e03e      	b.n	800134e <shell_exec+0xca>

	for (i = 0; i < h_shell->func_list_size; i++) {
 80012d0:	2300      	movs	r3, #0
 80012d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80012d4:	e023      	b.n	800131e <shell_exec+0x9a>
		if (strcmp(h_shell->func_list[i].cmd_name, argv[0]) == 0) {
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6819      	ldr	r1, [r3, #0]
 80012da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7fe ff6f 	bl	80001d0 <strcmp>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10f      	bne.n	8001318 <shell_exec+0x94>
			return h_shell->func_list[i].func(h_shell, argc, argv);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6819      	ldr	r1, [r3, #0]
 80012fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f107 0208 	add.w	r2, r7, #8
 800130e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	4798      	blx	r3
 8001314:	4603      	mov	r3, r0
 8001316:	e01a      	b.n	800134e <shell_exec+0xca>
	for (i = 0; i < h_shell->func_list_size; i++) {
 8001318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800131a:	3301      	adds	r3, #1
 800131c:	637b      	str	r3, [r7, #52]	@ 0x34
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001324:	429a      	cmp	r2, r3
 8001326:	dbd6      	blt.n	80012d6 <shell_exec+0x52>
		}
	}


	int size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f103 0008 	add.w	r0, r3, #8
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <shell_exec+0xd8>)
 8001332:	2128      	movs	r1, #40	@ 0x28
 8001334:	f008 fe9a 	bl	800a06c <sniprintf>
 8001338:	62b8      	str	r0, [r7, #40]	@ 0x28
			"Unknown command: %s\r\n", argv[0]);
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001344:	b289      	uxth	r1, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4798      	blx	r3
	return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134e:	4618      	mov	r0, r3
 8001350:	3738      	adds	r7, #56	@ 0x38
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	0800b498 	.word	0x0800b498
 800135c:	0800b3c4 	.word	0x0800b3c4

08001360 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "shell@radio>> ";

int shell_run(h_shell_t * h_shell) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
	int pos = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, strlen(prompt));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001374:	210e      	movs	r1, #14
 8001376:	4826      	ldr	r0, [pc, #152]	@ (8001410 <shell_run+0xb0>)
 8001378:	4798      	blx	r3
		reading = 1;
 800137a:	2301      	movs	r3, #1
 800137c:	617b      	str	r3, [r7, #20]

		while(reading) {
 800137e:	e03a      	b.n	80013f6 <shell_run+0x96>
			char c;
			h_shell->drv.receive(&c, 1);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001384:	f107 020f 	add.w	r2, r7, #15
 8001388:	2101      	movs	r1, #1
 800138a:	4610      	mov	r0, r2
 800138c:	4798      	blx	r3

			switch (c) {
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	2b08      	cmp	r3, #8
 8001392:	d00f      	beq.n	80013b4 <shell_run+0x54>
 8001394:	2b0d      	cmp	r3, #13
 8001396:	d119      	bne.n	80013cc <shell_run+0x6c>
			case '\r':
				h_shell->drv.transmit("\r\n", 2);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139c:	2102      	movs	r1, #2
 800139e:	481d      	ldr	r0, [pc, #116]	@ (8001414 <shell_run+0xb4>)
 80013a0:	4798      	blx	r3
				h_shell->cmd_buffer[pos] = 0;
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4413      	add	r3, r2
 80013a8:	3330      	adds	r3, #48	@ 0x30
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
				reading = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
				break;
 80013b2:	e020      	b.n	80013f6 <shell_run+0x96>

			case '\b':
				if (pos > 0) {
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	dd1c      	ble.n	80013f4 <shell_run+0x94>
					pos--;
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	3b01      	subs	r3, #1
 80013be:	613b      	str	r3, [r7, #16]
					h_shell->drv.transmit(backspace, 3);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c4:	2103      	movs	r1, #3
 80013c6:	4814      	ldr	r0, [pc, #80]	@ (8001418 <shell_run+0xb8>)
 80013c8:	4798      	blx	r3
				}
				break;
 80013ca:	e013      	b.n	80013f4 <shell_run+0x94>

			default:
				if (pos < BUFFER_SIZE - 1) {
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	2b26      	cmp	r3, #38	@ 0x26
 80013d0:	dc11      	bgt.n	80013f6 <shell_run+0x96>
					h_shell->drv.transmit(&c, 1);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d6:	f107 020f 	add.w	r2, r7, #15
 80013da:	2101      	movs	r1, #1
 80013dc:	4610      	mov	r0, r2
 80013de:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c;
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	613a      	str	r2, [r7, #16]
 80013e6:	7bf9      	ldrb	r1, [r7, #15]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	460a      	mov	r2, r1
 80013ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80013f2:	e000      	b.n	80013f6 <shell_run+0x96>
				break;
 80013f4:	bf00      	nop
		while(reading) {
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1c1      	bne.n	8001380 <shell_run+0x20>
				}
			}
		}

		shell_exec(h_shell, h_shell->cmd_buffer);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3330      	adds	r3, #48	@ 0x30
 8001400:	4619      	mov	r1, r3
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ff3e 	bl	8001284 <shell_exec>
		pos = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
		h_shell->drv.transmit(prompt, strlen(prompt));
 800140c:	e7b0      	b.n	8001370 <shell_run+0x10>
 800140e:	bf00      	nop
 8001410:	0800b4dc 	.word	0x0800b4dc
 8001414:	0800b49c 	.word	0x0800b49c
 8001418:	0800b4d8 	.word	0x0800b4d8

0800141c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <MX_SPI3_Init+0x74>)
 8001422:	4a1c      	ldr	r2, [pc, #112]	@ (8001494 <MX_SPI3_Init+0x78>)
 8001424:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <MX_SPI3_Init+0x74>)
 8001428:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800142c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800142e:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <MX_SPI3_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001434:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <MX_SPI3_Init+0x74>)
 8001436:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800143a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <MX_SPI3_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001442:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <MX_SPI3_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001448:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <MX_SPI3_Init+0x74>)
 800144a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800144e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <MX_SPI3_Init+0x74>)
 8001452:	2220      	movs	r2, #32
 8001454:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <MX_SPI3_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <MX_SPI3_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <MX_SPI3_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001468:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <MX_SPI3_Init+0x74>)
 800146a:	2207      	movs	r2, #7
 800146c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800146e:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <MX_SPI3_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <MX_SPI3_Init+0x74>)
 8001476:	2208      	movs	r2, #8
 8001478:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <MX_SPI3_Init+0x74>)
 800147c:	f004 fd8f 	bl	8005f9e <HAL_SPI_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001486:	f7ff fc2d 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200005fc 	.word	0x200005fc
 8001494:	40003c00 	.word	0x40003c00

08001498 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	@ 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a25      	ldr	r2, [pc, #148]	@ (800154c <HAL_SPI_MspInit+0xb4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d144      	bne.n	8001544 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014ba:	4b25      	ldr	r3, [pc, #148]	@ (8001550 <HAL_SPI_MspInit+0xb8>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014be:	4a24      	ldr	r2, [pc, #144]	@ (8001550 <HAL_SPI_MspInit+0xb8>)
 80014c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014c6:	4b22      	ldr	r3, [pc, #136]	@ (8001550 <HAL_SPI_MspInit+0xb8>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <HAL_SPI_MspInit+0xb8>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001550 <HAL_SPI_MspInit+0xb8>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <HAL_SPI_MspInit+0xb8>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <HAL_SPI_MspInit+0xb8>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a18      	ldr	r2, [pc, #96]	@ (8001550 <HAL_SPI_MspInit+0xb8>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b16      	ldr	r3, [pc, #88]	@ (8001550 <HAL_SPI_MspInit+0xb8>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001502:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001514:	2306      	movs	r3, #6
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	@ (8001554 <HAL_SPI_MspInit+0xbc>)
 8001520:	f000 fe68 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001524:	2320      	movs	r3, #32
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001534:	2306      	movs	r3, #6
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <HAL_SPI_MspInit+0xc0>)
 8001540:	f000 fe58 	bl	80021f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	@ 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40003c00 	.word	0x40003c00
 8001550:	40021000 	.word	0x40021000
 8001554:	48000800 	.word	0x48000800
 8001558:	48000400 	.word	0x48000400

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <HAL_MspInit+0x4c>)
 8001564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001566:	4a10      	ldr	r2, [pc, #64]	@ (80015a8 <HAL_MspInit+0x4c>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6613      	str	r3, [r2, #96]	@ 0x60
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <HAL_MspInit+0x4c>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <HAL_MspInit+0x4c>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <HAL_MspInit+0x4c>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001584:	6593      	str	r3, [r2, #88]	@ 0x58
 8001586:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <HAL_MspInit+0x4c>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	210f      	movs	r1, #15
 8001596:	f06f 0001 	mvn.w	r0, #1
 800159a:	f000 fb7e 	bl	8001c9a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000

080015ac <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80015b4:	1d39      	adds	r1, r7, #4
 80015b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015ba:	2201      	movs	r2, #1
 80015bc:	4803      	ldr	r0, [pc, #12]	@ (80015cc <__io_putchar+0x20>)
 80015be:	f005 f8b9 	bl	8006734 <HAL_UART_Transmit>

  return ch;
 80015c2:	687b      	ldr	r3, [r7, #4]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000664 	.word	0x20000664

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <NMI_Handler+0x4>

080015d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <MemManage_Handler+0x4>

080015e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160a:	f000 fa27 	bl	8001a5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800160e:	f007 fe1d 	bl	800924c <xTaskGetSchedulerState>
 8001612:	4603      	mov	r3, r0
 8001614:	2b01      	cmp	r3, #1
 8001616:	d001      	beq.n	800161c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001618:	f008 f976 	bl	8009908 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <DMA1_Channel6_IRQHandler+0x10>)
 8001626:	f000 fd06 	bl	8002036 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000564 	.word	0x20000564

08001634 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <DMA1_Channel7_IRQHandler+0x10>)
 800163a:	f000 fcfc 	bl	8002036 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200005ac 	.word	0x200005ac

08001648 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <USART2_IRQHandler+0x10>)
 800164e:	f005 f947 	bl	80068e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000664 	.word	0x20000664

0800165c <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8001660:	4803      	ldr	r0, [pc, #12]	@ (8001670 <SAI2_IRQHandler+0x14>)
 8001662:	f004 f897 	bl	8005794 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8001666:	4803      	ldr	r0, [pc, #12]	@ (8001674 <SAI2_IRQHandler+0x18>)
 8001668:	f004 f894 	bl	8005794 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2000045c 	.word	0x2000045c
 8001674:	200004e0 	.word	0x200004e0

08001678 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return 1;
 800167c:	2301      	movs	r3, #1
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_kill>:

int _kill(int pid, int sig)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001692:	f008 fea1 	bl	800a3d8 <__errno>
 8001696:	4603      	mov	r3, r0
 8001698:	2216      	movs	r2, #22
 800169a:	601a      	str	r2, [r3, #0]
  return -1;
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_exit>:

void _exit (int status)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ffe7 	bl	8001688 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ba:	bf00      	nop
 80016bc:	e7fd      	b.n	80016ba <_exit+0x12>

080016be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	e00a      	b.n	80016e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016d0:	f3af 8000 	nop.w
 80016d4:	4601      	mov	r1, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	60ba      	str	r2, [r7, #8]
 80016dc:	b2ca      	uxtb	r2, r1
 80016de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3301      	adds	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	dbf0      	blt.n	80016d0 <_read+0x12>
  }

  return len;
 80016ee:	687b      	ldr	r3, [r7, #4]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	e009      	b.n	800171e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	60ba      	str	r2, [r7, #8]
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff4a 	bl	80015ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3301      	adds	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	429a      	cmp	r2, r3
 8001724:	dbf1      	blt.n	800170a <_write+0x12>
  }
  return len;
 8001726:	687b      	ldr	r3, [r7, #4]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_close>:

int _close(int file)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001758:	605a      	str	r2, [r3, #4]
  return 0;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_isatty>:

int _isatty(int file)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001770:	2301      	movs	r3, #1
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800177e:	b480      	push	{r7}
 8001780:	b085      	sub	sp, #20
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a0:	4a14      	ldr	r2, [pc, #80]	@ (80017f4 <_sbrk+0x5c>)
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <_sbrk+0x60>)
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <_sbrk+0x64>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	@ (8001800 <_sbrk+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d207      	bcs.n	80017d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c8:	f008 fe06 	bl	800a3d8 <__errno>
 80017cc:	4603      	mov	r3, r0
 80017ce:	220c      	movs	r2, #12
 80017d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	e009      	b.n	80017ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d8:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017de:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a05      	ldr	r2, [pc, #20]	@ (80017fc <_sbrk+0x64>)
 80017e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20018000 	.word	0x20018000
 80017f8:	00000400 	.word	0x00000400
 80017fc:	20000660 	.word	0x20000660
 8001800:	20001548 	.word	0x20001548

08001804 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <SystemInit+0x20>)
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800180e:	4a05      	ldr	r2, [pc, #20]	@ (8001824 <SystemInit+0x20>)
 8001810:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001814:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800182c:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <MX_USART2_UART_Init+0x58>)
 800182e:	4a15      	ldr	r2, [pc, #84]	@ (8001884 <MX_USART2_UART_Init+0x5c>)
 8001830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001832:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <MX_USART2_UART_Init+0x58>)
 8001834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <MX_USART2_UART_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <MX_USART2_UART_Init+0x58>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001846:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <MX_USART2_UART_Init+0x58>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <MX_USART2_UART_Init+0x58>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <MX_USART2_UART_Init+0x58>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <MX_USART2_UART_Init+0x58>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <MX_USART2_UART_Init+0x58>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <MX_USART2_UART_Init+0x58>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	@ (8001880 <MX_USART2_UART_Init+0x58>)
 800186c:	f004 ff14 	bl	8006698 <HAL_UART_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001876:	f7ff fa35 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000664 	.word	0x20000664
 8001884:	40004400 	.word	0x40004400

08001888 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b0ac      	sub	sp, #176	@ 0xb0
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2288      	movs	r2, #136	@ 0x88
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f008 fceb 	bl	800a284 <memset>
  if(uartHandle->Instance==USART2)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a25      	ldr	r2, [pc, #148]	@ (8001948 <HAL_UART_MspInit+0xc0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d143      	bne.n	8001940 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018bc:	2300      	movs	r3, #0
 80018be:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 f991 	bl	8003bec <HAL_RCCEx_PeriphCLKConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018d0:	f7ff fa08 	bl	8000ce4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d4:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <HAL_UART_MspInit+0xc4>)
 80018d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d8:	4a1c      	ldr	r2, [pc, #112]	@ (800194c <HAL_UART_MspInit+0xc4>)
 80018da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018de:	6593      	str	r3, [r2, #88]	@ 0x58
 80018e0:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <HAL_UART_MspInit+0xc4>)
 80018e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	4b17      	ldr	r3, [pc, #92]	@ (800194c <HAL_UART_MspInit+0xc4>)
 80018ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f0:	4a16      	ldr	r2, [pc, #88]	@ (800194c <HAL_UART_MspInit+0xc4>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <HAL_UART_MspInit+0xc4>)
 80018fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001904:	230c      	movs	r3, #12
 8001906:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800191c:	2307      	movs	r3, #7
 800191e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192c:	f000 fc62 	bl	80021f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2105      	movs	r1, #5
 8001934:	2026      	movs	r0, #38	@ 0x26
 8001936:	f000 f9b0 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800193a:	2026      	movs	r0, #38	@ 0x26
 800193c:	f000 f9c9 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001940:	bf00      	nop
 8001942:	37b0      	adds	r7, #176	@ 0xb0
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40004400 	.word	0x40004400
 800194c:	40021000 	.word	0x40021000

08001950 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001950:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001988 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001954:	f7ff ff56 	bl	8001804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001958:	480c      	ldr	r0, [pc, #48]	@ (800198c <LoopForever+0x6>)
  ldr r1, =_edata
 800195a:	490d      	ldr	r1, [pc, #52]	@ (8001990 <LoopForever+0xa>)
  ldr r2, =_sidata
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <LoopForever+0xe>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001970:	4c0a      	ldr	r4, [pc, #40]	@ (800199c <LoopForever+0x16>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197e:	f008 fd31 	bl	800a3e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001982:	f7ff f8ab 	bl	8000adc <main>

08001986 <LoopForever>:

LoopForever:
    b LoopForever
 8001986:	e7fe      	b.n	8001986 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001988:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001994:	0800b624 	.word	0x0800b624
  ldr r2, =_sbss
 8001998:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800199c:	20001548 	.word	0x20001548

080019a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_2_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ae:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <HAL_Init+0x3c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a0b      	ldr	r2, [pc, #44]	@ (80019e0 <HAL_Init+0x3c>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ba:	2003      	movs	r0, #3
 80019bc:	f000 f962 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019c0:	200f      	movs	r0, #15
 80019c2:	f000 f80f 	bl	80019e4 <HAL_InitTick>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	71fb      	strb	r3, [r7, #7]
 80019d0:	e001      	b.n	80019d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019d2:	f7ff fdc3 	bl	800155c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d6:	79fb      	ldrb	r3, [r7, #7]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40022000 	.word	0x40022000

080019e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019f0:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <HAL_InitTick+0x6c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d023      	beq.n	8001a40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019f8:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <HAL_InitTick+0x70>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b14      	ldr	r3, [pc, #80]	@ (8001a50 <HAL_InitTick+0x6c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f96d 	bl	8001cee <HAL_SYSTICK_Config>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10f      	bne.n	8001a3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d809      	bhi.n	8001a34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f000 f937 	bl	8001c9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <HAL_InitTick+0x74>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e007      	b.n	8001a44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	e004      	b.n	8001a44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	e001      	b.n	8001a44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	200006ec 	.word	0x200006ec

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	200006ec 	.word	0x200006ec

08001a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff ffee 	bl	8001a84 <HAL_GetTick>
 8001aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d005      	beq.n	8001ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_Delay+0x44>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ac2:	bf00      	nop
 8001ac4:	f7ff ffde 	bl	8001a84 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f7      	bhi.n	8001ac4 <HAL_Delay+0x28>
  {
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db0b      	blt.n	8001b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	4907      	ldr	r1, [pc, #28]	@ (8001b80 <__NVIC_EnableIRQ+0x38>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2001      	movs	r0, #1
 8001b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	@ (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	@ (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	@ 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	@ 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff8e 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff29 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff3e 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff8e 	bl	8001bd8 <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5d 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff31 	bl	8001b48 <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa2 	bl	8001c40 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e098      	b.n	8001e4c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b4d      	ldr	r3, [pc, #308]	@ (8001e58 <HAL_DMA_Init+0x150>)
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d80f      	bhi.n	8001d46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e5c <HAL_DMA_Init+0x154>)
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a4b      	ldr	r2, [pc, #300]	@ (8001e60 <HAL_DMA_Init+0x158>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	009a      	lsls	r2, r3, #2
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a48      	ldr	r2, [pc, #288]	@ (8001e64 <HAL_DMA_Init+0x15c>)
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d44:	e00e      	b.n	8001d64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b46      	ldr	r3, [pc, #280]	@ (8001e68 <HAL_DMA_Init+0x160>)
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a43      	ldr	r2, [pc, #268]	@ (8001e60 <HAL_DMA_Init+0x158>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	009a      	lsls	r2, r3, #2
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a42      	ldr	r2, [pc, #264]	@ (8001e6c <HAL_DMA_Init+0x164>)
 8001d62:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001dbe:	d039      	beq.n	8001e34 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	4a27      	ldr	r2, [pc, #156]	@ (8001e64 <HAL_DMA_Init+0x15c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d11a      	bne.n	8001e00 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001dca:	4b29      	ldr	r3, [pc, #164]	@ (8001e70 <HAL_DMA_Init+0x168>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	f003 031c 	and.w	r3, r3, #28
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	4924      	ldr	r1, [pc, #144]	@ (8001e70 <HAL_DMA_Init+0x168>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001de4:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <HAL_DMA_Init+0x168>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df0:	f003 031c 	and.w	r3, r3, #28
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	491d      	ldr	r1, [pc, #116]	@ (8001e70 <HAL_DMA_Init+0x168>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
 8001dfe:	e019      	b.n	8001e34 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e00:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <HAL_DMA_Init+0x16c>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e08:	f003 031c 	and.w	r3, r3, #28
 8001e0c:	210f      	movs	r1, #15
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	4917      	ldr	r1, [pc, #92]	@ (8001e74 <HAL_DMA_Init+0x16c>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e1a:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <HAL_DMA_Init+0x16c>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f003 031c 	and.w	r3, r3, #28
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	4911      	ldr	r1, [pc, #68]	@ (8001e74 <HAL_DMA_Init+0x16c>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40020407 	.word	0x40020407
 8001e5c:	bffdfff8 	.word	0xbffdfff8
 8001e60:	cccccccd 	.word	0xcccccccd
 8001e64:	40020000 	.word	0x40020000
 8001e68:	bffdfbf8 	.word	0xbffdfbf8
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	400200a8 	.word	0x400200a8
 8001e74:	400204a8 	.word	0x400204a8

08001e78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_DMA_Start_IT+0x20>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e04b      	b.n	8001f30 <HAL_DMA_Start_IT+0xb8>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d13a      	bne.n	8001f22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	68b9      	ldr	r1, [r7, #8]
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f95f 	bl	8002194 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d008      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 020e 	orr.w	r2, r2, #14
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e00f      	b.n	8001f10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0204 	bic.w	r2, r2, #4
 8001efe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 020a 	orr.w	r2, r2, #10
 8001f0e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e005      	b.n	8001f2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d008      	beq.n	8001f62 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2204      	movs	r2, #4
 8001f54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e022      	b.n	8001fa8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 020e 	bic.w	r2, r2, #14
 8001f70:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	f003 021c 	and.w	r2, r3, #28
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f202 	lsl.w	r2, r1, r2
 8001f94:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d005      	beq.n	8001fd8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
 8001fd6:	e029      	b.n	800202c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 020e 	bic.w	r2, r2, #14
 8001fe6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffc:	f003 021c 	and.w	r2, r3, #28
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002004:	2101      	movs	r1, #1
 8002006:	fa01 f202 	lsl.w	r2, r1, r2
 800200a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
    }
  }
  return status;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	f003 031c 	and.w	r3, r3, #28
 8002056:	2204      	movs	r2, #4
 8002058:	409a      	lsls	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d026      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x7a>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d021      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d107      	bne.n	800208a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0204 	bic.w	r2, r2, #4
 8002088:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208e:	f003 021c 	and.w	r2, r3, #28
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	2104      	movs	r1, #4
 8002098:	fa01 f202 	lsl.w	r2, r1, r2
 800209c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d071      	beq.n	800218a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80020ae:	e06c      	b.n	800218a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b4:	f003 031c 	and.w	r3, r3, #28
 80020b8:	2202      	movs	r2, #2
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d02e      	beq.n	8002122 <HAL_DMA_IRQHandler+0xec>
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d029      	beq.n	8002122 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10b      	bne.n	80020f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 020a 	bic.w	r2, r2, #10
 80020ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f8:	f003 021c 	and.w	r2, r3, #28
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	2102      	movs	r1, #2
 8002102:	fa01 f202 	lsl.w	r2, r1, r2
 8002106:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d038      	beq.n	800218a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002120:	e033      	b.n	800218a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	f003 031c 	and.w	r3, r3, #28
 800212a:	2208      	movs	r2, #8
 800212c:	409a      	lsls	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d02a      	beq.n	800218c <HAL_DMA_IRQHandler+0x156>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d025      	beq.n	800218c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 020e 	bic.w	r2, r2, #14
 800214e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002154:	f003 021c 	and.w	r2, r3, #28
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	2101      	movs	r1, #1
 800215e:	fa01 f202 	lsl.w	r2, r1, r2
 8002162:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217e:	2b00      	cmp	r3, #0
 8002180:	d004      	beq.n	800218c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800218a:	bf00      	nop
 800218c:	bf00      	nop
}
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	f003 021c 	and.w	r2, r3, #28
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	2101      	movs	r1, #1
 80021b0:	fa01 f202 	lsl.w	r2, r1, r2
 80021b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d108      	bne.n	80021d8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021d6:	e007      	b.n	80021e8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	60da      	str	r2, [r3, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002202:	e17f      	b.n	8002504 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	4013      	ands	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8171 	beq.w	80024fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d005      	beq.n	8002234 <HAL_GPIO_Init+0x40>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d130      	bne.n	8002296 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800226a:	2201      	movs	r2, #1
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f003 0201 	and.w	r2, r3, #1
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d118      	bne.n	80022d4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022a8:	2201      	movs	r2, #1
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	08db      	lsrs	r3, r3, #3
 80022be:	f003 0201 	and.w	r2, r3, #1
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d017      	beq.n	8002310 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d123      	bne.n	8002364 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	6939      	ldr	r1, [r7, #16]
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0203 	and.w	r2, r3, #3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80ac 	beq.w	80024fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002524 <HAL_GPIO_Init+0x330>)
 80023a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002524 <HAL_GPIO_Init+0x330>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80023b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002524 <HAL_GPIO_Init+0x330>)
 80023b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023be:	4a5a      	ldr	r2, [pc, #360]	@ (8002528 <HAL_GPIO_Init+0x334>)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	220f      	movs	r2, #15
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023e8:	d025      	beq.n	8002436 <HAL_GPIO_Init+0x242>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4f      	ldr	r2, [pc, #316]	@ (800252c <HAL_GPIO_Init+0x338>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01f      	beq.n	8002432 <HAL_GPIO_Init+0x23e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002530 <HAL_GPIO_Init+0x33c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d019      	beq.n	800242e <HAL_GPIO_Init+0x23a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002534 <HAL_GPIO_Init+0x340>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_GPIO_Init+0x236>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4c      	ldr	r2, [pc, #304]	@ (8002538 <HAL_GPIO_Init+0x344>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00d      	beq.n	8002426 <HAL_GPIO_Init+0x232>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4b      	ldr	r2, [pc, #300]	@ (800253c <HAL_GPIO_Init+0x348>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <HAL_GPIO_Init+0x22e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4a      	ldr	r2, [pc, #296]	@ (8002540 <HAL_GPIO_Init+0x34c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_GPIO_Init+0x22a>
 800241a:	2306      	movs	r3, #6
 800241c:	e00c      	b.n	8002438 <HAL_GPIO_Init+0x244>
 800241e:	2307      	movs	r3, #7
 8002420:	e00a      	b.n	8002438 <HAL_GPIO_Init+0x244>
 8002422:	2305      	movs	r3, #5
 8002424:	e008      	b.n	8002438 <HAL_GPIO_Init+0x244>
 8002426:	2304      	movs	r3, #4
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x244>
 800242a:	2303      	movs	r3, #3
 800242c:	e004      	b.n	8002438 <HAL_GPIO_Init+0x244>
 800242e:	2302      	movs	r3, #2
 8002430:	e002      	b.n	8002438 <HAL_GPIO_Init+0x244>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_GPIO_Init+0x244>
 8002436:	2300      	movs	r3, #0
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	f002 0203 	and.w	r2, r2, #3
 800243e:	0092      	lsls	r2, r2, #2
 8002440:	4093      	lsls	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002448:	4937      	ldr	r1, [pc, #220]	@ (8002528 <HAL_GPIO_Init+0x334>)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	3302      	adds	r3, #2
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002456:	4b3b      	ldr	r3, [pc, #236]	@ (8002544 <HAL_GPIO_Init+0x350>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800247a:	4a32      	ldr	r2, [pc, #200]	@ (8002544 <HAL_GPIO_Init+0x350>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002480:	4b30      	ldr	r3, [pc, #192]	@ (8002544 <HAL_GPIO_Init+0x350>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024a4:	4a27      	ldr	r2, [pc, #156]	@ (8002544 <HAL_GPIO_Init+0x350>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024aa:	4b26      	ldr	r3, [pc, #152]	@ (8002544 <HAL_GPIO_Init+0x350>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002544 <HAL_GPIO_Init+0x350>)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <HAL_GPIO_Init+0x350>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024f8:	4a12      	ldr	r2, [pc, #72]	@ (8002544 <HAL_GPIO_Init+0x350>)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3301      	adds	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	f47f ae78 	bne.w	8002204 <HAL_GPIO_Init+0x10>
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	40010000 	.word	0x40010000
 800252c:	48000400 	.word	0x48000400
 8002530:	48000800 	.word	0x48000800
 8002534:	48000c00 	.word	0x48000c00
 8002538:	48001000 	.word	0x48001000
 800253c:	48001400 	.word	0x48001400
 8002540:	48001800 	.word	0x48001800
 8002544:	40010400 	.word	0x40010400

08002548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002558:	787b      	ldrb	r3, [r7, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002564:	e002      	b.n	800256c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800258a:	887a      	ldrh	r2, [r7, #2]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4013      	ands	r3, r2
 8002590:	041a      	lsls	r2, r3, #16
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	43d9      	mvns	r1, r3
 8002596:	887b      	ldrh	r3, [r7, #2]
 8002598:	400b      	ands	r3, r1
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e08d      	b.n	80026da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe f9a4 	bl	8000920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	@ 0x24
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800260c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d107      	bne.n	8002626 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	e006      	b.n	8002634 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002632:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d108      	bne.n	800264e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	e007      	b.n	800265e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800265c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800266c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002670:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002680:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69d9      	ldr	r1, [r3, #28]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1a      	ldr	r2, [r3, #32]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	4608      	mov	r0, r1
 80026ee:	4611      	mov	r1, r2
 80026f0:	461a      	mov	r2, r3
 80026f2:	4603      	mov	r3, r0
 80026f4:	817b      	strh	r3, [r7, #10]
 80026f6:	460b      	mov	r3, r1
 80026f8:	813b      	strh	r3, [r7, #8]
 80026fa:	4613      	mov	r3, r2
 80026fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b20      	cmp	r3, #32
 8002708:	f040 80fd 	bne.w	8002906 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_I2C_Mem_Read+0x34>
 8002712:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002714:	2b00      	cmp	r3, #0
 8002716:	d105      	bne.n	8002724 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800271e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0f1      	b.n	8002908 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_I2C_Mem_Read+0x4e>
 800272e:	2302      	movs	r3, #2
 8002730:	e0ea      	b.n	8002908 <HAL_I2C_Mem_Read+0x224>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800273a:	f7ff f9a3 	bl	8001a84 <HAL_GetTick>
 800273e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2319      	movs	r3, #25
 8002746:	2201      	movs	r2, #1
 8002748:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 f95b 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0d5      	b.n	8002908 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2222      	movs	r2, #34	@ 0x22
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2240      	movs	r2, #64	@ 0x40
 8002768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a3a      	ldr	r2, [r7, #32]
 8002776:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800277c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002784:	88f8      	ldrh	r0, [r7, #6]
 8002786:	893a      	ldrh	r2, [r7, #8]
 8002788:	8979      	ldrh	r1, [r7, #10]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	4603      	mov	r3, r0
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f8bf 	bl	8002918 <I2C_RequestMemoryRead>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0ad      	b.n	8002908 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2bff      	cmp	r3, #255	@ 0xff
 80027b4:	d90e      	bls.n	80027d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	8979      	ldrh	r1, [r7, #10]
 80027c4:	4b52      	ldr	r3, [pc, #328]	@ (8002910 <HAL_I2C_Mem_Read+0x22c>)
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 fadf 	bl	8002d90 <I2C_TransferConfig>
 80027d2:	e00f      	b.n	80027f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	8979      	ldrh	r1, [r7, #10]
 80027e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002910 <HAL_I2C_Mem_Read+0x22c>)
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 face 	bl	8002d90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fa:	2200      	movs	r2, #0
 80027fc:	2104      	movs	r1, #4
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f902 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e07c      	b.n	8002908 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d034      	beq.n	80028b4 <HAL_I2C_Mem_Read+0x1d0>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284e:	2b00      	cmp	r3, #0
 8002850:	d130      	bne.n	80028b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002858:	2200      	movs	r2, #0
 800285a:	2180      	movs	r1, #128	@ 0x80
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f8d3 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e04d      	b.n	8002908 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	2bff      	cmp	r3, #255	@ 0xff
 8002874:	d90e      	bls.n	8002894 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002880:	b2da      	uxtb	r2, r3
 8002882:	8979      	ldrh	r1, [r7, #10]
 8002884:	2300      	movs	r3, #0
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fa7f 	bl	8002d90 <I2C_TransferConfig>
 8002892:	e00f      	b.n	80028b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	8979      	ldrh	r1, [r7, #10]
 80028a6:	2300      	movs	r3, #0
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fa6e 	bl	8002d90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d19a      	bne.n	80027f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f940 	bl	8002b48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e01a      	b.n	8002908 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2220      	movs	r2, #32
 80028d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_I2C_Mem_Read+0x230>)
 80028e6:	400b      	ands	r3, r1
 80028e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
  }
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	80002400 	.word	0x80002400
 8002914:	fe00e800 	.word	0xfe00e800

08002918 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	461a      	mov	r2, r3
 8002926:	4603      	mov	r3, r0
 8002928:	817b      	strh	r3, [r7, #10]
 800292a:	460b      	mov	r3, r1
 800292c:	813b      	strh	r3, [r7, #8]
 800292e:	4613      	mov	r3, r2
 8002930:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	8979      	ldrh	r1, [r7, #10]
 8002938:	4b20      	ldr	r3, [pc, #128]	@ (80029bc <I2C_RequestMemoryRead+0xa4>)
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2300      	movs	r3, #0
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fa26 	bl	8002d90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	69b9      	ldr	r1, [r7, #24]
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f8b6 	bl	8002aba <I2C_WaitOnTXISFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e02c      	b.n	80029b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d105      	bne.n	800296a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800295e:	893b      	ldrh	r3, [r7, #8]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	629a      	str	r2, [r3, #40]	@ 0x28
 8002968:	e015      	b.n	8002996 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800296a:	893b      	ldrh	r3, [r7, #8]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	b29b      	uxth	r3, r3
 8002970:	b2da      	uxtb	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	69b9      	ldr	r1, [r7, #24]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f89c 	bl	8002aba <I2C_WaitOnTXISFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e012      	b.n	80029b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800298c:	893b      	ldrh	r3, [r7, #8]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2200      	movs	r2, #0
 800299e:	2140      	movs	r1, #64	@ 0x40
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f831 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	80002000 	.word	0x80002000

080029c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d103      	bne.n	80029de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d007      	beq.n	80029fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	619a      	str	r2, [r3, #24]
  }
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a18:	e03b      	b.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	6839      	ldr	r1, [r7, #0]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f8d6 	bl	8002bd0 <I2C_IsErrorOccurred>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e041      	b.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d02d      	beq.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a36:	f7ff f825 	bl	8001a84 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d122      	bne.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4013      	ands	r3, r2
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d113      	bne.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	f043 0220 	orr.w	r2, r3, #32
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00f      	b.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	bf0c      	ite	eq
 8002aa2:	2301      	moveq	r3, #1
 8002aa4:	2300      	movne	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d0b4      	beq.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac6:	e033      	b.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f87f 	bl	8002bd0 <I2C_IsErrorOccurred>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e031      	b.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae2:	d025      	beq.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae4:	f7fe ffce 	bl	8001a84 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d302      	bcc.n	8002afa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d11a      	bne.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d013      	beq.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e007      	b.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d1c4      	bne.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b54:	e02f      	b.n	8002bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f838 	bl	8002bd0 <I2C_IsErrorOccurred>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e02d      	b.n	8002bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6a:	f7fe ff8b 	bl	8001a84 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11a      	bne.n	8002bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d013      	beq.n	8002bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e007      	b.n	8002bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d1c8      	bne.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	@ 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d068      	beq.n	8002cce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2210      	movs	r2, #16
 8002c02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c04:	e049      	b.n	8002c9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d045      	beq.n	8002c9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7fe ff39 	bl	8001a84 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_IsErrorOccurred+0x54>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d13a      	bne.n	8002c9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c46:	d121      	bne.n	8002c8c <I2C_IsErrorOccurred+0xbc>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c4e:	d01d      	beq.n	8002c8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d01a      	beq.n	8002c8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c66:	f7fe ff0d 	bl	8001a84 <HAL_GetTick>
 8002c6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c6c:	e00e      	b.n	8002c8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c6e:	f7fe ff09 	bl	8001a84 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b19      	cmp	r3, #25
 8002c7a:	d907      	bls.n	8002c8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	f043 0320 	orr.w	r3, r3, #32
 8002c82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c8a:	e006      	b.n	8002c9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d1e9      	bne.n	8002c6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d003      	beq.n	8002cb0 <I2C_IsErrorOccurred+0xe0>
 8002ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0aa      	beq.n	8002c06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	f043 0308 	orr.w	r3, r3, #8
 8002d08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01c      	beq.n	8002d7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff fe3b 	bl	80029c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b0d      	ldr	r3, [pc, #52]	@ (8002d8c <I2C_IsErrorOccurred+0x1bc>)
 8002d56:	400b      	ands	r3, r1
 8002d58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3728      	adds	r7, #40	@ 0x28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	fe00e800 	.word	0xfe00e800

08002d90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	817b      	strh	r3, [r7, #10]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002da2:	897b      	ldrh	r3, [r7, #10]
 8002da4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002da8:	7a7b      	ldrb	r3, [r7, #9]
 8002daa:	041b      	lsls	r3, r3, #16
 8002dac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	0d5b      	lsrs	r3, r3, #21
 8002dca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002dce:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <I2C_TransferConfig+0x60>)
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	ea02 0103 	and.w	r1, r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	03ff63ff 	.word	0x03ff63ff

08002df4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d138      	bne.n	8002e7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e032      	b.n	8002e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2224      	movs	r2, #36	@ 0x24
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6819      	ldr	r1, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
  }
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b085      	sub	sp, #20
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d139      	bne.n	8002f14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e033      	b.n	8002f16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2224      	movs	r2, #36	@ 0x24
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0201 	bic.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002edc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f28:	4b04      	ldr	r3, [pc, #16]	@ (8002f3c <HAL_PWREx_GetVoltageRange+0x18>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40007000 	.word	0x40007000

08002f40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f4e:	d130      	bne.n	8002fb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f50:	4b23      	ldr	r3, [pc, #140]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f5c:	d038      	beq.n	8002fd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f5e:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f66:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2232      	movs	r2, #50	@ 0x32
 8002f74:	fb02 f303 	mul.w	r3, r2, r3
 8002f78:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	0c9b      	lsrs	r3, r3, #18
 8002f80:	3301      	adds	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f84:	e002      	b.n	8002f8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8c:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f98:	d102      	bne.n	8002fa0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f2      	bne.n	8002f86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fac:	d110      	bne.n	8002fd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e00f      	b.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fbe:	d007      	beq.n	8002fd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fc0:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fc8:	4a05      	ldr	r2, [pc, #20]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40007000 	.word	0x40007000
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	431bde83 	.word	0x431bde83

08002fec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e3ca      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffe:	4b97      	ldr	r3, [pc, #604]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003008:	4b94      	ldr	r3, [pc, #592]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80e4 	beq.w	80031e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <HAL_RCC_OscConfig+0x4a>
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	f040 808b 	bne.w	8003144 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b01      	cmp	r3, #1
 8003032:	f040 8087 	bne.w	8003144 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003036:	4b89      	ldr	r3, [pc, #548]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_RCC_OscConfig+0x62>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e3a2      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1a      	ldr	r2, [r3, #32]
 8003052:	4b82      	ldr	r3, [pc, #520]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <HAL_RCC_OscConfig+0x7c>
 800305e:	4b7f      	ldr	r3, [pc, #508]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003066:	e005      	b.n	8003074 <HAL_RCC_OscConfig+0x88>
 8003068:	4b7c      	ldr	r3, [pc, #496]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 800306a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003074:	4293      	cmp	r3, r2
 8003076:	d223      	bcs.n	80030c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fd55 	bl	8003b2c <RCC_SetFlashLatencyFromMSIRange>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e383      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800308c:	4b73      	ldr	r3, [pc, #460]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a72      	ldr	r2, [pc, #456]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003092:	f043 0308 	orr.w	r3, r3, #8
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b70      	ldr	r3, [pc, #448]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	496d      	ldr	r1, [pc, #436]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030aa:	4b6c      	ldr	r3, [pc, #432]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	4968      	ldr	r1, [pc, #416]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	604b      	str	r3, [r1, #4]
 80030be:	e025      	b.n	800310c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c0:	4b66      	ldr	r3, [pc, #408]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a65      	ldr	r2, [pc, #404]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 80030c6:	f043 0308 	orr.w	r3, r3, #8
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b63      	ldr	r3, [pc, #396]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4960      	ldr	r1, [pc, #384]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030de:	4b5f      	ldr	r3, [pc, #380]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	495b      	ldr	r1, [pc, #364]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fd15 	bl	8003b2c <RCC_SetFlashLatencyFromMSIRange>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e343      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800310c:	f000 fc4a 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b52      	ldr	r3, [pc, #328]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	4950      	ldr	r1, [pc, #320]	@ (8003260 <HAL_RCC_OscConfig+0x274>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
 8003128:	4a4e      	ldr	r2, [pc, #312]	@ (8003264 <HAL_RCC_OscConfig+0x278>)
 800312a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800312c:	4b4e      	ldr	r3, [pc, #312]	@ (8003268 <HAL_RCC_OscConfig+0x27c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7fe fc57 	bl	80019e4 <HAL_InitTick>
 8003136:	4603      	mov	r3, r0
 8003138:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d052      	beq.n	80031e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	e327      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d032      	beq.n	80031b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800314c:	4b43      	ldr	r3, [pc, #268]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a42      	ldr	r2, [pc, #264]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003158:	f7fe fc94 	bl	8001a84 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003160:	f7fe fc90 	bl	8001a84 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e310      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003172:	4b3a      	ldr	r3, [pc, #232]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800317e:	4b37      	ldr	r3, [pc, #220]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a36      	ldr	r2, [pc, #216]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003184:	f043 0308 	orr.w	r3, r3, #8
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b34      	ldr	r3, [pc, #208]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	4931      	ldr	r1, [pc, #196]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003198:	4313      	orrs	r3, r2
 800319a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800319c:	4b2f      	ldr	r3, [pc, #188]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	492c      	ldr	r1, [pc, #176]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]
 80031b0:	e01a      	b.n	80031e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031b2:	4b2a      	ldr	r3, [pc, #168]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a29      	ldr	r2, [pc, #164]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031be:	f7fe fc61 	bl	8001a84 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031c6:	f7fe fc5d 	bl	8001a84 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e2dd      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031d8:	4b20      	ldr	r3, [pc, #128]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f0      	bne.n	80031c6 <HAL_RCC_OscConfig+0x1da>
 80031e4:	e000      	b.n	80031e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d074      	beq.n	80032de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d005      	beq.n	8003206 <HAL_RCC_OscConfig+0x21a>
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	d10e      	bne.n	800321e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b03      	cmp	r3, #3
 8003204:	d10b      	bne.n	800321e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003206:	4b15      	ldr	r3, [pc, #84]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d064      	beq.n	80032dc <HAL_RCC_OscConfig+0x2f0>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d160      	bne.n	80032dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e2ba      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003226:	d106      	bne.n	8003236 <HAL_RCC_OscConfig+0x24a>
 8003228:	4b0c      	ldr	r3, [pc, #48]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a0b      	ldr	r2, [pc, #44]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 800322e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	e026      	b.n	8003284 <HAL_RCC_OscConfig+0x298>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800323e:	d115      	bne.n	800326c <HAL_RCC_OscConfig+0x280>
 8003240:	4b06      	ldr	r3, [pc, #24]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a05      	ldr	r2, [pc, #20]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003246:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b03      	ldr	r3, [pc, #12]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a02      	ldr	r2, [pc, #8]	@ (800325c <HAL_RCC_OscConfig+0x270>)
 8003252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	e014      	b.n	8003284 <HAL_RCC_OscConfig+0x298>
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000
 8003260:	0800b4ec 	.word	0x0800b4ec
 8003264:	20000000 	.word	0x20000000
 8003268:	20000004 	.word	0x20000004
 800326c:	4ba0      	ldr	r3, [pc, #640]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a9f      	ldr	r2, [pc, #636]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 8003272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4b9d      	ldr	r3, [pc, #628]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a9c      	ldr	r2, [pc, #624]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 800327e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe fbfa 	bl	8001a84 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003294:	f7fe fbf6 	bl	8001a84 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	@ 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e276      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032a6:	4b92      	ldr	r3, [pc, #584]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0x2a8>
 80032b2:	e014      	b.n	80032de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fe fbe6 	bl	8001a84 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032bc:	f7fe fbe2 	bl	8001a84 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	@ 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e262      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ce:	4b88      	ldr	r3, [pc, #544]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x2d0>
 80032da:	e000      	b.n	80032de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d060      	beq.n	80033ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_OscConfig+0x310>
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d119      	bne.n	800332a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d116      	bne.n	800332a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032fc:	4b7c      	ldr	r3, [pc, #496]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_OscConfig+0x328>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e23f      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4b76      	ldr	r3, [pc, #472]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	061b      	lsls	r3, r3, #24
 8003322:	4973      	ldr	r1, [pc, #460]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003328:	e040      	b.n	80033ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d023      	beq.n	800337a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003332:	4b6f      	ldr	r3, [pc, #444]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6e      	ldr	r2, [pc, #440]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 8003338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800333c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fe fba1 	bl	8001a84 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003346:	f7fe fb9d 	bl	8001a84 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e21d      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003358:	4b65      	ldr	r3, [pc, #404]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003364:	4b62      	ldr	r3, [pc, #392]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	061b      	lsls	r3, r3, #24
 8003372:	495f      	ldr	r1, [pc, #380]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 8003374:	4313      	orrs	r3, r2
 8003376:	604b      	str	r3, [r1, #4]
 8003378:	e018      	b.n	80033ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337a:	4b5d      	ldr	r3, [pc, #372]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a5c      	ldr	r2, [pc, #368]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 8003380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fe fb7d 	bl	8001a84 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338e:	f7fe fb79 	bl	8001a84 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e1f9      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033a0:	4b53      	ldr	r3, [pc, #332]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f0      	bne.n	800338e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d03c      	beq.n	8003432 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01c      	beq.n	80033fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c0:	4b4b      	ldr	r3, [pc, #300]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 80033c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033c6:	4a4a      	ldr	r2, [pc, #296]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fe fb58 	bl	8001a84 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d8:	f7fe fb54 	bl	8001a84 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e1d4      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ea:	4b41      	ldr	r3, [pc, #260]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 80033ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ef      	beq.n	80033d8 <HAL_RCC_OscConfig+0x3ec>
 80033f8:	e01b      	b.n	8003432 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033fa:	4b3d      	ldr	r3, [pc, #244]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 80033fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003400:	4a3b      	ldr	r2, [pc, #236]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7fe fb3b 	bl	8001a84 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003412:	f7fe fb37 	bl	8001a84 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e1b7      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003424:	4b32      	ldr	r3, [pc, #200]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 8003426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ef      	bne.n	8003412 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80a6 	beq.w	800358c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003440:	2300      	movs	r3, #0
 8003442:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003444:	4b2a      	ldr	r3, [pc, #168]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10d      	bne.n	800346c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003450:	4b27      	ldr	r3, [pc, #156]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 8003452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003454:	4a26      	ldr	r2, [pc, #152]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 8003456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800345a:	6593      	str	r3, [r2, #88]	@ 0x58
 800345c:	4b24      	ldr	r3, [pc, #144]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003468:	2301      	movs	r3, #1
 800346a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346c:	4b21      	ldr	r3, [pc, #132]	@ (80034f4 <HAL_RCC_OscConfig+0x508>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d118      	bne.n	80034aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003478:	4b1e      	ldr	r3, [pc, #120]	@ (80034f4 <HAL_RCC_OscConfig+0x508>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1d      	ldr	r2, [pc, #116]	@ (80034f4 <HAL_RCC_OscConfig+0x508>)
 800347e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003482:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003484:	f7fe fafe 	bl	8001a84 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348c:	f7fe fafa 	bl	8001a84 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e17a      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349e:	4b15      	ldr	r3, [pc, #84]	@ (80034f4 <HAL_RCC_OscConfig+0x508>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d108      	bne.n	80034c4 <HAL_RCC_OscConfig+0x4d8>
 80034b2:	4b0f      	ldr	r3, [pc, #60]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b8:	4a0d      	ldr	r2, [pc, #52]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034c2:	e029      	b.n	8003518 <HAL_RCC_OscConfig+0x52c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b05      	cmp	r3, #5
 80034ca:	d115      	bne.n	80034f8 <HAL_RCC_OscConfig+0x50c>
 80034cc:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d2:	4a07      	ldr	r2, [pc, #28]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 80034d4:	f043 0304 	orr.w	r3, r3, #4
 80034d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034dc:	4b04      	ldr	r3, [pc, #16]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e2:	4a03      	ldr	r2, [pc, #12]	@ (80034f0 <HAL_RCC_OscConfig+0x504>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034ec:	e014      	b.n	8003518 <HAL_RCC_OscConfig+0x52c>
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40007000 	.word	0x40007000
 80034f8:	4b9c      	ldr	r3, [pc, #624]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fe:	4a9b      	ldr	r2, [pc, #620]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003508:	4b98      	ldr	r3, [pc, #608]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350e:	4a97      	ldr	r2, [pc, #604]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 8003510:	f023 0304 	bic.w	r3, r3, #4
 8003514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d016      	beq.n	800354e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003520:	f7fe fab0 	bl	8001a84 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003526:	e00a      	b.n	800353e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003528:	f7fe faac 	bl	8001a84 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e12a      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353e:	4b8b      	ldr	r3, [pc, #556]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ed      	beq.n	8003528 <HAL_RCC_OscConfig+0x53c>
 800354c:	e015      	b.n	800357a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354e:	f7fe fa99 	bl	8001a84 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003554:	e00a      	b.n	800356c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003556:	f7fe fa95 	bl	8001a84 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e113      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800356c:	4b7f      	ldr	r3, [pc, #508]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1ed      	bne.n	8003556 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800357a:	7ffb      	ldrb	r3, [r7, #31]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d105      	bne.n	800358c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003580:	4b7a      	ldr	r3, [pc, #488]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003584:	4a79      	ldr	r2, [pc, #484]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 8003586:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800358a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80fe 	beq.w	8003792 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359a:	2b02      	cmp	r3, #2
 800359c:	f040 80d0 	bne.w	8003740 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035a0:	4b72      	ldr	r3, [pc, #456]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0203 	and.w	r2, r3, #3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d130      	bne.n	8003616 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	3b01      	subs	r3, #1
 80035c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d127      	bne.n	8003616 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d11f      	bne.n	8003616 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035e0:	2a07      	cmp	r2, #7
 80035e2:	bf14      	ite	ne
 80035e4:	2201      	movne	r2, #1
 80035e6:	2200      	moveq	r2, #0
 80035e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d113      	bne.n	8003616 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	3b01      	subs	r3, #1
 80035fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d109      	bne.n	8003616 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	085b      	lsrs	r3, r3, #1
 800360e:	3b01      	subs	r3, #1
 8003610:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d06e      	beq.n	80036f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b0c      	cmp	r3, #12
 800361a:	d069      	beq.n	80036f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800361c:	4b53      	ldr	r3, [pc, #332]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d105      	bne.n	8003634 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003628:	4b50      	ldr	r3, [pc, #320]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0ad      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003638:	4b4c      	ldr	r3, [pc, #304]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a4b      	ldr	r2, [pc, #300]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 800363e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003642:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003644:	f7fe fa1e 	bl	8001a84 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe fa1a 	bl	8001a84 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e09a      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365e:	4b43      	ldr	r3, [pc, #268]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800366a:	4b40      	ldr	r3, [pc, #256]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	4b40      	ldr	r3, [pc, #256]	@ (8003770 <HAL_RCC_OscConfig+0x784>)
 8003670:	4013      	ands	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800367a:	3a01      	subs	r2, #1
 800367c:	0112      	lsls	r2, r2, #4
 800367e:	4311      	orrs	r1, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003684:	0212      	lsls	r2, r2, #8
 8003686:	4311      	orrs	r1, r2
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800368c:	0852      	lsrs	r2, r2, #1
 800368e:	3a01      	subs	r2, #1
 8003690:	0552      	lsls	r2, r2, #21
 8003692:	4311      	orrs	r1, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003698:	0852      	lsrs	r2, r2, #1
 800369a:	3a01      	subs	r2, #1
 800369c:	0652      	lsls	r2, r2, #25
 800369e:	4311      	orrs	r1, r2
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036a4:	0912      	lsrs	r2, r2, #4
 80036a6:	0452      	lsls	r2, r2, #17
 80036a8:	430a      	orrs	r2, r1
 80036aa:	4930      	ldr	r1, [pc, #192]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036b0:	4b2e      	ldr	r3, [pc, #184]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a2d      	ldr	r2, [pc, #180]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 80036b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036bc:	4b2b      	ldr	r3, [pc, #172]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4a2a      	ldr	r2, [pc, #168]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 80036c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036c8:	f7fe f9dc 	bl	8001a84 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fe f9d8 	bl	8001a84 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e058      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e2:	4b22      	ldr	r3, [pc, #136]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ee:	e050      	b.n	8003792 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e04f      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f4:	4b1d      	ldr	r3, [pc, #116]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d148      	bne.n	8003792 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003700:	4b1a      	ldr	r3, [pc, #104]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a19      	ldr	r2, [pc, #100]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 8003706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800370a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800370c:	4b17      	ldr	r3, [pc, #92]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	4a16      	ldr	r2, [pc, #88]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 8003712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003716:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003718:	f7fe f9b4 	bl	8001a84 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003720:	f7fe f9b0 	bl	8001a84 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e030      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003732:	4b0e      	ldr	r3, [pc, #56]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x734>
 800373e:	e028      	b.n	8003792 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d023      	beq.n	800378e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003746:	4b09      	ldr	r3, [pc, #36]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a08      	ldr	r2, [pc, #32]	@ (800376c <HAL_RCC_OscConfig+0x780>)
 800374c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003752:	f7fe f997 	bl	8001a84 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003758:	e00c      	b.n	8003774 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375a:	f7fe f993 	bl	8001a84 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d905      	bls.n	8003774 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e013      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
 800376c:	40021000 	.word	0x40021000
 8003770:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003774:	4b09      	ldr	r3, [pc, #36]	@ (800379c <HAL_RCC_OscConfig+0x7b0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ec      	bne.n	800375a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003780:	4b06      	ldr	r3, [pc, #24]	@ (800379c <HAL_RCC_OscConfig+0x7b0>)
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	4905      	ldr	r1, [pc, #20]	@ (800379c <HAL_RCC_OscConfig+0x7b0>)
 8003786:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <HAL_RCC_OscConfig+0x7b4>)
 8003788:	4013      	ands	r3, r2
 800378a:	60cb      	str	r3, [r1, #12]
 800378c:	e001      	b.n	8003792 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3720      	adds	r7, #32
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000
 80037a0:	feeefffc 	.word	0xfeeefffc

080037a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0e7      	b.n	8003988 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b8:	4b75      	ldr	r3, [pc, #468]	@ (8003990 <HAL_RCC_ClockConfig+0x1ec>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d910      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b72      	ldr	r3, [pc, #456]	@ (8003990 <HAL_RCC_ClockConfig+0x1ec>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 0207 	bic.w	r2, r3, #7
 80037ce:	4970      	ldr	r1, [pc, #448]	@ (8003990 <HAL_RCC_ClockConfig+0x1ec>)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003990 <HAL_RCC_ClockConfig+0x1ec>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0cf      	b.n	8003988 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d010      	beq.n	8003816 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	4b66      	ldr	r3, [pc, #408]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003800:	429a      	cmp	r2, r3
 8003802:	d908      	bls.n	8003816 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003804:	4b63      	ldr	r3, [pc, #396]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4960      	ldr	r1, [pc, #384]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d04c      	beq.n	80038bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b03      	cmp	r3, #3
 8003828:	d107      	bne.n	800383a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800382a:	4b5a      	ldr	r3, [pc, #360]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d121      	bne.n	800387a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e0a6      	b.n	8003988 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003842:	4b54      	ldr	r3, [pc, #336]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d115      	bne.n	800387a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e09a      	b.n	8003988 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800385a:	4b4e      	ldr	r3, [pc, #312]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e08e      	b.n	8003988 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800386a:	4b4a      	ldr	r3, [pc, #296]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e086      	b.n	8003988 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800387a:	4b46      	ldr	r3, [pc, #280]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 0203 	bic.w	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4943      	ldr	r1, [pc, #268]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388c:	f7fe f8fa 	bl	8001a84 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	e00a      	b.n	80038aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003894:	f7fe f8f6 	bl	8001a84 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e06e      	b.n	8003988 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 020c 	and.w	r2, r3, #12
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d1eb      	bne.n	8003894 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d010      	beq.n	80038ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	4b31      	ldr	r3, [pc, #196]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d208      	bcs.n	80038ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	492b      	ldr	r1, [pc, #172]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038ea:	4b29      	ldr	r3, [pc, #164]	@ (8003990 <HAL_RCC_ClockConfig+0x1ec>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d210      	bcs.n	800391a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f8:	4b25      	ldr	r3, [pc, #148]	@ (8003990 <HAL_RCC_ClockConfig+0x1ec>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 0207 	bic.w	r2, r3, #7
 8003900:	4923      	ldr	r1, [pc, #140]	@ (8003990 <HAL_RCC_ClockConfig+0x1ec>)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	4313      	orrs	r3, r2
 8003906:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003908:	4b21      	ldr	r3, [pc, #132]	@ (8003990 <HAL_RCC_ClockConfig+0x1ec>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d001      	beq.n	800391a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e036      	b.n	8003988 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003926:	4b1b      	ldr	r3, [pc, #108]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4918      	ldr	r1, [pc, #96]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 8003934:	4313      	orrs	r3, r2
 8003936:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003944:	4b13      	ldr	r3, [pc, #76]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4910      	ldr	r1, [pc, #64]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 8003954:	4313      	orrs	r3, r2
 8003956:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003958:	f000 f824 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 800395c:	4602      	mov	r2, r0
 800395e:	4b0d      	ldr	r3, [pc, #52]	@ (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	490b      	ldr	r1, [pc, #44]	@ (8003998 <HAL_RCC_ClockConfig+0x1f4>)
 800396a:	5ccb      	ldrb	r3, [r1, r3]
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
 8003974:	4a09      	ldr	r2, [pc, #36]	@ (800399c <HAL_RCC_ClockConfig+0x1f8>)
 8003976:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003978:	4b09      	ldr	r3, [pc, #36]	@ (80039a0 <HAL_RCC_ClockConfig+0x1fc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe f831 	bl	80019e4 <HAL_InitTick>
 8003982:	4603      	mov	r3, r0
 8003984:	72fb      	strb	r3, [r7, #11]

  return status;
 8003986:	7afb      	ldrb	r3, [r7, #11]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40022000 	.word	0x40022000
 8003994:	40021000 	.word	0x40021000
 8003998:	0800b4ec 	.word	0x0800b4ec
 800399c:	20000000 	.word	0x20000000
 80039a0:	20000004 	.word	0x20000004

080039a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b089      	sub	sp, #36	@ 0x24
 80039a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039b2:	4b3e      	ldr	r3, [pc, #248]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x108>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039bc:	4b3b      	ldr	r3, [pc, #236]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x108>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x34>
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	d121      	bne.n	8003a16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d11e      	bne.n	8003a16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039d8:	4b34      	ldr	r3, [pc, #208]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x108>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039e4:	4b31      	ldr	r3, [pc, #196]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x108>)
 80039e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	61fb      	str	r3, [r7, #28]
 80039f2:	e005      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039f4:	4b2d      	ldr	r3, [pc, #180]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x108>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a00:	4a2b      	ldr	r2, [pc, #172]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10d      	bne.n	8003a2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a14:	e00a      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d102      	bne.n	8003a22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a1c:	4b25      	ldr	r3, [pc, #148]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	e004      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a28:	4b23      	ldr	r3, [pc, #140]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	d134      	bne.n	8003a9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a32:	4b1e      	ldr	r3, [pc, #120]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x108>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d003      	beq.n	8003a4a <HAL_RCC_GetSysClockFreq+0xa6>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d003      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0xac>
 8003a48:	e005      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a4c:	617b      	str	r3, [r7, #20]
      break;
 8003a4e:	e005      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a50:	4b19      	ldr	r3, [pc, #100]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a52:	617b      	str	r3, [r7, #20]
      break;
 8003a54:	e002      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	617b      	str	r3, [r7, #20]
      break;
 8003a5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a5c:	4b13      	ldr	r3, [pc, #76]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	3301      	adds	r3, #1
 8003a68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a6a:	4b10      	ldr	r3, [pc, #64]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	fb03 f202 	mul.w	r2, r3, r2
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a82:	4b0a      	ldr	r3, [pc, #40]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x108>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	0e5b      	lsrs	r3, r3, #25
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a9c:	69bb      	ldr	r3, [r7, #24]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3724      	adds	r7, #36	@ 0x24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	0800b504 	.word	0x0800b504
 8003ab4:	00f42400 	.word	0x00f42400
 8003ab8:	007a1200 	.word	0x007a1200

08003abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac0:	4b03      	ldr	r3, [pc, #12]	@ (8003ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000000 	.word	0x20000000

08003ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ad8:	f7ff fff0 	bl	8003abc <HAL_RCC_GetHCLKFreq>
 8003adc:	4602      	mov	r2, r0
 8003ade:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	4904      	ldr	r1, [pc, #16]	@ (8003afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aea:	5ccb      	ldrb	r3, [r1, r3]
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	0800b4fc 	.word	0x0800b4fc

08003b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b04:	f7ff ffda 	bl	8003abc <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b06      	ldr	r3, [pc, #24]	@ (8003b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	0adb      	lsrs	r3, r3, #11
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4904      	ldr	r1, [pc, #16]	@ (8003b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40021000 	.word	0x40021000
 8003b28:	0800b4fc 	.word	0x0800b4fc

08003b2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b38:	4b2a      	ldr	r3, [pc, #168]	@ (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b44:	f7ff f9ee 	bl	8002f24 <HAL_PWREx_GetVoltageRange>
 8003b48:	6178      	str	r0, [r7, #20]
 8003b4a:	e014      	b.n	8003b76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b4c:	4b25      	ldr	r3, [pc, #148]	@ (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b50:	4a24      	ldr	r2, [pc, #144]	@ (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b58:	4b22      	ldr	r3, [pc, #136]	@ (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b64:	f7ff f9de 	bl	8002f24 <HAL_PWREx_GetVoltageRange>
 8003b68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b7c:	d10b      	bne.n	8003b96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b80      	cmp	r3, #128	@ 0x80
 8003b82:	d919      	bls.n	8003bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b88:	d902      	bls.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	e013      	b.n	8003bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b90:	2301      	movs	r3, #1
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	e010      	b.n	8003bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b80      	cmp	r3, #128	@ 0x80
 8003b9a:	d902      	bls.n	8003ba2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	e00a      	b.n	8003bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b80      	cmp	r3, #128	@ 0x80
 8003ba6:	d102      	bne.n	8003bae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ba8:	2302      	movs	r3, #2
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	e004      	b.n	8003bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b70      	cmp	r3, #112	@ 0x70
 8003bb2:	d101      	bne.n	8003bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f023 0207 	bic.w	r2, r3, #7
 8003bc0:	4909      	ldr	r1, [pc, #36]	@ (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bc8:	4b07      	ldr	r3, [pc, #28]	@ (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d001      	beq.n	8003bda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40022000 	.word	0x40022000

08003bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d041      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c10:	d02a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c16:	d824      	bhi.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c1c:	d008      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c22:	d81e      	bhi.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c2c:	d010      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c2e:	e018      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c30:	4b86      	ldr	r3, [pc, #536]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4a85      	ldr	r2, [pc, #532]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c3c:	e015      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3304      	adds	r3, #4
 8003c42:	2100      	movs	r1, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 f829 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c4e:	e00c      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3320      	adds	r3, #32
 8003c54:	2100      	movs	r1, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	f001 f914 	bl	8004e84 <RCCEx_PLLSAI2_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c60:	e003      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	74fb      	strb	r3, [r7, #19]
      break;
 8003c66:	e000      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c6a:	7cfb      	ldrb	r3, [r7, #19]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c70:	4b76      	ldr	r3, [pc, #472]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c7e:	4973      	ldr	r1, [pc, #460]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c86:	e001      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c88:	7cfb      	ldrb	r3, [r7, #19]
 8003c8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d041      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ca0:	d02a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ca2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ca6:	d824      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ca8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cac:	d008      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cb2:	d81e      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003cb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cbc:	d010      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cbe:	e018      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cc0:	4b62      	ldr	r3, [pc, #392]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a61      	ldr	r2, [pc, #388]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ccc:	e015      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 ffe1 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cde:	e00c      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3320      	adds	r3, #32
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 f8cc 	bl	8004e84 <RCCEx_PLLSAI2_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cf0:	e003      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	74fb      	strb	r3, [r7, #19]
      break;
 8003cf6:	e000      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cfa:	7cfb      	ldrb	r3, [r7, #19]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10b      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d00:	4b52      	ldr	r3, [pc, #328]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d0e:	494f      	ldr	r1, [pc, #316]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d16:	e001      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80a0 	beq.w	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d2e:	4b47      	ldr	r3, [pc, #284]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00d      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d44:	4b41      	ldr	r3, [pc, #260]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d48:	4a40      	ldr	r2, [pc, #256]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d50:	4b3e      	ldr	r3, [pc, #248]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d60:	4b3b      	ldr	r3, [pc, #236]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a3a      	ldr	r2, [pc, #232]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d6c:	f7fd fe8a 	bl	8001a84 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d72:	e009      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d74:	f7fd fe86 	bl	8001a84 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d902      	bls.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	74fb      	strb	r3, [r7, #19]
        break;
 8003d86:	e005      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d88:	4b31      	ldr	r3, [pc, #196]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0ef      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d94:	7cfb      	ldrb	r3, [r7, #19]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d15c      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01f      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d019      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003db8:	4b24      	ldr	r3, [pc, #144]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc4:	4b21      	ldr	r3, [pc, #132]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	4a20      	ldr	r2, [pc, #128]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dda:	4a1c      	ldr	r2, [pc, #112]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003de4:	4a19      	ldr	r2, [pc, #100]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d016      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df6:	f7fd fe45 	bl	8001a84 <HAL_GetTick>
 8003dfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfc:	e00b      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7fd fe41 	bl	8001a84 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d902      	bls.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	74fb      	strb	r3, [r7, #19]
            break;
 8003e14:	e006      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e16:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ec      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e24:	7cfb      	ldrb	r3, [r7, #19]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e2a:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e3a:	4904      	ldr	r1, [pc, #16]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e42:	e009      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	74bb      	strb	r3, [r7, #18]
 8003e48:	e006      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e58:	7c7b      	ldrb	r3, [r7, #17]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d105      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5e:	4b9e      	ldr	r3, [pc, #632]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e62:	4a9d      	ldr	r2, [pc, #628]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e76:	4b98      	ldr	r3, [pc, #608]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7c:	f023 0203 	bic.w	r2, r3, #3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e84:	4994      	ldr	r1, [pc, #592]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e98:	4b8f      	ldr	r3, [pc, #572]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9e:	f023 020c 	bic.w	r2, r3, #12
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea6:	498c      	ldr	r1, [pc, #560]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eba:	4b87      	ldr	r3, [pc, #540]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec8:	4983      	ldr	r1, [pc, #524]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003edc:	4b7e      	ldr	r3, [pc, #504]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eea:	497b      	ldr	r1, [pc, #492]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003efe:	4b76      	ldr	r3, [pc, #472]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0c:	4972      	ldr	r1, [pc, #456]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f20:	4b6d      	ldr	r3, [pc, #436]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2e:	496a      	ldr	r1, [pc, #424]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f42:	4b65      	ldr	r3, [pc, #404]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f50:	4961      	ldr	r1, [pc, #388]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f64:	4b5c      	ldr	r3, [pc, #368]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f72:	4959      	ldr	r1, [pc, #356]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f86:	4b54      	ldr	r3, [pc, #336]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f94:	4950      	ldr	r1, [pc, #320]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb6:	4948      	ldr	r1, [pc, #288]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fca:	4b43      	ldr	r3, [pc, #268]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd8:	493f      	ldr	r1, [pc, #252]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d028      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fec:	4b3a      	ldr	r3, [pc, #232]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ffa:	4937      	ldr	r1, [pc, #220]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800400a:	d106      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800400c:	4b32      	ldr	r3, [pc, #200]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a31      	ldr	r2, [pc, #196]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004016:	60d3      	str	r3, [r2, #12]
 8004018:	e011      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800401e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004022:	d10c      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	2101      	movs	r1, #1
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fe36 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d028      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800404a:	4b23      	ldr	r3, [pc, #140]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004050:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004058:	491f      	ldr	r1, [pc, #124]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004068:	d106      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406a:	4b1b      	ldr	r3, [pc, #108]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	4a1a      	ldr	r2, [pc, #104]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004070:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004074:	60d3      	str	r3, [r2, #12]
 8004076:	e011      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004080:	d10c      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3304      	adds	r3, #4
 8004086:	2101      	movs	r1, #1
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fe07 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004092:	7cfb      	ldrb	r3, [r7, #19]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004098:	7cfb      	ldrb	r3, [r7, #19]
 800409a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d02b      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040a8:	4b0b      	ldr	r3, [pc, #44]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b6:	4908      	ldr	r1, [pc, #32]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040c6:	d109      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c8:	4b03      	ldr	r3, [pc, #12]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4a02      	ldr	r2, [pc, #8]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040d2:	60d3      	str	r3, [r2, #12]
 80040d4:	e014      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80040d6:	bf00      	nop
 80040d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040e4:	d10c      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3304      	adds	r3, #4
 80040ea:	2101      	movs	r1, #1
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fdd5 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d02f      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800410c:	4b2b      	ldr	r3, [pc, #172]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800411a:	4928      	ldr	r1, [pc, #160]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800412a:	d10d      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	2102      	movs	r1, #2
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fdb2 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d014      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004142:	7cfb      	ldrb	r3, [r7, #19]
 8004144:	74bb      	strb	r3, [r7, #18]
 8004146:	e011      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800414c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004150:	d10c      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3320      	adds	r3, #32
 8004156:	2102      	movs	r1, #2
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fe93 	bl	8004e84 <RCCEx_PLLSAI2_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004162:	7cfb      	ldrb	r3, [r7, #19]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004168:	7cfb      	ldrb	r3, [r7, #19]
 800416a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004178:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004186:	490d      	ldr	r1, [pc, #52]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00b      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800419a:	4b08      	ldr	r3, [pc, #32]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041aa:	4904      	ldr	r1, [pc, #16]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000

080041c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041d2:	d13e      	bne.n	8004252 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80041d4:	4bb2      	ldr	r3, [pc, #712]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041de:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041e6:	d028      	beq.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041ee:	f200 8542 	bhi.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f8:	d005      	beq.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004200:	d00e      	beq.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004202:	f000 bd38 	b.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004206:	4ba6      	ldr	r3, [pc, #664]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b02      	cmp	r3, #2
 8004212:	f040 8532 	bne.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8004216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800421a:	61fb      	str	r3, [r7, #28]
      break;
 800421c:	f000 bd2d 	b.w	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004220:	4b9f      	ldr	r3, [pc, #636]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004222:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	f040 8527 	bne.w	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8004230:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004234:	61fb      	str	r3, [r7, #28]
      break;
 8004236:	f000 bd22 	b.w	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800423a:	4b99      	ldr	r3, [pc, #612]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004242:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004246:	f040 851c 	bne.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800424a:	4b96      	ldr	r3, [pc, #600]	@ (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800424c:	61fb      	str	r3, [r7, #28]
      break;
 800424e:	f000 bd18 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004252:	4b93      	ldr	r3, [pc, #588]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2b03      	cmp	r3, #3
 8004260:	d036      	beq.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d840      	bhi.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d003      	beq.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d020      	beq.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004274:	e039      	b.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004276:	4b8a      	ldr	r3, [pc, #552]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b02      	cmp	r3, #2
 8004280:	d116      	bne.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004282:	4b87      	ldr	r3, [pc, #540]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800428e:	4b84      	ldr	r3, [pc, #528]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	e005      	b.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800429a:	4b81      	ldr	r3, [pc, #516]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800429c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042a0:	0a1b      	lsrs	r3, r3, #8
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	4a80      	ldr	r2, [pc, #512]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80042a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80042ae:	e01f      	b.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61bb      	str	r3, [r7, #24]
      break;
 80042b4:	e01c      	b.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042b6:	4b7a      	ldr	r3, [pc, #488]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c2:	d102      	bne.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80042c4:	4b79      	ldr	r3, [pc, #484]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80042c6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80042c8:	e012      	b.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61bb      	str	r3, [r7, #24]
      break;
 80042ce:	e00f      	b.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80042d0:	4b73      	ldr	r3, [pc, #460]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042dc:	d102      	bne.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80042de:	4b74      	ldr	r3, [pc, #464]	@ (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80042e2:	e005      	b.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	61bb      	str	r3, [r7, #24]
      break;
 80042e8:	e002      	b.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]
      break;
 80042ee:	bf00      	nop
    }

    switch(PeriphClk)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80042f6:	f000 80dd 	beq.w	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004300:	f200 84c1 	bhi.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800430a:	f000 80d3 	beq.w	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004314:	f200 84b7 	bhi.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800431e:	f000 835f 	beq.w	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004328:	f200 84ad 	bhi.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004332:	f000 847e 	beq.w	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800433c:	f200 84a3 	bhi.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004346:	f000 82cd 	beq.w	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004350:	f200 8499 	bhi.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800435a:	f000 80ab 	beq.w	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004364:	f200 848f 	bhi.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436e:	f000 8090 	beq.w	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004378:	f200 8485 	bhi.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004382:	d07f      	beq.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800438a:	f200 847c 	bhi.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004394:	f000 8403 	beq.w	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439e:	f200 8472 	bhi.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a8:	f000 83af 	beq.w	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b2:	f200 8468 	bhi.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043bc:	f000 8379 	beq.w	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043c6:	f200 845e 	bhi.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b80      	cmp	r3, #128	@ 0x80
 80043ce:	f000 8344 	beq.w	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b80      	cmp	r3, #128	@ 0x80
 80043d6:	f200 8456 	bhi.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d84b      	bhi.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 844f 	beq.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	2b1f      	cmp	r3, #31
 80043ee:	f200 844a 	bhi.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043f2:	a201      	add	r2, pc, #4	@ (adr r2, 80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	080045e1 	.word	0x080045e1
 80043fc:	0800464f 	.word	0x0800464f
 8004400:	08004c87 	.word	0x08004c87
 8004404:	080046e3 	.word	0x080046e3
 8004408:	08004c87 	.word	0x08004c87
 800440c:	08004c87 	.word	0x08004c87
 8004410:	08004c87 	.word	0x08004c87
 8004414:	08004769 	.word	0x08004769
 8004418:	08004c87 	.word	0x08004c87
 800441c:	08004c87 	.word	0x08004c87
 8004420:	08004c87 	.word	0x08004c87
 8004424:	08004c87 	.word	0x08004c87
 8004428:	08004c87 	.word	0x08004c87
 800442c:	08004c87 	.word	0x08004c87
 8004430:	08004c87 	.word	0x08004c87
 8004434:	080047e1 	.word	0x080047e1
 8004438:	08004c87 	.word	0x08004c87
 800443c:	08004c87 	.word	0x08004c87
 8004440:	08004c87 	.word	0x08004c87
 8004444:	08004c87 	.word	0x08004c87
 8004448:	08004c87 	.word	0x08004c87
 800444c:	08004c87 	.word	0x08004c87
 8004450:	08004c87 	.word	0x08004c87
 8004454:	08004c87 	.word	0x08004c87
 8004458:	08004c87 	.word	0x08004c87
 800445c:	08004c87 	.word	0x08004c87
 8004460:	08004c87 	.word	0x08004c87
 8004464:	08004c87 	.word	0x08004c87
 8004468:	08004c87 	.word	0x08004c87
 800446c:	08004c87 	.word	0x08004c87
 8004470:	08004c87 	.word	0x08004c87
 8004474:	08004863 	.word	0x08004863
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b40      	cmp	r3, #64	@ 0x40
 800447c:	f000 82c1 	beq.w	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004480:	f000 bc01 	b.w	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004484:	69b9      	ldr	r1, [r7, #24]
 8004486:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800448a:	f000 fdd9 	bl	8005040 <RCCEx_GetSAIxPeriphCLKFreq>
 800448e:	61f8      	str	r0, [r7, #28]
      break;
 8004490:	e3fa      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004492:	69b9      	ldr	r1, [r7, #24]
 8004494:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004498:	f000 fdd2 	bl	8005040 <RCCEx_GetSAIxPeriphCLKFreq>
 800449c:	61f8      	str	r0, [r7, #28]
      break;
 800449e:	e3f3      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80044a0:	40021000 	.word	0x40021000
 80044a4:	0003d090 	.word	0x0003d090
 80044a8:	0800b504 	.word	0x0800b504
 80044ac:	00f42400 	.word	0x00f42400
 80044b0:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80044b4:	4ba9      	ldr	r3, [pc, #676]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ba:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80044c6:	d00c      	beq.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80044ce:	d87f      	bhi.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044d6:	d04e      	beq.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044de:	d01d      	beq.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80044e0:	e076      	b.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80044e2:	4b9e      	ldr	r3, [pc, #632]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d172      	bne.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80044ee:	4b9b      	ldr	r3, [pc, #620]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d005      	beq.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80044fa:	4b98      	ldr	r3, [pc, #608]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	e005      	b.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8004506:	4b95      	ldr	r3, [pc, #596]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004508:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	4a93      	ldr	r2, [pc, #588]	@ (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004518:	61fb      	str	r3, [r7, #28]
          break;
 800451a:	e05b      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800451c:	4b8f      	ldr	r3, [pc, #572]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004524:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004528:	d156      	bne.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800452a:	4b8c      	ldr	r3, [pc, #560]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004536:	d14f      	bne.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004538:	4b88      	ldr	r3, [pc, #544]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	0a1b      	lsrs	r3, r3, #8
 800453e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004542:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	fb03 f202 	mul.w	r2, r3, r2
 800454c:	4b83      	ldr	r3, [pc, #524]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	3301      	adds	r3, #1
 8004558:	fbb2 f3f3 	udiv	r3, r2, r3
 800455c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800455e:	4b7f      	ldr	r3, [pc, #508]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	0d5b      	lsrs	r3, r3, #21
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	3301      	adds	r3, #1
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004572:	61fb      	str	r3, [r7, #28]
          break;
 8004574:	e030      	b.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004576:	4b79      	ldr	r3, [pc, #484]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800457e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004582:	d12b      	bne.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004584:	4b75      	ldr	r3, [pc, #468]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800458c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004590:	d124      	bne.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004592:	4b72      	ldr	r3, [pc, #456]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	0a1b      	lsrs	r3, r3, #8
 8004598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800459c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	fb03 f202 	mul.w	r2, r3, r2
 80045a6:	4b6d      	ldr	r3, [pc, #436]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	3301      	adds	r3, #1
 80045b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80045b8:	4b68      	ldr	r3, [pc, #416]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	0d5b      	lsrs	r3, r3, #21
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	3301      	adds	r3, #1
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045cc:	61fb      	str	r3, [r7, #28]
          break;
 80045ce:	e005      	b.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80045d0:	bf00      	nop
 80045d2:	e359      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045d4:	bf00      	nop
 80045d6:	e357      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045d8:	bf00      	nop
 80045da:	e355      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045dc:	bf00      	nop
        break;
 80045de:	e353      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80045e0:	4b5e      	ldr	r3, [pc, #376]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d827      	bhi.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80045f2:	a201      	add	r2, pc, #4	@ (adr r2, 80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	08004609 	.word	0x08004609
 80045fc:	08004611 	.word	0x08004611
 8004600:	08004619 	.word	0x08004619
 8004604:	0800462d 	.word	0x0800462d
          frequency = HAL_RCC_GetPCLK2Freq();
 8004608:	f7ff fa7a 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 800460c:	61f8      	str	r0, [r7, #28]
          break;
 800460e:	e01d      	b.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004610:	f7ff f9c8 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8004614:	61f8      	str	r0, [r7, #28]
          break;
 8004616:	e019      	b.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004618:	4b50      	ldr	r3, [pc, #320]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004624:	d10f      	bne.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8004626:	4b4f      	ldr	r3, [pc, #316]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004628:	61fb      	str	r3, [r7, #28]
          break;
 800462a:	e00c      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800462c:	4b4b      	ldr	r3, [pc, #300]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b02      	cmp	r3, #2
 8004638:	d107      	bne.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800463a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800463e:	61fb      	str	r3, [r7, #28]
          break;
 8004640:	e003      	b.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8004642:	bf00      	nop
 8004644:	e320      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004646:	bf00      	nop
 8004648:	e31e      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800464a:	bf00      	nop
        break;
 800464c:	e31c      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800464e:	4b43      	ldr	r3, [pc, #268]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004654:	f003 030c 	and.w	r3, r3, #12
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b0c      	cmp	r3, #12
 800465e:	d83a      	bhi.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004660:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	0800469d 	.word	0x0800469d
 800466c:	080046d7 	.word	0x080046d7
 8004670:	080046d7 	.word	0x080046d7
 8004674:	080046d7 	.word	0x080046d7
 8004678:	080046a5 	.word	0x080046a5
 800467c:	080046d7 	.word	0x080046d7
 8004680:	080046d7 	.word	0x080046d7
 8004684:	080046d7 	.word	0x080046d7
 8004688:	080046ad 	.word	0x080046ad
 800468c:	080046d7 	.word	0x080046d7
 8004690:	080046d7 	.word	0x080046d7
 8004694:	080046d7 	.word	0x080046d7
 8004698:	080046c1 	.word	0x080046c1
          frequency = HAL_RCC_GetPCLK1Freq();
 800469c:	f7ff fa1a 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 80046a0:	61f8      	str	r0, [r7, #28]
          break;
 80046a2:	e01d      	b.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80046a4:	f7ff f97e 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 80046a8:	61f8      	str	r0, [r7, #28]
          break;
 80046aa:	e019      	b.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046ac:	4b2b      	ldr	r3, [pc, #172]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b8:	d10f      	bne.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80046ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80046bc:	61fb      	str	r3, [r7, #28]
          break;
 80046be:	e00c      	b.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046c0:	4b26      	ldr	r3, [pc, #152]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d107      	bne.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80046ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046d2:	61fb      	str	r3, [r7, #28]
          break;
 80046d4:	e003      	b.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80046d6:	bf00      	nop
 80046d8:	e2d6      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046da:	bf00      	nop
 80046dc:	e2d4      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046de:	bf00      	nop
        break;
 80046e0:	e2d2      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80046e2:	4b1e      	ldr	r3, [pc, #120]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b30      	cmp	r3, #48	@ 0x30
 80046f2:	d021      	beq.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	2b30      	cmp	r3, #48	@ 0x30
 80046f8:	d829      	bhi.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d011      	beq.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	2b20      	cmp	r3, #32
 8004704:	d823      	bhi.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b10      	cmp	r3, #16
 8004710:	d004      	beq.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8004712:	e01c      	b.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004714:	f7ff f9de 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8004718:	61f8      	str	r0, [r7, #28]
          break;
 800471a:	e01d      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 800471c:	f7ff f942 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8004720:	61f8      	str	r0, [r7, #28]
          break;
 8004722:	e019      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004724:	4b0d      	ldr	r3, [pc, #52]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004730:	d10f      	bne.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8004732:	4b0c      	ldr	r3, [pc, #48]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004734:	61fb      	str	r3, [r7, #28]
          break;
 8004736:	e00c      	b.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004738:	4b08      	ldr	r3, [pc, #32]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b02      	cmp	r3, #2
 8004744:	d107      	bne.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800474a:	61fb      	str	r3, [r7, #28]
          break;
 800474c:	e003      	b.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800474e:	bf00      	nop
 8004750:	e29a      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004752:	bf00      	nop
 8004754:	e298      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004756:	bf00      	nop
        break;
 8004758:	e296      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	0800b504 	.word	0x0800b504
 8004764:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004768:	4b9b      	ldr	r3, [pc, #620]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2bc0      	cmp	r3, #192	@ 0xc0
 8004778:	d021      	beq.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2bc0      	cmp	r3, #192	@ 0xc0
 800477e:	d829      	bhi.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b80      	cmp	r3, #128	@ 0x80
 8004784:	d011      	beq.n	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b80      	cmp	r3, #128	@ 0x80
 800478a:	d823      	bhi.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b40      	cmp	r3, #64	@ 0x40
 8004796:	d004      	beq.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004798:	e01c      	b.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800479a:	f7ff f99b 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 800479e:	61f8      	str	r0, [r7, #28]
          break;
 80047a0:	e01d      	b.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80047a2:	f7ff f8ff 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 80047a6:	61f8      	str	r0, [r7, #28]
          break;
 80047a8:	e019      	b.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047aa:	4b8b      	ldr	r3, [pc, #556]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b6:	d10f      	bne.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80047b8:	4b88      	ldr	r3, [pc, #544]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80047ba:	61fb      	str	r3, [r7, #28]
          break;
 80047bc:	e00c      	b.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80047be:	4b86      	ldr	r3, [pc, #536]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d107      	bne.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80047cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047d0:	61fb      	str	r3, [r7, #28]
          break;
 80047d2:	e003      	b.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80047d4:	bf00      	nop
 80047d6:	e257      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047d8:	bf00      	nop
 80047da:	e255      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047dc:	bf00      	nop
        break;
 80047de:	e253      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80047e0:	4b7d      	ldr	r3, [pc, #500]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047f2:	d025      	beq.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047fa:	d82c      	bhi.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004802:	d013      	beq.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800480a:	d824      	bhi.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d004      	beq.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004818:	d004      	beq.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800481a:	e01c      	b.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 800481c:	f7ff f95a 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8004820:	61f8      	str	r0, [r7, #28]
          break;
 8004822:	e01d      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004824:	f7ff f8be 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8004828:	61f8      	str	r0, [r7, #28]
          break;
 800482a:	e019      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800482c:	4b6a      	ldr	r3, [pc, #424]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004838:	d10f      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800483a:	4b68      	ldr	r3, [pc, #416]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800483c:	61fb      	str	r3, [r7, #28]
          break;
 800483e:	e00c      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004840:	4b65      	ldr	r3, [pc, #404]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d107      	bne.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800484e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004852:	61fb      	str	r3, [r7, #28]
          break;
 8004854:	e003      	b.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004856:	bf00      	nop
 8004858:	e216      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800485a:	bf00      	nop
 800485c:	e214      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800485e:	bf00      	nop
        break;
 8004860:	e212      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004862:	4b5d      	ldr	r3, [pc, #372]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004868:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004874:	d025      	beq.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800487c:	d82c      	bhi.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004884:	d013      	beq.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800488c:	d824      	bhi.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d004      	beq.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489a:	d004      	beq.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800489c:	e01c      	b.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800489e:	f7ff f919 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 80048a2:	61f8      	str	r0, [r7, #28]
          break;
 80048a4:	e01d      	b.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80048a6:	f7ff f87d 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 80048aa:	61f8      	str	r0, [r7, #28]
          break;
 80048ac:	e019      	b.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048ae:	4b4a      	ldr	r3, [pc, #296]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ba:	d10f      	bne.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80048bc:	4b47      	ldr	r3, [pc, #284]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80048be:	61fb      	str	r3, [r7, #28]
          break;
 80048c0:	e00c      	b.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048c2:	4b45      	ldr	r3, [pc, #276]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d107      	bne.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80048d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048d4:	61fb      	str	r3, [r7, #28]
          break;
 80048d6:	e003      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80048d8:	bf00      	nop
 80048da:	e1d5      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80048dc:	bf00      	nop
 80048de:	e1d3      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80048e0:	bf00      	nop
        break;
 80048e2:	e1d1      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80048e4:	4b3c      	ldr	r3, [pc, #240]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048f6:	d00c      	beq.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048fe:	d864      	bhi.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004906:	d008      	beq.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800490e:	d030      	beq.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004910:	e05b      	b.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004912:	f7ff f847 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8004916:	61f8      	str	r0, [r7, #28]
          break;
 8004918:	e05c      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800491a:	4b2f      	ldr	r3, [pc, #188]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004926:	d152      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004928:	4b2b      	ldr	r3, [pc, #172]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d04c      	beq.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004934:	4b28      	ldr	r3, [pc, #160]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	0a1b      	lsrs	r3, r3, #8
 800493a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800493e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	fb03 f202 	mul.w	r2, r3, r2
 8004948:	4b23      	ldr	r3, [pc, #140]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	091b      	lsrs	r3, r3, #4
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	3301      	adds	r3, #1
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800495a:	4b1f      	ldr	r3, [pc, #124]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	0e5b      	lsrs	r3, r3, #25
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	3301      	adds	r3, #1
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	fbb2 f3f3 	udiv	r3, r2, r3
 800496e:	61fb      	str	r3, [r7, #28]
          break;
 8004970:	e02d      	b.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004972:	4b19      	ldr	r3, [pc, #100]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800497a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800497e:	d128      	bne.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004980:	4b15      	ldr	r3, [pc, #84]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d022      	beq.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800498c:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	0a1b      	lsrs	r3, r3, #8
 8004992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004996:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	fb03 f202 	mul.w	r2, r3, r2
 80049a0:	4b0d      	ldr	r3, [pc, #52]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	3301      	adds	r3, #1
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80049b2:	4b09      	ldr	r3, [pc, #36]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	0e5b      	lsrs	r3, r3, #25
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	3301      	adds	r3, #1
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c6:	61fb      	str	r3, [r7, #28]
          break;
 80049c8:	e003      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80049ca:	bf00      	nop
 80049cc:	e15c      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80049ce:	bf00      	nop
 80049d0:	e15a      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80049d2:	bf00      	nop
        break;
 80049d4:	e158      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000
 80049dc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80049e0:	4b9d      	ldr	r3, [pc, #628]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049ea:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d103      	bne.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80049f2:	f7ff f885 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 80049f6:	61f8      	str	r0, [r7, #28]
        break;
 80049f8:	e146      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80049fa:	f7fe ffd3 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 80049fe:	61f8      	str	r0, [r7, #28]
        break;
 8004a00:	e142      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004a02:	4b95      	ldr	r3, [pc, #596]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a08:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a14:	d013      	beq.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a1c:	d819      	bhi.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d004      	beq.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a2a:	d004      	beq.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004a2c:	e011      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a2e:	f7ff f851 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8004a32:	61f8      	str	r0, [r7, #28]
          break;
 8004a34:	e010      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a36:	f7fe ffb5 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8004a3a:	61f8      	str	r0, [r7, #28]
          break;
 8004a3c:	e00c      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a3e:	4b86      	ldr	r3, [pc, #536]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4a:	d104      	bne.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004a4c:	4b83      	ldr	r3, [pc, #524]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004a4e:	61fb      	str	r3, [r7, #28]
          break;
 8004a50:	e001      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004a52:	bf00      	nop
 8004a54:	e118      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a56:	bf00      	nop
        break;
 8004a58:	e116      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a6c:	d013      	beq.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a74:	d819      	bhi.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d004      	beq.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a82:	d004      	beq.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004a84:	e011      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a86:	f7ff f825 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8004a8a:	61f8      	str	r0, [r7, #28]
          break;
 8004a8c:	e010      	b.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a8e:	f7fe ff89 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8004a92:	61f8      	str	r0, [r7, #28]
          break;
 8004a94:	e00c      	b.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a96:	4b70      	ldr	r3, [pc, #448]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aa2:	d104      	bne.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8004aa4:	4b6d      	ldr	r3, [pc, #436]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004aa6:	61fb      	str	r3, [r7, #28]
          break;
 8004aa8:	e001      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8004aaa:	bf00      	nop
 8004aac:	e0ec      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004aae:	bf00      	nop
        break;
 8004ab0:	e0ea      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004ab2:	4b69      	ldr	r3, [pc, #420]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ac4:	d013      	beq.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004acc:	d819      	bhi.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ada:	d004      	beq.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8004adc:	e011      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ade:	f7fe fff9 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8004ae2:	61f8      	str	r0, [r7, #28]
          break;
 8004ae4:	e010      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ae6:	f7fe ff5d 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8004aea:	61f8      	str	r0, [r7, #28]
          break;
 8004aec:	e00c      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004aee:	4b5a      	ldr	r3, [pc, #360]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004afa:	d104      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004afc:	4b57      	ldr	r3, [pc, #348]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004afe:	61fb      	str	r3, [r7, #28]
          break;
 8004b00:	e001      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004b02:	bf00      	nop
 8004b04:	e0c0      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b06:	bf00      	nop
        break;
 8004b08:	e0be      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004b0a:	4b53      	ldr	r3, [pc, #332]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b10:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b1c:	d02c      	beq.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b24:	d833      	bhi.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b2c:	d01a      	beq.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b34:	d82b      	bhi.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b42:	d004      	beq.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004b44:	e023      	b.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b46:	f7fe ffc5 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8004b4a:	61f8      	str	r0, [r7, #28]
          break;
 8004b4c:	e026      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004b4e:	4b42      	ldr	r3, [pc, #264]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d11a      	bne.n	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004b5c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004b60:	61fb      	str	r3, [r7, #28]
          break;
 8004b62:	e016      	b.n	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b64:	4b3c      	ldr	r3, [pc, #240]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b70:	d111      	bne.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004b72:	4b3a      	ldr	r3, [pc, #232]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004b74:	61fb      	str	r3, [r7, #28]
          break;
 8004b76:	e00e      	b.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b78:	4b37      	ldr	r3, [pc, #220]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d109      	bne.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b8a:	61fb      	str	r3, [r7, #28]
          break;
 8004b8c:	e005      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8004b8e:	bf00      	nop
 8004b90:	e07a      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b92:	bf00      	nop
 8004b94:	e078      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b96:	bf00      	nop
 8004b98:	e076      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b9a:	bf00      	nop
        break;
 8004b9c:	e074      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bb0:	d02c      	beq.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bb8:	d833      	bhi.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bc0:	d01a      	beq.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bc8:	d82b      	bhi.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d004      	beq.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bd6:	d004      	beq.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004bd8:	e023      	b.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bda:	f7fe ff7b 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8004bde:	61f8      	str	r0, [r7, #28]
          break;
 8004be0:	e026      	b.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004be2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d11a      	bne.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004bf0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004bf4:	61fb      	str	r3, [r7, #28]
          break;
 8004bf6:	e016      	b.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bf8:	4b17      	ldr	r3, [pc, #92]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c04:	d111      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004c06:	4b15      	ldr	r3, [pc, #84]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004c08:	61fb      	str	r3, [r7, #28]
          break;
 8004c0a:	e00e      	b.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c0c:	4b12      	ldr	r3, [pc, #72]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d109      	bne.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c1e:	61fb      	str	r3, [r7, #28]
          break;
 8004c20:	e005      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004c22:	bf00      	nop
 8004c24:	e030      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c26:	bf00      	nop
 8004c28:	e02e      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c2a:	bf00      	nop
 8004c2c:	e02c      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c2e:	bf00      	nop
        break;
 8004c30:	e02a      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004c32:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4a:	d009      	beq.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004c4c:	e012      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c4e:	f7fe ff41 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8004c52:	61f8      	str	r0, [r7, #28]
          break;
 8004c54:	e00e      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c60:	4b0c      	ldr	r3, [pc, #48]	@ (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004c70:	61fb      	str	r3, [r7, #28]
          break;
 8004c72:	bf00      	nop
        break;
 8004c74:	e008      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004c76:	bf00      	nop
 8004c78:	e006      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004c7a:	bf00      	nop
 8004c7c:	e004      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004c7e:	bf00      	nop
 8004c80:	e002      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004c82:	bf00      	nop
 8004c84:	e000      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004c86:	bf00      	nop
    }
  }

  return(frequency);
 8004c88:	69fb      	ldr	r3, [r7, #28]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000
 8004c98:	00f42400 	.word	0x00f42400

08004c9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004caa:	4b75      	ldr	r3, [pc, #468]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d018      	beq.n	8004ce8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cb6:	4b72      	ldr	r3, [pc, #456]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0203 	and.w	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d10d      	bne.n	8004ce2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cce:	4b6c      	ldr	r3, [pc, #432]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	091b      	lsrs	r3, r3, #4
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
       ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d047      	beq.n	8004d72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	73fb      	strb	r3, [r7, #15]
 8004ce6:	e044      	b.n	8004d72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d018      	beq.n	8004d22 <RCCEx_PLLSAI1_Config+0x86>
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d825      	bhi.n	8004d40 <RCCEx_PLLSAI1_Config+0xa4>
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d002      	beq.n	8004cfe <RCCEx_PLLSAI1_Config+0x62>
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d009      	beq.n	8004d10 <RCCEx_PLLSAI1_Config+0x74>
 8004cfc:	e020      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cfe:	4b60      	ldr	r3, [pc, #384]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d11d      	bne.n	8004d46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d0e:	e01a      	b.n	8004d46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d10:	4b5b      	ldr	r3, [pc, #364]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d116      	bne.n	8004d4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d20:	e013      	b.n	8004d4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d22:	4b57      	ldr	r3, [pc, #348]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10f      	bne.n	8004d4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d2e:	4b54      	ldr	r3, [pc, #336]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d3e:	e006      	b.n	8004d4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
      break;
 8004d44:	e004      	b.n	8004d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d46:	bf00      	nop
 8004d48:	e002      	b.n	8004d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e000      	b.n	8004d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10d      	bne.n	8004d72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d56:	4b4a      	ldr	r3, [pc, #296]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6819      	ldr	r1, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	4944      	ldr	r1, [pc, #272]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d17d      	bne.n	8004e74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d78:	4b41      	ldr	r3, [pc, #260]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a40      	ldr	r2, [pc, #256]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d84:	f7fc fe7e 	bl	8001a84 <HAL_GetTick>
 8004d88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d8a:	e009      	b.n	8004da0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d8c:	f7fc fe7a 	bl	8001a84 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d902      	bls.n	8004da0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d9e:	e005      	b.n	8004dac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004da0:	4b37      	ldr	r3, [pc, #220]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1ef      	bne.n	8004d8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d160      	bne.n	8004e74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d111      	bne.n	8004ddc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004db8:	4b31      	ldr	r3, [pc, #196]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6892      	ldr	r2, [r2, #8]
 8004dc8:	0211      	lsls	r1, r2, #8
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	68d2      	ldr	r2, [r2, #12]
 8004dce:	0912      	lsrs	r2, r2, #4
 8004dd0:	0452      	lsls	r2, r2, #17
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	492a      	ldr	r1, [pc, #168]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	610b      	str	r3, [r1, #16]
 8004dda:	e027      	b.n	8004e2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d112      	bne.n	8004e08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004de2:	4b27      	ldr	r3, [pc, #156]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004dea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6892      	ldr	r2, [r2, #8]
 8004df2:	0211      	lsls	r1, r2, #8
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6912      	ldr	r2, [r2, #16]
 8004df8:	0852      	lsrs	r2, r2, #1
 8004dfa:	3a01      	subs	r2, #1
 8004dfc:	0552      	lsls	r2, r2, #21
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	491f      	ldr	r1, [pc, #124]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	610b      	str	r3, [r1, #16]
 8004e06:	e011      	b.n	8004e2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e08:	4b1d      	ldr	r3, [pc, #116]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6892      	ldr	r2, [r2, #8]
 8004e18:	0211      	lsls	r1, r2, #8
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6952      	ldr	r2, [r2, #20]
 8004e1e:	0852      	lsrs	r2, r2, #1
 8004e20:	3a01      	subs	r2, #1
 8004e22:	0652      	lsls	r2, r2, #25
 8004e24:	430a      	orrs	r2, r1
 8004e26:	4916      	ldr	r1, [pc, #88]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e2c:	4b14      	ldr	r3, [pc, #80]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a13      	ldr	r2, [pc, #76]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e38:	f7fc fe24 	bl	8001a84 <HAL_GetTick>
 8004e3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e3e:	e009      	b.n	8004e54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e40:	f7fc fe20 	bl	8001a84 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d902      	bls.n	8004e54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	73fb      	strb	r3, [r7, #15]
          break;
 8004e52:	e005      	b.n	8004e60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e54:	4b0a      	ldr	r3, [pc, #40]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0ef      	beq.n	8004e40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e66:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	4904      	ldr	r1, [pc, #16]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40021000 	.word	0x40021000

08004e84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e92:	4b6a      	ldr	r3, [pc, #424]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d018      	beq.n	8004ed0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e9e:	4b67      	ldr	r3, [pc, #412]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f003 0203 	and.w	r2, r3, #3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d10d      	bne.n	8004eca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
       ||
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004eb6:	4b61      	ldr	r3, [pc, #388]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	091b      	lsrs	r3, r3, #4
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d047      	beq.n	8004f5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
 8004ece:	e044      	b.n	8004f5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d018      	beq.n	8004f0a <RCCEx_PLLSAI2_Config+0x86>
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d825      	bhi.n	8004f28 <RCCEx_PLLSAI2_Config+0xa4>
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d002      	beq.n	8004ee6 <RCCEx_PLLSAI2_Config+0x62>
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d009      	beq.n	8004ef8 <RCCEx_PLLSAI2_Config+0x74>
 8004ee4:	e020      	b.n	8004f28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ee6:	4b55      	ldr	r3, [pc, #340]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d11d      	bne.n	8004f2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef6:	e01a      	b.n	8004f2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ef8:	4b50      	ldr	r3, [pc, #320]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d116      	bne.n	8004f32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f08:	e013      	b.n	8004f32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10f      	bne.n	8004f36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f16:	4b49      	ldr	r3, [pc, #292]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f26:	e006      	b.n	8004f36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2c:	e004      	b.n	8004f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e002      	b.n	8004f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f36:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10d      	bne.n	8004f5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6819      	ldr	r1, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	430b      	orrs	r3, r1
 8004f54:	4939      	ldr	r1, [pc, #228]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d167      	bne.n	8005030 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f60:	4b36      	ldr	r3, [pc, #216]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a35      	ldr	r2, [pc, #212]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6c:	f7fc fd8a 	bl	8001a84 <HAL_GetTick>
 8004f70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f72:	e009      	b.n	8004f88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f74:	f7fc fd86 	bl	8001a84 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d902      	bls.n	8004f88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	73fb      	strb	r3, [r7, #15]
        break;
 8004f86:	e005      	b.n	8004f94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f88:	4b2c      	ldr	r3, [pc, #176]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1ef      	bne.n	8004f74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d14a      	bne.n	8005030 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d111      	bne.n	8004fc4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fa0:	4b26      	ldr	r3, [pc, #152]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6892      	ldr	r2, [r2, #8]
 8004fb0:	0211      	lsls	r1, r2, #8
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	68d2      	ldr	r2, [r2, #12]
 8004fb6:	0912      	lsrs	r2, r2, #4
 8004fb8:	0452      	lsls	r2, r2, #17
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	491f      	ldr	r1, [pc, #124]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	614b      	str	r3, [r1, #20]
 8004fc2:	e011      	b.n	8004fe8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004fcc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6892      	ldr	r2, [r2, #8]
 8004fd4:	0211      	lsls	r1, r2, #8
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6912      	ldr	r2, [r2, #16]
 8004fda:	0852      	lsrs	r2, r2, #1
 8004fdc:	3a01      	subs	r2, #1
 8004fde:	0652      	lsls	r2, r2, #25
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	4916      	ldr	r1, [pc, #88]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fe8:	4b14      	ldr	r3, [pc, #80]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a13      	ldr	r2, [pc, #76]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff4:	f7fc fd46 	bl	8001a84 <HAL_GetTick>
 8004ff8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ffa:	e009      	b.n	8005010 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ffc:	f7fc fd42 	bl	8001a84 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d902      	bls.n	8005010 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	73fb      	strb	r3, [r7, #15]
          break;
 800500e:	e005      	b.n	800501c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005010:	4b0a      	ldr	r3, [pc, #40]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0ef      	beq.n	8004ffc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005022:	4b06      	ldr	r3, [pc, #24]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005024:	695a      	ldr	r2, [r3, #20]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	4904      	ldr	r1, [pc, #16]	@ (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 800502c:	4313      	orrs	r3, r2
 800502e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005030:	7bfb      	ldrb	r3, [r7, #15]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000

08005040 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005040:	b480      	push	{r7}
 8005042:	b089      	sub	sp, #36	@ 0x24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800505c:	d10c      	bne.n	8005078 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800505e:	4b6e      	ldr	r3, [pc, #440]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005064:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005068:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005070:	d112      	bne.n	8005098 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005072:	4b6a      	ldr	r3, [pc, #424]	@ (800521c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005074:	61fb      	str	r3, [r7, #28]
 8005076:	e00f      	b.n	8005098 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800507e:	d10b      	bne.n	8005098 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005080:	4b65      	ldr	r3, [pc, #404]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005086:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800508a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005092:	d101      	bne.n	8005098 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005094:	4b61      	ldr	r3, [pc, #388]	@ (800521c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005096:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f040 80b4 	bne.w	8005208 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050aa:	d003      	beq.n	80050b4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050b2:	d135      	bne.n	8005120 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80050b4:	4b58      	ldr	r3, [pc, #352]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050c0:	f040 80a1 	bne.w	8005206 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80050c4:	4b54      	ldr	r3, [pc, #336]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 809a 	beq.w	8005206 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80050d2:	4b51      	ldr	r3, [pc, #324]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	091b      	lsrs	r3, r3, #4
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	3301      	adds	r3, #1
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80050e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80050f8:	4b47      	ldr	r3, [pc, #284]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005104:	2311      	movs	r3, #17
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e001      	b.n	800510e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800510a:	2307      	movs	r3, #7
 800510c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	fb03 f202 	mul.w	r2, r3, r2
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	fbb2 f3f3 	udiv	r3, r2, r3
 800511c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800511e:	e072      	b.n	8005206 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d133      	bne.n	800518e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005126:	4b3c      	ldr	r3, [pc, #240]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800512e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005132:	d169      	bne.n	8005208 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005134:	4b38      	ldr	r3, [pc, #224]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d063      	beq.n	8005208 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005140:	4b35      	ldr	r3, [pc, #212]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	3301      	adds	r3, #1
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005154:	4b30      	ldr	r3, [pc, #192]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	0a1b      	lsrs	r3, r3, #8
 800515a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800515e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10a      	bne.n	800517c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005166:	4b2c      	ldr	r3, [pc, #176]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8005172:	2311      	movs	r3, #17
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	e001      	b.n	800517c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005178:	2307      	movs	r3, #7
 800517a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	fb03 f202 	mul.w	r2, r3, r2
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	fbb2 f3f3 	udiv	r3, r2, r3
 800518a:	61fb      	str	r3, [r7, #28]
 800518c:	e03c      	b.n	8005208 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005194:	d003      	beq.n	800519e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800519c:	d134      	bne.n	8005208 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800519e:	4b1e      	ldr	r3, [pc, #120]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051aa:	d12d      	bne.n	8005208 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80051ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d027      	beq.n	8005208 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051b8:	4b17      	ldr	r3, [pc, #92]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	091b      	lsrs	r3, r3, #4
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	3301      	adds	r3, #1
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ca:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80051cc:	4b12      	ldr	r3, [pc, #72]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	0a1b      	lsrs	r3, r3, #8
 80051d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051d6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80051de:	4b0e      	ldr	r3, [pc, #56]	@ (8005218 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80051ea:	2311      	movs	r3, #17
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	e001      	b.n	80051f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80051f0:	2307      	movs	r3, #7
 80051f2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	fb03 f202 	mul.w	r2, r3, r2
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	e000      	b.n	8005208 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005206:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005208:	69fb      	ldr	r3, [r7, #28]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3724      	adds	r7, #36	@ 0x24
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40021000 	.word	0x40021000
 800521c:	001fff68 	.word	0x001fff68

08005220 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d904      	bls.n	800523e <HAL_SAI_InitProtocol+0x1e>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	3b03      	subs	r3, #3
 8005238:	2b01      	cmp	r3, #1
 800523a:	d812      	bhi.n	8005262 <HAL_SAI_InitProtocol+0x42>
 800523c:	e008      	b.n	8005250 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fc67 	bl	8005b18 <SAI_InitI2S>
 800524a:	4603      	mov	r3, r0
 800524c:	75fb      	strb	r3, [r7, #23]
      break;
 800524e:	e00b      	b.n	8005268 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fd10 	bl	8005c7c <SAI_InitPCM>
 800525c:	4603      	mov	r3, r0
 800525e:	75fb      	strb	r3, [r7, #23]
      break;
 8005260:	e002      	b.n	8005268 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	75fb      	strb	r3, [r7, #23]
      break;
 8005266:	bf00      	nop
  }

  if (status == HAL_OK)
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f808 	bl	8005284 <HAL_SAI_Init>
 8005274:	4603      	mov	r3, r0
 8005276:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e155      	b.n	8005542 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fb fd80 	bl	8000db0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fd9d 	bl	8005df0 <SAI_Disable>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e140      	b.n	8005542 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d00c      	beq.n	80052ea <HAL_SAI_Init+0x66>
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d80d      	bhi.n	80052f0 <HAL_SAI_Init+0x6c>
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_SAI_Init+0x5a>
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d003      	beq.n	80052e4 <HAL_SAI_Init+0x60>
 80052dc:	e008      	b.n	80052f0 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
      break;
 80052e2:	e008      	b.n	80052f6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80052e4:	2310      	movs	r3, #16
 80052e6:	61fb      	str	r3, [r7, #28]
      break;
 80052e8:	e005      	b.n	80052f6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80052ea:	2320      	movs	r3, #32
 80052ec:	61fb      	str	r3, [r7, #28]
      break;
 80052ee:	e002      	b.n	80052f6 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61fb      	str	r3, [r7, #28]
      break;
 80052f4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d81d      	bhi.n	800533a <HAL_SAI_Init+0xb6>
 80052fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <HAL_SAI_Init+0x80>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005315 	.word	0x08005315
 8005308:	0800531b 	.word	0x0800531b
 800530c:	08005323 	.word	0x08005323
 8005310:	0800532b 	.word	0x0800532b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]
      break;
 8005318:	e012      	b.n	8005340 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800531a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800531e:	617b      	str	r3, [r7, #20]
      break;
 8005320:	e00e      	b.n	8005340 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005322:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005326:	617b      	str	r3, [r7, #20]
      break;
 8005328:	e00a      	b.n	8005340 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800532a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800532e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	61fb      	str	r3, [r7, #28]
      break;
 8005338:	e002      	b.n	8005340 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]
      break;
 800533e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a81      	ldr	r2, [pc, #516]	@ (800554c <HAL_SAI_Init+0x2c8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <HAL_SAI_Init+0xd0>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a80      	ldr	r2, [pc, #512]	@ (8005550 <HAL_SAI_Init+0x2cc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d103      	bne.n	800535c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005354:	4a7f      	ldr	r2, [pc, #508]	@ (8005554 <HAL_SAI_Init+0x2d0>)
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e002      	b.n	8005362 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800535c:	4a7e      	ldr	r2, [pc, #504]	@ (8005558 <HAL_SAI_Init+0x2d4>)
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d041      	beq.n	80053ee <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a77      	ldr	r2, [pc, #476]	@ (800554c <HAL_SAI_Init+0x2c8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <HAL_SAI_Init+0xfa>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a75      	ldr	r2, [pc, #468]	@ (8005550 <HAL_SAI_Init+0x2cc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d105      	bne.n	800538a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800537e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005382:	f7fe ff1d 	bl	80041c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005386:	6138      	str	r0, [r7, #16]
 8005388:	e004      	b.n	8005394 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800538a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800538e:	f7fe ff17 	bl	80041c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005392:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	461a      	mov	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	025b      	lsls	r3, r3, #9
 80053a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053aa:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4a6b      	ldr	r2, [pc, #428]	@ (800555c <HAL_SAI_Init+0x2d8>)
 80053b0:	fba2 2303 	umull	r2, r3, r2, r3
 80053b4:	08da      	lsrs	r2, r3, #3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80053ba:	68f9      	ldr	r1, [r7, #12]
 80053bc:	4b67      	ldr	r3, [pc, #412]	@ (800555c <HAL_SAI_Init+0x2d8>)
 80053be:	fba3 2301 	umull	r2, r3, r3, r1
 80053c2:	08da      	lsrs	r2, r3, #3
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	1aca      	subs	r2, r1, r3
 80053ce:	2a08      	cmp	r2, #8
 80053d0:	d904      	bls.n	80053dc <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d104      	bne.n	80053ee <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	085a      	lsrs	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_SAI_Init+0x17a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d109      	bne.n	8005412 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_SAI_Init+0x186>
 8005406:	2300      	movs	r3, #0
 8005408:	e001      	b.n	800540e <HAL_SAI_Init+0x18a>
 800540a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800540e:	61bb      	str	r3, [r7, #24]
 8005410:	e008      	b.n	8005424 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005416:	2b01      	cmp	r3, #1
 8005418:	d102      	bne.n	8005420 <HAL_SAI_Init+0x19c>
 800541a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800541e:	e000      	b.n	8005422 <HAL_SAI_Init+0x19e>
 8005420:	2300      	movs	r3, #0
 8005422:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6819      	ldr	r1, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4b4c      	ldr	r3, [pc, #304]	@ (8005560 <HAL_SAI_Init+0x2dc>)
 8005430:	400b      	ands	r3, r1
 8005432:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6819      	ldr	r1, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005442:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005448:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544e:	431a      	orrs	r2, r3
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 800545c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005468:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	051b      	lsls	r3, r3, #20
 8005470:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005488:	f023 030f 	bic.w	r3, r3, #15
 800548c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6859      	ldr	r1, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	699a      	ldr	r2, [r3, #24]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6899      	ldr	r1, [r3, #8]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005564 <HAL_SAI_Init+0x2e0>)
 80054b8:	400b      	ands	r3, r1
 80054ba:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6899      	ldr	r1, [r3, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80054cc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80054d2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80054d8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054de:	3b01      	subs	r3, #1
 80054e0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80054e2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68d9      	ldr	r1, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80054fa:	400b      	ands	r3, r1
 80054fc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68d9      	ldr	r1, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005512:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005514:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800551a:	3b01      	subs	r3, #1
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3720      	adds	r7, #32
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40015404 	.word	0x40015404
 8005550:	40015424 	.word	0x40015424
 8005554:	40015400 	.word	0x40015400
 8005558:	40015800 	.word	0x40015800
 800555c:	cccccccd 	.word	0xcccccccd
 8005560:	ff05c010 	.word	0xff05c010
 8005564:	fff88000 	.word	0xfff88000

08005568 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_SAI_Abort+0x1a>
 800557e:	2302      	movs	r3, #2
 8005580:	e053      	b.n	800562a <HAL_SAI_Abort+0xc2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fc30 	bl	8005df0 <SAI_Disable>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055a8:	d125      	bne.n	80055f6 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80055b8:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b12      	cmp	r3, #18
 80055c4:	d108      	bne.n	80055d8 <HAL_SAI_Abort+0x70>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d004      	beq.n	80055d8 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fc fcb0 	bl	8001f38 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b22      	cmp	r3, #34	@ 0x22
 80055e2:	d108      	bne.n	80055f6 <HAL_SAI_Abort+0x8e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fc fca1 	bl	8001f38 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2200      	movs	r2, #0
 80055fc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f04f 32ff 	mov.w	r2, #4294967295
 8005606:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0208 	orr.w	r2, r2, #8
 8005616:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8005628:	7bfb      	ldrb	r3, [r7, #15]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	4613      	mov	r3, r2
 8005640:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8005642:	f7fc fa1f 	bl	8001a84 <HAL_GetTick>
 8005646:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_SAI_Transmit_DMA+0x20>
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e093      	b.n	8005780 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	f040 808c 	bne.w	800577e <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_SAI_Transmit_DMA+0x40>
 8005670:	2302      	movs	r3, #2
 8005672:	e085      	b.n	8005780 <HAL_SAI_Transmit_DMA+0x14c>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	88fa      	ldrh	r2, [r7, #6]
 8005686:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	88fa      	ldrh	r2, [r7, #6]
 800568e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2212      	movs	r2, #18
 800569e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056a6:	4a38      	ldr	r2, [pc, #224]	@ (8005788 <HAL_SAI_Transmit_DMA+0x154>)
 80056a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ae:	4a37      	ldr	r2, [pc, #220]	@ (800578c <HAL_SAI_Transmit_DMA+0x158>)
 80056b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056b6:	4a36      	ldr	r2, [pc, #216]	@ (8005790 <HAL_SAI_Transmit_DMA+0x15c>)
 80056b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056be:	2200      	movs	r2, #0
 80056c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056ca:	4619      	mov	r1, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	331c      	adds	r3, #28
 80056d2:	461a      	mov	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80056da:	f7fc fbcd 	bl	8001e78 <HAL_DMA_Start_IT>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e047      	b.n	8005780 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80056f0:	2100      	movs	r1, #0
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fb44 	bl	8005d80 <SAI_InterruptFlag>
 80056f8:	4601      	mov	r1, r0
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005716:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005718:	e015      	b.n	8005746 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800571a:	f7fc f9b3 	bl	8001a84 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005728:	d90d      	bls.n	8005746 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005730:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e01c      	b.n	8005780 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0e2      	beq.n	800571a <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d107      	bne.n	8005772 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005770:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	e000      	b.n	8005780 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800577e:	2302      	movs	r3, #2
  }
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	08005ec3 	.word	0x08005ec3
 800578c:	08005e65 	.word	0x08005e65
 8005790:	08005edf 	.word	0x08005edf

08005794 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8192 	beq.w	8005ace <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <HAL_SAI_IRQHandler+0x4c>
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d004      	beq.n	80057e0 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	4798      	blx	r3
 80057de:	e176      	b.n	8005ace <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d01e      	beq.n	8005828 <HAL_SAI_IRQHandler+0x94>
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d019      	beq.n	8005828 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2201      	movs	r2, #1
 80057fa:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b22      	cmp	r3, #34	@ 0x22
 8005806:	d101      	bne.n	800580c <HAL_SAI_IRQHandler+0x78>
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <HAL_SAI_IRQHandler+0x7a>
 800580c:	2302      	movs	r3, #2
 800580e:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f96f 	bl	8005b04 <HAL_SAI_ErrorCallback>
 8005826:	e152      	b.n	8005ace <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d011      	beq.n	8005856 <HAL_SAI_IRQHandler+0xc2>
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00c      	beq.n	8005856 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2202      	movs	r2, #2
 8005842:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8140 	beq.w	8005ace <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005852:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8005854:	e13b      	b.n	8005ace <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d055      	beq.n	800590c <HAL_SAI_IRQHandler+0x178>
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b00      	cmp	r3, #0
 8005868:	d050      	beq.n	800590c <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2220      	movs	r2, #32
 8005870:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005878:	f043 0204 	orr.w	r2, r3, #4
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d038      	beq.n	80058fe <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d016      	beq.n	80058c2 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005898:	4a8f      	ldr	r2, [pc, #572]	@ (8005ad8 <HAL_SAI_IRQHandler+0x344>)
 800589a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fc fb87 	bl	8001fb4 <HAL_DMA_Abort_IT>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f921 	bl	8005b04 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 80fc 	beq.w	8005ac4 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d0:	4a81      	ldr	r2, [pc, #516]	@ (8005ad8 <HAL_SAI_IRQHandler+0x344>)
 80058d2:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fc fb6b 	bl	8001fb4 <HAL_DMA_Abort_IT>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80ef 	beq.w	8005ac4 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f904 	bl	8005b04 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80058fc:	e0e2      	b.n	8005ac4 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff fe32 	bl	8005568 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f8fd 	bl	8005b04 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800590a:	e0db      	b.n	8005ac4 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005912:	2b00      	cmp	r3, #0
 8005914:	d055      	beq.n	80059c2 <HAL_SAI_IRQHandler+0x22e>
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d050      	beq.n	80059c2 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2240      	movs	r2, #64	@ 0x40
 8005926:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800592e:	f043 0208 	orr.w	r2, r3, #8
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d038      	beq.n	80059b4 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d016      	beq.n	8005978 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800594e:	4a62      	ldr	r2, [pc, #392]	@ (8005ad8 <HAL_SAI_IRQHandler+0x344>)
 8005950:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005956:	4618      	mov	r0, r3
 8005958:	f7fc fb2c 	bl	8001fb4 <HAL_DMA_Abort_IT>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005968:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f8c6 	bl	8005b04 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80a3 	beq.w	8005ac8 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005986:	4a54      	ldr	r2, [pc, #336]	@ (8005ad8 <HAL_SAI_IRQHandler+0x344>)
 8005988:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800598e:	4618      	mov	r0, r3
 8005990:	f7fc fb10 	bl	8001fb4 <HAL_DMA_Abort_IT>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 8096 	beq.w	8005ac8 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f8a9 	bl	8005b04 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80059b2:	e089      	b.n	8005ac8 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff fdd7 	bl	8005568 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f8a2 	bl	8005b04 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80059c0:	e082      	b.n	8005ac8 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d061      	beq.n	8005a90 <HAL_SAI_IRQHandler+0x2fc>
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f003 0304 	and.w	r3, r3, #4
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d05c      	beq.n	8005a90 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2204      	movs	r2, #4
 80059dc:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059e4:	f043 0220 	orr.w	r2, r3, #32
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d036      	beq.n	8005a66 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d016      	beq.n	8005a2e <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a04:	4a34      	ldr	r2, [pc, #208]	@ (8005ad8 <HAL_SAI_IRQHandler+0x344>)
 8005a06:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fc fad1 	bl	8001fb4 <HAL_DMA_Abort_IT>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f86b 	bl	8005b04 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d04a      	beq.n	8005acc <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a3a:	4a27      	ldr	r2, [pc, #156]	@ (8005ad8 <HAL_SAI_IRQHandler+0x344>)
 8005a3c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fc fab6 	bl	8001fb4 <HAL_DMA_Abort_IT>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d03e      	beq.n	8005acc <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f850 	bl	8005b04 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a64:	e032      	b.n	8005acc <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f04f 32ff 	mov.w	r2, #4294967295
 8005a76:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f83b 	bl	8005b04 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a8e:	e01d      	b.n	8005acc <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d019      	beq.n	8005ace <HAL_SAI_IRQHandler+0x33a>
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f003 0310 	and.w	r3, r3, #16
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d014      	beq.n	8005ace <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2210      	movs	r2, #16
 8005aaa:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab2:	f043 0210 	orr.w	r2, r3, #16
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f821 	bl	8005b04 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005ac2:	e004      	b.n	8005ace <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005ac4:	bf00      	nop
 8005ac6:	e002      	b.n	8005ace <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005ac8:	bf00      	nop
 8005aca:	e000      	b.n	8005ace <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005acc:	bf00      	nop
}
 8005ace:	bf00      	nop
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	08005f31 	.word	0x08005f31

08005adc <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <SAI_InitI2S+0x2e>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d103      	bne.n	8005b4e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b4c:	e002      	b.n	8005b54 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005b5a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b62:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e077      	b.n	8005c6e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d107      	bne.n	8005b94 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005b90:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b92:	e006      	b.n	8005ba2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005b9a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d84f      	bhi.n	8005c48 <SAI_InitI2S+0x130>
 8005ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb0 <SAI_InitI2S+0x98>)
 8005baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bae:	bf00      	nop
 8005bb0:	08005bc1 	.word	0x08005bc1
 8005bb4:	08005be3 	.word	0x08005be3
 8005bb8:	08005c05 	.word	0x08005c05
 8005bbc:	08005c27 	.word	0x08005c27
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2280      	movs	r2, #128	@ 0x80
 8005bc4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	085b      	lsrs	r3, r3, #1
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	011a      	lsls	r2, r3, #4
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2240      	movs	r2, #64	@ 0x40
 8005bde:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005be0:	e035      	b.n	8005c4e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2280      	movs	r2, #128	@ 0x80
 8005be6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	019a      	lsls	r2, r3, #6
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2280      	movs	r2, #128	@ 0x80
 8005c00:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c02:	e024      	b.n	8005c4e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	22c0      	movs	r2, #192	@ 0xc0
 8005c08:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	085b      	lsrs	r3, r3, #1
 8005c0e:	019a      	lsls	r2, r3, #6
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2280      	movs	r2, #128	@ 0x80
 8005c22:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c24:	e013      	b.n	8005c4e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	22e0      	movs	r2, #224	@ 0xe0
 8005c2a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	085b      	lsrs	r3, r3, #1
 8005c30:	019a      	lsls	r2, r3, #6
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	085b      	lsrs	r3, r3, #1
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2280      	movs	r2, #128	@ 0x80
 8005c44:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c46:	e002      	b.n	8005c4e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d10b      	bne.n	8005c6c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d102      	bne.n	8005c60 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2210      	movs	r2, #16
 8005c5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d102      	bne.n	8005c6c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2208      	movs	r2, #8
 8005c6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop

08005c7c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <SAI_InitPCM+0x2e>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d103      	bne.n	8005cb2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2201      	movs	r2, #1
 8005cae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005cb0:	e002      	b.n	8005cb8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005cc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005ccc:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ce0:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d103      	bne.n	8005cf0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2201      	movs	r2, #1
 8005cec:	645a      	str	r2, [r3, #68]	@ 0x44
 8005cee:	e002      	b.n	8005cf6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	220d      	movs	r2, #13
 8005cf4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d837      	bhi.n	8005d6c <SAI_InitPCM+0xf0>
 8005cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005d04 <SAI_InitPCM+0x88>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d15 	.word	0x08005d15
 8005d08:	08005d2b 	.word	0x08005d2b
 8005d0c:	08005d41 	.word	0x08005d41
 8005d10:	08005d57 	.word	0x08005d57
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2280      	movs	r2, #128	@ 0x80
 8005d18:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	011a      	lsls	r2, r3, #4
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2240      	movs	r2, #64	@ 0x40
 8005d26:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005d28:	e023      	b.n	8005d72 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2280      	movs	r2, #128	@ 0x80
 8005d2e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2280      	movs	r2, #128	@ 0x80
 8005d3c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005d3e:	e018      	b.n	8005d72 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	22c0      	movs	r2, #192	@ 0xc0
 8005d44:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2280      	movs	r2, #128	@ 0x80
 8005d52:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005d54:	e00d      	b.n	8005d72 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	22e0      	movs	r2, #224	@ 0xe0
 8005d5a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2280      	movs	r2, #128	@ 0x80
 8005d68:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005d6a:	e002      	b.n	8005d72 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d70:	bf00      	nop
  }

  return status;
 8005d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	371c      	adds	r7, #28
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d103      	bne.n	8005d9e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f043 0308 	orr.w	r3, r3, #8
 8005d9c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d10b      	bne.n	8005dbe <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d003      	beq.n	8005db6 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d103      	bne.n	8005dbe <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f043 0310 	orr.w	r3, r3, #16
 8005dbc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d003      	beq.n	8005dce <SAI_InterruptFlag+0x4e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d104      	bne.n	8005dd8 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	e003      	b.n	8005de0 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f043 0304 	orr.w	r3, r3, #4
 8005dde:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005de0:	68fb      	ldr	r3, [r7, #12]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005df8:	4b18      	ldr	r3, [pc, #96]	@ (8005e5c <SAI_Disable+0x6c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a18      	ldr	r2, [pc, #96]	@ (8005e60 <SAI_Disable+0x70>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	0b1b      	lsrs	r3, r3, #12
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005e1a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10a      	bne.n	8005e38 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	72fb      	strb	r3, [r7, #11]
      break;
 8005e36:	e009      	b.n	8005e4c <SAI_Disable+0x5c>
    }
    count--;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e7      	bne.n	8005e1c <SAI_Disable+0x2c>

  return status;
 8005e4c:	7afb      	ldrb	r3, [r7, #11]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	20000000 	.word	0x20000000
 8005e60:	95cbec1b 	.word	0x95cbec1b

08005e64 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e70:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d01c      	beq.n	8005eb4 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005e90:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005e92:	2100      	movs	r1, #0
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7ff ff73 	bl	8005d80 <SAI_InterruptFlag>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	43d9      	mvns	r1, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	400a      	ands	r2, r1
 8005eaa:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7ff fe11 	bl	8005adc <HAL_SAI_TxCpltCallback>
#endif
}
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ece:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff fe0d 	bl	8005af0 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ef2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005f0a:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff ff6f 	bl	8005df0 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f7ff fdee 	bl	8005b04 <HAL_SAI_ErrorCallback>
#endif
}
 8005f28:	bf00      	nop
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005f4c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2200      	movs	r2, #0
 8005f54:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5e:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	d00a      	beq.n	8005f80 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7ff ff40 	bl	8005df0 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0208 	orr.w	r2, r2, #8
 8005f7e:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7ff fdb7 	bl	8005b04 <HAL_SAI_ErrorCallback>
#endif
}
 8005f96:	bf00      	nop
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e095      	b.n	80060dc <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d108      	bne.n	8005fca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fc0:	d009      	beq.n	8005fd6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	61da      	str	r2, [r3, #28]
 8005fc8:	e005      	b.n	8005fd6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d106      	bne.n	8005ff6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7fb fa51 	bl	8001498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800600c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006016:	d902      	bls.n	800601e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e002      	b.n	8006024 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800601e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006022:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800602c:	d007      	beq.n	800603e <HAL_SPI_Init+0xa0>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006036:	d002      	beq.n	800603e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800606c:	431a      	orrs	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006080:	ea42 0103 	orr.w	r1, r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006088:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	0c1b      	lsrs	r3, r3, #16
 800609a:	f003 0204 	and.w	r2, r3, #4
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	431a      	orrs	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80060ba:	ea42 0103 	orr.w	r1, r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	4613      	mov	r3, r2
 80060f2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060f4:	f7fb fcc6 	bl	8001a84 <HAL_GetTick>
 80060f8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b01      	cmp	r3, #1
 8006108:	d001      	beq.n	800610e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800610a:	2302      	movs	r3, #2
 800610c:	e15c      	b.n	80063c8 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_SPI_Transmit+0x36>
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e154      	b.n	80063c8 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_SPI_Transmit+0x48>
 8006128:	2302      	movs	r3, #2
 800612a:	e14d      	b.n	80063c8 <HAL_SPI_Transmit+0x2e4>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2203      	movs	r2, #3
 8006138:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	88fa      	ldrh	r2, [r7, #6]
 800614c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	88fa      	ldrh	r2, [r7, #6]
 8006152:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800617e:	d10f      	bne.n	80061a0 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800618e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800619e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061aa:	2b40      	cmp	r3, #64	@ 0x40
 80061ac:	d007      	beq.n	80061be <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80061c6:	d952      	bls.n	800626e <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <HAL_SPI_Transmit+0xf2>
 80061d0:	8b7b      	ldrh	r3, [r7, #26]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d145      	bne.n	8006262 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061da:	881a      	ldrh	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061fa:	e032      	b.n	8006262 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b02      	cmp	r3, #2
 8006208:	d112      	bne.n	8006230 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620e:	881a      	ldrh	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621a:	1c9a      	adds	r2, r3, #2
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800622e:	e018      	b.n	8006262 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006230:	f7fb fc28 	bl	8001a84 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d803      	bhi.n	8006248 <HAL_SPI_Transmit+0x164>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006246:	d102      	bne.n	800624e <HAL_SPI_Transmit+0x16a>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e0b2      	b.n	80063c8 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1c7      	bne.n	80061fc <HAL_SPI_Transmit+0x118>
 800626c:	e083      	b.n	8006376 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <HAL_SPI_Transmit+0x198>
 8006276:	8b7b      	ldrh	r3, [r7, #26]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d177      	bne.n	800636c <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006280:	b29b      	uxth	r3, r3
 8006282:	2b01      	cmp	r3, #1
 8006284:	d912      	bls.n	80062ac <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628a:	881a      	ldrh	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006296:	1c9a      	adds	r2, r3, #2
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b02      	subs	r3, #2
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062aa:	e05f      	b.n	800636c <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	330c      	adds	r3, #12
 80062b6:	7812      	ldrb	r2, [r2, #0]
 80062b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80062d2:	e04b      	b.n	800636c <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d12b      	bne.n	800633a <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d912      	bls.n	8006312 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	881a      	ldrh	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fc:	1c9a      	adds	r2, r3, #2
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b02      	subs	r3, #2
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006310:	e02c      	b.n	800636c <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	330c      	adds	r3, #12
 800631c:	7812      	ldrb	r2, [r2, #0]
 800631e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006338:	e018      	b.n	800636c <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800633a:	f7fb fba3 	bl	8001a84 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d803      	bhi.n	8006352 <HAL_SPI_Transmit+0x26e>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006350:	d102      	bne.n	8006358 <HAL_SPI_Transmit+0x274>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e02d      	b.n	80063c8 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1ae      	bne.n	80062d4 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006376:	69fa      	ldr	r2, [r7, #28]
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 f946 	bl	800660c <SPI_EndRxTxTransaction>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2220      	movs	r2, #32
 800638a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006394:	2300      	movs	r3, #0
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e000      	b.n	80063c8 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80063c6:	2300      	movs	r3, #0
  }
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3720      	adds	r7, #32
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063e0:	f7fb fb50 	bl	8001a84 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	4413      	add	r3, r2
 80063ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063f0:	f7fb fb48 	bl	8001a84 <HAL_GetTick>
 80063f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063f6:	4b39      	ldr	r3, [pc, #228]	@ (80064dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	015b      	lsls	r3, r3, #5
 80063fc:	0d1b      	lsrs	r3, r3, #20
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	fb02 f303 	mul.w	r3, r2, r3
 8006404:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006406:	e054      	b.n	80064b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640e:	d050      	beq.n	80064b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006410:	f7fb fb38 	bl	8001a84 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	429a      	cmp	r2, r3
 800641e:	d902      	bls.n	8006426 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d13d      	bne.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006434:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800643e:	d111      	bne.n	8006464 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006448:	d004      	beq.n	8006454 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006452:	d107      	bne.n	8006464 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006462:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800646c:	d10f      	bne.n	800648e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800648c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e017      	b.n	80064d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4013      	ands	r3, r2
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	429a      	cmp	r2, r3
 80064c0:	bf0c      	ite	eq
 80064c2:	2301      	moveq	r3, #1
 80064c4:	2300      	movne	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d19b      	bne.n	8006408 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3720      	adds	r7, #32
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20000000 	.word	0x20000000

080064e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	@ 0x28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80064f2:	f7fb fac7 	bl	8001a84 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fa:	1a9b      	subs	r3, r3, r2
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	4413      	add	r3, r2
 8006500:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006502:	f7fb fabf 	bl	8001a84 <HAL_GetTick>
 8006506:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	330c      	adds	r3, #12
 800650e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006510:	4b3d      	ldr	r3, [pc, #244]	@ (8006608 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	00da      	lsls	r2, r3, #3
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	0d1b      	lsrs	r3, r3, #20
 8006520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006522:	fb02 f303 	mul.w	r3, r2, r3
 8006526:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006528:	e060      	b.n	80065ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006530:	d107      	bne.n	8006542 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d104      	bne.n	8006542 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006540:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006548:	d050      	beq.n	80065ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800654a:	f7fb fa9b 	bl	8001a84 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006556:	429a      	cmp	r2, r3
 8006558:	d902      	bls.n	8006560 <SPI_WaitFifoStateUntilTimeout+0x80>
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	2b00      	cmp	r3, #0
 800655e:	d13d      	bne.n	80065dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800656e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006578:	d111      	bne.n	800659e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006582:	d004      	beq.n	800658e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800658c:	d107      	bne.n	800659e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800659c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065a6:	d10f      	bne.n	80065c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e010      	b.n	80065fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	4013      	ands	r3, r2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d196      	bne.n	800652a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3728      	adds	r7, #40	@ 0x28
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20000000 	.word	0x20000000

0800660c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af02      	add	r7, sp, #8
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2200      	movs	r2, #0
 8006620:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f7ff ff5b 	bl	80064e0 <SPI_WaitFifoStateUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006634:	f043 0220 	orr.w	r2, r3, #32
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e027      	b.n	8006690 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2200      	movs	r2, #0
 8006648:	2180      	movs	r1, #128	@ 0x80
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7ff fec0 	bl	80063d0 <SPI_WaitFlagStateUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d007      	beq.n	8006666 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800665a:	f043 0220 	orr.w	r2, r3, #32
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e014      	b.n	8006690 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2200      	movs	r2, #0
 800666e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7ff ff34 	bl	80064e0 <SPI_WaitFifoStateUntilTimeout>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006682:	f043 0220 	orr.w	r2, r3, #32
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e000      	b.n	8006690 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e040      	b.n	800672c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fb f8e4 	bl	8001888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2224      	movs	r2, #36	@ 0x24
 80066c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0201 	bic.w	r2, r2, #1
 80066d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fedc 	bl	800749c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fc21 	bl	8006f2c <UART_SetConfig>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e01b      	b.n	800672c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0201 	orr.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 ff5b 	bl	80075e0 <UART_CheckIdleState>
 800672a:	4603      	mov	r3, r0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08a      	sub	sp, #40	@ 0x28
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	4613      	mov	r3, r2
 8006742:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006748:	2b20      	cmp	r3, #32
 800674a:	d177      	bne.n	800683c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <HAL_UART_Transmit+0x24>
 8006752:	88fb      	ldrh	r3, [r7, #6]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e070      	b.n	800683e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2221      	movs	r2, #33	@ 0x21
 8006768:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800676a:	f7fb f98b 	bl	8001a84 <HAL_GetTick>
 800676e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	88fa      	ldrh	r2, [r7, #6]
 8006774:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	88fa      	ldrh	r2, [r7, #6]
 800677c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006788:	d108      	bne.n	800679c <HAL_UART_Transmit+0x68>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d104      	bne.n	800679c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	e003      	b.n	80067a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067a4:	e02f      	b.n	8006806 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2200      	movs	r2, #0
 80067ae:	2180      	movs	r1, #128	@ 0x80
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 ffbd 	bl	8007730 <UART_WaitOnFlagUntilTimeout>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d004      	beq.n	80067c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2220      	movs	r2, #32
 80067c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e03b      	b.n	800683e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10b      	bne.n	80067e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	881a      	ldrh	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067d8:	b292      	uxth	r2, r2
 80067da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	3302      	adds	r3, #2
 80067e0:	61bb      	str	r3, [r7, #24]
 80067e2:	e007      	b.n	80067f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	781a      	ldrb	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	3301      	adds	r3, #1
 80067f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1c9      	bne.n	80067a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2200      	movs	r2, #0
 800681a:	2140      	movs	r1, #64	@ 0x40
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 ff87 	bl	8007730 <UART_WaitOnFlagUntilTimeout>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d004      	beq.n	8006832 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e005      	b.n	800683e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	e000      	b.n	800683e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800683c:	2302      	movs	r3, #2
  }
}
 800683e:	4618      	mov	r0, r3
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08a      	sub	sp, #40	@ 0x28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	4613      	mov	r3, r2
 8006854:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800685c:	2b20      	cmp	r3, #32
 800685e:	d137      	bne.n	80068d0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <HAL_UART_Receive_IT+0x24>
 8006866:	88fb      	ldrh	r3, [r7, #6]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e030      	b.n	80068d2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a18      	ldr	r2, [pc, #96]	@ (80068dc <HAL_UART_Receive_IT+0x94>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d01f      	beq.n	80068c0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d018      	beq.n	80068c0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	613b      	str	r3, [r7, #16]
   return(result);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	623b      	str	r3, [r7, #32]
 80068ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	69f9      	ldr	r1, [r7, #28]
 80068b2:	6a3a      	ldr	r2, [r7, #32]
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e6      	bne.n	800688e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068c0:	88fb      	ldrh	r3, [r7, #6]
 80068c2:	461a      	mov	r2, r3
 80068c4:	68b9      	ldr	r1, [r7, #8]
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 ffa0 	bl	800780c <UART_Start_Receive_IT>
 80068cc:	4603      	mov	r3, r0
 80068ce:	e000      	b.n	80068d2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068d0:	2302      	movs	r3, #2
  }
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3728      	adds	r7, #40	@ 0x28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	40008000 	.word	0x40008000

080068e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b0ba      	sub	sp, #232	@ 0xe8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006906:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800690a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800690e:	4013      	ands	r3, r2
 8006910:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006918:	2b00      	cmp	r3, #0
 800691a:	d115      	bne.n	8006948 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800691c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00f      	beq.n	8006948 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b00      	cmp	r3, #0
 8006932:	d009      	beq.n	8006948 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 82ca 	beq.w	8006ed2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	4798      	blx	r3
      }
      return;
 8006946:	e2c4      	b.n	8006ed2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8117 	beq.w	8006b80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800695e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006962:	4b85      	ldr	r3, [pc, #532]	@ (8006b78 <HAL_UART_IRQHandler+0x298>)
 8006964:	4013      	ands	r3, r2
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 810a 	beq.w	8006b80 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800696c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d011      	beq.n	800699c <HAL_UART_IRQHandler+0xbc>
 8006978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800697c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2201      	movs	r2, #1
 800698a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006992:	f043 0201 	orr.w	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800699c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d011      	beq.n	80069cc <HAL_UART_IRQHandler+0xec>
 80069a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00b      	beq.n	80069cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2202      	movs	r2, #2
 80069ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069c2:	f043 0204 	orr.w	r2, r3, #4
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d011      	beq.n	80069fc <HAL_UART_IRQHandler+0x11c>
 80069d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2204      	movs	r2, #4
 80069ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069f2:	f043 0202 	orr.w	r2, r3, #2
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d017      	beq.n	8006a38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a0c:	f003 0320 	and.w	r3, r3, #32
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00b      	beq.n	8006a38 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2208      	movs	r2, #8
 8006a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a2e:	f043 0208 	orr.w	r2, r3, #8
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d012      	beq.n	8006a6a <HAL_UART_IRQHandler+0x18a>
 8006a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00c      	beq.n	8006a6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a60:	f043 0220 	orr.w	r2, r3, #32
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8230 	beq.w	8006ed6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00d      	beq.n	8006a9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d007      	beq.n	8006a9e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab2:	2b40      	cmp	r3, #64	@ 0x40
 8006ab4:	d005      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006aba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d04f      	beq.n	8006b62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 ff68 	bl	8007998 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad2:	2b40      	cmp	r3, #64	@ 0x40
 8006ad4:	d141      	bne.n	8006b5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3308      	adds	r3, #8
 8006adc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3308      	adds	r3, #8
 8006afe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1d9      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d013      	beq.n	8006b52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2e:	4a13      	ldr	r2, [pc, #76]	@ (8006b7c <HAL_UART_IRQHandler+0x29c>)
 8006b30:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fb fa3c 	bl	8001fb4 <HAL_DMA_Abort_IT>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d017      	beq.n	8006b72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b50:	e00f      	b.n	8006b72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f9d4 	bl	8006f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b58:	e00b      	b.n	8006b72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f9d0 	bl	8006f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b60:	e007      	b.n	8006b72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f9cc 	bl	8006f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006b70:	e1b1      	b.n	8006ed6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b72:	bf00      	nop
    return;
 8006b74:	e1af      	b.n	8006ed6 <HAL_UART_IRQHandler+0x5f6>
 8006b76:	bf00      	nop
 8006b78:	04000120 	.word	0x04000120
 8006b7c:	08007a61 	.word	0x08007a61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	f040 816a 	bne.w	8006e5e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b8e:	f003 0310 	and.w	r3, r3, #16
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 8163 	beq.w	8006e5e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 815c 	beq.w	8006e5e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2210      	movs	r2, #16
 8006bac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bb8:	2b40      	cmp	r3, #64	@ 0x40
 8006bba:	f040 80d4 	bne.w	8006d66 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 80ad 	beq.w	8006d2e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bde:	429a      	cmp	r2, r3
 8006be0:	f080 80a5 	bcs.w	8006d2e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f040 8086 	bne.w	8006d0c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c2e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1da      	bne.n	8006c00 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3308      	adds	r3, #8
 8006c50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3308      	adds	r3, #8
 8006c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e1      	bne.n	8006c4a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006caa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006cac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006cb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e3      	bne.n	8006c86 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
 8006ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cf0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e4      	bne.n	8006ccc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fb f916 	bl	8001f38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f8f4 	bl	8006f14 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006d2c:	e0d5      	b.n	8006eda <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	f040 80ce 	bne.w	8006eda <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	f040 80c5 	bne.w	8006eda <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f8d8 	bl	8006f14 <HAL_UARTEx_RxEventCallback>
      return;
 8006d64:	e0b9      	b.n	8006eda <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 80ab 	beq.w	8006ede <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006d88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 80a6 	beq.w	8006ede <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9a:	e853 3f00 	ldrex	r3, [r3]
 8006d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006da6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006db6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e4      	bne.n	8006d92 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3308      	adds	r3, #8
 8006dce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	623b      	str	r3, [r7, #32]
   return(result);
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	f023 0301 	bic.w	r3, r3, #1
 8006dde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3308      	adds	r3, #8
 8006de8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006dec:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e3      	bne.n	8006dc8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f023 0310 	bic.w	r3, r3, #16
 8006e28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e36:	61fb      	str	r3, [r7, #28]
 8006e38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	69b9      	ldr	r1, [r7, #24]
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	617b      	str	r3, [r7, #20]
   return(result);
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e4      	bne.n	8006e14 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f85c 	bl	8006f14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e5c:	e03f      	b.n	8006ede <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00e      	beq.n	8006e88 <HAL_UART_IRQHandler+0x5a8>
 8006e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d008      	beq.n	8006e88 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 ffe9 	bl	8007e58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e86:	e02d      	b.n	8006ee4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00e      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d008      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01c      	beq.n	8006ee2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	4798      	blx	r3
    }
    return;
 8006eb0:	e017      	b.n	8006ee2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d012      	beq.n	8006ee4 <HAL_UART_IRQHandler+0x604>
 8006ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00c      	beq.n	8006ee4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fdde 	bl	8007a8c <UART_EndTransmit_IT>
    return;
 8006ed0:	e008      	b.n	8006ee4 <HAL_UART_IRQHandler+0x604>
      return;
 8006ed2:	bf00      	nop
 8006ed4:	e006      	b.n	8006ee4 <HAL_UART_IRQHandler+0x604>
    return;
 8006ed6:	bf00      	nop
 8006ed8:	e004      	b.n	8006ee4 <HAL_UART_IRQHandler+0x604>
      return;
 8006eda:	bf00      	nop
 8006edc:	e002      	b.n	8006ee4 <HAL_UART_IRQHandler+0x604>
      return;
 8006ede:	bf00      	nop
 8006ee0:	e000      	b.n	8006ee4 <HAL_UART_IRQHandler+0x604>
    return;
 8006ee2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ee4:	37e8      	adds	r7, #232	@ 0xe8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop

08006eec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f30:	b08a      	sub	sp, #40	@ 0x28
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	431a      	orrs	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	4ba4      	ldr	r3, [pc, #656]	@ (80071ec <UART_SetConfig+0x2c0>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	6812      	ldr	r2, [r2, #0]
 8006f62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f64:	430b      	orrs	r3, r1
 8006f66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a99      	ldr	r2, [pc, #612]	@ (80071f0 <UART_SetConfig+0x2c4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f94:	4313      	orrs	r3, r2
 8006f96:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a90      	ldr	r2, [pc, #576]	@ (80071f4 <UART_SetConfig+0x2c8>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d126      	bne.n	8007004 <UART_SetConfig+0xd8>
 8006fb6:	4b90      	ldr	r3, [pc, #576]	@ (80071f8 <UART_SetConfig+0x2cc>)
 8006fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d81b      	bhi.n	8006ffc <UART_SetConfig+0xd0>
 8006fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fcc <UART_SetConfig+0xa0>)
 8006fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fca:	bf00      	nop
 8006fcc:	08006fdd 	.word	0x08006fdd
 8006fd0:	08006fed 	.word	0x08006fed
 8006fd4:	08006fe5 	.word	0x08006fe5
 8006fd8:	08006ff5 	.word	0x08006ff5
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fe2:	e116      	b.n	8007212 <UART_SetConfig+0x2e6>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fea:	e112      	b.n	8007212 <UART_SetConfig+0x2e6>
 8006fec:	2304      	movs	r3, #4
 8006fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ff2:	e10e      	b.n	8007212 <UART_SetConfig+0x2e6>
 8006ff4:	2308      	movs	r3, #8
 8006ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ffa:	e10a      	b.n	8007212 <UART_SetConfig+0x2e6>
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007002:	e106      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a7c      	ldr	r2, [pc, #496]	@ (80071fc <UART_SetConfig+0x2d0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d138      	bne.n	8007080 <UART_SetConfig+0x154>
 800700e:	4b7a      	ldr	r3, [pc, #488]	@ (80071f8 <UART_SetConfig+0x2cc>)
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007014:	f003 030c 	and.w	r3, r3, #12
 8007018:	2b0c      	cmp	r3, #12
 800701a:	d82d      	bhi.n	8007078 <UART_SetConfig+0x14c>
 800701c:	a201      	add	r2, pc, #4	@ (adr r2, 8007024 <UART_SetConfig+0xf8>)
 800701e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007022:	bf00      	nop
 8007024:	08007059 	.word	0x08007059
 8007028:	08007079 	.word	0x08007079
 800702c:	08007079 	.word	0x08007079
 8007030:	08007079 	.word	0x08007079
 8007034:	08007069 	.word	0x08007069
 8007038:	08007079 	.word	0x08007079
 800703c:	08007079 	.word	0x08007079
 8007040:	08007079 	.word	0x08007079
 8007044:	08007061 	.word	0x08007061
 8007048:	08007079 	.word	0x08007079
 800704c:	08007079 	.word	0x08007079
 8007050:	08007079 	.word	0x08007079
 8007054:	08007071 	.word	0x08007071
 8007058:	2300      	movs	r3, #0
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800705e:	e0d8      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007060:	2302      	movs	r3, #2
 8007062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007066:	e0d4      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007068:	2304      	movs	r3, #4
 800706a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800706e:	e0d0      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007070:	2308      	movs	r3, #8
 8007072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007076:	e0cc      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007078:	2310      	movs	r3, #16
 800707a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800707e:	e0c8      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a5e      	ldr	r2, [pc, #376]	@ (8007200 <UART_SetConfig+0x2d4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d125      	bne.n	80070d6 <UART_SetConfig+0x1aa>
 800708a:	4b5b      	ldr	r3, [pc, #364]	@ (80071f8 <UART_SetConfig+0x2cc>)
 800708c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007090:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007094:	2b30      	cmp	r3, #48	@ 0x30
 8007096:	d016      	beq.n	80070c6 <UART_SetConfig+0x19a>
 8007098:	2b30      	cmp	r3, #48	@ 0x30
 800709a:	d818      	bhi.n	80070ce <UART_SetConfig+0x1a2>
 800709c:	2b20      	cmp	r3, #32
 800709e:	d00a      	beq.n	80070b6 <UART_SetConfig+0x18a>
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	d814      	bhi.n	80070ce <UART_SetConfig+0x1a2>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <UART_SetConfig+0x182>
 80070a8:	2b10      	cmp	r3, #16
 80070aa:	d008      	beq.n	80070be <UART_SetConfig+0x192>
 80070ac:	e00f      	b.n	80070ce <UART_SetConfig+0x1a2>
 80070ae:	2300      	movs	r3, #0
 80070b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070b4:	e0ad      	b.n	8007212 <UART_SetConfig+0x2e6>
 80070b6:	2302      	movs	r3, #2
 80070b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070bc:	e0a9      	b.n	8007212 <UART_SetConfig+0x2e6>
 80070be:	2304      	movs	r3, #4
 80070c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070c4:	e0a5      	b.n	8007212 <UART_SetConfig+0x2e6>
 80070c6:	2308      	movs	r3, #8
 80070c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070cc:	e0a1      	b.n	8007212 <UART_SetConfig+0x2e6>
 80070ce:	2310      	movs	r3, #16
 80070d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070d4:	e09d      	b.n	8007212 <UART_SetConfig+0x2e6>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a4a      	ldr	r2, [pc, #296]	@ (8007204 <UART_SetConfig+0x2d8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d125      	bne.n	800712c <UART_SetConfig+0x200>
 80070e0:	4b45      	ldr	r3, [pc, #276]	@ (80071f8 <UART_SetConfig+0x2cc>)
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80070ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80070ec:	d016      	beq.n	800711c <UART_SetConfig+0x1f0>
 80070ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80070f0:	d818      	bhi.n	8007124 <UART_SetConfig+0x1f8>
 80070f2:	2b80      	cmp	r3, #128	@ 0x80
 80070f4:	d00a      	beq.n	800710c <UART_SetConfig+0x1e0>
 80070f6:	2b80      	cmp	r3, #128	@ 0x80
 80070f8:	d814      	bhi.n	8007124 <UART_SetConfig+0x1f8>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <UART_SetConfig+0x1d8>
 80070fe:	2b40      	cmp	r3, #64	@ 0x40
 8007100:	d008      	beq.n	8007114 <UART_SetConfig+0x1e8>
 8007102:	e00f      	b.n	8007124 <UART_SetConfig+0x1f8>
 8007104:	2300      	movs	r3, #0
 8007106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800710a:	e082      	b.n	8007212 <UART_SetConfig+0x2e6>
 800710c:	2302      	movs	r3, #2
 800710e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007112:	e07e      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007114:	2304      	movs	r3, #4
 8007116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800711a:	e07a      	b.n	8007212 <UART_SetConfig+0x2e6>
 800711c:	2308      	movs	r3, #8
 800711e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007122:	e076      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007124:	2310      	movs	r3, #16
 8007126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800712a:	e072      	b.n	8007212 <UART_SetConfig+0x2e6>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a35      	ldr	r2, [pc, #212]	@ (8007208 <UART_SetConfig+0x2dc>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d12a      	bne.n	800718c <UART_SetConfig+0x260>
 8007136:	4b30      	ldr	r3, [pc, #192]	@ (80071f8 <UART_SetConfig+0x2cc>)
 8007138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007140:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007144:	d01a      	beq.n	800717c <UART_SetConfig+0x250>
 8007146:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800714a:	d81b      	bhi.n	8007184 <UART_SetConfig+0x258>
 800714c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007150:	d00c      	beq.n	800716c <UART_SetConfig+0x240>
 8007152:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007156:	d815      	bhi.n	8007184 <UART_SetConfig+0x258>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <UART_SetConfig+0x238>
 800715c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007160:	d008      	beq.n	8007174 <UART_SetConfig+0x248>
 8007162:	e00f      	b.n	8007184 <UART_SetConfig+0x258>
 8007164:	2300      	movs	r3, #0
 8007166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800716a:	e052      	b.n	8007212 <UART_SetConfig+0x2e6>
 800716c:	2302      	movs	r3, #2
 800716e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007172:	e04e      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007174:	2304      	movs	r3, #4
 8007176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800717a:	e04a      	b.n	8007212 <UART_SetConfig+0x2e6>
 800717c:	2308      	movs	r3, #8
 800717e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007182:	e046      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007184:	2310      	movs	r3, #16
 8007186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800718a:	e042      	b.n	8007212 <UART_SetConfig+0x2e6>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a17      	ldr	r2, [pc, #92]	@ (80071f0 <UART_SetConfig+0x2c4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d13a      	bne.n	800720c <UART_SetConfig+0x2e0>
 8007196:	4b18      	ldr	r3, [pc, #96]	@ (80071f8 <UART_SetConfig+0x2cc>)
 8007198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800719c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80071a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071a4:	d01a      	beq.n	80071dc <UART_SetConfig+0x2b0>
 80071a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071aa:	d81b      	bhi.n	80071e4 <UART_SetConfig+0x2b8>
 80071ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071b0:	d00c      	beq.n	80071cc <UART_SetConfig+0x2a0>
 80071b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071b6:	d815      	bhi.n	80071e4 <UART_SetConfig+0x2b8>
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <UART_SetConfig+0x298>
 80071bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071c0:	d008      	beq.n	80071d4 <UART_SetConfig+0x2a8>
 80071c2:	e00f      	b.n	80071e4 <UART_SetConfig+0x2b8>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ca:	e022      	b.n	8007212 <UART_SetConfig+0x2e6>
 80071cc:	2302      	movs	r3, #2
 80071ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071d2:	e01e      	b.n	8007212 <UART_SetConfig+0x2e6>
 80071d4:	2304      	movs	r3, #4
 80071d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071da:	e01a      	b.n	8007212 <UART_SetConfig+0x2e6>
 80071dc:	2308      	movs	r3, #8
 80071de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071e2:	e016      	b.n	8007212 <UART_SetConfig+0x2e6>
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ea:	e012      	b.n	8007212 <UART_SetConfig+0x2e6>
 80071ec:	efff69f3 	.word	0xefff69f3
 80071f0:	40008000 	.word	0x40008000
 80071f4:	40013800 	.word	0x40013800
 80071f8:	40021000 	.word	0x40021000
 80071fc:	40004400 	.word	0x40004400
 8007200:	40004800 	.word	0x40004800
 8007204:	40004c00 	.word	0x40004c00
 8007208:	40005000 	.word	0x40005000
 800720c:	2310      	movs	r3, #16
 800720e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a9f      	ldr	r2, [pc, #636]	@ (8007494 <UART_SetConfig+0x568>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d17a      	bne.n	8007312 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800721c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007220:	2b08      	cmp	r3, #8
 8007222:	d824      	bhi.n	800726e <UART_SetConfig+0x342>
 8007224:	a201      	add	r2, pc, #4	@ (adr r2, 800722c <UART_SetConfig+0x300>)
 8007226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722a:	bf00      	nop
 800722c:	08007251 	.word	0x08007251
 8007230:	0800726f 	.word	0x0800726f
 8007234:	08007259 	.word	0x08007259
 8007238:	0800726f 	.word	0x0800726f
 800723c:	0800725f 	.word	0x0800725f
 8007240:	0800726f 	.word	0x0800726f
 8007244:	0800726f 	.word	0x0800726f
 8007248:	0800726f 	.word	0x0800726f
 800724c:	08007267 	.word	0x08007267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007250:	f7fc fc40 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8007254:	61f8      	str	r0, [r7, #28]
        break;
 8007256:	e010      	b.n	800727a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007258:	4b8f      	ldr	r3, [pc, #572]	@ (8007498 <UART_SetConfig+0x56c>)
 800725a:	61fb      	str	r3, [r7, #28]
        break;
 800725c:	e00d      	b.n	800727a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800725e:	f7fc fba1 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8007262:	61f8      	str	r0, [r7, #28]
        break;
 8007264:	e009      	b.n	800727a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800726a:	61fb      	str	r3, [r7, #28]
        break;
 800726c:	e005      	b.n	800727a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007278:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 80fb 	beq.w	8007478 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	4613      	mov	r3, r2
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	4413      	add	r3, r2
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	429a      	cmp	r2, r3
 8007290:	d305      	bcc.n	800729e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	429a      	cmp	r2, r3
 800729c:	d903      	bls.n	80072a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80072a4:	e0e8      	b.n	8007478 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	2200      	movs	r2, #0
 80072aa:	461c      	mov	r4, r3
 80072ac:	4615      	mov	r5, r2
 80072ae:	f04f 0200 	mov.w	r2, #0
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	022b      	lsls	r3, r5, #8
 80072b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80072bc:	0222      	lsls	r2, r4, #8
 80072be:	68f9      	ldr	r1, [r7, #12]
 80072c0:	6849      	ldr	r1, [r1, #4]
 80072c2:	0849      	lsrs	r1, r1, #1
 80072c4:	2000      	movs	r0, #0
 80072c6:	4688      	mov	r8, r1
 80072c8:	4681      	mov	r9, r0
 80072ca:	eb12 0a08 	adds.w	sl, r2, r8
 80072ce:	eb43 0b09 	adc.w	fp, r3, r9
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072e0:	4650      	mov	r0, sl
 80072e2:	4659      	mov	r1, fp
 80072e4:	f7f8 ffd4 	bl	8000290 <__aeabi_uldivmod>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4613      	mov	r3, r2
 80072ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072f6:	d308      	bcc.n	800730a <UART_SetConfig+0x3de>
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072fe:	d204      	bcs.n	800730a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	60da      	str	r2, [r3, #12]
 8007308:	e0b6      	b.n	8007478 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007310:	e0b2      	b.n	8007478 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800731a:	d15e      	bne.n	80073da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800731c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007320:	2b08      	cmp	r3, #8
 8007322:	d828      	bhi.n	8007376 <UART_SetConfig+0x44a>
 8007324:	a201      	add	r2, pc, #4	@ (adr r2, 800732c <UART_SetConfig+0x400>)
 8007326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732a:	bf00      	nop
 800732c:	08007351 	.word	0x08007351
 8007330:	08007359 	.word	0x08007359
 8007334:	08007361 	.word	0x08007361
 8007338:	08007377 	.word	0x08007377
 800733c:	08007367 	.word	0x08007367
 8007340:	08007377 	.word	0x08007377
 8007344:	08007377 	.word	0x08007377
 8007348:	08007377 	.word	0x08007377
 800734c:	0800736f 	.word	0x0800736f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007350:	f7fc fbc0 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8007354:	61f8      	str	r0, [r7, #28]
        break;
 8007356:	e014      	b.n	8007382 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007358:	f7fc fbd2 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 800735c:	61f8      	str	r0, [r7, #28]
        break;
 800735e:	e010      	b.n	8007382 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007360:	4b4d      	ldr	r3, [pc, #308]	@ (8007498 <UART_SetConfig+0x56c>)
 8007362:	61fb      	str	r3, [r7, #28]
        break;
 8007364:	e00d      	b.n	8007382 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007366:	f7fc fb1d 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 800736a:	61f8      	str	r0, [r7, #28]
        break;
 800736c:	e009      	b.n	8007382 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800736e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007372:	61fb      	str	r3, [r7, #28]
        break;
 8007374:	e005      	b.n	8007382 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007380:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d077      	beq.n	8007478 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	005a      	lsls	r2, r3, #1
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	085b      	lsrs	r3, r3, #1
 8007392:	441a      	add	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	fbb2 f3f3 	udiv	r3, r2, r3
 800739c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b0f      	cmp	r3, #15
 80073a2:	d916      	bls.n	80073d2 <UART_SetConfig+0x4a6>
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073aa:	d212      	bcs.n	80073d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	f023 030f 	bic.w	r3, r3, #15
 80073b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	085b      	lsrs	r3, r3, #1
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f003 0307 	and.w	r3, r3, #7
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	8afb      	ldrh	r3, [r7, #22]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	8afa      	ldrh	r2, [r7, #22]
 80073ce:	60da      	str	r2, [r3, #12]
 80073d0:	e052      	b.n	8007478 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80073d8:	e04e      	b.n	8007478 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073de:	2b08      	cmp	r3, #8
 80073e0:	d827      	bhi.n	8007432 <UART_SetConfig+0x506>
 80073e2:	a201      	add	r2, pc, #4	@ (adr r2, 80073e8 <UART_SetConfig+0x4bc>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	0800740d 	.word	0x0800740d
 80073ec:	08007415 	.word	0x08007415
 80073f0:	0800741d 	.word	0x0800741d
 80073f4:	08007433 	.word	0x08007433
 80073f8:	08007423 	.word	0x08007423
 80073fc:	08007433 	.word	0x08007433
 8007400:	08007433 	.word	0x08007433
 8007404:	08007433 	.word	0x08007433
 8007408:	0800742b 	.word	0x0800742b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800740c:	f7fc fb62 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8007410:	61f8      	str	r0, [r7, #28]
        break;
 8007412:	e014      	b.n	800743e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007414:	f7fc fb74 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 8007418:	61f8      	str	r0, [r7, #28]
        break;
 800741a:	e010      	b.n	800743e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800741c:	4b1e      	ldr	r3, [pc, #120]	@ (8007498 <UART_SetConfig+0x56c>)
 800741e:	61fb      	str	r3, [r7, #28]
        break;
 8007420:	e00d      	b.n	800743e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007422:	f7fc fabf 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8007426:	61f8      	str	r0, [r7, #28]
        break;
 8007428:	e009      	b.n	800743e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800742a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800742e:	61fb      	str	r3, [r7, #28]
        break;
 8007430:	e005      	b.n	800743e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800743c:	bf00      	nop
    }

    if (pclk != 0U)
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d019      	beq.n	8007478 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	085a      	lsrs	r2, r3, #1
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	441a      	add	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	fbb2 f3f3 	udiv	r3, r2, r3
 8007456:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	2b0f      	cmp	r3, #15
 800745c:	d909      	bls.n	8007472 <UART_SetConfig+0x546>
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007464:	d205      	bcs.n	8007472 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	b29a      	uxth	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	60da      	str	r2, [r3, #12]
 8007470:	e002      	b.n	8007478 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007484:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007488:	4618      	mov	r0, r3
 800748a:	3728      	adds	r7, #40	@ 0x28
 800748c:	46bd      	mov	sp, r7
 800748e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007492:	bf00      	nop
 8007494:	40008000 	.word	0x40008000
 8007498:	00f42400 	.word	0x00f42400

0800749c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a8:	f003 0308 	and.w	r3, r3, #8
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00a      	beq.n	80074e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00a      	beq.n	800750a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750e:	f003 0304 	and.w	r3, r3, #4
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007530:	f003 0310 	and.w	r3, r3, #16
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00a      	beq.n	800754e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d01a      	beq.n	80075b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800759a:	d10a      	bne.n	80075b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	605a      	str	r2, [r3, #4]
  }
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b098      	sub	sp, #96	@ 0x60
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075f0:	f7fa fa48 	bl	8001a84 <HAL_GetTick>
 80075f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b08      	cmp	r3, #8
 8007602:	d12e      	bne.n	8007662 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007604:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800760c:	2200      	movs	r2, #0
 800760e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f88c 	bl	8007730 <UART_WaitOnFlagUntilTimeout>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d021      	beq.n	8007662 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800762c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007632:	653b      	str	r3, [r7, #80]	@ 0x50
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800763c:	647b      	str	r3, [r7, #68]	@ 0x44
 800763e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007642:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800764a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e6      	bne.n	800761e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e062      	b.n	8007728 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	2b04      	cmp	r3, #4
 800766e:	d149      	bne.n	8007704 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007670:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007678:	2200      	movs	r2, #0
 800767a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f856 	bl	8007730 <UART_WaitOnFlagUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d03c      	beq.n	8007704 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	e853 3f00 	ldrex	r3, [r3]
 8007696:	623b      	str	r3, [r7, #32]
   return(result);
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800769e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80076aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076b0:	e841 2300 	strex	r3, r2, [r1]
 80076b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e6      	bne.n	800768a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3308      	adds	r3, #8
 80076c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0301 	bic.w	r3, r3, #1
 80076d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3308      	adds	r3, #8
 80076da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076dc:	61fa      	str	r2, [r7, #28]
 80076de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	69b9      	ldr	r1, [r7, #24]
 80076e2:	69fa      	ldr	r2, [r7, #28]
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	617b      	str	r3, [r7, #20]
   return(result);
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e5      	bne.n	80076bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e011      	b.n	8007728 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2220      	movs	r2, #32
 800770e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3758      	adds	r7, #88	@ 0x58
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	4613      	mov	r3, r2
 800773e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007740:	e04f      	b.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007748:	d04b      	beq.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800774a:	f7fa f99b 	bl	8001a84 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	429a      	cmp	r2, r3
 8007758:	d302      	bcc.n	8007760 <UART_WaitOnFlagUntilTimeout+0x30>
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e04e      	b.n	8007802 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0304 	and.w	r3, r3, #4
 800776e:	2b00      	cmp	r3, #0
 8007770:	d037      	beq.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b80      	cmp	r3, #128	@ 0x80
 8007776:	d034      	beq.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2b40      	cmp	r3, #64	@ 0x40
 800777c:	d031      	beq.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	2b08      	cmp	r3, #8
 800778a:	d110      	bne.n	80077ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2208      	movs	r2, #8
 8007792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 f8ff 	bl	8007998 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2208      	movs	r2, #8
 800779e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e029      	b.n	8007802 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077bc:	d111      	bne.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f8e5 	bl	8007998 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e00f      	b.n	8007802 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69da      	ldr	r2, [r3, #28]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	4013      	ands	r3, r2
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	bf0c      	ite	eq
 80077f2:	2301      	moveq	r3, #1
 80077f4:	2300      	movne	r3, #0
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	461a      	mov	r2, r3
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d0a0      	beq.n	8007742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
	...

0800780c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800780c:	b480      	push	{r7}
 800780e:	b097      	sub	sp, #92	@ 0x5c
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	4613      	mov	r3, r2
 8007818:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	88fa      	ldrh	r2, [r7, #6]
 8007824:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	88fa      	ldrh	r2, [r7, #6]
 800782c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800783e:	d10e      	bne.n	800785e <UART_Start_Receive_IT+0x52>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d105      	bne.n	8007854 <UART_Start_Receive_IT+0x48>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800784e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007852:	e02d      	b.n	80078b0 <UART_Start_Receive_IT+0xa4>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	22ff      	movs	r2, #255	@ 0xff
 8007858:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800785c:	e028      	b.n	80078b0 <UART_Start_Receive_IT+0xa4>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10d      	bne.n	8007882 <UART_Start_Receive_IT+0x76>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <UART_Start_Receive_IT+0x6c>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	22ff      	movs	r2, #255	@ 0xff
 8007872:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007876:	e01b      	b.n	80078b0 <UART_Start_Receive_IT+0xa4>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	227f      	movs	r2, #127	@ 0x7f
 800787c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007880:	e016      	b.n	80078b0 <UART_Start_Receive_IT+0xa4>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800788a:	d10d      	bne.n	80078a8 <UART_Start_Receive_IT+0x9c>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d104      	bne.n	800789e <UART_Start_Receive_IT+0x92>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	227f      	movs	r2, #127	@ 0x7f
 8007898:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800789c:	e008      	b.n	80078b0 <UART_Start_Receive_IT+0xa4>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	223f      	movs	r2, #63	@ 0x3f
 80078a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078a6:	e003      	b.n	80078b0 <UART_Start_Receive_IT+0xa4>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2222      	movs	r2, #34	@ 0x22
 80078bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3308      	adds	r3, #8
 80078c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ca:	e853 3f00 	ldrex	r3, [r3]
 80078ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d2:	f043 0301 	orr.w	r3, r3, #1
 80078d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3308      	adds	r3, #8
 80078de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80078e0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80078e2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078e8:	e841 2300 	strex	r3, r2, [r1]
 80078ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80078ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e5      	bne.n	80078c0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078fc:	d107      	bne.n	800790e <UART_Start_Receive_IT+0x102>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d103      	bne.n	800790e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	4a21      	ldr	r2, [pc, #132]	@ (8007990 <UART_Start_Receive_IT+0x184>)
 800790a:	669a      	str	r2, [r3, #104]	@ 0x68
 800790c:	e002      	b.n	8007914 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4a20      	ldr	r2, [pc, #128]	@ (8007994 <UART_Start_Receive_IT+0x188>)
 8007912:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d019      	beq.n	8007950 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007930:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800793a:	637b      	str	r3, [r7, #52]	@ 0x34
 800793c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007940:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e6      	bne.n	800791c <UART_Start_Receive_IT+0x110>
 800794e:	e018      	b.n	8007982 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	613b      	str	r3, [r7, #16]
   return(result);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	f043 0320 	orr.w	r3, r3, #32
 8007964:	653b      	str	r3, [r7, #80]	@ 0x50
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800796e:	623b      	str	r3, [r7, #32]
 8007970:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	69f9      	ldr	r1, [r7, #28]
 8007974:	6a3a      	ldr	r2, [r7, #32]
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	61bb      	str	r3, [r7, #24]
   return(result);
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e6      	bne.n	8007950 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	375c      	adds	r7, #92	@ 0x5c
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	08007c9d 	.word	0x08007c9d
 8007994:	08007ae1 	.word	0x08007ae1

08007998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007998:	b480      	push	{r7}
 800799a:	b095      	sub	sp, #84	@ 0x54
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079be:	643b      	str	r3, [r7, #64]	@ 0x40
 80079c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e6      	bne.n	80079a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3308      	adds	r3, #8
 80079d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	f023 0301 	bic.w	r3, r3, #1
 80079e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3308      	adds	r3, #8
 80079f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079fa:	e841 2300 	strex	r3, r2, [r1]
 80079fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1e5      	bne.n	80079d2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d118      	bne.n	8007a40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	e853 3f00 	ldrex	r3, [r3]
 8007a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f023 0310 	bic.w	r3, r3, #16
 8007a22:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a2c:	61bb      	str	r3, [r7, #24]
 8007a2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	6979      	ldr	r1, [r7, #20]
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	e841 2300 	strex	r3, r2, [r1]
 8007a38:	613b      	str	r3, [r7, #16]
   return(result);
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e6      	bne.n	8007a0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007a54:	bf00      	nop
 8007a56:	3754      	adds	r7, #84	@ 0x54
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f7ff fa3e 	bl	8006f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a84:	bf00      	nop
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	61bb      	str	r3, [r7, #24]
 8007ab4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6979      	ldr	r1, [r7, #20]
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e6      	bne.n	8007a94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff fa0a 	bl	8006eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ad8:	bf00      	nop
 8007ada:	3720      	adds	r7, #32
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b09c      	sub	sp, #112	@ 0x70
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007aee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007af8:	2b22      	cmp	r3, #34	@ 0x22
 8007afa:	f040 80be 	bne.w	8007c7a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007b04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007b0c:	b2d9      	uxtb	r1, r3
 8007b0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b18:	400a      	ands	r2, r1
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	3b01      	subs	r3, #1
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f040 80a3 	bne.w	8007c8e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e6      	bne.n	8007b48 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b8c:	f023 0301 	bic.w	r3, r3, #1
 8007b90:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3308      	adds	r3, #8
 8007b98:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007b9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e5      	bne.n	8007b7a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a34      	ldr	r2, [pc, #208]	@ (8007c98 <UART_RxISR_8BIT+0x1b8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d01f      	beq.n	8007c0c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d018      	beq.n	8007c0c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	623b      	str	r3, [r7, #32]
   return(result);
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bee:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e6      	bne.n	8007bda <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d12e      	bne.n	8007c72 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0310 	bic.w	r3, r3, #16
 8007c2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c38:	61fb      	str	r3, [r7, #28]
 8007c3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	69b9      	ldr	r1, [r7, #24]
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	e841 2300 	strex	r3, r2, [r1]
 8007c44:	617b      	str	r3, [r7, #20]
   return(result);
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e6      	bne.n	8007c1a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	f003 0310 	and.w	r3, r3, #16
 8007c56:	2b10      	cmp	r3, #16
 8007c58:	d103      	bne.n	8007c62 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2210      	movs	r2, #16
 8007c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7ff f952 	bl	8006f14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c70:	e00d      	b.n	8007c8e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7f9 f814 	bl	8000ca0 <HAL_UART_RxCpltCallback>
}
 8007c78:	e009      	b.n	8007c8e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	8b1b      	ldrh	r3, [r3, #24]
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0208 	orr.w	r2, r2, #8
 8007c8a:	b292      	uxth	r2, r2
 8007c8c:	831a      	strh	r2, [r3, #24]
}
 8007c8e:	bf00      	nop
 8007c90:	3770      	adds	r7, #112	@ 0x70
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40008000 	.word	0x40008000

08007c9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b09c      	sub	sp, #112	@ 0x70
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007caa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cb4:	2b22      	cmp	r3, #34	@ 0x22
 8007cb6:	f040 80be 	bne.w	8007e36 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007cc0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007cca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007cce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cde:	1c9a      	adds	r2, r3, #2
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	3b01      	subs	r3, #1
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f040 80a3 	bne.w	8007e4a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d18:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d22:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d24:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e6      	bne.n	8007d04 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d48:	f023 0301 	bic.w	r3, r3, #1
 8007d4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3308      	adds	r3, #8
 8007d54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d56:	643a      	str	r2, [r7, #64]	@ 0x40
 8007d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e5      	bne.n	8007d36 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a34      	ldr	r2, [pc, #208]	@ (8007e54 <UART_RxISR_16BIT+0x1b8>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d01f      	beq.n	8007dc8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d018      	beq.n	8007dc8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	461a      	mov	r2, r3
 8007db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007db6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e6      	bne.n	8007d96 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d12e      	bne.n	8007e2e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f023 0310 	bic.w	r3, r3, #16
 8007dea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
 8007df2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007df4:	61bb      	str	r3, [r7, #24]
 8007df6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	6979      	ldr	r1, [r7, #20]
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	613b      	str	r3, [r7, #16]
   return(result);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e6      	bne.n	8007dd6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	f003 0310 	and.w	r3, r3, #16
 8007e12:	2b10      	cmp	r3, #16
 8007e14:	d103      	bne.n	8007e1e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2210      	movs	r2, #16
 8007e1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7ff f874 	bl	8006f14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e2c:	e00d      	b.n	8007e4a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7f8 ff36 	bl	8000ca0 <HAL_UART_RxCpltCallback>
}
 8007e34:	e009      	b.n	8007e4a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	8b1b      	ldrh	r3, [r3, #24]
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0208 	orr.w	r2, r2, #8
 8007e46:	b292      	uxth	r2, r2
 8007e48:	831a      	strh	r2, [r3, #24]
}
 8007e4a:	bf00      	nop
 8007e4c:	3770      	adds	r7, #112	@ 0x70
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	40008000 	.word	0x40008000

08007e58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4603      	mov	r3, r0
 8007e74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e7e:	2b84      	cmp	r3, #132	@ 0x84
 8007e80:	d005      	beq.n	8007e8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007e82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4413      	add	r3, r2
 8007e8a:	3303      	adds	r3, #3
 8007e8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007ea0:	f000 fdca 	bl	8008a38 <vTaskStartScheduler>
  
  return osOK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eac:	b089      	sub	sp, #36	@ 0x24
 8007eae:	af04      	add	r7, sp, #16
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d020      	beq.n	8007efe <osThreadCreate+0x54>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d01c      	beq.n	8007efe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685c      	ldr	r4, [r3, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691e      	ldr	r6, [r3, #16]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff ffc8 	bl	8007e6c <makeFreeRtosPriority>
 8007edc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ee6:	9202      	str	r2, [sp, #8]
 8007ee8:	9301      	str	r3, [sp, #4]
 8007eea:	9100      	str	r1, [sp, #0]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	4632      	mov	r2, r6
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f000 fbd2 	bl	800869c <xTaskCreateStatic>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	e01c      	b.n	8007f38 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685c      	ldr	r4, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f0a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff ffaa 	bl	8007e6c <makeFreeRtosPriority>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	f107 030c 	add.w	r3, r7, #12
 8007f1e:	9301      	str	r3, [sp, #4]
 8007f20:	9200      	str	r2, [sp, #0]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	4632      	mov	r2, r6
 8007f26:	4629      	mov	r1, r5
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fc17 	bl	800875c <xTaskCreate>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d001      	beq.n	8007f38 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	e000      	b.n	8007f3a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007f38:	68fb      	ldr	r3, [r7, #12]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f42 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <osDelay+0x16>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	e000      	b.n	8007f5a <osDelay+0x18>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 fd36 	bl	80089cc <vTaskDelay>
  
  return osOK;
 8007f60:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f103 0208 	add.w	r2, r3, #8
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f82:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f103 0208 	add.w	r2, r3, #8
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f103 0208 	add.w	r2, r3, #8
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	689a      	ldr	r2, [r3, #8]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	601a      	str	r2, [r3, #0]
}
 8008000:	bf00      	nop
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008022:	d103      	bne.n	800802c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	60fb      	str	r3, [r7, #12]
 800802a:	e00c      	b.n	8008046 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3308      	adds	r3, #8
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	e002      	b.n	800803a <vListInsert+0x2e>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	429a      	cmp	r2, r3
 8008044:	d2f6      	bcs.n	8008034 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	601a      	str	r2, [r3, #0]
}
 8008072:	bf00      	nop
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	6892      	ldr	r2, [r2, #8]
 8008094:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	6852      	ldr	r2, [r2, #4]
 800809e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d103      	bne.n	80080b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689a      	ldr	r2, [r3, #8]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	1e5a      	subs	r2, r3, #1
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
	...

080080d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10b      	bne.n	8008100 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080fa:	bf00      	nop
 80080fc:	bf00      	nop
 80080fe:	e7fd      	b.n	80080fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008100:	f001 fb72 	bl	80097e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800810c:	68f9      	ldr	r1, [r7, #12]
 800810e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008110:	fb01 f303 	mul.w	r3, r1, r3
 8008114:	441a      	add	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008130:	3b01      	subs	r3, #1
 8008132:	68f9      	ldr	r1, [r7, #12]
 8008134:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008136:	fb01 f303 	mul.w	r3, r1, r3
 800813a:	441a      	add	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	22ff      	movs	r2, #255	@ 0xff
 8008144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	22ff      	movs	r2, #255	@ 0xff
 800814c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d114      	bne.n	8008180 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01a      	beq.n	8008194 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3310      	adds	r3, #16
 8008162:	4618      	mov	r0, r3
 8008164:	f000 feb2 	bl	8008ecc <xTaskRemoveFromEventList>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d012      	beq.n	8008194 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800816e:	4b0d      	ldr	r3, [pc, #52]	@ (80081a4 <xQueueGenericReset+0xd0>)
 8008170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	e009      	b.n	8008194 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	3310      	adds	r3, #16
 8008184:	4618      	mov	r0, r3
 8008186:	f7ff fef0 	bl	8007f6a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3324      	adds	r3, #36	@ 0x24
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff feeb 	bl	8007f6a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008194:	f001 fb5a 	bl	800984c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008198:	2301      	movs	r3, #1
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	e000ed04 	.word	0xe000ed04

080081a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	@ 0x28
 80081ac:	af02      	add	r7, sp, #8
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	4613      	mov	r3, r2
 80081b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10b      	bne.n	80081d4 <xQueueGenericCreate+0x2c>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	613b      	str	r3, [r7, #16]
}
 80081ce:	bf00      	nop
 80081d0:	bf00      	nop
 80081d2:	e7fd      	b.n	80081d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	fb02 f303 	mul.w	r3, r2, r3
 80081dc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	3348      	adds	r3, #72	@ 0x48
 80081e2:	4618      	mov	r0, r3
 80081e4:	f001 fc22 	bl	8009a2c <pvPortMalloc>
 80081e8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d011      	beq.n	8008214 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	3348      	adds	r3, #72	@ 0x48
 80081f8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008202:	79fa      	ldrb	r2, [r7, #7]
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	4613      	mov	r3, r2
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	68b9      	ldr	r1, [r7, #8]
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 f805 	bl	800821e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008214:	69bb      	ldr	r3, [r7, #24]
	}
 8008216:	4618      	mov	r0, r3
 8008218:	3720      	adds	r7, #32
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	60f8      	str	r0, [r7, #12]
 8008226:	60b9      	str	r1, [r7, #8]
 8008228:	607a      	str	r2, [r7, #4]
 800822a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d103      	bne.n	800823a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	e002      	b.n	8008240 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800824c:	2101      	movs	r1, #1
 800824e:	69b8      	ldr	r0, [r7, #24]
 8008250:	f7ff ff40 	bl	80080d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008254:	bf00      	nop
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08e      	sub	sp, #56	@ 0x38
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800826a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10b      	bne.n	8008288 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	623b      	str	r3, [r7, #32]
}
 8008282:	bf00      	nop
 8008284:	bf00      	nop
 8008286:	e7fd      	b.n	8008284 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00b      	beq.n	80082a8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	61fb      	str	r3, [r7, #28]
}
 80082a2:	bf00      	nop
 80082a4:	bf00      	nop
 80082a6:	e7fd      	b.n	80082a4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80082a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d103      	bne.n	80082b8 <xQueueGiveFromISR+0x5c>
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <xQueueGiveFromISR+0x60>
 80082b8:	2301      	movs	r3, #1
 80082ba:	e000      	b.n	80082be <xQueueGiveFromISR+0x62>
 80082bc:	2300      	movs	r3, #0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10b      	bne.n	80082da <xQueueGiveFromISR+0x7e>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	61bb      	str	r3, [r7, #24]
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop
 80082d8:	e7fd      	b.n	80082d6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082da:	f001 fb65 	bl	80099a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80082de:	f3ef 8211 	mrs	r2, BASEPRI
 80082e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	617a      	str	r2, [r7, #20]
 80082f4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008304:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008306:	429a      	cmp	r2, r3
 8008308:	d22b      	bcs.n	8008362 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800831c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008324:	d112      	bne.n	800834c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832a:	2b00      	cmp	r3, #0
 800832c:	d016      	beq.n	800835c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800832e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008330:	3324      	adds	r3, #36	@ 0x24
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fdca 	bl	8008ecc <xTaskRemoveFromEventList>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00e      	beq.n	800835c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00b      	beq.n	800835c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2201      	movs	r2, #1
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	e007      	b.n	800835c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800834c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008350:	3301      	adds	r3, #1
 8008352:	b2db      	uxtb	r3, r3
 8008354:	b25a      	sxtb	r2, r3
 8008356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800835c:	2301      	movs	r3, #1
 800835e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008360:	e001      	b.n	8008366 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008362:	2300      	movs	r3, #0
 8008364:	637b      	str	r3, [r7, #52]	@ 0x34
 8008366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008368:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008370:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008374:	4618      	mov	r0, r3
 8008376:	3738      	adds	r7, #56	@ 0x38
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08e      	sub	sp, #56	@ 0x38
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008386:	2300      	movs	r3, #0
 8008388:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800838e:	2300      	movs	r3, #0
 8008390:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10b      	bne.n	80083b0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	623b      	str	r3, [r7, #32]
}
 80083aa:	bf00      	nop
 80083ac:	bf00      	nop
 80083ae:	e7fd      	b.n	80083ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00b      	beq.n	80083d0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	61fb      	str	r3, [r7, #28]
}
 80083ca:	bf00      	nop
 80083cc:	bf00      	nop
 80083ce:	e7fd      	b.n	80083cc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083d0:	f000 ff3c 	bl	800924c <xTaskGetSchedulerState>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d102      	bne.n	80083e0 <xQueueSemaphoreTake+0x64>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <xQueueSemaphoreTake+0x68>
 80083e0:	2301      	movs	r3, #1
 80083e2:	e000      	b.n	80083e6 <xQueueSemaphoreTake+0x6a>
 80083e4:	2300      	movs	r3, #0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10b      	bne.n	8008402 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	61bb      	str	r3, [r7, #24]
}
 80083fc:	bf00      	nop
 80083fe:	bf00      	nop
 8008400:	e7fd      	b.n	80083fe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008402:	f001 f9f1 	bl	80097e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800840a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800840c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840e:	2b00      	cmp	r3, #0
 8008410:	d024      	beq.n	800845c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008414:	1e5a      	subs	r2, r3, #1
 8008416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008418:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800841a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008422:	f001 f837 	bl	8009494 <pvTaskIncrementMutexHeldCount>
 8008426:	4602      	mov	r2, r0
 8008428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800842c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00f      	beq.n	8008454 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008436:	3310      	adds	r3, #16
 8008438:	4618      	mov	r0, r3
 800843a:	f000 fd47 	bl	8008ecc <xTaskRemoveFromEventList>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d007      	beq.n	8008454 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008444:	4b54      	ldr	r3, [pc, #336]	@ (8008598 <xQueueSemaphoreTake+0x21c>)
 8008446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008454:	f001 f9fa 	bl	800984c <vPortExitCritical>
				return pdPASS;
 8008458:	2301      	movs	r3, #1
 800845a:	e098      	b.n	800858e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d112      	bne.n	8008488 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00b      	beq.n	8008480 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	617b      	str	r3, [r7, #20]
}
 800847a:	bf00      	nop
 800847c:	bf00      	nop
 800847e:	e7fd      	b.n	800847c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008480:	f001 f9e4 	bl	800984c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008484:	2300      	movs	r3, #0
 8008486:	e082      	b.n	800858e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800848e:	f107 030c 	add.w	r3, r7, #12
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fd7e 	bl	8008f94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008498:	2301      	movs	r3, #1
 800849a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800849c:	f001 f9d6 	bl	800984c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084a0:	f000 fb2c 	bl	8008afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084a4:	f001 f9a0 	bl	80097e8 <vPortEnterCritical>
 80084a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084ae:	b25b      	sxtb	r3, r3
 80084b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b4:	d103      	bne.n	80084be <xQueueSemaphoreTake+0x142>
 80084b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084c4:	b25b      	sxtb	r3, r3
 80084c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ca:	d103      	bne.n	80084d4 <xQueueSemaphoreTake+0x158>
 80084cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084d4:	f001 f9ba 	bl	800984c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084d8:	463a      	mov	r2, r7
 80084da:	f107 030c 	add.w	r3, r7, #12
 80084de:	4611      	mov	r1, r2
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fd6d 	bl	8008fc0 <xTaskCheckForTimeOut>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d132      	bne.n	8008552 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084ee:	f000 f8bf 	bl	8008670 <prvIsQueueEmpty>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d026      	beq.n	8008546 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d109      	bne.n	8008514 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008500:	f001 f972 	bl	80097e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	4618      	mov	r0, r3
 800850a:	f000 febd 	bl	8009288 <xTaskPriorityInherit>
 800850e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008510:	f001 f99c 	bl	800984c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008516:	3324      	adds	r3, #36	@ 0x24
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fcaf 	bl	8008e80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008522:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008524:	f000 f852 	bl	80085cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008528:	f000 faf6 	bl	8008b18 <xTaskResumeAll>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	f47f af67 	bne.w	8008402 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008534:	4b18      	ldr	r3, [pc, #96]	@ (8008598 <xQueueSemaphoreTake+0x21c>)
 8008536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	e75d      	b.n	8008402 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008546:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008548:	f000 f840 	bl	80085cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800854c:	f000 fae4 	bl	8008b18 <xTaskResumeAll>
 8008550:	e757      	b.n	8008402 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008552:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008554:	f000 f83a 	bl	80085cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008558:	f000 fade 	bl	8008b18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800855c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800855e:	f000 f887 	bl	8008670 <prvIsQueueEmpty>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	f43f af4c 	beq.w	8008402 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00d      	beq.n	800858c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008570:	f001 f93a 	bl	80097e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008574:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008576:	f000 f811 	bl	800859c <prvGetDisinheritPriorityAfterTimeout>
 800857a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800857c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008582:	4618      	mov	r0, r3
 8008584:	f000 fef6 	bl	8009374 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008588:	f001 f960 	bl	800984c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800858c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800858e:	4618      	mov	r0, r3
 8008590:	3738      	adds	r7, #56	@ 0x38
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d006      	beq.n	80085ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f1c3 0307 	rsb	r3, r3, #7
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	e001      	b.n	80085be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80085be:	68fb      	ldr	r3, [r7, #12]
	}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085d4:	f001 f908 	bl	80097e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085e0:	e011      	b.n	8008606 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d012      	beq.n	8008610 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	3324      	adds	r3, #36	@ 0x24
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fc6c 	bl	8008ecc <xTaskRemoveFromEventList>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085fa:	f000 fd45 	bl	8009088 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	3b01      	subs	r3, #1
 8008602:	b2db      	uxtb	r3, r3
 8008604:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800860a:	2b00      	cmp	r3, #0
 800860c:	dce9      	bgt.n	80085e2 <prvUnlockQueue+0x16>
 800860e:	e000      	b.n	8008612 <prvUnlockQueue+0x46>
					break;
 8008610:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	22ff      	movs	r2, #255	@ 0xff
 8008616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800861a:	f001 f917 	bl	800984c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800861e:	f001 f8e3 	bl	80097e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008628:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800862a:	e011      	b.n	8008650 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d012      	beq.n	800865a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3310      	adds	r3, #16
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fc47 	bl	8008ecc <xTaskRemoveFromEventList>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008644:	f000 fd20 	bl	8009088 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	3b01      	subs	r3, #1
 800864c:	b2db      	uxtb	r3, r3
 800864e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008654:	2b00      	cmp	r3, #0
 8008656:	dce9      	bgt.n	800862c <prvUnlockQueue+0x60>
 8008658:	e000      	b.n	800865c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800865a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	22ff      	movs	r2, #255	@ 0xff
 8008660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008664:	f001 f8f2 	bl	800984c <vPortExitCritical>
}
 8008668:	bf00      	nop
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008678:	f001 f8b6 	bl	80097e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008680:	2b00      	cmp	r3, #0
 8008682:	d102      	bne.n	800868a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008684:	2301      	movs	r3, #1
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	e001      	b.n	800868e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800868a:	2300      	movs	r3, #0
 800868c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800868e:	f001 f8dd 	bl	800984c <vPortExitCritical>

	return xReturn;
 8008692:	68fb      	ldr	r3, [r7, #12]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08e      	sub	sp, #56	@ 0x38
 80086a0:	af04      	add	r7, sp, #16
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10b      	bne.n	80086c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	623b      	str	r3, [r7, #32]
}
 80086c2:	bf00      	nop
 80086c4:	bf00      	nop
 80086c6:	e7fd      	b.n	80086c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10b      	bne.n	80086e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	61fb      	str	r3, [r7, #28]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086e6:	2354      	movs	r3, #84	@ 0x54
 80086e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	2b54      	cmp	r3, #84	@ 0x54
 80086ee:	d00b      	beq.n	8008708 <xTaskCreateStatic+0x6c>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	61bb      	str	r3, [r7, #24]
}
 8008702:	bf00      	nop
 8008704:	bf00      	nop
 8008706:	e7fd      	b.n	8008704 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008708:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800870a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870c:	2b00      	cmp	r3, #0
 800870e:	d01e      	beq.n	800874e <xTaskCreateStatic+0xb2>
 8008710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008712:	2b00      	cmp	r3, #0
 8008714:	d01b      	beq.n	800874e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008718:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800871a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800871e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008722:	2202      	movs	r2, #2
 8008724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008728:	2300      	movs	r3, #0
 800872a:	9303      	str	r3, [sp, #12]
 800872c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872e:	9302      	str	r3, [sp, #8]
 8008730:	f107 0314 	add.w	r3, r7, #20
 8008734:	9301      	str	r3, [sp, #4]
 8008736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	68b9      	ldr	r1, [r7, #8]
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 f850 	bl	80087e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008746:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008748:	f000 f8d6 	bl	80088f8 <prvAddNewTaskToReadyList>
 800874c:	e001      	b.n	8008752 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800874e:	2300      	movs	r3, #0
 8008750:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008752:	697b      	ldr	r3, [r7, #20]
	}
 8008754:	4618      	mov	r0, r3
 8008756:	3728      	adds	r7, #40	@ 0x28
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08c      	sub	sp, #48	@ 0x30
 8008760:	af04      	add	r7, sp, #16
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	603b      	str	r3, [r7, #0]
 8008768:	4613      	mov	r3, r2
 800876a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800876c:	88fb      	ldrh	r3, [r7, #6]
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4618      	mov	r0, r3
 8008772:	f001 f95b 	bl	8009a2c <pvPortMalloc>
 8008776:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00e      	beq.n	800879c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800877e:	2054      	movs	r0, #84	@ 0x54
 8008780:	f001 f954 	bl	8009a2c <pvPortMalloc>
 8008784:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	631a      	str	r2, [r3, #48]	@ 0x30
 8008792:	e005      	b.n	80087a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008794:	6978      	ldr	r0, [r7, #20]
 8008796:	f001 fa17 	bl	8009bc8 <vPortFree>
 800879a:	e001      	b.n	80087a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800879c:	2300      	movs	r3, #0
 800879e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d017      	beq.n	80087d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087ae:	88fa      	ldrh	r2, [r7, #6]
 80087b0:	2300      	movs	r3, #0
 80087b2:	9303      	str	r3, [sp, #12]
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	9302      	str	r3, [sp, #8]
 80087b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ba:	9301      	str	r3, [sp, #4]
 80087bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	68b9      	ldr	r1, [r7, #8]
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 f80e 	bl	80087e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087ca:	69f8      	ldr	r0, [r7, #28]
 80087cc:	f000 f894 	bl	80088f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087d0:	2301      	movs	r3, #1
 80087d2:	61bb      	str	r3, [r7, #24]
 80087d4:	e002      	b.n	80087dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087d6:	f04f 33ff 	mov.w	r3, #4294967295
 80087da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087dc:	69bb      	ldr	r3, [r7, #24]
	}
 80087de:	4618      	mov	r0, r3
 80087e0:	3720      	adds	r7, #32
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b088      	sub	sp, #32
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	60f8      	str	r0, [r7, #12]
 80087ee:	60b9      	str	r1, [r7, #8]
 80087f0:	607a      	str	r2, [r7, #4]
 80087f2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80087fe:	3b01      	subs	r3, #1
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	f023 0307 	bic.w	r3, r3, #7
 800880c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	f003 0307 	and.w	r3, r3, #7
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00b      	beq.n	8008830 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	617b      	str	r3, [r7, #20]
}
 800882a:	bf00      	nop
 800882c:	bf00      	nop
 800882e:	e7fd      	b.n	800882c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d01f      	beq.n	8008876 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008836:	2300      	movs	r3, #0
 8008838:	61fb      	str	r3, [r7, #28]
 800883a:	e012      	b.n	8008862 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	4413      	add	r3, r2
 8008842:	7819      	ldrb	r1, [r3, #0]
 8008844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	4413      	add	r3, r2
 800884a:	3334      	adds	r3, #52	@ 0x34
 800884c:	460a      	mov	r2, r1
 800884e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	4413      	add	r3, r2
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d006      	beq.n	800886a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	3301      	adds	r3, #1
 8008860:	61fb      	str	r3, [r7, #28]
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	2b0f      	cmp	r3, #15
 8008866:	d9e9      	bls.n	800883c <prvInitialiseNewTask+0x56>
 8008868:	e000      	b.n	800886c <prvInitialiseNewTask+0x86>
			{
				break;
 800886a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800886c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886e:	2200      	movs	r2, #0
 8008870:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008874:	e003      	b.n	800887e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800887e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008880:	2b06      	cmp	r3, #6
 8008882:	d901      	bls.n	8008888 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008884:	2306      	movs	r3, #6
 8008886:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800888c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800888e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008892:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	2200      	movs	r2, #0
 8008898:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	3304      	adds	r3, #4
 800889e:	4618      	mov	r0, r3
 80088a0:	f7ff fb83 	bl	8007faa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a6:	3318      	adds	r3, #24
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff fb7e 	bl	8007faa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b6:	f1c3 0207 	rsb	r2, r3, #7
 80088ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088c2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	2200      	movs	r2, #0
 80088c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	68f9      	ldr	r1, [r7, #12]
 80088d6:	69b8      	ldr	r0, [r7, #24]
 80088d8:	f000 fe56 	bl	8009588 <pxPortInitialiseStack>
 80088dc:	4602      	mov	r2, r0
 80088de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088ee:	bf00      	nop
 80088f0:	3720      	adds	r7, #32
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008900:	f000 ff72 	bl	80097e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008904:	4b2a      	ldr	r3, [pc, #168]	@ (80089b0 <prvAddNewTaskToReadyList+0xb8>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3301      	adds	r3, #1
 800890a:	4a29      	ldr	r2, [pc, #164]	@ (80089b0 <prvAddNewTaskToReadyList+0xb8>)
 800890c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800890e:	4b29      	ldr	r3, [pc, #164]	@ (80089b4 <prvAddNewTaskToReadyList+0xbc>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d109      	bne.n	800892a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008916:	4a27      	ldr	r2, [pc, #156]	@ (80089b4 <prvAddNewTaskToReadyList+0xbc>)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800891c:	4b24      	ldr	r3, [pc, #144]	@ (80089b0 <prvAddNewTaskToReadyList+0xb8>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d110      	bne.n	8008946 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008924:	f000 fbd4 	bl	80090d0 <prvInitialiseTaskLists>
 8008928:	e00d      	b.n	8008946 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800892a:	4b23      	ldr	r3, [pc, #140]	@ (80089b8 <prvAddNewTaskToReadyList+0xc0>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d109      	bne.n	8008946 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008932:	4b20      	ldr	r3, [pc, #128]	@ (80089b4 <prvAddNewTaskToReadyList+0xbc>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893c:	429a      	cmp	r2, r3
 800893e:	d802      	bhi.n	8008946 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008940:	4a1c      	ldr	r2, [pc, #112]	@ (80089b4 <prvAddNewTaskToReadyList+0xbc>)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008946:	4b1d      	ldr	r3, [pc, #116]	@ (80089bc <prvAddNewTaskToReadyList+0xc4>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3301      	adds	r3, #1
 800894c:	4a1b      	ldr	r2, [pc, #108]	@ (80089bc <prvAddNewTaskToReadyList+0xc4>)
 800894e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008954:	2201      	movs	r2, #1
 8008956:	409a      	lsls	r2, r3
 8008958:	4b19      	ldr	r3, [pc, #100]	@ (80089c0 <prvAddNewTaskToReadyList+0xc8>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4313      	orrs	r3, r2
 800895e:	4a18      	ldr	r2, [pc, #96]	@ (80089c0 <prvAddNewTaskToReadyList+0xc8>)
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4a15      	ldr	r2, [pc, #84]	@ (80089c4 <prvAddNewTaskToReadyList+0xcc>)
 8008970:	441a      	add	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	3304      	adds	r3, #4
 8008976:	4619      	mov	r1, r3
 8008978:	4610      	mov	r0, r2
 800897a:	f7ff fb23 	bl	8007fc4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800897e:	f000 ff65 	bl	800984c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008982:	4b0d      	ldr	r3, [pc, #52]	@ (80089b8 <prvAddNewTaskToReadyList+0xc0>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00e      	beq.n	80089a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800898a:	4b0a      	ldr	r3, [pc, #40]	@ (80089b4 <prvAddNewTaskToReadyList+0xbc>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008994:	429a      	cmp	r2, r3
 8008996:	d207      	bcs.n	80089a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008998:	4b0b      	ldr	r3, [pc, #44]	@ (80089c8 <prvAddNewTaskToReadyList+0xd0>)
 800899a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089a8:	bf00      	nop
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	200007f0 	.word	0x200007f0
 80089b4:	200006f0 	.word	0x200006f0
 80089b8:	200007fc 	.word	0x200007fc
 80089bc:	2000080c 	.word	0x2000080c
 80089c0:	200007f8 	.word	0x200007f8
 80089c4:	200006f4 	.word	0x200006f4
 80089c8:	e000ed04 	.word	0xe000ed04

080089cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d018      	beq.n	8008a10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089de:	4b14      	ldr	r3, [pc, #80]	@ (8008a30 <vTaskDelay+0x64>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00b      	beq.n	80089fe <vTaskDelay+0x32>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	60bb      	str	r3, [r7, #8]
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	e7fd      	b.n	80089fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089fe:	f000 f87d 	bl	8008afc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a02:	2100      	movs	r1, #0
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fd59 	bl	80094bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a0a:	f000 f885 	bl	8008b18 <xTaskResumeAll>
 8008a0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d107      	bne.n	8008a26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008a16:	4b07      	ldr	r3, [pc, #28]	@ (8008a34 <vTaskDelay+0x68>)
 8008a18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a26:	bf00      	nop
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	20000818 	.word	0x20000818
 8008a34:	e000ed04 	.word	0xe000ed04

08008a38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08a      	sub	sp, #40	@ 0x28
 8008a3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a46:	463a      	mov	r2, r7
 8008a48:	1d39      	adds	r1, r7, #4
 8008a4a:	f107 0308 	add.w	r3, r7, #8
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7f7 fe66 	bl	8000720 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	9202      	str	r2, [sp, #8]
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	2300      	movs	r3, #0
 8008a64:	460a      	mov	r2, r1
 8008a66:	491f      	ldr	r1, [pc, #124]	@ (8008ae4 <vTaskStartScheduler+0xac>)
 8008a68:	481f      	ldr	r0, [pc, #124]	@ (8008ae8 <vTaskStartScheduler+0xb0>)
 8008a6a:	f7ff fe17 	bl	800869c <xTaskCreateStatic>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	4a1e      	ldr	r2, [pc, #120]	@ (8008aec <vTaskStartScheduler+0xb4>)
 8008a72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a74:	4b1d      	ldr	r3, [pc, #116]	@ (8008aec <vTaskStartScheduler+0xb4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	e001      	b.n	8008a86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d116      	bne.n	8008aba <vTaskStartScheduler+0x82>
	__asm volatile
 8008a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	613b      	str	r3, [r7, #16]
}
 8008a9e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008aa0:	4b13      	ldr	r3, [pc, #76]	@ (8008af0 <vTaskStartScheduler+0xb8>)
 8008aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008aa8:	4b12      	ldr	r3, [pc, #72]	@ (8008af4 <vTaskStartScheduler+0xbc>)
 8008aaa:	2201      	movs	r2, #1
 8008aac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008aae:	4b12      	ldr	r3, [pc, #72]	@ (8008af8 <vTaskStartScheduler+0xc0>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ab4:	f000 fdf4 	bl	80096a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ab8:	e00f      	b.n	8008ada <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac0:	d10b      	bne.n	8008ada <vTaskStartScheduler+0xa2>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	60fb      	str	r3, [r7, #12]
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop
 8008ad8:	e7fd      	b.n	8008ad6 <vTaskStartScheduler+0x9e>
}
 8008ada:	bf00      	nop
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	0800b4a0 	.word	0x0800b4a0
 8008ae8:	080090a1 	.word	0x080090a1
 8008aec:	20000814 	.word	0x20000814
 8008af0:	20000810 	.word	0x20000810
 8008af4:	200007fc 	.word	0x200007fc
 8008af8:	200007f4 	.word	0x200007f4

08008afc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b00:	4b04      	ldr	r3, [pc, #16]	@ (8008b14 <vTaskSuspendAll+0x18>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3301      	adds	r3, #1
 8008b06:	4a03      	ldr	r2, [pc, #12]	@ (8008b14 <vTaskSuspendAll+0x18>)
 8008b08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b0a:	bf00      	nop
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	20000818 	.word	0x20000818

08008b18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b22:	2300      	movs	r3, #0
 8008b24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b26:	4b42      	ldr	r3, [pc, #264]	@ (8008c30 <xTaskResumeAll+0x118>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10b      	bne.n	8008b46 <xTaskResumeAll+0x2e>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	603b      	str	r3, [r7, #0]
}
 8008b40:	bf00      	nop
 8008b42:	bf00      	nop
 8008b44:	e7fd      	b.n	8008b42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b46:	f000 fe4f 	bl	80097e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b4a:	4b39      	ldr	r3, [pc, #228]	@ (8008c30 <xTaskResumeAll+0x118>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	4a37      	ldr	r2, [pc, #220]	@ (8008c30 <xTaskResumeAll+0x118>)
 8008b52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b54:	4b36      	ldr	r3, [pc, #216]	@ (8008c30 <xTaskResumeAll+0x118>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d161      	bne.n	8008c20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b5c:	4b35      	ldr	r3, [pc, #212]	@ (8008c34 <xTaskResumeAll+0x11c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d05d      	beq.n	8008c20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b64:	e02e      	b.n	8008bc4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b66:	4b34      	ldr	r3, [pc, #208]	@ (8008c38 <xTaskResumeAll+0x120>)
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3318      	adds	r3, #24
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff fa83 	bl	800807e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7ff fa7e 	bl	800807e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b86:	2201      	movs	r2, #1
 8008b88:	409a      	lsls	r2, r3
 8008b8a:	4b2c      	ldr	r3, [pc, #176]	@ (8008c3c <xTaskResumeAll+0x124>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	4a2a      	ldr	r2, [pc, #168]	@ (8008c3c <xTaskResumeAll+0x124>)
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4a27      	ldr	r2, [pc, #156]	@ (8008c40 <xTaskResumeAll+0x128>)
 8008ba2:	441a      	add	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4610      	mov	r0, r2
 8008bac:	f7ff fa0a 	bl	8007fc4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bb4:	4b23      	ldr	r3, [pc, #140]	@ (8008c44 <xTaskResumeAll+0x12c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d302      	bcc.n	8008bc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008bbe:	4b22      	ldr	r3, [pc, #136]	@ (8008c48 <xTaskResumeAll+0x130>)
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8008c38 <xTaskResumeAll+0x120>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1cc      	bne.n	8008b66 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bd2:	f000 fb1b 	bl	800920c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8008c4c <xTaskResumeAll+0x134>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d010      	beq.n	8008c04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008be2:	f000 f837 	bl	8008c54 <xTaskIncrementTick>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008bec:	4b16      	ldr	r3, [pc, #88]	@ (8008c48 <xTaskResumeAll+0x130>)
 8008bee:	2201      	movs	r2, #1
 8008bf0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1f1      	bne.n	8008be2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008bfe:	4b13      	ldr	r3, [pc, #76]	@ (8008c4c <xTaskResumeAll+0x134>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c04:	4b10      	ldr	r3, [pc, #64]	@ (8008c48 <xTaskResumeAll+0x130>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d009      	beq.n	8008c20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c10:	4b0f      	ldr	r3, [pc, #60]	@ (8008c50 <xTaskResumeAll+0x138>)
 8008c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c16:	601a      	str	r2, [r3, #0]
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c20:	f000 fe14 	bl	800984c <vPortExitCritical>

	return xAlreadyYielded;
 8008c24:	68bb      	ldr	r3, [r7, #8]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20000818 	.word	0x20000818
 8008c34:	200007f0 	.word	0x200007f0
 8008c38:	200007b0 	.word	0x200007b0
 8008c3c:	200007f8 	.word	0x200007f8
 8008c40:	200006f4 	.word	0x200006f4
 8008c44:	200006f0 	.word	0x200006f0
 8008c48:	20000804 	.word	0x20000804
 8008c4c:	20000800 	.word	0x20000800
 8008c50:	e000ed04 	.word	0xe000ed04

08008c54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8008d9c <xTaskIncrementTick+0x148>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f040 808f 	bne.w	8008d86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c68:	4b4d      	ldr	r3, [pc, #308]	@ (8008da0 <xTaskIncrementTick+0x14c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c70:	4a4b      	ldr	r2, [pc, #300]	@ (8008da0 <xTaskIncrementTick+0x14c>)
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d121      	bne.n	8008cc0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c7c:	4b49      	ldr	r3, [pc, #292]	@ (8008da4 <xTaskIncrementTick+0x150>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00b      	beq.n	8008c9e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	603b      	str	r3, [r7, #0]
}
 8008c98:	bf00      	nop
 8008c9a:	bf00      	nop
 8008c9c:	e7fd      	b.n	8008c9a <xTaskIncrementTick+0x46>
 8008c9e:	4b41      	ldr	r3, [pc, #260]	@ (8008da4 <xTaskIncrementTick+0x150>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	4b40      	ldr	r3, [pc, #256]	@ (8008da8 <xTaskIncrementTick+0x154>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a3e      	ldr	r2, [pc, #248]	@ (8008da4 <xTaskIncrementTick+0x150>)
 8008caa:	6013      	str	r3, [r2, #0]
 8008cac:	4a3e      	ldr	r2, [pc, #248]	@ (8008da8 <xTaskIncrementTick+0x154>)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6013      	str	r3, [r2, #0]
 8008cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8008dac <xTaskIncrementTick+0x158>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8008dac <xTaskIncrementTick+0x158>)
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	f000 faa6 	bl	800920c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8008db0 <xTaskIncrementTick+0x15c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d348      	bcc.n	8008d5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cca:	4b36      	ldr	r3, [pc, #216]	@ (8008da4 <xTaskIncrementTick+0x150>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d104      	bne.n	8008cde <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd4:	4b36      	ldr	r3, [pc, #216]	@ (8008db0 <xTaskIncrementTick+0x15c>)
 8008cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cda:	601a      	str	r2, [r3, #0]
					break;
 8008cdc:	e03e      	b.n	8008d5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cde:	4b31      	ldr	r3, [pc, #196]	@ (8008da4 <xTaskIncrementTick+0x150>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d203      	bcs.n	8008cfe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cf6:	4a2e      	ldr	r2, [pc, #184]	@ (8008db0 <xTaskIncrementTick+0x15c>)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008cfc:	e02e      	b.n	8008d5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7ff f9bb 	bl	800807e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d004      	beq.n	8008d1a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	3318      	adds	r3, #24
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff f9b2 	bl	800807e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1e:	2201      	movs	r2, #1
 8008d20:	409a      	lsls	r2, r3
 8008d22:	4b24      	ldr	r3, [pc, #144]	@ (8008db4 <xTaskIncrementTick+0x160>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	4a22      	ldr	r2, [pc, #136]	@ (8008db4 <xTaskIncrementTick+0x160>)
 8008d2a:	6013      	str	r3, [r2, #0]
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d30:	4613      	mov	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4413      	add	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4a1f      	ldr	r2, [pc, #124]	@ (8008db8 <xTaskIncrementTick+0x164>)
 8008d3a:	441a      	add	r2, r3
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	3304      	adds	r3, #4
 8008d40:	4619      	mov	r1, r3
 8008d42:	4610      	mov	r0, r2
 8008d44:	f7ff f93e 	bl	8007fc4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8008dbc <xTaskIncrementTick+0x168>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d3b9      	bcc.n	8008cca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008d56:	2301      	movs	r3, #1
 8008d58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d5a:	e7b6      	b.n	8008cca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d5c:	4b17      	ldr	r3, [pc, #92]	@ (8008dbc <xTaskIncrementTick+0x168>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d62:	4915      	ldr	r1, [pc, #84]	@ (8008db8 <xTaskIncrementTick+0x164>)
 8008d64:	4613      	mov	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	440b      	add	r3, r1
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d901      	bls.n	8008d78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008d74:	2301      	movs	r3, #1
 8008d76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d78:	4b11      	ldr	r3, [pc, #68]	@ (8008dc0 <xTaskIncrementTick+0x16c>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d007      	beq.n	8008d90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008d80:	2301      	movs	r3, #1
 8008d82:	617b      	str	r3, [r7, #20]
 8008d84:	e004      	b.n	8008d90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d86:	4b0f      	ldr	r3, [pc, #60]	@ (8008dc4 <xTaskIncrementTick+0x170>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8008dc4 <xTaskIncrementTick+0x170>)
 8008d8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d90:	697b      	ldr	r3, [r7, #20]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000818 	.word	0x20000818
 8008da0:	200007f4 	.word	0x200007f4
 8008da4:	200007a8 	.word	0x200007a8
 8008da8:	200007ac 	.word	0x200007ac
 8008dac:	20000808 	.word	0x20000808
 8008db0:	20000810 	.word	0x20000810
 8008db4:	200007f8 	.word	0x200007f8
 8008db8:	200006f4 	.word	0x200006f4
 8008dbc:	200006f0 	.word	0x200006f0
 8008dc0:	20000804 	.word	0x20000804
 8008dc4:	20000800 	.word	0x20000800

08008dc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b087      	sub	sp, #28
 8008dcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008dce:	4b27      	ldr	r3, [pc, #156]	@ (8008e6c <vTaskSwitchContext+0xa4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008dd6:	4b26      	ldr	r3, [pc, #152]	@ (8008e70 <vTaskSwitchContext+0xa8>)
 8008dd8:	2201      	movs	r2, #1
 8008dda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ddc:	e040      	b.n	8008e60 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008dde:	4b24      	ldr	r3, [pc, #144]	@ (8008e70 <vTaskSwitchContext+0xa8>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008de4:	4b23      	ldr	r3, [pc, #140]	@ (8008e74 <vTaskSwitchContext+0xac>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	fab3 f383 	clz	r3, r3
 8008df0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008df2:	7afb      	ldrb	r3, [r7, #11]
 8008df4:	f1c3 031f 	rsb	r3, r3, #31
 8008df8:	617b      	str	r3, [r7, #20]
 8008dfa:	491f      	ldr	r1, [pc, #124]	@ (8008e78 <vTaskSwitchContext+0xb0>)
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	440b      	add	r3, r1
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10b      	bne.n	8008e26 <vTaskSwitchContext+0x5e>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	607b      	str	r3, [r7, #4]
}
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop
 8008e24:	e7fd      	b.n	8008e22 <vTaskSwitchContext+0x5a>
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4a11      	ldr	r2, [pc, #68]	@ (8008e78 <vTaskSwitchContext+0xb0>)
 8008e32:	4413      	add	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	605a      	str	r2, [r3, #4]
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	3308      	adds	r3, #8
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d104      	bne.n	8008e56 <vTaskSwitchContext+0x8e>
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	605a      	str	r2, [r3, #4]
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	4a07      	ldr	r2, [pc, #28]	@ (8008e7c <vTaskSwitchContext+0xb4>)
 8008e5e:	6013      	str	r3, [r2, #0]
}
 8008e60:	bf00      	nop
 8008e62:	371c      	adds	r7, #28
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	20000818 	.word	0x20000818
 8008e70:	20000804 	.word	0x20000804
 8008e74:	200007f8 	.word	0x200007f8
 8008e78:	200006f4 	.word	0x200006f4
 8008e7c:	200006f0 	.word	0x200006f0

08008e80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10b      	bne.n	8008ea8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	60fb      	str	r3, [r7, #12]
}
 8008ea2:	bf00      	nop
 8008ea4:	bf00      	nop
 8008ea6:	e7fd      	b.n	8008ea4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ea8:	4b07      	ldr	r3, [pc, #28]	@ (8008ec8 <vTaskPlaceOnEventList+0x48>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3318      	adds	r3, #24
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff f8ab 	bl	800800c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008eb6:	2101      	movs	r1, #1
 8008eb8:	6838      	ldr	r0, [r7, #0]
 8008eba:	f000 faff 	bl	80094bc <prvAddCurrentTaskToDelayedList>
}
 8008ebe:	bf00      	nop
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	200006f0 	.word	0x200006f0

08008ecc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10b      	bne.n	8008efa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	60fb      	str	r3, [r7, #12]
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop
 8008ef8:	e7fd      	b.n	8008ef6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	3318      	adds	r3, #24
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7ff f8bd 	bl	800807e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f04:	4b1d      	ldr	r3, [pc, #116]	@ (8008f7c <xTaskRemoveFromEventList+0xb0>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d11c      	bne.n	8008f46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	3304      	adds	r3, #4
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7ff f8b4 	bl	800807e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	409a      	lsls	r2, r3
 8008f1e:	4b18      	ldr	r3, [pc, #96]	@ (8008f80 <xTaskRemoveFromEventList+0xb4>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	4a16      	ldr	r2, [pc, #88]	@ (8008f80 <xTaskRemoveFromEventList+0xb4>)
 8008f26:	6013      	str	r3, [r2, #0]
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4a13      	ldr	r2, [pc, #76]	@ (8008f84 <xTaskRemoveFromEventList+0xb8>)
 8008f36:	441a      	add	r2, r3
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	4610      	mov	r0, r2
 8008f40:	f7ff f840 	bl	8007fc4 <vListInsertEnd>
 8008f44:	e005      	b.n	8008f52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	3318      	adds	r3, #24
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	480e      	ldr	r0, [pc, #56]	@ (8008f88 <xTaskRemoveFromEventList+0xbc>)
 8008f4e:	f7ff f839 	bl	8007fc4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f56:	4b0d      	ldr	r3, [pc, #52]	@ (8008f8c <xTaskRemoveFromEventList+0xc0>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d905      	bls.n	8008f6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f60:	2301      	movs	r3, #1
 8008f62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f64:	4b0a      	ldr	r3, [pc, #40]	@ (8008f90 <xTaskRemoveFromEventList+0xc4>)
 8008f66:	2201      	movs	r2, #1
 8008f68:	601a      	str	r2, [r3, #0]
 8008f6a:	e001      	b.n	8008f70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f70:	697b      	ldr	r3, [r7, #20]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000818 	.word	0x20000818
 8008f80:	200007f8 	.word	0x200007f8
 8008f84:	200006f4 	.word	0x200006f4
 8008f88:	200007b0 	.word	0x200007b0
 8008f8c:	200006f0 	.word	0x200006f0
 8008f90:	20000804 	.word	0x20000804

08008f94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f9c:	4b06      	ldr	r3, [pc, #24]	@ (8008fb8 <vTaskInternalSetTimeOutState+0x24>)
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fa4:	4b05      	ldr	r3, [pc, #20]	@ (8008fbc <vTaskInternalSetTimeOutState+0x28>)
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	605a      	str	r2, [r3, #4]
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	20000808 	.word	0x20000808
 8008fbc:	200007f4 	.word	0x200007f4

08008fc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b088      	sub	sp, #32
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10b      	bne.n	8008fe8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	613b      	str	r3, [r7, #16]
}
 8008fe2:	bf00      	nop
 8008fe4:	bf00      	nop
 8008fe6:	e7fd      	b.n	8008fe4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10b      	bne.n	8009006 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	60fb      	str	r3, [r7, #12]
}
 8009000:	bf00      	nop
 8009002:	bf00      	nop
 8009004:	e7fd      	b.n	8009002 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009006:	f000 fbef 	bl	80097e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800900a:	4b1d      	ldr	r3, [pc, #116]	@ (8009080 <xTaskCheckForTimeOut+0xc0>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009022:	d102      	bne.n	800902a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009024:	2300      	movs	r3, #0
 8009026:	61fb      	str	r3, [r7, #28]
 8009028:	e023      	b.n	8009072 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	4b15      	ldr	r3, [pc, #84]	@ (8009084 <xTaskCheckForTimeOut+0xc4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	429a      	cmp	r2, r3
 8009034:	d007      	beq.n	8009046 <xTaskCheckForTimeOut+0x86>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	69ba      	ldr	r2, [r7, #24]
 800903c:	429a      	cmp	r2, r3
 800903e:	d302      	bcc.n	8009046 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009040:	2301      	movs	r3, #1
 8009042:	61fb      	str	r3, [r7, #28]
 8009044:	e015      	b.n	8009072 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	429a      	cmp	r2, r3
 800904e:	d20b      	bcs.n	8009068 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	1ad2      	subs	r2, r2, r3
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7ff ff99 	bl	8008f94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009062:	2300      	movs	r3, #0
 8009064:	61fb      	str	r3, [r7, #28]
 8009066:	e004      	b.n	8009072 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	2200      	movs	r2, #0
 800906c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800906e:	2301      	movs	r3, #1
 8009070:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009072:	f000 fbeb 	bl	800984c <vPortExitCritical>

	return xReturn;
 8009076:	69fb      	ldr	r3, [r7, #28]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3720      	adds	r7, #32
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	200007f4 	.word	0x200007f4
 8009084:	20000808 	.word	0x20000808

08009088 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009088:	b480      	push	{r7}
 800908a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800908c:	4b03      	ldr	r3, [pc, #12]	@ (800909c <vTaskMissedYield+0x14>)
 800908e:	2201      	movs	r2, #1
 8009090:	601a      	str	r2, [r3, #0]
}
 8009092:	bf00      	nop
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	20000804 	.word	0x20000804

080090a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090a8:	f000 f852 	bl	8009150 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090ac:	4b06      	ldr	r3, [pc, #24]	@ (80090c8 <prvIdleTask+0x28>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d9f9      	bls.n	80090a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80090b4:	4b05      	ldr	r3, [pc, #20]	@ (80090cc <prvIdleTask+0x2c>)
 80090b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090c4:	e7f0      	b.n	80090a8 <prvIdleTask+0x8>
 80090c6:	bf00      	nop
 80090c8:	200006f4 	.word	0x200006f4
 80090cc:	e000ed04 	.word	0xe000ed04

080090d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090d6:	2300      	movs	r3, #0
 80090d8:	607b      	str	r3, [r7, #4]
 80090da:	e00c      	b.n	80090f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4a12      	ldr	r2, [pc, #72]	@ (8009130 <prvInitialiseTaskLists+0x60>)
 80090e8:	4413      	add	r3, r2
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fe ff3d 	bl	8007f6a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3301      	adds	r3, #1
 80090f4:	607b      	str	r3, [r7, #4]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b06      	cmp	r3, #6
 80090fa:	d9ef      	bls.n	80090dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090fc:	480d      	ldr	r0, [pc, #52]	@ (8009134 <prvInitialiseTaskLists+0x64>)
 80090fe:	f7fe ff34 	bl	8007f6a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009102:	480d      	ldr	r0, [pc, #52]	@ (8009138 <prvInitialiseTaskLists+0x68>)
 8009104:	f7fe ff31 	bl	8007f6a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009108:	480c      	ldr	r0, [pc, #48]	@ (800913c <prvInitialiseTaskLists+0x6c>)
 800910a:	f7fe ff2e 	bl	8007f6a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800910e:	480c      	ldr	r0, [pc, #48]	@ (8009140 <prvInitialiseTaskLists+0x70>)
 8009110:	f7fe ff2b 	bl	8007f6a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009114:	480b      	ldr	r0, [pc, #44]	@ (8009144 <prvInitialiseTaskLists+0x74>)
 8009116:	f7fe ff28 	bl	8007f6a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800911a:	4b0b      	ldr	r3, [pc, #44]	@ (8009148 <prvInitialiseTaskLists+0x78>)
 800911c:	4a05      	ldr	r2, [pc, #20]	@ (8009134 <prvInitialiseTaskLists+0x64>)
 800911e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009120:	4b0a      	ldr	r3, [pc, #40]	@ (800914c <prvInitialiseTaskLists+0x7c>)
 8009122:	4a05      	ldr	r2, [pc, #20]	@ (8009138 <prvInitialiseTaskLists+0x68>)
 8009124:	601a      	str	r2, [r3, #0]
}
 8009126:	bf00      	nop
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	200006f4 	.word	0x200006f4
 8009134:	20000780 	.word	0x20000780
 8009138:	20000794 	.word	0x20000794
 800913c:	200007b0 	.word	0x200007b0
 8009140:	200007c4 	.word	0x200007c4
 8009144:	200007dc 	.word	0x200007dc
 8009148:	200007a8 	.word	0x200007a8
 800914c:	200007ac 	.word	0x200007ac

08009150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009156:	e019      	b.n	800918c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009158:	f000 fb46 	bl	80097e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800915c:	4b10      	ldr	r3, [pc, #64]	@ (80091a0 <prvCheckTasksWaitingTermination+0x50>)
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	3304      	adds	r3, #4
 8009168:	4618      	mov	r0, r3
 800916a:	f7fe ff88 	bl	800807e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800916e:	4b0d      	ldr	r3, [pc, #52]	@ (80091a4 <prvCheckTasksWaitingTermination+0x54>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3b01      	subs	r3, #1
 8009174:	4a0b      	ldr	r2, [pc, #44]	@ (80091a4 <prvCheckTasksWaitingTermination+0x54>)
 8009176:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009178:	4b0b      	ldr	r3, [pc, #44]	@ (80091a8 <prvCheckTasksWaitingTermination+0x58>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3b01      	subs	r3, #1
 800917e:	4a0a      	ldr	r2, [pc, #40]	@ (80091a8 <prvCheckTasksWaitingTermination+0x58>)
 8009180:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009182:	f000 fb63 	bl	800984c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f810 	bl	80091ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800918c:	4b06      	ldr	r3, [pc, #24]	@ (80091a8 <prvCheckTasksWaitingTermination+0x58>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e1      	bne.n	8009158 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	200007c4 	.word	0x200007c4
 80091a4:	200007f0 	.word	0x200007f0
 80091a8:	200007d8 	.word	0x200007d8

080091ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d108      	bne.n	80091d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 fd00 	bl	8009bc8 <vPortFree>
				vPortFree( pxTCB );
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fcfd 	bl	8009bc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091ce:	e019      	b.n	8009204 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d103      	bne.n	80091e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fcf4 	bl	8009bc8 <vPortFree>
	}
 80091e0:	e010      	b.n	8009204 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d00b      	beq.n	8009204 <prvDeleteTCB+0x58>
	__asm volatile
 80091ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	60fb      	str	r3, [r7, #12]
}
 80091fe:	bf00      	nop
 8009200:	bf00      	nop
 8009202:	e7fd      	b.n	8009200 <prvDeleteTCB+0x54>
	}
 8009204:	bf00      	nop
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009212:	4b0c      	ldr	r3, [pc, #48]	@ (8009244 <prvResetNextTaskUnblockTime+0x38>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d104      	bne.n	8009226 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800921c:	4b0a      	ldr	r3, [pc, #40]	@ (8009248 <prvResetNextTaskUnblockTime+0x3c>)
 800921e:	f04f 32ff 	mov.w	r2, #4294967295
 8009222:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009224:	e008      	b.n	8009238 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009226:	4b07      	ldr	r3, [pc, #28]	@ (8009244 <prvResetNextTaskUnblockTime+0x38>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	4a04      	ldr	r2, [pc, #16]	@ (8009248 <prvResetNextTaskUnblockTime+0x3c>)
 8009236:	6013      	str	r3, [r2, #0]
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	200007a8 	.word	0x200007a8
 8009248:	20000810 	.word	0x20000810

0800924c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009252:	4b0b      	ldr	r3, [pc, #44]	@ (8009280 <xTaskGetSchedulerState+0x34>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d102      	bne.n	8009260 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800925a:	2301      	movs	r3, #1
 800925c:	607b      	str	r3, [r7, #4]
 800925e:	e008      	b.n	8009272 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009260:	4b08      	ldr	r3, [pc, #32]	@ (8009284 <xTaskGetSchedulerState+0x38>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d102      	bne.n	800926e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009268:	2302      	movs	r3, #2
 800926a:	607b      	str	r3, [r7, #4]
 800926c:	e001      	b.n	8009272 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800926e:	2300      	movs	r3, #0
 8009270:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009272:	687b      	ldr	r3, [r7, #4]
	}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	200007fc 	.word	0x200007fc
 8009284:	20000818 	.word	0x20000818

08009288 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009294:	2300      	movs	r3, #0
 8009296:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d05e      	beq.n	800935c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092a2:	4b31      	ldr	r3, [pc, #196]	@ (8009368 <xTaskPriorityInherit+0xe0>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d24e      	bcs.n	800934a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	db06      	blt.n	80092c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b4:	4b2c      	ldr	r3, [pc, #176]	@ (8009368 <xTaskPriorityInherit+0xe0>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ba:	f1c3 0207 	rsb	r2, r3, #7
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	6959      	ldr	r1, [r3, #20]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ca:	4613      	mov	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4a26      	ldr	r2, [pc, #152]	@ (800936c <xTaskPriorityInherit+0xe4>)
 80092d4:	4413      	add	r3, r2
 80092d6:	4299      	cmp	r1, r3
 80092d8:	d12f      	bne.n	800933a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	3304      	adds	r3, #4
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe fecd 	bl	800807e <uxListRemove>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10a      	bne.n	8009300 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ee:	2201      	movs	r2, #1
 80092f0:	fa02 f303 	lsl.w	r3, r2, r3
 80092f4:	43da      	mvns	r2, r3
 80092f6:	4b1e      	ldr	r3, [pc, #120]	@ (8009370 <xTaskPriorityInherit+0xe8>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4013      	ands	r3, r2
 80092fc:	4a1c      	ldr	r2, [pc, #112]	@ (8009370 <xTaskPriorityInherit+0xe8>)
 80092fe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009300:	4b19      	ldr	r3, [pc, #100]	@ (8009368 <xTaskPriorityInherit+0xe0>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800930e:	2201      	movs	r2, #1
 8009310:	409a      	lsls	r2, r3
 8009312:	4b17      	ldr	r3, [pc, #92]	@ (8009370 <xTaskPriorityInherit+0xe8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4313      	orrs	r3, r2
 8009318:	4a15      	ldr	r2, [pc, #84]	@ (8009370 <xTaskPriorityInherit+0xe8>)
 800931a:	6013      	str	r3, [r2, #0]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009320:	4613      	mov	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4a10      	ldr	r2, [pc, #64]	@ (800936c <xTaskPriorityInherit+0xe4>)
 800932a:	441a      	add	r2, r3
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	3304      	adds	r3, #4
 8009330:	4619      	mov	r1, r3
 8009332:	4610      	mov	r0, r2
 8009334:	f7fe fe46 	bl	8007fc4 <vListInsertEnd>
 8009338:	e004      	b.n	8009344 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800933a:	4b0b      	ldr	r3, [pc, #44]	@ (8009368 <xTaskPriorityInherit+0xe0>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009344:	2301      	movs	r3, #1
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	e008      	b.n	800935c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800934e:	4b06      	ldr	r3, [pc, #24]	@ (8009368 <xTaskPriorityInherit+0xe0>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009354:	429a      	cmp	r2, r3
 8009356:	d201      	bcs.n	800935c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009358:	2301      	movs	r3, #1
 800935a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800935c:	68fb      	ldr	r3, [r7, #12]
	}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	200006f0 	.word	0x200006f0
 800936c:	200006f4 	.word	0x200006f4
 8009370:	200007f8 	.word	0x200007f8

08009374 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009382:	2301      	movs	r3, #1
 8009384:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d079      	beq.n	8009480 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10b      	bne.n	80093ac <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	60fb      	str	r3, [r7, #12]
}
 80093a6:	bf00      	nop
 80093a8:	bf00      	nop
 80093aa:	e7fd      	b.n	80093a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d902      	bls.n	80093bc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	61fb      	str	r3, [r7, #28]
 80093ba:	e002      	b.n	80093c2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093c0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c6:	69fa      	ldr	r2, [r7, #28]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d059      	beq.n	8009480 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d154      	bne.n	8009480 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80093d6:	4b2c      	ldr	r3, [pc, #176]	@ (8009488 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	69ba      	ldr	r2, [r7, #24]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d10b      	bne.n	80093f8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	60bb      	str	r3, [r7, #8]
}
 80093f2:	bf00      	nop
 80093f4:	bf00      	nop
 80093f6:	e7fd      	b.n	80093f4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	69fa      	ldr	r2, [r7, #28]
 8009402:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	2b00      	cmp	r3, #0
 800940a:	db04      	blt.n	8009416 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	f1c3 0207 	rsb	r2, r3, #7
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	6959      	ldr	r1, [r3, #20]
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	4613      	mov	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4a19      	ldr	r2, [pc, #100]	@ (800948c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009426:	4413      	add	r3, r2
 8009428:	4299      	cmp	r1, r3
 800942a:	d129      	bne.n	8009480 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	3304      	adds	r3, #4
 8009430:	4618      	mov	r0, r3
 8009432:	f7fe fe24 	bl	800807e <uxListRemove>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10a      	bne.n	8009452 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009440:	2201      	movs	r2, #1
 8009442:	fa02 f303 	lsl.w	r3, r2, r3
 8009446:	43da      	mvns	r2, r3
 8009448:	4b11      	ldr	r3, [pc, #68]	@ (8009490 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4013      	ands	r3, r2
 800944e:	4a10      	ldr	r2, [pc, #64]	@ (8009490 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009450:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009456:	2201      	movs	r2, #1
 8009458:	409a      	lsls	r2, r3
 800945a:	4b0d      	ldr	r3, [pc, #52]	@ (8009490 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4313      	orrs	r3, r2
 8009460:	4a0b      	ldr	r2, [pc, #44]	@ (8009490 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009462:	6013      	str	r3, [r2, #0]
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009468:	4613      	mov	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4413      	add	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4a06      	ldr	r2, [pc, #24]	@ (800948c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009472:	441a      	add	r2, r3
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	3304      	adds	r3, #4
 8009478:	4619      	mov	r1, r3
 800947a:	4610      	mov	r0, r2
 800947c:	f7fe fda2 	bl	8007fc4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009480:	bf00      	nop
 8009482:	3720      	adds	r7, #32
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	200006f0 	.word	0x200006f0
 800948c:	200006f4 	.word	0x200006f4
 8009490:	200007f8 	.word	0x200007f8

08009494 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009494:	b480      	push	{r7}
 8009496:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009498:	4b07      	ldr	r3, [pc, #28]	@ (80094b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d004      	beq.n	80094aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80094a0:	4b05      	ldr	r3, [pc, #20]	@ (80094b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094a6:	3201      	adds	r2, #1
 80094a8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80094aa:	4b03      	ldr	r3, [pc, #12]	@ (80094b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80094ac:	681b      	ldr	r3, [r3, #0]
	}
 80094ae:	4618      	mov	r0, r3
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	200006f0 	.word	0x200006f0

080094bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80094c6:	4b29      	ldr	r3, [pc, #164]	@ (800956c <prvAddCurrentTaskToDelayedList+0xb0>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094cc:	4b28      	ldr	r3, [pc, #160]	@ (8009570 <prvAddCurrentTaskToDelayedList+0xb4>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3304      	adds	r3, #4
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fe fdd3 	bl	800807e <uxListRemove>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10b      	bne.n	80094f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80094de:	4b24      	ldr	r3, [pc, #144]	@ (8009570 <prvAddCurrentTaskToDelayedList+0xb4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e4:	2201      	movs	r2, #1
 80094e6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ea:	43da      	mvns	r2, r3
 80094ec:	4b21      	ldr	r3, [pc, #132]	@ (8009574 <prvAddCurrentTaskToDelayedList+0xb8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4013      	ands	r3, r2
 80094f2:	4a20      	ldr	r2, [pc, #128]	@ (8009574 <prvAddCurrentTaskToDelayedList+0xb8>)
 80094f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fc:	d10a      	bne.n	8009514 <prvAddCurrentTaskToDelayedList+0x58>
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d007      	beq.n	8009514 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009504:	4b1a      	ldr	r3, [pc, #104]	@ (8009570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3304      	adds	r3, #4
 800950a:	4619      	mov	r1, r3
 800950c:	481a      	ldr	r0, [pc, #104]	@ (8009578 <prvAddCurrentTaskToDelayedList+0xbc>)
 800950e:	f7fe fd59 	bl	8007fc4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009512:	e026      	b.n	8009562 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4413      	add	r3, r2
 800951a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800951c:	4b14      	ldr	r3, [pc, #80]	@ (8009570 <prvAddCurrentTaskToDelayedList+0xb4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	429a      	cmp	r2, r3
 800952a:	d209      	bcs.n	8009540 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800952c:	4b13      	ldr	r3, [pc, #76]	@ (800957c <prvAddCurrentTaskToDelayedList+0xc0>)
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	4b0f      	ldr	r3, [pc, #60]	@ (8009570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	3304      	adds	r3, #4
 8009536:	4619      	mov	r1, r3
 8009538:	4610      	mov	r0, r2
 800953a:	f7fe fd67 	bl	800800c <vListInsert>
}
 800953e:	e010      	b.n	8009562 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009540:	4b0f      	ldr	r3, [pc, #60]	@ (8009580 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	4b0a      	ldr	r3, [pc, #40]	@ (8009570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3304      	adds	r3, #4
 800954a:	4619      	mov	r1, r3
 800954c:	4610      	mov	r0, r2
 800954e:	f7fe fd5d 	bl	800800c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009552:	4b0c      	ldr	r3, [pc, #48]	@ (8009584 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	429a      	cmp	r2, r3
 800955a:	d202      	bcs.n	8009562 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800955c:	4a09      	ldr	r2, [pc, #36]	@ (8009584 <prvAddCurrentTaskToDelayedList+0xc8>)
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	6013      	str	r3, [r2, #0]
}
 8009562:	bf00      	nop
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	200007f4 	.word	0x200007f4
 8009570:	200006f0 	.word	0x200006f0
 8009574:	200007f8 	.word	0x200007f8
 8009578:	200007dc 	.word	0x200007dc
 800957c:	200007ac 	.word	0x200007ac
 8009580:	200007a8 	.word	0x200007a8
 8009584:	20000810 	.word	0x20000810

08009588 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3b04      	subs	r3, #4
 8009598:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80095a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3b04      	subs	r3, #4
 80095a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f023 0201 	bic.w	r2, r3, #1
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	3b04      	subs	r3, #4
 80095b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095b8:	4a0c      	ldr	r2, [pc, #48]	@ (80095ec <pxPortInitialiseStack+0x64>)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3b14      	subs	r3, #20
 80095c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	3b04      	subs	r3, #4
 80095ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f06f 0202 	mvn.w	r2, #2
 80095d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	3b20      	subs	r3, #32
 80095dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80095de:	68fb      	ldr	r3, [r7, #12]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	080095f1 	.word	0x080095f1

080095f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095fa:	4b13      	ldr	r3, [pc, #76]	@ (8009648 <prvTaskExitError+0x58>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009602:	d00b      	beq.n	800961c <prvTaskExitError+0x2c>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	60fb      	str	r3, [r7, #12]
}
 8009616:	bf00      	nop
 8009618:	bf00      	nop
 800961a:	e7fd      	b.n	8009618 <prvTaskExitError+0x28>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	60bb      	str	r3, [r7, #8]
}
 800962e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009630:	bf00      	nop
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d0fc      	beq.n	8009632 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009638:	bf00      	nop
 800963a:	bf00      	nop
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	2000000c 	.word	0x2000000c
 800964c:	00000000 	.word	0x00000000

08009650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009650:	4b07      	ldr	r3, [pc, #28]	@ (8009670 <pxCurrentTCBConst2>)
 8009652:	6819      	ldr	r1, [r3, #0]
 8009654:	6808      	ldr	r0, [r1, #0]
 8009656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965a:	f380 8809 	msr	PSP, r0
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f04f 0000 	mov.w	r0, #0
 8009666:	f380 8811 	msr	BASEPRI, r0
 800966a:	4770      	bx	lr
 800966c:	f3af 8000 	nop.w

08009670 <pxCurrentTCBConst2>:
 8009670:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop

08009678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009678:	4808      	ldr	r0, [pc, #32]	@ (800969c <prvPortStartFirstTask+0x24>)
 800967a:	6800      	ldr	r0, [r0, #0]
 800967c:	6800      	ldr	r0, [r0, #0]
 800967e:	f380 8808 	msr	MSP, r0
 8009682:	f04f 0000 	mov.w	r0, #0
 8009686:	f380 8814 	msr	CONTROL, r0
 800968a:	b662      	cpsie	i
 800968c:	b661      	cpsie	f
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	df00      	svc	0
 8009698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800969a:	bf00      	nop
 800969c:	e000ed08 	.word	0xe000ed08

080096a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096a6:	4b47      	ldr	r3, [pc, #284]	@ (80097c4 <xPortStartScheduler+0x124>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a47      	ldr	r2, [pc, #284]	@ (80097c8 <xPortStartScheduler+0x128>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d10b      	bne.n	80096c8 <xPortStartScheduler+0x28>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	613b      	str	r3, [r7, #16]
}
 80096c2:	bf00      	nop
 80096c4:	bf00      	nop
 80096c6:	e7fd      	b.n	80096c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096c8:	4b3e      	ldr	r3, [pc, #248]	@ (80097c4 <xPortStartScheduler+0x124>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a3f      	ldr	r2, [pc, #252]	@ (80097cc <xPortStartScheduler+0x12c>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d10b      	bne.n	80096ea <xPortStartScheduler+0x4a>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	60fb      	str	r3, [r7, #12]
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	e7fd      	b.n	80096e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80096ea:	4b39      	ldr	r3, [pc, #228]	@ (80097d0 <xPortStartScheduler+0x130>)
 80096ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	22ff      	movs	r2, #255	@ 0xff
 80096fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	b2db      	uxtb	r3, r3
 8009708:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800970c:	b2da      	uxtb	r2, r3
 800970e:	4b31      	ldr	r3, [pc, #196]	@ (80097d4 <xPortStartScheduler+0x134>)
 8009710:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009712:	4b31      	ldr	r3, [pc, #196]	@ (80097d8 <xPortStartScheduler+0x138>)
 8009714:	2207      	movs	r2, #7
 8009716:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009718:	e009      	b.n	800972e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800971a:	4b2f      	ldr	r3, [pc, #188]	@ (80097d8 <xPortStartScheduler+0x138>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3b01      	subs	r3, #1
 8009720:	4a2d      	ldr	r2, [pc, #180]	@ (80097d8 <xPortStartScheduler+0x138>)
 8009722:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	b2db      	uxtb	r3, r3
 8009728:	005b      	lsls	r3, r3, #1
 800972a:	b2db      	uxtb	r3, r3
 800972c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800972e:	78fb      	ldrb	r3, [r7, #3]
 8009730:	b2db      	uxtb	r3, r3
 8009732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009736:	2b80      	cmp	r3, #128	@ 0x80
 8009738:	d0ef      	beq.n	800971a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800973a:	4b27      	ldr	r3, [pc, #156]	@ (80097d8 <xPortStartScheduler+0x138>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f1c3 0307 	rsb	r3, r3, #7
 8009742:	2b04      	cmp	r3, #4
 8009744:	d00b      	beq.n	800975e <xPortStartScheduler+0xbe>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	60bb      	str	r3, [r7, #8]
}
 8009758:	bf00      	nop
 800975a:	bf00      	nop
 800975c:	e7fd      	b.n	800975a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800975e:	4b1e      	ldr	r3, [pc, #120]	@ (80097d8 <xPortStartScheduler+0x138>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	021b      	lsls	r3, r3, #8
 8009764:	4a1c      	ldr	r2, [pc, #112]	@ (80097d8 <xPortStartScheduler+0x138>)
 8009766:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009768:	4b1b      	ldr	r3, [pc, #108]	@ (80097d8 <xPortStartScheduler+0x138>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009770:	4a19      	ldr	r2, [pc, #100]	@ (80097d8 <xPortStartScheduler+0x138>)
 8009772:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	b2da      	uxtb	r2, r3
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800977c:	4b17      	ldr	r3, [pc, #92]	@ (80097dc <xPortStartScheduler+0x13c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a16      	ldr	r2, [pc, #88]	@ (80097dc <xPortStartScheduler+0x13c>)
 8009782:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009786:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009788:	4b14      	ldr	r3, [pc, #80]	@ (80097dc <xPortStartScheduler+0x13c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a13      	ldr	r2, [pc, #76]	@ (80097dc <xPortStartScheduler+0x13c>)
 800978e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009792:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009794:	f000 f8da 	bl	800994c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009798:	4b11      	ldr	r3, [pc, #68]	@ (80097e0 <xPortStartScheduler+0x140>)
 800979a:	2200      	movs	r2, #0
 800979c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800979e:	f000 f8f9 	bl	8009994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097a2:	4b10      	ldr	r3, [pc, #64]	@ (80097e4 <xPortStartScheduler+0x144>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a0f      	ldr	r2, [pc, #60]	@ (80097e4 <xPortStartScheduler+0x144>)
 80097a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80097ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097ae:	f7ff ff63 	bl	8009678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097b2:	f7ff fb09 	bl	8008dc8 <vTaskSwitchContext>
	prvTaskExitError();
 80097b6:	f7ff ff1b 	bl	80095f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	e000ed00 	.word	0xe000ed00
 80097c8:	410fc271 	.word	0x410fc271
 80097cc:	410fc270 	.word	0x410fc270
 80097d0:	e000e400 	.word	0xe000e400
 80097d4:	2000081c 	.word	0x2000081c
 80097d8:	20000820 	.word	0x20000820
 80097dc:	e000ed20 	.word	0xe000ed20
 80097e0:	2000000c 	.word	0x2000000c
 80097e4:	e000ef34 	.word	0xe000ef34

080097e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	607b      	str	r3, [r7, #4]
}
 8009800:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009802:	4b10      	ldr	r3, [pc, #64]	@ (8009844 <vPortEnterCritical+0x5c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3301      	adds	r3, #1
 8009808:	4a0e      	ldr	r2, [pc, #56]	@ (8009844 <vPortEnterCritical+0x5c>)
 800980a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800980c:	4b0d      	ldr	r3, [pc, #52]	@ (8009844 <vPortEnterCritical+0x5c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d110      	bne.n	8009836 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009814:	4b0c      	ldr	r3, [pc, #48]	@ (8009848 <vPortEnterCritical+0x60>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00b      	beq.n	8009836 <vPortEnterCritical+0x4e>
	__asm volatile
 800981e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	603b      	str	r3, [r7, #0]
}
 8009830:	bf00      	nop
 8009832:	bf00      	nop
 8009834:	e7fd      	b.n	8009832 <vPortEnterCritical+0x4a>
	}
}
 8009836:	bf00      	nop
 8009838:	370c      	adds	r7, #12
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	2000000c 	.word	0x2000000c
 8009848:	e000ed04 	.word	0xe000ed04

0800984c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009852:	4b12      	ldr	r3, [pc, #72]	@ (800989c <vPortExitCritical+0x50>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10b      	bne.n	8009872 <vPortExitCritical+0x26>
	__asm volatile
 800985a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	607b      	str	r3, [r7, #4]
}
 800986c:	bf00      	nop
 800986e:	bf00      	nop
 8009870:	e7fd      	b.n	800986e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009872:	4b0a      	ldr	r3, [pc, #40]	@ (800989c <vPortExitCritical+0x50>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3b01      	subs	r3, #1
 8009878:	4a08      	ldr	r2, [pc, #32]	@ (800989c <vPortExitCritical+0x50>)
 800987a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800987c:	4b07      	ldr	r3, [pc, #28]	@ (800989c <vPortExitCritical+0x50>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d105      	bne.n	8009890 <vPortExitCritical+0x44>
 8009884:	2300      	movs	r3, #0
 8009886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	f383 8811 	msr	BASEPRI, r3
}
 800988e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	2000000c 	.word	0x2000000c

080098a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098a0:	f3ef 8009 	mrs	r0, PSP
 80098a4:	f3bf 8f6f 	isb	sy
 80098a8:	4b15      	ldr	r3, [pc, #84]	@ (8009900 <pxCurrentTCBConst>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	f01e 0f10 	tst.w	lr, #16
 80098b0:	bf08      	it	eq
 80098b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ba:	6010      	str	r0, [r2, #0]
 80098bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80098c4:	f380 8811 	msr	BASEPRI, r0
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f7ff fa7a 	bl	8008dc8 <vTaskSwitchContext>
 80098d4:	f04f 0000 	mov.w	r0, #0
 80098d8:	f380 8811 	msr	BASEPRI, r0
 80098dc:	bc09      	pop	{r0, r3}
 80098de:	6819      	ldr	r1, [r3, #0]
 80098e0:	6808      	ldr	r0, [r1, #0]
 80098e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e6:	f01e 0f10 	tst.w	lr, #16
 80098ea:	bf08      	it	eq
 80098ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098f0:	f380 8809 	msr	PSP, r0
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	f3af 8000 	nop.w

08009900 <pxCurrentTCBConst>:
 8009900:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop

08009908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	607b      	str	r3, [r7, #4]
}
 8009920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009922:	f7ff f997 	bl	8008c54 <xTaskIncrementTick>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800992c:	4b06      	ldr	r3, [pc, #24]	@ (8009948 <xPortSysTickHandler+0x40>)
 800992e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	2300      	movs	r3, #0
 8009936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	f383 8811 	msr	BASEPRI, r3
}
 800993e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009940:	bf00      	nop
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	e000ed04 	.word	0xe000ed04

0800994c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800994c:	b480      	push	{r7}
 800994e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009950:	4b0b      	ldr	r3, [pc, #44]	@ (8009980 <vPortSetupTimerInterrupt+0x34>)
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009956:	4b0b      	ldr	r3, [pc, #44]	@ (8009984 <vPortSetupTimerInterrupt+0x38>)
 8009958:	2200      	movs	r2, #0
 800995a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800995c:	4b0a      	ldr	r3, [pc, #40]	@ (8009988 <vPortSetupTimerInterrupt+0x3c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a0a      	ldr	r2, [pc, #40]	@ (800998c <vPortSetupTimerInterrupt+0x40>)
 8009962:	fba2 2303 	umull	r2, r3, r2, r3
 8009966:	099b      	lsrs	r3, r3, #6
 8009968:	4a09      	ldr	r2, [pc, #36]	@ (8009990 <vPortSetupTimerInterrupt+0x44>)
 800996a:	3b01      	subs	r3, #1
 800996c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800996e:	4b04      	ldr	r3, [pc, #16]	@ (8009980 <vPortSetupTimerInterrupt+0x34>)
 8009970:	2207      	movs	r2, #7
 8009972:	601a      	str	r2, [r3, #0]
}
 8009974:	bf00      	nop
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	e000e010 	.word	0xe000e010
 8009984:	e000e018 	.word	0xe000e018
 8009988:	20000000 	.word	0x20000000
 800998c:	10624dd3 	.word	0x10624dd3
 8009990:	e000e014 	.word	0xe000e014

08009994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009994:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80099a4 <vPortEnableVFP+0x10>
 8009998:	6801      	ldr	r1, [r0, #0]
 800999a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800999e:	6001      	str	r1, [r0, #0]
 80099a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099a2:	bf00      	nop
 80099a4:	e000ed88 	.word	0xe000ed88

080099a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099ae:	f3ef 8305 	mrs	r3, IPSR
 80099b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b0f      	cmp	r3, #15
 80099b8:	d915      	bls.n	80099e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099ba:	4a18      	ldr	r2, [pc, #96]	@ (8009a1c <vPortValidateInterruptPriority+0x74>)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	4413      	add	r3, r2
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099c4:	4b16      	ldr	r3, [pc, #88]	@ (8009a20 <vPortValidateInterruptPriority+0x78>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	7afa      	ldrb	r2, [r7, #11]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d20b      	bcs.n	80099e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	607b      	str	r3, [r7, #4]
}
 80099e0:	bf00      	nop
 80099e2:	bf00      	nop
 80099e4:	e7fd      	b.n	80099e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009a24 <vPortValidateInterruptPriority+0x7c>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80099ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009a28 <vPortValidateInterruptPriority+0x80>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d90b      	bls.n	8009a0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	603b      	str	r3, [r7, #0]
}
 8009a08:	bf00      	nop
 8009a0a:	bf00      	nop
 8009a0c:	e7fd      	b.n	8009a0a <vPortValidateInterruptPriority+0x62>
	}
 8009a0e:	bf00      	nop
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	e000e3f0 	.word	0xe000e3f0
 8009a20:	2000081c 	.word	0x2000081c
 8009a24:	e000ed0c 	.word	0xe000ed0c
 8009a28:	20000820 	.word	0x20000820

08009a2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08a      	sub	sp, #40	@ 0x28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a34:	2300      	movs	r3, #0
 8009a36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a38:	f7ff f860 	bl	8008afc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a3c:	4b5c      	ldr	r3, [pc, #368]	@ (8009bb0 <pvPortMalloc+0x184>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d101      	bne.n	8009a48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a44:	f000 f924 	bl	8009c90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a48:	4b5a      	ldr	r3, [pc, #360]	@ (8009bb4 <pvPortMalloc+0x188>)
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4013      	ands	r3, r2
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f040 8095 	bne.w	8009b80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d01e      	beq.n	8009a9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009a5c:	2208      	movs	r2, #8
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4413      	add	r3, r2
 8009a62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f003 0307 	and.w	r3, r3, #7
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d015      	beq.n	8009a9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f023 0307 	bic.w	r3, r3, #7
 8009a74:	3308      	adds	r3, #8
 8009a76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f003 0307 	and.w	r3, r3, #7
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00b      	beq.n	8009a9a <pvPortMalloc+0x6e>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	617b      	str	r3, [r7, #20]
}
 8009a94:	bf00      	nop
 8009a96:	bf00      	nop
 8009a98:	e7fd      	b.n	8009a96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d06f      	beq.n	8009b80 <pvPortMalloc+0x154>
 8009aa0:	4b45      	ldr	r3, [pc, #276]	@ (8009bb8 <pvPortMalloc+0x18c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d86a      	bhi.n	8009b80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009aaa:	4b44      	ldr	r3, [pc, #272]	@ (8009bbc <pvPortMalloc+0x190>)
 8009aac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009aae:	4b43      	ldr	r3, [pc, #268]	@ (8009bbc <pvPortMalloc+0x190>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ab4:	e004      	b.n	8009ac0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d903      	bls.n	8009ad2 <pvPortMalloc+0xa6>
 8009aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1f1      	bne.n	8009ab6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ad2:	4b37      	ldr	r3, [pc, #220]	@ (8009bb0 <pvPortMalloc+0x184>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d051      	beq.n	8009b80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2208      	movs	r2, #8
 8009ae2:	4413      	add	r3, r2
 8009ae4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	1ad2      	subs	r2, r2, r3
 8009af6:	2308      	movs	r3, #8
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d920      	bls.n	8009b40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4413      	add	r3, r2
 8009b04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	f003 0307 	and.w	r3, r3, #7
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00b      	beq.n	8009b28 <pvPortMalloc+0xfc>
	__asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	613b      	str	r3, [r7, #16]
}
 8009b22:	bf00      	nop
 8009b24:	bf00      	nop
 8009b26:	e7fd      	b.n	8009b24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	1ad2      	subs	r2, r2, r3
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b3a:	69b8      	ldr	r0, [r7, #24]
 8009b3c:	f000 f90a 	bl	8009d54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b40:	4b1d      	ldr	r3, [pc, #116]	@ (8009bb8 <pvPortMalloc+0x18c>)
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8009bb8 <pvPortMalloc+0x18c>)
 8009b4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8009bb8 <pvPortMalloc+0x18c>)
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	4b1b      	ldr	r3, [pc, #108]	@ (8009bc0 <pvPortMalloc+0x194>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d203      	bcs.n	8009b62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b5a:	4b17      	ldr	r3, [pc, #92]	@ (8009bb8 <pvPortMalloc+0x18c>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a18      	ldr	r2, [pc, #96]	@ (8009bc0 <pvPortMalloc+0x194>)
 8009b60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b64:	685a      	ldr	r2, [r3, #4]
 8009b66:	4b13      	ldr	r3, [pc, #76]	@ (8009bb4 <pvPortMalloc+0x188>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b76:	4b13      	ldr	r3, [pc, #76]	@ (8009bc4 <pvPortMalloc+0x198>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	4a11      	ldr	r2, [pc, #68]	@ (8009bc4 <pvPortMalloc+0x198>)
 8009b7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b80:	f7fe ffca 	bl	8008b18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00b      	beq.n	8009ba6 <pvPortMalloc+0x17a>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	60fb      	str	r3, [r7, #12]
}
 8009ba0:	bf00      	nop
 8009ba2:	bf00      	nop
 8009ba4:	e7fd      	b.n	8009ba2 <pvPortMalloc+0x176>
	return pvReturn;
 8009ba6:	69fb      	ldr	r3, [r7, #28]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3728      	adds	r7, #40	@ 0x28
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	200013e4 	.word	0x200013e4
 8009bb4:	200013f8 	.word	0x200013f8
 8009bb8:	200013e8 	.word	0x200013e8
 8009bbc:	200013dc 	.word	0x200013dc
 8009bc0:	200013ec 	.word	0x200013ec
 8009bc4:	200013f0 	.word	0x200013f0

08009bc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d04f      	beq.n	8009c7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bda:	2308      	movs	r3, #8
 8009bdc:	425b      	negs	r3, r3
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	4413      	add	r3, r2
 8009be2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	4b25      	ldr	r3, [pc, #148]	@ (8009c84 <vPortFree+0xbc>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10b      	bne.n	8009c0e <vPortFree+0x46>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	60fb      	str	r3, [r7, #12]
}
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
 8009c0c:	e7fd      	b.n	8009c0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00b      	beq.n	8009c2e <vPortFree+0x66>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	60bb      	str	r3, [r7, #8]
}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	e7fd      	b.n	8009c2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	685a      	ldr	r2, [r3, #4]
 8009c32:	4b14      	ldr	r3, [pc, #80]	@ (8009c84 <vPortFree+0xbc>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4013      	ands	r3, r2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d01e      	beq.n	8009c7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d11a      	bne.n	8009c7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	4b0e      	ldr	r3, [pc, #56]	@ (8009c84 <vPortFree+0xbc>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	43db      	mvns	r3, r3
 8009c4e:	401a      	ands	r2, r3
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c54:	f7fe ff52 	bl	8008afc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	685a      	ldr	r2, [r3, #4]
 8009c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c88 <vPortFree+0xc0>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4413      	add	r3, r2
 8009c62:	4a09      	ldr	r2, [pc, #36]	@ (8009c88 <vPortFree+0xc0>)
 8009c64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c66:	6938      	ldr	r0, [r7, #16]
 8009c68:	f000 f874 	bl	8009d54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c6c:	4b07      	ldr	r3, [pc, #28]	@ (8009c8c <vPortFree+0xc4>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3301      	adds	r3, #1
 8009c72:	4a06      	ldr	r2, [pc, #24]	@ (8009c8c <vPortFree+0xc4>)
 8009c74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c76:	f7fe ff4f 	bl	8008b18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c7a:	bf00      	nop
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	200013f8 	.word	0x200013f8
 8009c88:	200013e8 	.word	0x200013e8
 8009c8c:	200013f4 	.word	0x200013f4

08009c90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c96:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009c9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c9c:	4b27      	ldr	r3, [pc, #156]	@ (8009d3c <prvHeapInit+0xac>)
 8009c9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f003 0307 	and.w	r3, r3, #7
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00c      	beq.n	8009cc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3307      	adds	r3, #7
 8009cae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f023 0307 	bic.w	r3, r3, #7
 8009cb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8009d3c <prvHeapInit+0xac>)
 8009cc0:	4413      	add	r3, r2
 8009cc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8009d40 <prvHeapInit+0xb0>)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cce:	4b1c      	ldr	r3, [pc, #112]	@ (8009d40 <prvHeapInit+0xb0>)
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	4413      	add	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cdc:	2208      	movs	r2, #8
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	1a9b      	subs	r3, r3, r2
 8009ce2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f023 0307 	bic.w	r3, r3, #7
 8009cea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4a15      	ldr	r2, [pc, #84]	@ (8009d44 <prvHeapInit+0xb4>)
 8009cf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cf2:	4b14      	ldr	r3, [pc, #80]	@ (8009d44 <prvHeapInit+0xb4>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cfa:	4b12      	ldr	r3, [pc, #72]	@ (8009d44 <prvHeapInit+0xb4>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	1ad2      	subs	r2, r2, r3
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d10:	4b0c      	ldr	r3, [pc, #48]	@ (8009d44 <prvHeapInit+0xb4>)
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8009d48 <prvHeapInit+0xb8>)
 8009d1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	4a09      	ldr	r2, [pc, #36]	@ (8009d4c <prvHeapInit+0xbc>)
 8009d26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d28:	4b09      	ldr	r3, [pc, #36]	@ (8009d50 <prvHeapInit+0xc0>)
 8009d2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009d2e:	601a      	str	r2, [r3, #0]
}
 8009d30:	bf00      	nop
 8009d32:	3714      	adds	r7, #20
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	20000824 	.word	0x20000824
 8009d40:	200013dc 	.word	0x200013dc
 8009d44:	200013e4 	.word	0x200013e4
 8009d48:	200013ec 	.word	0x200013ec
 8009d4c:	200013e8 	.word	0x200013e8
 8009d50:	200013f8 	.word	0x200013f8

08009d54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d5c:	4b28      	ldr	r3, [pc, #160]	@ (8009e00 <prvInsertBlockIntoFreeList+0xac>)
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	e002      	b.n	8009d68 <prvInsertBlockIntoFreeList+0x14>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d8f7      	bhi.n	8009d62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d108      	bne.n	8009d96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	441a      	add	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	441a      	add	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d118      	bne.n	8009ddc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	4b15      	ldr	r3, [pc, #84]	@ (8009e04 <prvInsertBlockIntoFreeList+0xb0>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d00d      	beq.n	8009dd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	441a      	add	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	e008      	b.n	8009de4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8009e04 <prvInsertBlockIntoFreeList+0xb0>)
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	e003      	b.n	8009de4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d002      	beq.n	8009df2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009df2:	bf00      	nop
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	200013dc 	.word	0x200013dc
 8009e04:	200013e4 	.word	0x200013e4

08009e08 <std>:
 8009e08:	2300      	movs	r3, #0
 8009e0a:	b510      	push	{r4, lr}
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e16:	6083      	str	r3, [r0, #8]
 8009e18:	8181      	strh	r1, [r0, #12]
 8009e1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e1c:	81c2      	strh	r2, [r0, #14]
 8009e1e:	6183      	str	r3, [r0, #24]
 8009e20:	4619      	mov	r1, r3
 8009e22:	2208      	movs	r2, #8
 8009e24:	305c      	adds	r0, #92	@ 0x5c
 8009e26:	f000 fa2d 	bl	800a284 <memset>
 8009e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e60 <std+0x58>)
 8009e2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e64 <std+0x5c>)
 8009e30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e32:	4b0d      	ldr	r3, [pc, #52]	@ (8009e68 <std+0x60>)
 8009e34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e36:	4b0d      	ldr	r3, [pc, #52]	@ (8009e6c <std+0x64>)
 8009e38:	6323      	str	r3, [r4, #48]	@ 0x30
 8009e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e70 <std+0x68>)
 8009e3c:	6224      	str	r4, [r4, #32]
 8009e3e:	429c      	cmp	r4, r3
 8009e40:	d006      	beq.n	8009e50 <std+0x48>
 8009e42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e46:	4294      	cmp	r4, r2
 8009e48:	d002      	beq.n	8009e50 <std+0x48>
 8009e4a:	33d0      	adds	r3, #208	@ 0xd0
 8009e4c:	429c      	cmp	r4, r3
 8009e4e:	d105      	bne.n	8009e5c <std+0x54>
 8009e50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e58:	f000 bae8 	b.w	800a42c <__retarget_lock_init_recursive>
 8009e5c:	bd10      	pop	{r4, pc}
 8009e5e:	bf00      	nop
 8009e60:	0800a0d5 	.word	0x0800a0d5
 8009e64:	0800a0f7 	.word	0x0800a0f7
 8009e68:	0800a12f 	.word	0x0800a12f
 8009e6c:	0800a153 	.word	0x0800a153
 8009e70:	200013fc 	.word	0x200013fc

08009e74 <stdio_exit_handler>:
 8009e74:	4a02      	ldr	r2, [pc, #8]	@ (8009e80 <stdio_exit_handler+0xc>)
 8009e76:	4903      	ldr	r1, [pc, #12]	@ (8009e84 <stdio_exit_handler+0x10>)
 8009e78:	4803      	ldr	r0, [pc, #12]	@ (8009e88 <stdio_exit_handler+0x14>)
 8009e7a:	f000 b869 	b.w	8009f50 <_fwalk_sglue>
 8009e7e:	bf00      	nop
 8009e80:	20000010 	.word	0x20000010
 8009e84:	0800afe5 	.word	0x0800afe5
 8009e88:	20000020 	.word	0x20000020

08009e8c <cleanup_stdio>:
 8009e8c:	6841      	ldr	r1, [r0, #4]
 8009e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ec0 <cleanup_stdio+0x34>)
 8009e90:	4299      	cmp	r1, r3
 8009e92:	b510      	push	{r4, lr}
 8009e94:	4604      	mov	r4, r0
 8009e96:	d001      	beq.n	8009e9c <cleanup_stdio+0x10>
 8009e98:	f001 f8a4 	bl	800afe4 <_fflush_r>
 8009e9c:	68a1      	ldr	r1, [r4, #8]
 8009e9e:	4b09      	ldr	r3, [pc, #36]	@ (8009ec4 <cleanup_stdio+0x38>)
 8009ea0:	4299      	cmp	r1, r3
 8009ea2:	d002      	beq.n	8009eaa <cleanup_stdio+0x1e>
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f001 f89d 	bl	800afe4 <_fflush_r>
 8009eaa:	68e1      	ldr	r1, [r4, #12]
 8009eac:	4b06      	ldr	r3, [pc, #24]	@ (8009ec8 <cleanup_stdio+0x3c>)
 8009eae:	4299      	cmp	r1, r3
 8009eb0:	d004      	beq.n	8009ebc <cleanup_stdio+0x30>
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eb8:	f001 b894 	b.w	800afe4 <_fflush_r>
 8009ebc:	bd10      	pop	{r4, pc}
 8009ebe:	bf00      	nop
 8009ec0:	200013fc 	.word	0x200013fc
 8009ec4:	20001464 	.word	0x20001464
 8009ec8:	200014cc 	.word	0x200014cc

08009ecc <global_stdio_init.part.0>:
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	4b0b      	ldr	r3, [pc, #44]	@ (8009efc <global_stdio_init.part.0+0x30>)
 8009ed0:	4c0b      	ldr	r4, [pc, #44]	@ (8009f00 <global_stdio_init.part.0+0x34>)
 8009ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8009f04 <global_stdio_init.part.0+0x38>)
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	2200      	movs	r2, #0
 8009eda:	2104      	movs	r1, #4
 8009edc:	f7ff ff94 	bl	8009e08 <std>
 8009ee0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	2109      	movs	r1, #9
 8009ee8:	f7ff ff8e 	bl	8009e08 <std>
 8009eec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ef0:	2202      	movs	r2, #2
 8009ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ef6:	2112      	movs	r1, #18
 8009ef8:	f7ff bf86 	b.w	8009e08 <std>
 8009efc:	20001534 	.word	0x20001534
 8009f00:	200013fc 	.word	0x200013fc
 8009f04:	08009e75 	.word	0x08009e75

08009f08 <__sfp_lock_acquire>:
 8009f08:	4801      	ldr	r0, [pc, #4]	@ (8009f10 <__sfp_lock_acquire+0x8>)
 8009f0a:	f000 ba90 	b.w	800a42e <__retarget_lock_acquire_recursive>
 8009f0e:	bf00      	nop
 8009f10:	2000153d 	.word	0x2000153d

08009f14 <__sfp_lock_release>:
 8009f14:	4801      	ldr	r0, [pc, #4]	@ (8009f1c <__sfp_lock_release+0x8>)
 8009f16:	f000 ba8b 	b.w	800a430 <__retarget_lock_release_recursive>
 8009f1a:	bf00      	nop
 8009f1c:	2000153d 	.word	0x2000153d

08009f20 <__sinit>:
 8009f20:	b510      	push	{r4, lr}
 8009f22:	4604      	mov	r4, r0
 8009f24:	f7ff fff0 	bl	8009f08 <__sfp_lock_acquire>
 8009f28:	6a23      	ldr	r3, [r4, #32]
 8009f2a:	b11b      	cbz	r3, 8009f34 <__sinit+0x14>
 8009f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f30:	f7ff bff0 	b.w	8009f14 <__sfp_lock_release>
 8009f34:	4b04      	ldr	r3, [pc, #16]	@ (8009f48 <__sinit+0x28>)
 8009f36:	6223      	str	r3, [r4, #32]
 8009f38:	4b04      	ldr	r3, [pc, #16]	@ (8009f4c <__sinit+0x2c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1f5      	bne.n	8009f2c <__sinit+0xc>
 8009f40:	f7ff ffc4 	bl	8009ecc <global_stdio_init.part.0>
 8009f44:	e7f2      	b.n	8009f2c <__sinit+0xc>
 8009f46:	bf00      	nop
 8009f48:	08009e8d 	.word	0x08009e8d
 8009f4c:	20001534 	.word	0x20001534

08009f50 <_fwalk_sglue>:
 8009f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f54:	4607      	mov	r7, r0
 8009f56:	4688      	mov	r8, r1
 8009f58:	4614      	mov	r4, r2
 8009f5a:	2600      	movs	r6, #0
 8009f5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f60:	f1b9 0901 	subs.w	r9, r9, #1
 8009f64:	d505      	bpl.n	8009f72 <_fwalk_sglue+0x22>
 8009f66:	6824      	ldr	r4, [r4, #0]
 8009f68:	2c00      	cmp	r4, #0
 8009f6a:	d1f7      	bne.n	8009f5c <_fwalk_sglue+0xc>
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f72:	89ab      	ldrh	r3, [r5, #12]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d907      	bls.n	8009f88 <_fwalk_sglue+0x38>
 8009f78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	d003      	beq.n	8009f88 <_fwalk_sglue+0x38>
 8009f80:	4629      	mov	r1, r5
 8009f82:	4638      	mov	r0, r7
 8009f84:	47c0      	blx	r8
 8009f86:	4306      	orrs	r6, r0
 8009f88:	3568      	adds	r5, #104	@ 0x68
 8009f8a:	e7e9      	b.n	8009f60 <_fwalk_sglue+0x10>

08009f8c <iprintf>:
 8009f8c:	b40f      	push	{r0, r1, r2, r3}
 8009f8e:	b507      	push	{r0, r1, r2, lr}
 8009f90:	4906      	ldr	r1, [pc, #24]	@ (8009fac <iprintf+0x20>)
 8009f92:	ab04      	add	r3, sp, #16
 8009f94:	6808      	ldr	r0, [r1, #0]
 8009f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f9a:	6881      	ldr	r1, [r0, #8]
 8009f9c:	9301      	str	r3, [sp, #4]
 8009f9e:	f000 fcf7 	bl	800a990 <_vfiprintf_r>
 8009fa2:	b003      	add	sp, #12
 8009fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa8:	b004      	add	sp, #16
 8009faa:	4770      	bx	lr
 8009fac:	2000001c 	.word	0x2000001c

08009fb0 <_puts_r>:
 8009fb0:	6a03      	ldr	r3, [r0, #32]
 8009fb2:	b570      	push	{r4, r5, r6, lr}
 8009fb4:	6884      	ldr	r4, [r0, #8]
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	460e      	mov	r6, r1
 8009fba:	b90b      	cbnz	r3, 8009fc0 <_puts_r+0x10>
 8009fbc:	f7ff ffb0 	bl	8009f20 <__sinit>
 8009fc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009fc2:	07db      	lsls	r3, r3, #31
 8009fc4:	d405      	bmi.n	8009fd2 <_puts_r+0x22>
 8009fc6:	89a3      	ldrh	r3, [r4, #12]
 8009fc8:	0598      	lsls	r0, r3, #22
 8009fca:	d402      	bmi.n	8009fd2 <_puts_r+0x22>
 8009fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fce:	f000 fa2e 	bl	800a42e <__retarget_lock_acquire_recursive>
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	0719      	lsls	r1, r3, #28
 8009fd6:	d502      	bpl.n	8009fde <_puts_r+0x2e>
 8009fd8:	6923      	ldr	r3, [r4, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d135      	bne.n	800a04a <_puts_r+0x9a>
 8009fde:	4621      	mov	r1, r4
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	f000 f8f9 	bl	800a1d8 <__swsetup_r>
 8009fe6:	b380      	cbz	r0, 800a04a <_puts_r+0x9a>
 8009fe8:	f04f 35ff 	mov.w	r5, #4294967295
 8009fec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009fee:	07da      	lsls	r2, r3, #31
 8009ff0:	d405      	bmi.n	8009ffe <_puts_r+0x4e>
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	059b      	lsls	r3, r3, #22
 8009ff6:	d402      	bmi.n	8009ffe <_puts_r+0x4e>
 8009ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ffa:	f000 fa19 	bl	800a430 <__retarget_lock_release_recursive>
 8009ffe:	4628      	mov	r0, r5
 800a000:	bd70      	pop	{r4, r5, r6, pc}
 800a002:	2b00      	cmp	r3, #0
 800a004:	da04      	bge.n	800a010 <_puts_r+0x60>
 800a006:	69a2      	ldr	r2, [r4, #24]
 800a008:	429a      	cmp	r2, r3
 800a00a:	dc17      	bgt.n	800a03c <_puts_r+0x8c>
 800a00c:	290a      	cmp	r1, #10
 800a00e:	d015      	beq.n	800a03c <_puts_r+0x8c>
 800a010:	6823      	ldr	r3, [r4, #0]
 800a012:	1c5a      	adds	r2, r3, #1
 800a014:	6022      	str	r2, [r4, #0]
 800a016:	7019      	strb	r1, [r3, #0]
 800a018:	68a3      	ldr	r3, [r4, #8]
 800a01a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a01e:	3b01      	subs	r3, #1
 800a020:	60a3      	str	r3, [r4, #8]
 800a022:	2900      	cmp	r1, #0
 800a024:	d1ed      	bne.n	800a002 <_puts_r+0x52>
 800a026:	2b00      	cmp	r3, #0
 800a028:	da11      	bge.n	800a04e <_puts_r+0x9e>
 800a02a:	4622      	mov	r2, r4
 800a02c:	210a      	movs	r1, #10
 800a02e:	4628      	mov	r0, r5
 800a030:	f000 f893 	bl	800a15a <__swbuf_r>
 800a034:	3001      	adds	r0, #1
 800a036:	d0d7      	beq.n	8009fe8 <_puts_r+0x38>
 800a038:	250a      	movs	r5, #10
 800a03a:	e7d7      	b.n	8009fec <_puts_r+0x3c>
 800a03c:	4622      	mov	r2, r4
 800a03e:	4628      	mov	r0, r5
 800a040:	f000 f88b 	bl	800a15a <__swbuf_r>
 800a044:	3001      	adds	r0, #1
 800a046:	d1e7      	bne.n	800a018 <_puts_r+0x68>
 800a048:	e7ce      	b.n	8009fe8 <_puts_r+0x38>
 800a04a:	3e01      	subs	r6, #1
 800a04c:	e7e4      	b.n	800a018 <_puts_r+0x68>
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	1c5a      	adds	r2, r3, #1
 800a052:	6022      	str	r2, [r4, #0]
 800a054:	220a      	movs	r2, #10
 800a056:	701a      	strb	r2, [r3, #0]
 800a058:	e7ee      	b.n	800a038 <_puts_r+0x88>
	...

0800a05c <puts>:
 800a05c:	4b02      	ldr	r3, [pc, #8]	@ (800a068 <puts+0xc>)
 800a05e:	4601      	mov	r1, r0
 800a060:	6818      	ldr	r0, [r3, #0]
 800a062:	f7ff bfa5 	b.w	8009fb0 <_puts_r>
 800a066:	bf00      	nop
 800a068:	2000001c 	.word	0x2000001c

0800a06c <sniprintf>:
 800a06c:	b40c      	push	{r2, r3}
 800a06e:	b530      	push	{r4, r5, lr}
 800a070:	4b17      	ldr	r3, [pc, #92]	@ (800a0d0 <sniprintf+0x64>)
 800a072:	1e0c      	subs	r4, r1, #0
 800a074:	681d      	ldr	r5, [r3, #0]
 800a076:	b09d      	sub	sp, #116	@ 0x74
 800a078:	da08      	bge.n	800a08c <sniprintf+0x20>
 800a07a:	238b      	movs	r3, #139	@ 0x8b
 800a07c:	602b      	str	r3, [r5, #0]
 800a07e:	f04f 30ff 	mov.w	r0, #4294967295
 800a082:	b01d      	add	sp, #116	@ 0x74
 800a084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a088:	b002      	add	sp, #8
 800a08a:	4770      	bx	lr
 800a08c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a090:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a094:	bf14      	ite	ne
 800a096:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a09a:	4623      	moveq	r3, r4
 800a09c:	9304      	str	r3, [sp, #16]
 800a09e:	9307      	str	r3, [sp, #28]
 800a0a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a0a4:	9002      	str	r0, [sp, #8]
 800a0a6:	9006      	str	r0, [sp, #24]
 800a0a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a0ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a0ae:	ab21      	add	r3, sp, #132	@ 0x84
 800a0b0:	a902      	add	r1, sp, #8
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	9301      	str	r3, [sp, #4]
 800a0b6:	f000 fb45 	bl	800a744 <_svfiprintf_r>
 800a0ba:	1c43      	adds	r3, r0, #1
 800a0bc:	bfbc      	itt	lt
 800a0be:	238b      	movlt	r3, #139	@ 0x8b
 800a0c0:	602b      	strlt	r3, [r5, #0]
 800a0c2:	2c00      	cmp	r4, #0
 800a0c4:	d0dd      	beq.n	800a082 <sniprintf+0x16>
 800a0c6:	9b02      	ldr	r3, [sp, #8]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	701a      	strb	r2, [r3, #0]
 800a0cc:	e7d9      	b.n	800a082 <sniprintf+0x16>
 800a0ce:	bf00      	nop
 800a0d0:	2000001c 	.word	0x2000001c

0800a0d4 <__sread>:
 800a0d4:	b510      	push	{r4, lr}
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0dc:	f000 f958 	bl	800a390 <_read_r>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	bfab      	itete	ge
 800a0e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a0e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a0e8:	181b      	addge	r3, r3, r0
 800a0ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a0ee:	bfac      	ite	ge
 800a0f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a0f2:	81a3      	strhlt	r3, [r4, #12]
 800a0f4:	bd10      	pop	{r4, pc}

0800a0f6 <__swrite>:
 800a0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0fa:	461f      	mov	r7, r3
 800a0fc:	898b      	ldrh	r3, [r1, #12]
 800a0fe:	05db      	lsls	r3, r3, #23
 800a100:	4605      	mov	r5, r0
 800a102:	460c      	mov	r4, r1
 800a104:	4616      	mov	r6, r2
 800a106:	d505      	bpl.n	800a114 <__swrite+0x1e>
 800a108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a10c:	2302      	movs	r3, #2
 800a10e:	2200      	movs	r2, #0
 800a110:	f000 f92c 	bl	800a36c <_lseek_r>
 800a114:	89a3      	ldrh	r3, [r4, #12]
 800a116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a11a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a11e:	81a3      	strh	r3, [r4, #12]
 800a120:	4632      	mov	r2, r6
 800a122:	463b      	mov	r3, r7
 800a124:	4628      	mov	r0, r5
 800a126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a12a:	f000 b943 	b.w	800a3b4 <_write_r>

0800a12e <__sseek>:
 800a12e:	b510      	push	{r4, lr}
 800a130:	460c      	mov	r4, r1
 800a132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a136:	f000 f919 	bl	800a36c <_lseek_r>
 800a13a:	1c43      	adds	r3, r0, #1
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	bf15      	itete	ne
 800a140:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a142:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a146:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a14a:	81a3      	strheq	r3, [r4, #12]
 800a14c:	bf18      	it	ne
 800a14e:	81a3      	strhne	r3, [r4, #12]
 800a150:	bd10      	pop	{r4, pc}

0800a152 <__sclose>:
 800a152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a156:	f000 b8f9 	b.w	800a34c <_close_r>

0800a15a <__swbuf_r>:
 800a15a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15c:	460e      	mov	r6, r1
 800a15e:	4614      	mov	r4, r2
 800a160:	4605      	mov	r5, r0
 800a162:	b118      	cbz	r0, 800a16c <__swbuf_r+0x12>
 800a164:	6a03      	ldr	r3, [r0, #32]
 800a166:	b90b      	cbnz	r3, 800a16c <__swbuf_r+0x12>
 800a168:	f7ff feda 	bl	8009f20 <__sinit>
 800a16c:	69a3      	ldr	r3, [r4, #24]
 800a16e:	60a3      	str	r3, [r4, #8]
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	071a      	lsls	r2, r3, #28
 800a174:	d501      	bpl.n	800a17a <__swbuf_r+0x20>
 800a176:	6923      	ldr	r3, [r4, #16]
 800a178:	b943      	cbnz	r3, 800a18c <__swbuf_r+0x32>
 800a17a:	4621      	mov	r1, r4
 800a17c:	4628      	mov	r0, r5
 800a17e:	f000 f82b 	bl	800a1d8 <__swsetup_r>
 800a182:	b118      	cbz	r0, 800a18c <__swbuf_r+0x32>
 800a184:	f04f 37ff 	mov.w	r7, #4294967295
 800a188:	4638      	mov	r0, r7
 800a18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a18c:	6823      	ldr	r3, [r4, #0]
 800a18e:	6922      	ldr	r2, [r4, #16]
 800a190:	1a98      	subs	r0, r3, r2
 800a192:	6963      	ldr	r3, [r4, #20]
 800a194:	b2f6      	uxtb	r6, r6
 800a196:	4283      	cmp	r3, r0
 800a198:	4637      	mov	r7, r6
 800a19a:	dc05      	bgt.n	800a1a8 <__swbuf_r+0x4e>
 800a19c:	4621      	mov	r1, r4
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f000 ff20 	bl	800afe4 <_fflush_r>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d1ed      	bne.n	800a184 <__swbuf_r+0x2a>
 800a1a8:	68a3      	ldr	r3, [r4, #8]
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	60a3      	str	r3, [r4, #8]
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	1c5a      	adds	r2, r3, #1
 800a1b2:	6022      	str	r2, [r4, #0]
 800a1b4:	701e      	strb	r6, [r3, #0]
 800a1b6:	6962      	ldr	r2, [r4, #20]
 800a1b8:	1c43      	adds	r3, r0, #1
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d004      	beq.n	800a1c8 <__swbuf_r+0x6e>
 800a1be:	89a3      	ldrh	r3, [r4, #12]
 800a1c0:	07db      	lsls	r3, r3, #31
 800a1c2:	d5e1      	bpl.n	800a188 <__swbuf_r+0x2e>
 800a1c4:	2e0a      	cmp	r6, #10
 800a1c6:	d1df      	bne.n	800a188 <__swbuf_r+0x2e>
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	f000 ff0a 	bl	800afe4 <_fflush_r>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d0d9      	beq.n	800a188 <__swbuf_r+0x2e>
 800a1d4:	e7d6      	b.n	800a184 <__swbuf_r+0x2a>
	...

0800a1d8 <__swsetup_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	4b29      	ldr	r3, [pc, #164]	@ (800a280 <__swsetup_r+0xa8>)
 800a1dc:	4605      	mov	r5, r0
 800a1de:	6818      	ldr	r0, [r3, #0]
 800a1e0:	460c      	mov	r4, r1
 800a1e2:	b118      	cbz	r0, 800a1ec <__swsetup_r+0x14>
 800a1e4:	6a03      	ldr	r3, [r0, #32]
 800a1e6:	b90b      	cbnz	r3, 800a1ec <__swsetup_r+0x14>
 800a1e8:	f7ff fe9a 	bl	8009f20 <__sinit>
 800a1ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1f0:	0719      	lsls	r1, r3, #28
 800a1f2:	d422      	bmi.n	800a23a <__swsetup_r+0x62>
 800a1f4:	06da      	lsls	r2, r3, #27
 800a1f6:	d407      	bmi.n	800a208 <__swsetup_r+0x30>
 800a1f8:	2209      	movs	r2, #9
 800a1fa:	602a      	str	r2, [r5, #0]
 800a1fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a200:	81a3      	strh	r3, [r4, #12]
 800a202:	f04f 30ff 	mov.w	r0, #4294967295
 800a206:	e033      	b.n	800a270 <__swsetup_r+0x98>
 800a208:	0758      	lsls	r0, r3, #29
 800a20a:	d512      	bpl.n	800a232 <__swsetup_r+0x5a>
 800a20c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a20e:	b141      	cbz	r1, 800a222 <__swsetup_r+0x4a>
 800a210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a214:	4299      	cmp	r1, r3
 800a216:	d002      	beq.n	800a21e <__swsetup_r+0x46>
 800a218:	4628      	mov	r0, r5
 800a21a:	f000 f937 	bl	800a48c <_free_r>
 800a21e:	2300      	movs	r3, #0
 800a220:	6363      	str	r3, [r4, #52]	@ 0x34
 800a222:	89a3      	ldrh	r3, [r4, #12]
 800a224:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a228:	81a3      	strh	r3, [r4, #12]
 800a22a:	2300      	movs	r3, #0
 800a22c:	6063      	str	r3, [r4, #4]
 800a22e:	6923      	ldr	r3, [r4, #16]
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	f043 0308 	orr.w	r3, r3, #8
 800a238:	81a3      	strh	r3, [r4, #12]
 800a23a:	6923      	ldr	r3, [r4, #16]
 800a23c:	b94b      	cbnz	r3, 800a252 <__swsetup_r+0x7a>
 800a23e:	89a3      	ldrh	r3, [r4, #12]
 800a240:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a248:	d003      	beq.n	800a252 <__swsetup_r+0x7a>
 800a24a:	4621      	mov	r1, r4
 800a24c:	4628      	mov	r0, r5
 800a24e:	f000 ff29 	bl	800b0a4 <__smakebuf_r>
 800a252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a256:	f013 0201 	ands.w	r2, r3, #1
 800a25a:	d00a      	beq.n	800a272 <__swsetup_r+0x9a>
 800a25c:	2200      	movs	r2, #0
 800a25e:	60a2      	str	r2, [r4, #8]
 800a260:	6962      	ldr	r2, [r4, #20]
 800a262:	4252      	negs	r2, r2
 800a264:	61a2      	str	r2, [r4, #24]
 800a266:	6922      	ldr	r2, [r4, #16]
 800a268:	b942      	cbnz	r2, 800a27c <__swsetup_r+0xa4>
 800a26a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a26e:	d1c5      	bne.n	800a1fc <__swsetup_r+0x24>
 800a270:	bd38      	pop	{r3, r4, r5, pc}
 800a272:	0799      	lsls	r1, r3, #30
 800a274:	bf58      	it	pl
 800a276:	6962      	ldrpl	r2, [r4, #20]
 800a278:	60a2      	str	r2, [r4, #8]
 800a27a:	e7f4      	b.n	800a266 <__swsetup_r+0x8e>
 800a27c:	2000      	movs	r0, #0
 800a27e:	e7f7      	b.n	800a270 <__swsetup_r+0x98>
 800a280:	2000001c 	.word	0x2000001c

0800a284 <memset>:
 800a284:	4402      	add	r2, r0
 800a286:	4603      	mov	r3, r0
 800a288:	4293      	cmp	r3, r2
 800a28a:	d100      	bne.n	800a28e <memset+0xa>
 800a28c:	4770      	bx	lr
 800a28e:	f803 1b01 	strb.w	r1, [r3], #1
 800a292:	e7f9      	b.n	800a288 <memset+0x4>

0800a294 <strtok>:
 800a294:	4b16      	ldr	r3, [pc, #88]	@ (800a2f0 <strtok+0x5c>)
 800a296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a29a:	681f      	ldr	r7, [r3, #0]
 800a29c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a29e:	4605      	mov	r5, r0
 800a2a0:	460e      	mov	r6, r1
 800a2a2:	b9ec      	cbnz	r4, 800a2e0 <strtok+0x4c>
 800a2a4:	2050      	movs	r0, #80	@ 0x50
 800a2a6:	f000 f93b 	bl	800a520 <malloc>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	6478      	str	r0, [r7, #68]	@ 0x44
 800a2ae:	b920      	cbnz	r0, 800a2ba <strtok+0x26>
 800a2b0:	4b10      	ldr	r3, [pc, #64]	@ (800a2f4 <strtok+0x60>)
 800a2b2:	4811      	ldr	r0, [pc, #68]	@ (800a2f8 <strtok+0x64>)
 800a2b4:	215b      	movs	r1, #91	@ 0x5b
 800a2b6:	f000 f8cb 	bl	800a450 <__assert_func>
 800a2ba:	e9c0 4400 	strd	r4, r4, [r0]
 800a2be:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a2c2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a2c6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a2ca:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a2ce:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a2d2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a2d6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a2da:	6184      	str	r4, [r0, #24]
 800a2dc:	7704      	strb	r4, [r0, #28]
 800a2de:	6244      	str	r4, [r0, #36]	@ 0x24
 800a2e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ec:	f000 b806 	b.w	800a2fc <__strtok_r>
 800a2f0:	2000001c 	.word	0x2000001c
 800a2f4:	0800b534 	.word	0x0800b534
 800a2f8:	0800b54b 	.word	0x0800b54b

0800a2fc <__strtok_r>:
 800a2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2fe:	4604      	mov	r4, r0
 800a300:	b908      	cbnz	r0, 800a306 <__strtok_r+0xa>
 800a302:	6814      	ldr	r4, [r2, #0]
 800a304:	b144      	cbz	r4, 800a318 <__strtok_r+0x1c>
 800a306:	4620      	mov	r0, r4
 800a308:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a30c:	460f      	mov	r7, r1
 800a30e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a312:	b91e      	cbnz	r6, 800a31c <__strtok_r+0x20>
 800a314:	b965      	cbnz	r5, 800a330 <__strtok_r+0x34>
 800a316:	6015      	str	r5, [r2, #0]
 800a318:	2000      	movs	r0, #0
 800a31a:	e005      	b.n	800a328 <__strtok_r+0x2c>
 800a31c:	42b5      	cmp	r5, r6
 800a31e:	d1f6      	bne.n	800a30e <__strtok_r+0x12>
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1f0      	bne.n	800a306 <__strtok_r+0xa>
 800a324:	6014      	str	r4, [r2, #0]
 800a326:	7003      	strb	r3, [r0, #0]
 800a328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a32a:	461c      	mov	r4, r3
 800a32c:	e00c      	b.n	800a348 <__strtok_r+0x4c>
 800a32e:	b915      	cbnz	r5, 800a336 <__strtok_r+0x3a>
 800a330:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a334:	460e      	mov	r6, r1
 800a336:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a33a:	42ab      	cmp	r3, r5
 800a33c:	d1f7      	bne.n	800a32e <__strtok_r+0x32>
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d0f3      	beq.n	800a32a <__strtok_r+0x2e>
 800a342:	2300      	movs	r3, #0
 800a344:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a348:	6014      	str	r4, [r2, #0]
 800a34a:	e7ed      	b.n	800a328 <__strtok_r+0x2c>

0800a34c <_close_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4d06      	ldr	r5, [pc, #24]	@ (800a368 <_close_r+0x1c>)
 800a350:	2300      	movs	r3, #0
 800a352:	4604      	mov	r4, r0
 800a354:	4608      	mov	r0, r1
 800a356:	602b      	str	r3, [r5, #0]
 800a358:	f7f7 f9ea 	bl	8001730 <_close>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d102      	bne.n	800a366 <_close_r+0x1a>
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	b103      	cbz	r3, 800a366 <_close_r+0x1a>
 800a364:	6023      	str	r3, [r4, #0]
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	20001538 	.word	0x20001538

0800a36c <_lseek_r>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	4d07      	ldr	r5, [pc, #28]	@ (800a38c <_lseek_r+0x20>)
 800a370:	4604      	mov	r4, r0
 800a372:	4608      	mov	r0, r1
 800a374:	4611      	mov	r1, r2
 800a376:	2200      	movs	r2, #0
 800a378:	602a      	str	r2, [r5, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	f7f7 f9ff 	bl	800177e <_lseek>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	d102      	bne.n	800a38a <_lseek_r+0x1e>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	b103      	cbz	r3, 800a38a <_lseek_r+0x1e>
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	20001538 	.word	0x20001538

0800a390 <_read_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4d07      	ldr	r5, [pc, #28]	@ (800a3b0 <_read_r+0x20>)
 800a394:	4604      	mov	r4, r0
 800a396:	4608      	mov	r0, r1
 800a398:	4611      	mov	r1, r2
 800a39a:	2200      	movs	r2, #0
 800a39c:	602a      	str	r2, [r5, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f7f7 f98d 	bl	80016be <_read>
 800a3a4:	1c43      	adds	r3, r0, #1
 800a3a6:	d102      	bne.n	800a3ae <_read_r+0x1e>
 800a3a8:	682b      	ldr	r3, [r5, #0]
 800a3aa:	b103      	cbz	r3, 800a3ae <_read_r+0x1e>
 800a3ac:	6023      	str	r3, [r4, #0]
 800a3ae:	bd38      	pop	{r3, r4, r5, pc}
 800a3b0:	20001538 	.word	0x20001538

0800a3b4 <_write_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4d07      	ldr	r5, [pc, #28]	@ (800a3d4 <_write_r+0x20>)
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	4608      	mov	r0, r1
 800a3bc:	4611      	mov	r1, r2
 800a3be:	2200      	movs	r2, #0
 800a3c0:	602a      	str	r2, [r5, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	f7f7 f998 	bl	80016f8 <_write>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d102      	bne.n	800a3d2 <_write_r+0x1e>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	b103      	cbz	r3, 800a3d2 <_write_r+0x1e>
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	20001538 	.word	0x20001538

0800a3d8 <__errno>:
 800a3d8:	4b01      	ldr	r3, [pc, #4]	@ (800a3e0 <__errno+0x8>)
 800a3da:	6818      	ldr	r0, [r3, #0]
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	2000001c 	.word	0x2000001c

0800a3e4 <__libc_init_array>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	4d0d      	ldr	r5, [pc, #52]	@ (800a41c <__libc_init_array+0x38>)
 800a3e8:	4c0d      	ldr	r4, [pc, #52]	@ (800a420 <__libc_init_array+0x3c>)
 800a3ea:	1b64      	subs	r4, r4, r5
 800a3ec:	10a4      	asrs	r4, r4, #2
 800a3ee:	2600      	movs	r6, #0
 800a3f0:	42a6      	cmp	r6, r4
 800a3f2:	d109      	bne.n	800a408 <__libc_init_array+0x24>
 800a3f4:	4d0b      	ldr	r5, [pc, #44]	@ (800a424 <__libc_init_array+0x40>)
 800a3f6:	4c0c      	ldr	r4, [pc, #48]	@ (800a428 <__libc_init_array+0x44>)
 800a3f8:	f000 ff5e 	bl	800b2b8 <_init>
 800a3fc:	1b64      	subs	r4, r4, r5
 800a3fe:	10a4      	asrs	r4, r4, #2
 800a400:	2600      	movs	r6, #0
 800a402:	42a6      	cmp	r6, r4
 800a404:	d105      	bne.n	800a412 <__libc_init_array+0x2e>
 800a406:	bd70      	pop	{r4, r5, r6, pc}
 800a408:	f855 3b04 	ldr.w	r3, [r5], #4
 800a40c:	4798      	blx	r3
 800a40e:	3601      	adds	r6, #1
 800a410:	e7ee      	b.n	800a3f0 <__libc_init_array+0xc>
 800a412:	f855 3b04 	ldr.w	r3, [r5], #4
 800a416:	4798      	blx	r3
 800a418:	3601      	adds	r6, #1
 800a41a:	e7f2      	b.n	800a402 <__libc_init_array+0x1e>
 800a41c:	0800b61c 	.word	0x0800b61c
 800a420:	0800b61c 	.word	0x0800b61c
 800a424:	0800b61c 	.word	0x0800b61c
 800a428:	0800b620 	.word	0x0800b620

0800a42c <__retarget_lock_init_recursive>:
 800a42c:	4770      	bx	lr

0800a42e <__retarget_lock_acquire_recursive>:
 800a42e:	4770      	bx	lr

0800a430 <__retarget_lock_release_recursive>:
 800a430:	4770      	bx	lr

0800a432 <memcpy>:
 800a432:	440a      	add	r2, r1
 800a434:	4291      	cmp	r1, r2
 800a436:	f100 33ff 	add.w	r3, r0, #4294967295
 800a43a:	d100      	bne.n	800a43e <memcpy+0xc>
 800a43c:	4770      	bx	lr
 800a43e:	b510      	push	{r4, lr}
 800a440:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a444:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a448:	4291      	cmp	r1, r2
 800a44a:	d1f9      	bne.n	800a440 <memcpy+0xe>
 800a44c:	bd10      	pop	{r4, pc}
	...

0800a450 <__assert_func>:
 800a450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a452:	4614      	mov	r4, r2
 800a454:	461a      	mov	r2, r3
 800a456:	4b09      	ldr	r3, [pc, #36]	@ (800a47c <__assert_func+0x2c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4605      	mov	r5, r0
 800a45c:	68d8      	ldr	r0, [r3, #12]
 800a45e:	b954      	cbnz	r4, 800a476 <__assert_func+0x26>
 800a460:	4b07      	ldr	r3, [pc, #28]	@ (800a480 <__assert_func+0x30>)
 800a462:	461c      	mov	r4, r3
 800a464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a468:	9100      	str	r1, [sp, #0]
 800a46a:	462b      	mov	r3, r5
 800a46c:	4905      	ldr	r1, [pc, #20]	@ (800a484 <__assert_func+0x34>)
 800a46e:	f000 fde1 	bl	800b034 <fiprintf>
 800a472:	f000 fe9f 	bl	800b1b4 <abort>
 800a476:	4b04      	ldr	r3, [pc, #16]	@ (800a488 <__assert_func+0x38>)
 800a478:	e7f4      	b.n	800a464 <__assert_func+0x14>
 800a47a:	bf00      	nop
 800a47c:	2000001c 	.word	0x2000001c
 800a480:	0800b5e0 	.word	0x0800b5e0
 800a484:	0800b5b2 	.word	0x0800b5b2
 800a488:	0800b5a5 	.word	0x0800b5a5

0800a48c <_free_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4605      	mov	r5, r0
 800a490:	2900      	cmp	r1, #0
 800a492:	d041      	beq.n	800a518 <_free_r+0x8c>
 800a494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a498:	1f0c      	subs	r4, r1, #4
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	bfb8      	it	lt
 800a49e:	18e4      	addlt	r4, r4, r3
 800a4a0:	f000 f8e8 	bl	800a674 <__malloc_lock>
 800a4a4:	4a1d      	ldr	r2, [pc, #116]	@ (800a51c <_free_r+0x90>)
 800a4a6:	6813      	ldr	r3, [r2, #0]
 800a4a8:	b933      	cbnz	r3, 800a4b8 <_free_r+0x2c>
 800a4aa:	6063      	str	r3, [r4, #4]
 800a4ac:	6014      	str	r4, [r2, #0]
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4b4:	f000 b8e4 	b.w	800a680 <__malloc_unlock>
 800a4b8:	42a3      	cmp	r3, r4
 800a4ba:	d908      	bls.n	800a4ce <_free_r+0x42>
 800a4bc:	6820      	ldr	r0, [r4, #0]
 800a4be:	1821      	adds	r1, r4, r0
 800a4c0:	428b      	cmp	r3, r1
 800a4c2:	bf01      	itttt	eq
 800a4c4:	6819      	ldreq	r1, [r3, #0]
 800a4c6:	685b      	ldreq	r3, [r3, #4]
 800a4c8:	1809      	addeq	r1, r1, r0
 800a4ca:	6021      	streq	r1, [r4, #0]
 800a4cc:	e7ed      	b.n	800a4aa <_free_r+0x1e>
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	b10b      	cbz	r3, 800a4d8 <_free_r+0x4c>
 800a4d4:	42a3      	cmp	r3, r4
 800a4d6:	d9fa      	bls.n	800a4ce <_free_r+0x42>
 800a4d8:	6811      	ldr	r1, [r2, #0]
 800a4da:	1850      	adds	r0, r2, r1
 800a4dc:	42a0      	cmp	r0, r4
 800a4de:	d10b      	bne.n	800a4f8 <_free_r+0x6c>
 800a4e0:	6820      	ldr	r0, [r4, #0]
 800a4e2:	4401      	add	r1, r0
 800a4e4:	1850      	adds	r0, r2, r1
 800a4e6:	4283      	cmp	r3, r0
 800a4e8:	6011      	str	r1, [r2, #0]
 800a4ea:	d1e0      	bne.n	800a4ae <_free_r+0x22>
 800a4ec:	6818      	ldr	r0, [r3, #0]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	6053      	str	r3, [r2, #4]
 800a4f2:	4408      	add	r0, r1
 800a4f4:	6010      	str	r0, [r2, #0]
 800a4f6:	e7da      	b.n	800a4ae <_free_r+0x22>
 800a4f8:	d902      	bls.n	800a500 <_free_r+0x74>
 800a4fa:	230c      	movs	r3, #12
 800a4fc:	602b      	str	r3, [r5, #0]
 800a4fe:	e7d6      	b.n	800a4ae <_free_r+0x22>
 800a500:	6820      	ldr	r0, [r4, #0]
 800a502:	1821      	adds	r1, r4, r0
 800a504:	428b      	cmp	r3, r1
 800a506:	bf04      	itt	eq
 800a508:	6819      	ldreq	r1, [r3, #0]
 800a50a:	685b      	ldreq	r3, [r3, #4]
 800a50c:	6063      	str	r3, [r4, #4]
 800a50e:	bf04      	itt	eq
 800a510:	1809      	addeq	r1, r1, r0
 800a512:	6021      	streq	r1, [r4, #0]
 800a514:	6054      	str	r4, [r2, #4]
 800a516:	e7ca      	b.n	800a4ae <_free_r+0x22>
 800a518:	bd38      	pop	{r3, r4, r5, pc}
 800a51a:	bf00      	nop
 800a51c:	20001544 	.word	0x20001544

0800a520 <malloc>:
 800a520:	4b02      	ldr	r3, [pc, #8]	@ (800a52c <malloc+0xc>)
 800a522:	4601      	mov	r1, r0
 800a524:	6818      	ldr	r0, [r3, #0]
 800a526:	f000 b825 	b.w	800a574 <_malloc_r>
 800a52a:	bf00      	nop
 800a52c:	2000001c 	.word	0x2000001c

0800a530 <sbrk_aligned>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	4e0f      	ldr	r6, [pc, #60]	@ (800a570 <sbrk_aligned+0x40>)
 800a534:	460c      	mov	r4, r1
 800a536:	6831      	ldr	r1, [r6, #0]
 800a538:	4605      	mov	r5, r0
 800a53a:	b911      	cbnz	r1, 800a542 <sbrk_aligned+0x12>
 800a53c:	f000 fe2a 	bl	800b194 <_sbrk_r>
 800a540:	6030      	str	r0, [r6, #0]
 800a542:	4621      	mov	r1, r4
 800a544:	4628      	mov	r0, r5
 800a546:	f000 fe25 	bl	800b194 <_sbrk_r>
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	d103      	bne.n	800a556 <sbrk_aligned+0x26>
 800a54e:	f04f 34ff 	mov.w	r4, #4294967295
 800a552:	4620      	mov	r0, r4
 800a554:	bd70      	pop	{r4, r5, r6, pc}
 800a556:	1cc4      	adds	r4, r0, #3
 800a558:	f024 0403 	bic.w	r4, r4, #3
 800a55c:	42a0      	cmp	r0, r4
 800a55e:	d0f8      	beq.n	800a552 <sbrk_aligned+0x22>
 800a560:	1a21      	subs	r1, r4, r0
 800a562:	4628      	mov	r0, r5
 800a564:	f000 fe16 	bl	800b194 <_sbrk_r>
 800a568:	3001      	adds	r0, #1
 800a56a:	d1f2      	bne.n	800a552 <sbrk_aligned+0x22>
 800a56c:	e7ef      	b.n	800a54e <sbrk_aligned+0x1e>
 800a56e:	bf00      	nop
 800a570:	20001540 	.word	0x20001540

0800a574 <_malloc_r>:
 800a574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a578:	1ccd      	adds	r5, r1, #3
 800a57a:	f025 0503 	bic.w	r5, r5, #3
 800a57e:	3508      	adds	r5, #8
 800a580:	2d0c      	cmp	r5, #12
 800a582:	bf38      	it	cc
 800a584:	250c      	movcc	r5, #12
 800a586:	2d00      	cmp	r5, #0
 800a588:	4606      	mov	r6, r0
 800a58a:	db01      	blt.n	800a590 <_malloc_r+0x1c>
 800a58c:	42a9      	cmp	r1, r5
 800a58e:	d904      	bls.n	800a59a <_malloc_r+0x26>
 800a590:	230c      	movs	r3, #12
 800a592:	6033      	str	r3, [r6, #0]
 800a594:	2000      	movs	r0, #0
 800a596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a59a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a670 <_malloc_r+0xfc>
 800a59e:	f000 f869 	bl	800a674 <__malloc_lock>
 800a5a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a5a6:	461c      	mov	r4, r3
 800a5a8:	bb44      	cbnz	r4, 800a5fc <_malloc_r+0x88>
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	f7ff ffbf 	bl	800a530 <sbrk_aligned>
 800a5b2:	1c43      	adds	r3, r0, #1
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	d158      	bne.n	800a66a <_malloc_r+0xf6>
 800a5b8:	f8d8 4000 	ldr.w	r4, [r8]
 800a5bc:	4627      	mov	r7, r4
 800a5be:	2f00      	cmp	r7, #0
 800a5c0:	d143      	bne.n	800a64a <_malloc_r+0xd6>
 800a5c2:	2c00      	cmp	r4, #0
 800a5c4:	d04b      	beq.n	800a65e <_malloc_r+0xea>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	4639      	mov	r1, r7
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	eb04 0903 	add.w	r9, r4, r3
 800a5d0:	f000 fde0 	bl	800b194 <_sbrk_r>
 800a5d4:	4581      	cmp	r9, r0
 800a5d6:	d142      	bne.n	800a65e <_malloc_r+0xea>
 800a5d8:	6821      	ldr	r1, [r4, #0]
 800a5da:	1a6d      	subs	r5, r5, r1
 800a5dc:	4629      	mov	r1, r5
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f7ff ffa6 	bl	800a530 <sbrk_aligned>
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d03a      	beq.n	800a65e <_malloc_r+0xea>
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	442b      	add	r3, r5
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	bb62      	cbnz	r2, 800a650 <_malloc_r+0xdc>
 800a5f6:	f8c8 7000 	str.w	r7, [r8]
 800a5fa:	e00f      	b.n	800a61c <_malloc_r+0xa8>
 800a5fc:	6822      	ldr	r2, [r4, #0]
 800a5fe:	1b52      	subs	r2, r2, r5
 800a600:	d420      	bmi.n	800a644 <_malloc_r+0xd0>
 800a602:	2a0b      	cmp	r2, #11
 800a604:	d917      	bls.n	800a636 <_malloc_r+0xc2>
 800a606:	1961      	adds	r1, r4, r5
 800a608:	42a3      	cmp	r3, r4
 800a60a:	6025      	str	r5, [r4, #0]
 800a60c:	bf18      	it	ne
 800a60e:	6059      	strne	r1, [r3, #4]
 800a610:	6863      	ldr	r3, [r4, #4]
 800a612:	bf08      	it	eq
 800a614:	f8c8 1000 	streq.w	r1, [r8]
 800a618:	5162      	str	r2, [r4, r5]
 800a61a:	604b      	str	r3, [r1, #4]
 800a61c:	4630      	mov	r0, r6
 800a61e:	f000 f82f 	bl	800a680 <__malloc_unlock>
 800a622:	f104 000b 	add.w	r0, r4, #11
 800a626:	1d23      	adds	r3, r4, #4
 800a628:	f020 0007 	bic.w	r0, r0, #7
 800a62c:	1ac2      	subs	r2, r0, r3
 800a62e:	bf1c      	itt	ne
 800a630:	1a1b      	subne	r3, r3, r0
 800a632:	50a3      	strne	r3, [r4, r2]
 800a634:	e7af      	b.n	800a596 <_malloc_r+0x22>
 800a636:	6862      	ldr	r2, [r4, #4]
 800a638:	42a3      	cmp	r3, r4
 800a63a:	bf0c      	ite	eq
 800a63c:	f8c8 2000 	streq.w	r2, [r8]
 800a640:	605a      	strne	r2, [r3, #4]
 800a642:	e7eb      	b.n	800a61c <_malloc_r+0xa8>
 800a644:	4623      	mov	r3, r4
 800a646:	6864      	ldr	r4, [r4, #4]
 800a648:	e7ae      	b.n	800a5a8 <_malloc_r+0x34>
 800a64a:	463c      	mov	r4, r7
 800a64c:	687f      	ldr	r7, [r7, #4]
 800a64e:	e7b6      	b.n	800a5be <_malloc_r+0x4a>
 800a650:	461a      	mov	r2, r3
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	42a3      	cmp	r3, r4
 800a656:	d1fb      	bne.n	800a650 <_malloc_r+0xdc>
 800a658:	2300      	movs	r3, #0
 800a65a:	6053      	str	r3, [r2, #4]
 800a65c:	e7de      	b.n	800a61c <_malloc_r+0xa8>
 800a65e:	230c      	movs	r3, #12
 800a660:	6033      	str	r3, [r6, #0]
 800a662:	4630      	mov	r0, r6
 800a664:	f000 f80c 	bl	800a680 <__malloc_unlock>
 800a668:	e794      	b.n	800a594 <_malloc_r+0x20>
 800a66a:	6005      	str	r5, [r0, #0]
 800a66c:	e7d6      	b.n	800a61c <_malloc_r+0xa8>
 800a66e:	bf00      	nop
 800a670:	20001544 	.word	0x20001544

0800a674 <__malloc_lock>:
 800a674:	4801      	ldr	r0, [pc, #4]	@ (800a67c <__malloc_lock+0x8>)
 800a676:	f7ff beda 	b.w	800a42e <__retarget_lock_acquire_recursive>
 800a67a:	bf00      	nop
 800a67c:	2000153c 	.word	0x2000153c

0800a680 <__malloc_unlock>:
 800a680:	4801      	ldr	r0, [pc, #4]	@ (800a688 <__malloc_unlock+0x8>)
 800a682:	f7ff bed5 	b.w	800a430 <__retarget_lock_release_recursive>
 800a686:	bf00      	nop
 800a688:	2000153c 	.word	0x2000153c

0800a68c <__ssputs_r>:
 800a68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a690:	688e      	ldr	r6, [r1, #8]
 800a692:	461f      	mov	r7, r3
 800a694:	42be      	cmp	r6, r7
 800a696:	680b      	ldr	r3, [r1, #0]
 800a698:	4682      	mov	sl, r0
 800a69a:	460c      	mov	r4, r1
 800a69c:	4690      	mov	r8, r2
 800a69e:	d82d      	bhi.n	800a6fc <__ssputs_r+0x70>
 800a6a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a6a8:	d026      	beq.n	800a6f8 <__ssputs_r+0x6c>
 800a6aa:	6965      	ldr	r5, [r4, #20]
 800a6ac:	6909      	ldr	r1, [r1, #16]
 800a6ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6b2:	eba3 0901 	sub.w	r9, r3, r1
 800a6b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6ba:	1c7b      	adds	r3, r7, #1
 800a6bc:	444b      	add	r3, r9
 800a6be:	106d      	asrs	r5, r5, #1
 800a6c0:	429d      	cmp	r5, r3
 800a6c2:	bf38      	it	cc
 800a6c4:	461d      	movcc	r5, r3
 800a6c6:	0553      	lsls	r3, r2, #21
 800a6c8:	d527      	bpl.n	800a71a <__ssputs_r+0x8e>
 800a6ca:	4629      	mov	r1, r5
 800a6cc:	f7ff ff52 	bl	800a574 <_malloc_r>
 800a6d0:	4606      	mov	r6, r0
 800a6d2:	b360      	cbz	r0, 800a72e <__ssputs_r+0xa2>
 800a6d4:	6921      	ldr	r1, [r4, #16]
 800a6d6:	464a      	mov	r2, r9
 800a6d8:	f7ff feab 	bl	800a432 <memcpy>
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a6e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6e6:	81a3      	strh	r3, [r4, #12]
 800a6e8:	6126      	str	r6, [r4, #16]
 800a6ea:	6165      	str	r5, [r4, #20]
 800a6ec:	444e      	add	r6, r9
 800a6ee:	eba5 0509 	sub.w	r5, r5, r9
 800a6f2:	6026      	str	r6, [r4, #0]
 800a6f4:	60a5      	str	r5, [r4, #8]
 800a6f6:	463e      	mov	r6, r7
 800a6f8:	42be      	cmp	r6, r7
 800a6fa:	d900      	bls.n	800a6fe <__ssputs_r+0x72>
 800a6fc:	463e      	mov	r6, r7
 800a6fe:	6820      	ldr	r0, [r4, #0]
 800a700:	4632      	mov	r2, r6
 800a702:	4641      	mov	r1, r8
 800a704:	f000 fd0a 	bl	800b11c <memmove>
 800a708:	68a3      	ldr	r3, [r4, #8]
 800a70a:	1b9b      	subs	r3, r3, r6
 800a70c:	60a3      	str	r3, [r4, #8]
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	4433      	add	r3, r6
 800a712:	6023      	str	r3, [r4, #0]
 800a714:	2000      	movs	r0, #0
 800a716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a71a:	462a      	mov	r2, r5
 800a71c:	f000 fd51 	bl	800b1c2 <_realloc_r>
 800a720:	4606      	mov	r6, r0
 800a722:	2800      	cmp	r0, #0
 800a724:	d1e0      	bne.n	800a6e8 <__ssputs_r+0x5c>
 800a726:	6921      	ldr	r1, [r4, #16]
 800a728:	4650      	mov	r0, sl
 800a72a:	f7ff feaf 	bl	800a48c <_free_r>
 800a72e:	230c      	movs	r3, #12
 800a730:	f8ca 3000 	str.w	r3, [sl]
 800a734:	89a3      	ldrh	r3, [r4, #12]
 800a736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a73a:	81a3      	strh	r3, [r4, #12]
 800a73c:	f04f 30ff 	mov.w	r0, #4294967295
 800a740:	e7e9      	b.n	800a716 <__ssputs_r+0x8a>
	...

0800a744 <_svfiprintf_r>:
 800a744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a748:	4698      	mov	r8, r3
 800a74a:	898b      	ldrh	r3, [r1, #12]
 800a74c:	061b      	lsls	r3, r3, #24
 800a74e:	b09d      	sub	sp, #116	@ 0x74
 800a750:	4607      	mov	r7, r0
 800a752:	460d      	mov	r5, r1
 800a754:	4614      	mov	r4, r2
 800a756:	d510      	bpl.n	800a77a <_svfiprintf_r+0x36>
 800a758:	690b      	ldr	r3, [r1, #16]
 800a75a:	b973      	cbnz	r3, 800a77a <_svfiprintf_r+0x36>
 800a75c:	2140      	movs	r1, #64	@ 0x40
 800a75e:	f7ff ff09 	bl	800a574 <_malloc_r>
 800a762:	6028      	str	r0, [r5, #0]
 800a764:	6128      	str	r0, [r5, #16]
 800a766:	b930      	cbnz	r0, 800a776 <_svfiprintf_r+0x32>
 800a768:	230c      	movs	r3, #12
 800a76a:	603b      	str	r3, [r7, #0]
 800a76c:	f04f 30ff 	mov.w	r0, #4294967295
 800a770:	b01d      	add	sp, #116	@ 0x74
 800a772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a776:	2340      	movs	r3, #64	@ 0x40
 800a778:	616b      	str	r3, [r5, #20]
 800a77a:	2300      	movs	r3, #0
 800a77c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a77e:	2320      	movs	r3, #32
 800a780:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a784:	f8cd 800c 	str.w	r8, [sp, #12]
 800a788:	2330      	movs	r3, #48	@ 0x30
 800a78a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a928 <_svfiprintf_r+0x1e4>
 800a78e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a792:	f04f 0901 	mov.w	r9, #1
 800a796:	4623      	mov	r3, r4
 800a798:	469a      	mov	sl, r3
 800a79a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a79e:	b10a      	cbz	r2, 800a7a4 <_svfiprintf_r+0x60>
 800a7a0:	2a25      	cmp	r2, #37	@ 0x25
 800a7a2:	d1f9      	bne.n	800a798 <_svfiprintf_r+0x54>
 800a7a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a7a8:	d00b      	beq.n	800a7c2 <_svfiprintf_r+0x7e>
 800a7aa:	465b      	mov	r3, fp
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	4629      	mov	r1, r5
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	f7ff ff6b 	bl	800a68c <__ssputs_r>
 800a7b6:	3001      	adds	r0, #1
 800a7b8:	f000 80a7 	beq.w	800a90a <_svfiprintf_r+0x1c6>
 800a7bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7be:	445a      	add	r2, fp
 800a7c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f000 809f 	beq.w	800a90a <_svfiprintf_r+0x1c6>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7d6:	f10a 0a01 	add.w	sl, sl, #1
 800a7da:	9304      	str	r3, [sp, #16]
 800a7dc:	9307      	str	r3, [sp, #28]
 800a7de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7e4:	4654      	mov	r4, sl
 800a7e6:	2205      	movs	r2, #5
 800a7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ec:	484e      	ldr	r0, [pc, #312]	@ (800a928 <_svfiprintf_r+0x1e4>)
 800a7ee:	f7f5 fcff 	bl	80001f0 <memchr>
 800a7f2:	9a04      	ldr	r2, [sp, #16]
 800a7f4:	b9d8      	cbnz	r0, 800a82e <_svfiprintf_r+0xea>
 800a7f6:	06d0      	lsls	r0, r2, #27
 800a7f8:	bf44      	itt	mi
 800a7fa:	2320      	movmi	r3, #32
 800a7fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a800:	0711      	lsls	r1, r2, #28
 800a802:	bf44      	itt	mi
 800a804:	232b      	movmi	r3, #43	@ 0x2b
 800a806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a80a:	f89a 3000 	ldrb.w	r3, [sl]
 800a80e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a810:	d015      	beq.n	800a83e <_svfiprintf_r+0xfa>
 800a812:	9a07      	ldr	r2, [sp, #28]
 800a814:	4654      	mov	r4, sl
 800a816:	2000      	movs	r0, #0
 800a818:	f04f 0c0a 	mov.w	ip, #10
 800a81c:	4621      	mov	r1, r4
 800a81e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a822:	3b30      	subs	r3, #48	@ 0x30
 800a824:	2b09      	cmp	r3, #9
 800a826:	d94b      	bls.n	800a8c0 <_svfiprintf_r+0x17c>
 800a828:	b1b0      	cbz	r0, 800a858 <_svfiprintf_r+0x114>
 800a82a:	9207      	str	r2, [sp, #28]
 800a82c:	e014      	b.n	800a858 <_svfiprintf_r+0x114>
 800a82e:	eba0 0308 	sub.w	r3, r0, r8
 800a832:	fa09 f303 	lsl.w	r3, r9, r3
 800a836:	4313      	orrs	r3, r2
 800a838:	9304      	str	r3, [sp, #16]
 800a83a:	46a2      	mov	sl, r4
 800a83c:	e7d2      	b.n	800a7e4 <_svfiprintf_r+0xa0>
 800a83e:	9b03      	ldr	r3, [sp, #12]
 800a840:	1d19      	adds	r1, r3, #4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	9103      	str	r1, [sp, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	bfbb      	ittet	lt
 800a84a:	425b      	neglt	r3, r3
 800a84c:	f042 0202 	orrlt.w	r2, r2, #2
 800a850:	9307      	strge	r3, [sp, #28]
 800a852:	9307      	strlt	r3, [sp, #28]
 800a854:	bfb8      	it	lt
 800a856:	9204      	strlt	r2, [sp, #16]
 800a858:	7823      	ldrb	r3, [r4, #0]
 800a85a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a85c:	d10a      	bne.n	800a874 <_svfiprintf_r+0x130>
 800a85e:	7863      	ldrb	r3, [r4, #1]
 800a860:	2b2a      	cmp	r3, #42	@ 0x2a
 800a862:	d132      	bne.n	800a8ca <_svfiprintf_r+0x186>
 800a864:	9b03      	ldr	r3, [sp, #12]
 800a866:	1d1a      	adds	r2, r3, #4
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	9203      	str	r2, [sp, #12]
 800a86c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a870:	3402      	adds	r4, #2
 800a872:	9305      	str	r3, [sp, #20]
 800a874:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a938 <_svfiprintf_r+0x1f4>
 800a878:	7821      	ldrb	r1, [r4, #0]
 800a87a:	2203      	movs	r2, #3
 800a87c:	4650      	mov	r0, sl
 800a87e:	f7f5 fcb7 	bl	80001f0 <memchr>
 800a882:	b138      	cbz	r0, 800a894 <_svfiprintf_r+0x150>
 800a884:	9b04      	ldr	r3, [sp, #16]
 800a886:	eba0 000a 	sub.w	r0, r0, sl
 800a88a:	2240      	movs	r2, #64	@ 0x40
 800a88c:	4082      	lsls	r2, r0
 800a88e:	4313      	orrs	r3, r2
 800a890:	3401      	adds	r4, #1
 800a892:	9304      	str	r3, [sp, #16]
 800a894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a898:	4824      	ldr	r0, [pc, #144]	@ (800a92c <_svfiprintf_r+0x1e8>)
 800a89a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a89e:	2206      	movs	r2, #6
 800a8a0:	f7f5 fca6 	bl	80001f0 <memchr>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d036      	beq.n	800a916 <_svfiprintf_r+0x1d2>
 800a8a8:	4b21      	ldr	r3, [pc, #132]	@ (800a930 <_svfiprintf_r+0x1ec>)
 800a8aa:	bb1b      	cbnz	r3, 800a8f4 <_svfiprintf_r+0x1b0>
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	3307      	adds	r3, #7
 800a8b0:	f023 0307 	bic.w	r3, r3, #7
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	9303      	str	r3, [sp, #12]
 800a8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ba:	4433      	add	r3, r6
 800a8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8be:	e76a      	b.n	800a796 <_svfiprintf_r+0x52>
 800a8c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8c4:	460c      	mov	r4, r1
 800a8c6:	2001      	movs	r0, #1
 800a8c8:	e7a8      	b.n	800a81c <_svfiprintf_r+0xd8>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	3401      	adds	r4, #1
 800a8ce:	9305      	str	r3, [sp, #20]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f04f 0c0a 	mov.w	ip, #10
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8dc:	3a30      	subs	r2, #48	@ 0x30
 800a8de:	2a09      	cmp	r2, #9
 800a8e0:	d903      	bls.n	800a8ea <_svfiprintf_r+0x1a6>
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0c6      	beq.n	800a874 <_svfiprintf_r+0x130>
 800a8e6:	9105      	str	r1, [sp, #20]
 800a8e8:	e7c4      	b.n	800a874 <_svfiprintf_r+0x130>
 800a8ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e7f0      	b.n	800a8d6 <_svfiprintf_r+0x192>
 800a8f4:	ab03      	add	r3, sp, #12
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	462a      	mov	r2, r5
 800a8fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a934 <_svfiprintf_r+0x1f0>)
 800a8fc:	a904      	add	r1, sp, #16
 800a8fe:	4638      	mov	r0, r7
 800a900:	f3af 8000 	nop.w
 800a904:	1c42      	adds	r2, r0, #1
 800a906:	4606      	mov	r6, r0
 800a908:	d1d6      	bne.n	800a8b8 <_svfiprintf_r+0x174>
 800a90a:	89ab      	ldrh	r3, [r5, #12]
 800a90c:	065b      	lsls	r3, r3, #25
 800a90e:	f53f af2d 	bmi.w	800a76c <_svfiprintf_r+0x28>
 800a912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a914:	e72c      	b.n	800a770 <_svfiprintf_r+0x2c>
 800a916:	ab03      	add	r3, sp, #12
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	462a      	mov	r2, r5
 800a91c:	4b05      	ldr	r3, [pc, #20]	@ (800a934 <_svfiprintf_r+0x1f0>)
 800a91e:	a904      	add	r1, sp, #16
 800a920:	4638      	mov	r0, r7
 800a922:	f000 f9bb 	bl	800ac9c <_printf_i>
 800a926:	e7ed      	b.n	800a904 <_svfiprintf_r+0x1c0>
 800a928:	0800b5e1 	.word	0x0800b5e1
 800a92c:	0800b5eb 	.word	0x0800b5eb
 800a930:	00000000 	.word	0x00000000
 800a934:	0800a68d 	.word	0x0800a68d
 800a938:	0800b5e7 	.word	0x0800b5e7

0800a93c <__sfputc_r>:
 800a93c:	6893      	ldr	r3, [r2, #8]
 800a93e:	3b01      	subs	r3, #1
 800a940:	2b00      	cmp	r3, #0
 800a942:	b410      	push	{r4}
 800a944:	6093      	str	r3, [r2, #8]
 800a946:	da08      	bge.n	800a95a <__sfputc_r+0x1e>
 800a948:	6994      	ldr	r4, [r2, #24]
 800a94a:	42a3      	cmp	r3, r4
 800a94c:	db01      	blt.n	800a952 <__sfputc_r+0x16>
 800a94e:	290a      	cmp	r1, #10
 800a950:	d103      	bne.n	800a95a <__sfputc_r+0x1e>
 800a952:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a956:	f7ff bc00 	b.w	800a15a <__swbuf_r>
 800a95a:	6813      	ldr	r3, [r2, #0]
 800a95c:	1c58      	adds	r0, r3, #1
 800a95e:	6010      	str	r0, [r2, #0]
 800a960:	7019      	strb	r1, [r3, #0]
 800a962:	4608      	mov	r0, r1
 800a964:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <__sfputs_r>:
 800a96a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96c:	4606      	mov	r6, r0
 800a96e:	460f      	mov	r7, r1
 800a970:	4614      	mov	r4, r2
 800a972:	18d5      	adds	r5, r2, r3
 800a974:	42ac      	cmp	r4, r5
 800a976:	d101      	bne.n	800a97c <__sfputs_r+0x12>
 800a978:	2000      	movs	r0, #0
 800a97a:	e007      	b.n	800a98c <__sfputs_r+0x22>
 800a97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a980:	463a      	mov	r2, r7
 800a982:	4630      	mov	r0, r6
 800a984:	f7ff ffda 	bl	800a93c <__sfputc_r>
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d1f3      	bne.n	800a974 <__sfputs_r+0xa>
 800a98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a990 <_vfiprintf_r>:
 800a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a994:	460d      	mov	r5, r1
 800a996:	b09d      	sub	sp, #116	@ 0x74
 800a998:	4614      	mov	r4, r2
 800a99a:	4698      	mov	r8, r3
 800a99c:	4606      	mov	r6, r0
 800a99e:	b118      	cbz	r0, 800a9a8 <_vfiprintf_r+0x18>
 800a9a0:	6a03      	ldr	r3, [r0, #32]
 800a9a2:	b90b      	cbnz	r3, 800a9a8 <_vfiprintf_r+0x18>
 800a9a4:	f7ff fabc 	bl	8009f20 <__sinit>
 800a9a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9aa:	07d9      	lsls	r1, r3, #31
 800a9ac:	d405      	bmi.n	800a9ba <_vfiprintf_r+0x2a>
 800a9ae:	89ab      	ldrh	r3, [r5, #12]
 800a9b0:	059a      	lsls	r2, r3, #22
 800a9b2:	d402      	bmi.n	800a9ba <_vfiprintf_r+0x2a>
 800a9b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9b6:	f7ff fd3a 	bl	800a42e <__retarget_lock_acquire_recursive>
 800a9ba:	89ab      	ldrh	r3, [r5, #12]
 800a9bc:	071b      	lsls	r3, r3, #28
 800a9be:	d501      	bpl.n	800a9c4 <_vfiprintf_r+0x34>
 800a9c0:	692b      	ldr	r3, [r5, #16]
 800a9c2:	b99b      	cbnz	r3, 800a9ec <_vfiprintf_r+0x5c>
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f7ff fc06 	bl	800a1d8 <__swsetup_r>
 800a9cc:	b170      	cbz	r0, 800a9ec <_vfiprintf_r+0x5c>
 800a9ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9d0:	07dc      	lsls	r4, r3, #31
 800a9d2:	d504      	bpl.n	800a9de <_vfiprintf_r+0x4e>
 800a9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d8:	b01d      	add	sp, #116	@ 0x74
 800a9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9de:	89ab      	ldrh	r3, [r5, #12]
 800a9e0:	0598      	lsls	r0, r3, #22
 800a9e2:	d4f7      	bmi.n	800a9d4 <_vfiprintf_r+0x44>
 800a9e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9e6:	f7ff fd23 	bl	800a430 <__retarget_lock_release_recursive>
 800a9ea:	e7f3      	b.n	800a9d4 <_vfiprintf_r+0x44>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9f0:	2320      	movs	r3, #32
 800a9f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9fa:	2330      	movs	r3, #48	@ 0x30
 800a9fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800abac <_vfiprintf_r+0x21c>
 800aa00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa04:	f04f 0901 	mov.w	r9, #1
 800aa08:	4623      	mov	r3, r4
 800aa0a:	469a      	mov	sl, r3
 800aa0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa10:	b10a      	cbz	r2, 800aa16 <_vfiprintf_r+0x86>
 800aa12:	2a25      	cmp	r2, #37	@ 0x25
 800aa14:	d1f9      	bne.n	800aa0a <_vfiprintf_r+0x7a>
 800aa16:	ebba 0b04 	subs.w	fp, sl, r4
 800aa1a:	d00b      	beq.n	800aa34 <_vfiprintf_r+0xa4>
 800aa1c:	465b      	mov	r3, fp
 800aa1e:	4622      	mov	r2, r4
 800aa20:	4629      	mov	r1, r5
 800aa22:	4630      	mov	r0, r6
 800aa24:	f7ff ffa1 	bl	800a96a <__sfputs_r>
 800aa28:	3001      	adds	r0, #1
 800aa2a:	f000 80a7 	beq.w	800ab7c <_vfiprintf_r+0x1ec>
 800aa2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa30:	445a      	add	r2, fp
 800aa32:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa34:	f89a 3000 	ldrb.w	r3, [sl]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f000 809f 	beq.w	800ab7c <_vfiprintf_r+0x1ec>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f04f 32ff 	mov.w	r2, #4294967295
 800aa44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa48:	f10a 0a01 	add.w	sl, sl, #1
 800aa4c:	9304      	str	r3, [sp, #16]
 800aa4e:	9307      	str	r3, [sp, #28]
 800aa50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa54:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa56:	4654      	mov	r4, sl
 800aa58:	2205      	movs	r2, #5
 800aa5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa5e:	4853      	ldr	r0, [pc, #332]	@ (800abac <_vfiprintf_r+0x21c>)
 800aa60:	f7f5 fbc6 	bl	80001f0 <memchr>
 800aa64:	9a04      	ldr	r2, [sp, #16]
 800aa66:	b9d8      	cbnz	r0, 800aaa0 <_vfiprintf_r+0x110>
 800aa68:	06d1      	lsls	r1, r2, #27
 800aa6a:	bf44      	itt	mi
 800aa6c:	2320      	movmi	r3, #32
 800aa6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa72:	0713      	lsls	r3, r2, #28
 800aa74:	bf44      	itt	mi
 800aa76:	232b      	movmi	r3, #43	@ 0x2b
 800aa78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa7c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa80:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa82:	d015      	beq.n	800aab0 <_vfiprintf_r+0x120>
 800aa84:	9a07      	ldr	r2, [sp, #28]
 800aa86:	4654      	mov	r4, sl
 800aa88:	2000      	movs	r0, #0
 800aa8a:	f04f 0c0a 	mov.w	ip, #10
 800aa8e:	4621      	mov	r1, r4
 800aa90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa94:	3b30      	subs	r3, #48	@ 0x30
 800aa96:	2b09      	cmp	r3, #9
 800aa98:	d94b      	bls.n	800ab32 <_vfiprintf_r+0x1a2>
 800aa9a:	b1b0      	cbz	r0, 800aaca <_vfiprintf_r+0x13a>
 800aa9c:	9207      	str	r2, [sp, #28]
 800aa9e:	e014      	b.n	800aaca <_vfiprintf_r+0x13a>
 800aaa0:	eba0 0308 	sub.w	r3, r0, r8
 800aaa4:	fa09 f303 	lsl.w	r3, r9, r3
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	9304      	str	r3, [sp, #16]
 800aaac:	46a2      	mov	sl, r4
 800aaae:	e7d2      	b.n	800aa56 <_vfiprintf_r+0xc6>
 800aab0:	9b03      	ldr	r3, [sp, #12]
 800aab2:	1d19      	adds	r1, r3, #4
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	9103      	str	r1, [sp, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	bfbb      	ittet	lt
 800aabc:	425b      	neglt	r3, r3
 800aabe:	f042 0202 	orrlt.w	r2, r2, #2
 800aac2:	9307      	strge	r3, [sp, #28]
 800aac4:	9307      	strlt	r3, [sp, #28]
 800aac6:	bfb8      	it	lt
 800aac8:	9204      	strlt	r2, [sp, #16]
 800aaca:	7823      	ldrb	r3, [r4, #0]
 800aacc:	2b2e      	cmp	r3, #46	@ 0x2e
 800aace:	d10a      	bne.n	800aae6 <_vfiprintf_r+0x156>
 800aad0:	7863      	ldrb	r3, [r4, #1]
 800aad2:	2b2a      	cmp	r3, #42	@ 0x2a
 800aad4:	d132      	bne.n	800ab3c <_vfiprintf_r+0x1ac>
 800aad6:	9b03      	ldr	r3, [sp, #12]
 800aad8:	1d1a      	adds	r2, r3, #4
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	9203      	str	r2, [sp, #12]
 800aade:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aae2:	3402      	adds	r4, #2
 800aae4:	9305      	str	r3, [sp, #20]
 800aae6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abbc <_vfiprintf_r+0x22c>
 800aaea:	7821      	ldrb	r1, [r4, #0]
 800aaec:	2203      	movs	r2, #3
 800aaee:	4650      	mov	r0, sl
 800aaf0:	f7f5 fb7e 	bl	80001f0 <memchr>
 800aaf4:	b138      	cbz	r0, 800ab06 <_vfiprintf_r+0x176>
 800aaf6:	9b04      	ldr	r3, [sp, #16]
 800aaf8:	eba0 000a 	sub.w	r0, r0, sl
 800aafc:	2240      	movs	r2, #64	@ 0x40
 800aafe:	4082      	lsls	r2, r0
 800ab00:	4313      	orrs	r3, r2
 800ab02:	3401      	adds	r4, #1
 800ab04:	9304      	str	r3, [sp, #16]
 800ab06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab0a:	4829      	ldr	r0, [pc, #164]	@ (800abb0 <_vfiprintf_r+0x220>)
 800ab0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab10:	2206      	movs	r2, #6
 800ab12:	f7f5 fb6d 	bl	80001f0 <memchr>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d03f      	beq.n	800ab9a <_vfiprintf_r+0x20a>
 800ab1a:	4b26      	ldr	r3, [pc, #152]	@ (800abb4 <_vfiprintf_r+0x224>)
 800ab1c:	bb1b      	cbnz	r3, 800ab66 <_vfiprintf_r+0x1d6>
 800ab1e:	9b03      	ldr	r3, [sp, #12]
 800ab20:	3307      	adds	r3, #7
 800ab22:	f023 0307 	bic.w	r3, r3, #7
 800ab26:	3308      	adds	r3, #8
 800ab28:	9303      	str	r3, [sp, #12]
 800ab2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab2c:	443b      	add	r3, r7
 800ab2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab30:	e76a      	b.n	800aa08 <_vfiprintf_r+0x78>
 800ab32:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab36:	460c      	mov	r4, r1
 800ab38:	2001      	movs	r0, #1
 800ab3a:	e7a8      	b.n	800aa8e <_vfiprintf_r+0xfe>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	3401      	adds	r4, #1
 800ab40:	9305      	str	r3, [sp, #20]
 800ab42:	4619      	mov	r1, r3
 800ab44:	f04f 0c0a 	mov.w	ip, #10
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab4e:	3a30      	subs	r2, #48	@ 0x30
 800ab50:	2a09      	cmp	r2, #9
 800ab52:	d903      	bls.n	800ab5c <_vfiprintf_r+0x1cc>
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d0c6      	beq.n	800aae6 <_vfiprintf_r+0x156>
 800ab58:	9105      	str	r1, [sp, #20]
 800ab5a:	e7c4      	b.n	800aae6 <_vfiprintf_r+0x156>
 800ab5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab60:	4604      	mov	r4, r0
 800ab62:	2301      	movs	r3, #1
 800ab64:	e7f0      	b.n	800ab48 <_vfiprintf_r+0x1b8>
 800ab66:	ab03      	add	r3, sp, #12
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	462a      	mov	r2, r5
 800ab6c:	4b12      	ldr	r3, [pc, #72]	@ (800abb8 <_vfiprintf_r+0x228>)
 800ab6e:	a904      	add	r1, sp, #16
 800ab70:	4630      	mov	r0, r6
 800ab72:	f3af 8000 	nop.w
 800ab76:	4607      	mov	r7, r0
 800ab78:	1c78      	adds	r0, r7, #1
 800ab7a:	d1d6      	bne.n	800ab2a <_vfiprintf_r+0x19a>
 800ab7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab7e:	07d9      	lsls	r1, r3, #31
 800ab80:	d405      	bmi.n	800ab8e <_vfiprintf_r+0x1fe>
 800ab82:	89ab      	ldrh	r3, [r5, #12]
 800ab84:	059a      	lsls	r2, r3, #22
 800ab86:	d402      	bmi.n	800ab8e <_vfiprintf_r+0x1fe>
 800ab88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab8a:	f7ff fc51 	bl	800a430 <__retarget_lock_release_recursive>
 800ab8e:	89ab      	ldrh	r3, [r5, #12]
 800ab90:	065b      	lsls	r3, r3, #25
 800ab92:	f53f af1f 	bmi.w	800a9d4 <_vfiprintf_r+0x44>
 800ab96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab98:	e71e      	b.n	800a9d8 <_vfiprintf_r+0x48>
 800ab9a:	ab03      	add	r3, sp, #12
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	462a      	mov	r2, r5
 800aba0:	4b05      	ldr	r3, [pc, #20]	@ (800abb8 <_vfiprintf_r+0x228>)
 800aba2:	a904      	add	r1, sp, #16
 800aba4:	4630      	mov	r0, r6
 800aba6:	f000 f879 	bl	800ac9c <_printf_i>
 800abaa:	e7e4      	b.n	800ab76 <_vfiprintf_r+0x1e6>
 800abac:	0800b5e1 	.word	0x0800b5e1
 800abb0:	0800b5eb 	.word	0x0800b5eb
 800abb4:	00000000 	.word	0x00000000
 800abb8:	0800a96b 	.word	0x0800a96b
 800abbc:	0800b5e7 	.word	0x0800b5e7

0800abc0 <_printf_common>:
 800abc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc4:	4616      	mov	r6, r2
 800abc6:	4698      	mov	r8, r3
 800abc8:	688a      	ldr	r2, [r1, #8]
 800abca:	690b      	ldr	r3, [r1, #16]
 800abcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abd0:	4293      	cmp	r3, r2
 800abd2:	bfb8      	it	lt
 800abd4:	4613      	movlt	r3, r2
 800abd6:	6033      	str	r3, [r6, #0]
 800abd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abdc:	4607      	mov	r7, r0
 800abde:	460c      	mov	r4, r1
 800abe0:	b10a      	cbz	r2, 800abe6 <_printf_common+0x26>
 800abe2:	3301      	adds	r3, #1
 800abe4:	6033      	str	r3, [r6, #0]
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	0699      	lsls	r1, r3, #26
 800abea:	bf42      	ittt	mi
 800abec:	6833      	ldrmi	r3, [r6, #0]
 800abee:	3302      	addmi	r3, #2
 800abf0:	6033      	strmi	r3, [r6, #0]
 800abf2:	6825      	ldr	r5, [r4, #0]
 800abf4:	f015 0506 	ands.w	r5, r5, #6
 800abf8:	d106      	bne.n	800ac08 <_printf_common+0x48>
 800abfa:	f104 0a19 	add.w	sl, r4, #25
 800abfe:	68e3      	ldr	r3, [r4, #12]
 800ac00:	6832      	ldr	r2, [r6, #0]
 800ac02:	1a9b      	subs	r3, r3, r2
 800ac04:	42ab      	cmp	r3, r5
 800ac06:	dc26      	bgt.n	800ac56 <_printf_common+0x96>
 800ac08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac0c:	6822      	ldr	r2, [r4, #0]
 800ac0e:	3b00      	subs	r3, #0
 800ac10:	bf18      	it	ne
 800ac12:	2301      	movne	r3, #1
 800ac14:	0692      	lsls	r2, r2, #26
 800ac16:	d42b      	bmi.n	800ac70 <_printf_common+0xb0>
 800ac18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac1c:	4641      	mov	r1, r8
 800ac1e:	4638      	mov	r0, r7
 800ac20:	47c8      	blx	r9
 800ac22:	3001      	adds	r0, #1
 800ac24:	d01e      	beq.n	800ac64 <_printf_common+0xa4>
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	6922      	ldr	r2, [r4, #16]
 800ac2a:	f003 0306 	and.w	r3, r3, #6
 800ac2e:	2b04      	cmp	r3, #4
 800ac30:	bf02      	ittt	eq
 800ac32:	68e5      	ldreq	r5, [r4, #12]
 800ac34:	6833      	ldreq	r3, [r6, #0]
 800ac36:	1aed      	subeq	r5, r5, r3
 800ac38:	68a3      	ldr	r3, [r4, #8]
 800ac3a:	bf0c      	ite	eq
 800ac3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac40:	2500      	movne	r5, #0
 800ac42:	4293      	cmp	r3, r2
 800ac44:	bfc4      	itt	gt
 800ac46:	1a9b      	subgt	r3, r3, r2
 800ac48:	18ed      	addgt	r5, r5, r3
 800ac4a:	2600      	movs	r6, #0
 800ac4c:	341a      	adds	r4, #26
 800ac4e:	42b5      	cmp	r5, r6
 800ac50:	d11a      	bne.n	800ac88 <_printf_common+0xc8>
 800ac52:	2000      	movs	r0, #0
 800ac54:	e008      	b.n	800ac68 <_printf_common+0xa8>
 800ac56:	2301      	movs	r3, #1
 800ac58:	4652      	mov	r2, sl
 800ac5a:	4641      	mov	r1, r8
 800ac5c:	4638      	mov	r0, r7
 800ac5e:	47c8      	blx	r9
 800ac60:	3001      	adds	r0, #1
 800ac62:	d103      	bne.n	800ac6c <_printf_common+0xac>
 800ac64:	f04f 30ff 	mov.w	r0, #4294967295
 800ac68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6c:	3501      	adds	r5, #1
 800ac6e:	e7c6      	b.n	800abfe <_printf_common+0x3e>
 800ac70:	18e1      	adds	r1, r4, r3
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	2030      	movs	r0, #48	@ 0x30
 800ac76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac7a:	4422      	add	r2, r4
 800ac7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac84:	3302      	adds	r3, #2
 800ac86:	e7c7      	b.n	800ac18 <_printf_common+0x58>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	4622      	mov	r2, r4
 800ac8c:	4641      	mov	r1, r8
 800ac8e:	4638      	mov	r0, r7
 800ac90:	47c8      	blx	r9
 800ac92:	3001      	adds	r0, #1
 800ac94:	d0e6      	beq.n	800ac64 <_printf_common+0xa4>
 800ac96:	3601      	adds	r6, #1
 800ac98:	e7d9      	b.n	800ac4e <_printf_common+0x8e>
	...

0800ac9c <_printf_i>:
 800ac9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aca0:	7e0f      	ldrb	r7, [r1, #24]
 800aca2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aca4:	2f78      	cmp	r7, #120	@ 0x78
 800aca6:	4691      	mov	r9, r2
 800aca8:	4680      	mov	r8, r0
 800acaa:	460c      	mov	r4, r1
 800acac:	469a      	mov	sl, r3
 800acae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800acb2:	d807      	bhi.n	800acc4 <_printf_i+0x28>
 800acb4:	2f62      	cmp	r7, #98	@ 0x62
 800acb6:	d80a      	bhi.n	800acce <_printf_i+0x32>
 800acb8:	2f00      	cmp	r7, #0
 800acba:	f000 80d2 	beq.w	800ae62 <_printf_i+0x1c6>
 800acbe:	2f58      	cmp	r7, #88	@ 0x58
 800acc0:	f000 80b9 	beq.w	800ae36 <_printf_i+0x19a>
 800acc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800accc:	e03a      	b.n	800ad44 <_printf_i+0xa8>
 800acce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acd2:	2b15      	cmp	r3, #21
 800acd4:	d8f6      	bhi.n	800acc4 <_printf_i+0x28>
 800acd6:	a101      	add	r1, pc, #4	@ (adr r1, 800acdc <_printf_i+0x40>)
 800acd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acdc:	0800ad35 	.word	0x0800ad35
 800ace0:	0800ad49 	.word	0x0800ad49
 800ace4:	0800acc5 	.word	0x0800acc5
 800ace8:	0800acc5 	.word	0x0800acc5
 800acec:	0800acc5 	.word	0x0800acc5
 800acf0:	0800acc5 	.word	0x0800acc5
 800acf4:	0800ad49 	.word	0x0800ad49
 800acf8:	0800acc5 	.word	0x0800acc5
 800acfc:	0800acc5 	.word	0x0800acc5
 800ad00:	0800acc5 	.word	0x0800acc5
 800ad04:	0800acc5 	.word	0x0800acc5
 800ad08:	0800ae49 	.word	0x0800ae49
 800ad0c:	0800ad73 	.word	0x0800ad73
 800ad10:	0800ae03 	.word	0x0800ae03
 800ad14:	0800acc5 	.word	0x0800acc5
 800ad18:	0800acc5 	.word	0x0800acc5
 800ad1c:	0800ae6b 	.word	0x0800ae6b
 800ad20:	0800acc5 	.word	0x0800acc5
 800ad24:	0800ad73 	.word	0x0800ad73
 800ad28:	0800acc5 	.word	0x0800acc5
 800ad2c:	0800acc5 	.word	0x0800acc5
 800ad30:	0800ae0b 	.word	0x0800ae0b
 800ad34:	6833      	ldr	r3, [r6, #0]
 800ad36:	1d1a      	adds	r2, r3, #4
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	6032      	str	r2, [r6, #0]
 800ad3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad44:	2301      	movs	r3, #1
 800ad46:	e09d      	b.n	800ae84 <_printf_i+0x1e8>
 800ad48:	6833      	ldr	r3, [r6, #0]
 800ad4a:	6820      	ldr	r0, [r4, #0]
 800ad4c:	1d19      	adds	r1, r3, #4
 800ad4e:	6031      	str	r1, [r6, #0]
 800ad50:	0606      	lsls	r6, r0, #24
 800ad52:	d501      	bpl.n	800ad58 <_printf_i+0xbc>
 800ad54:	681d      	ldr	r5, [r3, #0]
 800ad56:	e003      	b.n	800ad60 <_printf_i+0xc4>
 800ad58:	0645      	lsls	r5, r0, #25
 800ad5a:	d5fb      	bpl.n	800ad54 <_printf_i+0xb8>
 800ad5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad60:	2d00      	cmp	r5, #0
 800ad62:	da03      	bge.n	800ad6c <_printf_i+0xd0>
 800ad64:	232d      	movs	r3, #45	@ 0x2d
 800ad66:	426d      	negs	r5, r5
 800ad68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad6c:	4859      	ldr	r0, [pc, #356]	@ (800aed4 <_printf_i+0x238>)
 800ad6e:	230a      	movs	r3, #10
 800ad70:	e011      	b.n	800ad96 <_printf_i+0xfa>
 800ad72:	6821      	ldr	r1, [r4, #0]
 800ad74:	6833      	ldr	r3, [r6, #0]
 800ad76:	0608      	lsls	r0, r1, #24
 800ad78:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad7c:	d402      	bmi.n	800ad84 <_printf_i+0xe8>
 800ad7e:	0649      	lsls	r1, r1, #25
 800ad80:	bf48      	it	mi
 800ad82:	b2ad      	uxthmi	r5, r5
 800ad84:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad86:	4853      	ldr	r0, [pc, #332]	@ (800aed4 <_printf_i+0x238>)
 800ad88:	6033      	str	r3, [r6, #0]
 800ad8a:	bf14      	ite	ne
 800ad8c:	230a      	movne	r3, #10
 800ad8e:	2308      	moveq	r3, #8
 800ad90:	2100      	movs	r1, #0
 800ad92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad96:	6866      	ldr	r6, [r4, #4]
 800ad98:	60a6      	str	r6, [r4, #8]
 800ad9a:	2e00      	cmp	r6, #0
 800ad9c:	bfa2      	ittt	ge
 800ad9e:	6821      	ldrge	r1, [r4, #0]
 800ada0:	f021 0104 	bicge.w	r1, r1, #4
 800ada4:	6021      	strge	r1, [r4, #0]
 800ada6:	b90d      	cbnz	r5, 800adac <_printf_i+0x110>
 800ada8:	2e00      	cmp	r6, #0
 800adaa:	d04b      	beq.n	800ae44 <_printf_i+0x1a8>
 800adac:	4616      	mov	r6, r2
 800adae:	fbb5 f1f3 	udiv	r1, r5, r3
 800adb2:	fb03 5711 	mls	r7, r3, r1, r5
 800adb6:	5dc7      	ldrb	r7, [r0, r7]
 800adb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800adbc:	462f      	mov	r7, r5
 800adbe:	42bb      	cmp	r3, r7
 800adc0:	460d      	mov	r5, r1
 800adc2:	d9f4      	bls.n	800adae <_printf_i+0x112>
 800adc4:	2b08      	cmp	r3, #8
 800adc6:	d10b      	bne.n	800ade0 <_printf_i+0x144>
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	07df      	lsls	r7, r3, #31
 800adcc:	d508      	bpl.n	800ade0 <_printf_i+0x144>
 800adce:	6923      	ldr	r3, [r4, #16]
 800add0:	6861      	ldr	r1, [r4, #4]
 800add2:	4299      	cmp	r1, r3
 800add4:	bfde      	ittt	le
 800add6:	2330      	movle	r3, #48	@ 0x30
 800add8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800addc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ade0:	1b92      	subs	r2, r2, r6
 800ade2:	6122      	str	r2, [r4, #16]
 800ade4:	f8cd a000 	str.w	sl, [sp]
 800ade8:	464b      	mov	r3, r9
 800adea:	aa03      	add	r2, sp, #12
 800adec:	4621      	mov	r1, r4
 800adee:	4640      	mov	r0, r8
 800adf0:	f7ff fee6 	bl	800abc0 <_printf_common>
 800adf4:	3001      	adds	r0, #1
 800adf6:	d14a      	bne.n	800ae8e <_printf_i+0x1f2>
 800adf8:	f04f 30ff 	mov.w	r0, #4294967295
 800adfc:	b004      	add	sp, #16
 800adfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae02:	6823      	ldr	r3, [r4, #0]
 800ae04:	f043 0320 	orr.w	r3, r3, #32
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	4833      	ldr	r0, [pc, #204]	@ (800aed8 <_printf_i+0x23c>)
 800ae0c:	2778      	movs	r7, #120	@ 0x78
 800ae0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	6831      	ldr	r1, [r6, #0]
 800ae16:	061f      	lsls	r7, r3, #24
 800ae18:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae1c:	d402      	bmi.n	800ae24 <_printf_i+0x188>
 800ae1e:	065f      	lsls	r7, r3, #25
 800ae20:	bf48      	it	mi
 800ae22:	b2ad      	uxthmi	r5, r5
 800ae24:	6031      	str	r1, [r6, #0]
 800ae26:	07d9      	lsls	r1, r3, #31
 800ae28:	bf44      	itt	mi
 800ae2a:	f043 0320 	orrmi.w	r3, r3, #32
 800ae2e:	6023      	strmi	r3, [r4, #0]
 800ae30:	b11d      	cbz	r5, 800ae3a <_printf_i+0x19e>
 800ae32:	2310      	movs	r3, #16
 800ae34:	e7ac      	b.n	800ad90 <_printf_i+0xf4>
 800ae36:	4827      	ldr	r0, [pc, #156]	@ (800aed4 <_printf_i+0x238>)
 800ae38:	e7e9      	b.n	800ae0e <_printf_i+0x172>
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	f023 0320 	bic.w	r3, r3, #32
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	e7f6      	b.n	800ae32 <_printf_i+0x196>
 800ae44:	4616      	mov	r6, r2
 800ae46:	e7bd      	b.n	800adc4 <_printf_i+0x128>
 800ae48:	6833      	ldr	r3, [r6, #0]
 800ae4a:	6825      	ldr	r5, [r4, #0]
 800ae4c:	6961      	ldr	r1, [r4, #20]
 800ae4e:	1d18      	adds	r0, r3, #4
 800ae50:	6030      	str	r0, [r6, #0]
 800ae52:	062e      	lsls	r6, r5, #24
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	d501      	bpl.n	800ae5c <_printf_i+0x1c0>
 800ae58:	6019      	str	r1, [r3, #0]
 800ae5a:	e002      	b.n	800ae62 <_printf_i+0x1c6>
 800ae5c:	0668      	lsls	r0, r5, #25
 800ae5e:	d5fb      	bpl.n	800ae58 <_printf_i+0x1bc>
 800ae60:	8019      	strh	r1, [r3, #0]
 800ae62:	2300      	movs	r3, #0
 800ae64:	6123      	str	r3, [r4, #16]
 800ae66:	4616      	mov	r6, r2
 800ae68:	e7bc      	b.n	800ade4 <_printf_i+0x148>
 800ae6a:	6833      	ldr	r3, [r6, #0]
 800ae6c:	1d1a      	adds	r2, r3, #4
 800ae6e:	6032      	str	r2, [r6, #0]
 800ae70:	681e      	ldr	r6, [r3, #0]
 800ae72:	6862      	ldr	r2, [r4, #4]
 800ae74:	2100      	movs	r1, #0
 800ae76:	4630      	mov	r0, r6
 800ae78:	f7f5 f9ba 	bl	80001f0 <memchr>
 800ae7c:	b108      	cbz	r0, 800ae82 <_printf_i+0x1e6>
 800ae7e:	1b80      	subs	r0, r0, r6
 800ae80:	6060      	str	r0, [r4, #4]
 800ae82:	6863      	ldr	r3, [r4, #4]
 800ae84:	6123      	str	r3, [r4, #16]
 800ae86:	2300      	movs	r3, #0
 800ae88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae8c:	e7aa      	b.n	800ade4 <_printf_i+0x148>
 800ae8e:	6923      	ldr	r3, [r4, #16]
 800ae90:	4632      	mov	r2, r6
 800ae92:	4649      	mov	r1, r9
 800ae94:	4640      	mov	r0, r8
 800ae96:	47d0      	blx	sl
 800ae98:	3001      	adds	r0, #1
 800ae9a:	d0ad      	beq.n	800adf8 <_printf_i+0x15c>
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	079b      	lsls	r3, r3, #30
 800aea0:	d413      	bmi.n	800aeca <_printf_i+0x22e>
 800aea2:	68e0      	ldr	r0, [r4, #12]
 800aea4:	9b03      	ldr	r3, [sp, #12]
 800aea6:	4298      	cmp	r0, r3
 800aea8:	bfb8      	it	lt
 800aeaa:	4618      	movlt	r0, r3
 800aeac:	e7a6      	b.n	800adfc <_printf_i+0x160>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	4632      	mov	r2, r6
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	4640      	mov	r0, r8
 800aeb6:	47d0      	blx	sl
 800aeb8:	3001      	adds	r0, #1
 800aeba:	d09d      	beq.n	800adf8 <_printf_i+0x15c>
 800aebc:	3501      	adds	r5, #1
 800aebe:	68e3      	ldr	r3, [r4, #12]
 800aec0:	9903      	ldr	r1, [sp, #12]
 800aec2:	1a5b      	subs	r3, r3, r1
 800aec4:	42ab      	cmp	r3, r5
 800aec6:	dcf2      	bgt.n	800aeae <_printf_i+0x212>
 800aec8:	e7eb      	b.n	800aea2 <_printf_i+0x206>
 800aeca:	2500      	movs	r5, #0
 800aecc:	f104 0619 	add.w	r6, r4, #25
 800aed0:	e7f5      	b.n	800aebe <_printf_i+0x222>
 800aed2:	bf00      	nop
 800aed4:	0800b5f2 	.word	0x0800b5f2
 800aed8:	0800b603 	.word	0x0800b603

0800aedc <__sflush_r>:
 800aedc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee4:	0716      	lsls	r6, r2, #28
 800aee6:	4605      	mov	r5, r0
 800aee8:	460c      	mov	r4, r1
 800aeea:	d454      	bmi.n	800af96 <__sflush_r+0xba>
 800aeec:	684b      	ldr	r3, [r1, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	dc02      	bgt.n	800aef8 <__sflush_r+0x1c>
 800aef2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dd48      	ble.n	800af8a <__sflush_r+0xae>
 800aef8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aefa:	2e00      	cmp	r6, #0
 800aefc:	d045      	beq.n	800af8a <__sflush_r+0xae>
 800aefe:	2300      	movs	r3, #0
 800af00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af04:	682f      	ldr	r7, [r5, #0]
 800af06:	6a21      	ldr	r1, [r4, #32]
 800af08:	602b      	str	r3, [r5, #0]
 800af0a:	d030      	beq.n	800af6e <__sflush_r+0x92>
 800af0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af0e:	89a3      	ldrh	r3, [r4, #12]
 800af10:	0759      	lsls	r1, r3, #29
 800af12:	d505      	bpl.n	800af20 <__sflush_r+0x44>
 800af14:	6863      	ldr	r3, [r4, #4]
 800af16:	1ad2      	subs	r2, r2, r3
 800af18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af1a:	b10b      	cbz	r3, 800af20 <__sflush_r+0x44>
 800af1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af1e:	1ad2      	subs	r2, r2, r3
 800af20:	2300      	movs	r3, #0
 800af22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af24:	6a21      	ldr	r1, [r4, #32]
 800af26:	4628      	mov	r0, r5
 800af28:	47b0      	blx	r6
 800af2a:	1c43      	adds	r3, r0, #1
 800af2c:	89a3      	ldrh	r3, [r4, #12]
 800af2e:	d106      	bne.n	800af3e <__sflush_r+0x62>
 800af30:	6829      	ldr	r1, [r5, #0]
 800af32:	291d      	cmp	r1, #29
 800af34:	d82b      	bhi.n	800af8e <__sflush_r+0xb2>
 800af36:	4a2a      	ldr	r2, [pc, #168]	@ (800afe0 <__sflush_r+0x104>)
 800af38:	410a      	asrs	r2, r1
 800af3a:	07d6      	lsls	r6, r2, #31
 800af3c:	d427      	bmi.n	800af8e <__sflush_r+0xb2>
 800af3e:	2200      	movs	r2, #0
 800af40:	6062      	str	r2, [r4, #4]
 800af42:	04d9      	lsls	r1, r3, #19
 800af44:	6922      	ldr	r2, [r4, #16]
 800af46:	6022      	str	r2, [r4, #0]
 800af48:	d504      	bpl.n	800af54 <__sflush_r+0x78>
 800af4a:	1c42      	adds	r2, r0, #1
 800af4c:	d101      	bne.n	800af52 <__sflush_r+0x76>
 800af4e:	682b      	ldr	r3, [r5, #0]
 800af50:	b903      	cbnz	r3, 800af54 <__sflush_r+0x78>
 800af52:	6560      	str	r0, [r4, #84]	@ 0x54
 800af54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af56:	602f      	str	r7, [r5, #0]
 800af58:	b1b9      	cbz	r1, 800af8a <__sflush_r+0xae>
 800af5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af5e:	4299      	cmp	r1, r3
 800af60:	d002      	beq.n	800af68 <__sflush_r+0x8c>
 800af62:	4628      	mov	r0, r5
 800af64:	f7ff fa92 	bl	800a48c <_free_r>
 800af68:	2300      	movs	r3, #0
 800af6a:	6363      	str	r3, [r4, #52]	@ 0x34
 800af6c:	e00d      	b.n	800af8a <__sflush_r+0xae>
 800af6e:	2301      	movs	r3, #1
 800af70:	4628      	mov	r0, r5
 800af72:	47b0      	blx	r6
 800af74:	4602      	mov	r2, r0
 800af76:	1c50      	adds	r0, r2, #1
 800af78:	d1c9      	bne.n	800af0e <__sflush_r+0x32>
 800af7a:	682b      	ldr	r3, [r5, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d0c6      	beq.n	800af0e <__sflush_r+0x32>
 800af80:	2b1d      	cmp	r3, #29
 800af82:	d001      	beq.n	800af88 <__sflush_r+0xac>
 800af84:	2b16      	cmp	r3, #22
 800af86:	d11e      	bne.n	800afc6 <__sflush_r+0xea>
 800af88:	602f      	str	r7, [r5, #0]
 800af8a:	2000      	movs	r0, #0
 800af8c:	e022      	b.n	800afd4 <__sflush_r+0xf8>
 800af8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af92:	b21b      	sxth	r3, r3
 800af94:	e01b      	b.n	800afce <__sflush_r+0xf2>
 800af96:	690f      	ldr	r7, [r1, #16]
 800af98:	2f00      	cmp	r7, #0
 800af9a:	d0f6      	beq.n	800af8a <__sflush_r+0xae>
 800af9c:	0793      	lsls	r3, r2, #30
 800af9e:	680e      	ldr	r6, [r1, #0]
 800afa0:	bf08      	it	eq
 800afa2:	694b      	ldreq	r3, [r1, #20]
 800afa4:	600f      	str	r7, [r1, #0]
 800afa6:	bf18      	it	ne
 800afa8:	2300      	movne	r3, #0
 800afaa:	eba6 0807 	sub.w	r8, r6, r7
 800afae:	608b      	str	r3, [r1, #8]
 800afb0:	f1b8 0f00 	cmp.w	r8, #0
 800afb4:	dde9      	ble.n	800af8a <__sflush_r+0xae>
 800afb6:	6a21      	ldr	r1, [r4, #32]
 800afb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800afba:	4643      	mov	r3, r8
 800afbc:	463a      	mov	r2, r7
 800afbe:	4628      	mov	r0, r5
 800afc0:	47b0      	blx	r6
 800afc2:	2800      	cmp	r0, #0
 800afc4:	dc08      	bgt.n	800afd8 <__sflush_r+0xfc>
 800afc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afce:	81a3      	strh	r3, [r4, #12]
 800afd0:	f04f 30ff 	mov.w	r0, #4294967295
 800afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd8:	4407      	add	r7, r0
 800afda:	eba8 0800 	sub.w	r8, r8, r0
 800afde:	e7e7      	b.n	800afb0 <__sflush_r+0xd4>
 800afe0:	dfbffffe 	.word	0xdfbffffe

0800afe4 <_fflush_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	690b      	ldr	r3, [r1, #16]
 800afe8:	4605      	mov	r5, r0
 800afea:	460c      	mov	r4, r1
 800afec:	b913      	cbnz	r3, 800aff4 <_fflush_r+0x10>
 800afee:	2500      	movs	r5, #0
 800aff0:	4628      	mov	r0, r5
 800aff2:	bd38      	pop	{r3, r4, r5, pc}
 800aff4:	b118      	cbz	r0, 800affe <_fflush_r+0x1a>
 800aff6:	6a03      	ldr	r3, [r0, #32]
 800aff8:	b90b      	cbnz	r3, 800affe <_fflush_r+0x1a>
 800affa:	f7fe ff91 	bl	8009f20 <__sinit>
 800affe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d0f3      	beq.n	800afee <_fflush_r+0xa>
 800b006:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b008:	07d0      	lsls	r0, r2, #31
 800b00a:	d404      	bmi.n	800b016 <_fflush_r+0x32>
 800b00c:	0599      	lsls	r1, r3, #22
 800b00e:	d402      	bmi.n	800b016 <_fflush_r+0x32>
 800b010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b012:	f7ff fa0c 	bl	800a42e <__retarget_lock_acquire_recursive>
 800b016:	4628      	mov	r0, r5
 800b018:	4621      	mov	r1, r4
 800b01a:	f7ff ff5f 	bl	800aedc <__sflush_r>
 800b01e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b020:	07da      	lsls	r2, r3, #31
 800b022:	4605      	mov	r5, r0
 800b024:	d4e4      	bmi.n	800aff0 <_fflush_r+0xc>
 800b026:	89a3      	ldrh	r3, [r4, #12]
 800b028:	059b      	lsls	r3, r3, #22
 800b02a:	d4e1      	bmi.n	800aff0 <_fflush_r+0xc>
 800b02c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b02e:	f7ff f9ff 	bl	800a430 <__retarget_lock_release_recursive>
 800b032:	e7dd      	b.n	800aff0 <_fflush_r+0xc>

0800b034 <fiprintf>:
 800b034:	b40e      	push	{r1, r2, r3}
 800b036:	b503      	push	{r0, r1, lr}
 800b038:	4601      	mov	r1, r0
 800b03a:	ab03      	add	r3, sp, #12
 800b03c:	4805      	ldr	r0, [pc, #20]	@ (800b054 <fiprintf+0x20>)
 800b03e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b042:	6800      	ldr	r0, [r0, #0]
 800b044:	9301      	str	r3, [sp, #4]
 800b046:	f7ff fca3 	bl	800a990 <_vfiprintf_r>
 800b04a:	b002      	add	sp, #8
 800b04c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b050:	b003      	add	sp, #12
 800b052:	4770      	bx	lr
 800b054:	2000001c 	.word	0x2000001c

0800b058 <__swhatbuf_r>:
 800b058:	b570      	push	{r4, r5, r6, lr}
 800b05a:	460c      	mov	r4, r1
 800b05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b060:	2900      	cmp	r1, #0
 800b062:	b096      	sub	sp, #88	@ 0x58
 800b064:	4615      	mov	r5, r2
 800b066:	461e      	mov	r6, r3
 800b068:	da0d      	bge.n	800b086 <__swhatbuf_r+0x2e>
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b070:	f04f 0100 	mov.w	r1, #0
 800b074:	bf14      	ite	ne
 800b076:	2340      	movne	r3, #64	@ 0x40
 800b078:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b07c:	2000      	movs	r0, #0
 800b07e:	6031      	str	r1, [r6, #0]
 800b080:	602b      	str	r3, [r5, #0]
 800b082:	b016      	add	sp, #88	@ 0x58
 800b084:	bd70      	pop	{r4, r5, r6, pc}
 800b086:	466a      	mov	r2, sp
 800b088:	f000 f862 	bl	800b150 <_fstat_r>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	dbec      	blt.n	800b06a <__swhatbuf_r+0x12>
 800b090:	9901      	ldr	r1, [sp, #4]
 800b092:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b096:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b09a:	4259      	negs	r1, r3
 800b09c:	4159      	adcs	r1, r3
 800b09e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0a2:	e7eb      	b.n	800b07c <__swhatbuf_r+0x24>

0800b0a4 <__smakebuf_r>:
 800b0a4:	898b      	ldrh	r3, [r1, #12]
 800b0a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0a8:	079d      	lsls	r5, r3, #30
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	d507      	bpl.n	800b0c0 <__smakebuf_r+0x1c>
 800b0b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	6123      	str	r3, [r4, #16]
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	6163      	str	r3, [r4, #20]
 800b0bc:	b003      	add	sp, #12
 800b0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0c0:	ab01      	add	r3, sp, #4
 800b0c2:	466a      	mov	r2, sp
 800b0c4:	f7ff ffc8 	bl	800b058 <__swhatbuf_r>
 800b0c8:	9f00      	ldr	r7, [sp, #0]
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	4639      	mov	r1, r7
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	f7ff fa50 	bl	800a574 <_malloc_r>
 800b0d4:	b948      	cbnz	r0, 800b0ea <__smakebuf_r+0x46>
 800b0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0da:	059a      	lsls	r2, r3, #22
 800b0dc:	d4ee      	bmi.n	800b0bc <__smakebuf_r+0x18>
 800b0de:	f023 0303 	bic.w	r3, r3, #3
 800b0e2:	f043 0302 	orr.w	r3, r3, #2
 800b0e6:	81a3      	strh	r3, [r4, #12]
 800b0e8:	e7e2      	b.n	800b0b0 <__smakebuf_r+0xc>
 800b0ea:	89a3      	ldrh	r3, [r4, #12]
 800b0ec:	6020      	str	r0, [r4, #0]
 800b0ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0f2:	81a3      	strh	r3, [r4, #12]
 800b0f4:	9b01      	ldr	r3, [sp, #4]
 800b0f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b0fa:	b15b      	cbz	r3, 800b114 <__smakebuf_r+0x70>
 800b0fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b100:	4630      	mov	r0, r6
 800b102:	f000 f837 	bl	800b174 <_isatty_r>
 800b106:	b128      	cbz	r0, 800b114 <__smakebuf_r+0x70>
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	f023 0303 	bic.w	r3, r3, #3
 800b10e:	f043 0301 	orr.w	r3, r3, #1
 800b112:	81a3      	strh	r3, [r4, #12]
 800b114:	89a3      	ldrh	r3, [r4, #12]
 800b116:	431d      	orrs	r5, r3
 800b118:	81a5      	strh	r5, [r4, #12]
 800b11a:	e7cf      	b.n	800b0bc <__smakebuf_r+0x18>

0800b11c <memmove>:
 800b11c:	4288      	cmp	r0, r1
 800b11e:	b510      	push	{r4, lr}
 800b120:	eb01 0402 	add.w	r4, r1, r2
 800b124:	d902      	bls.n	800b12c <memmove+0x10>
 800b126:	4284      	cmp	r4, r0
 800b128:	4623      	mov	r3, r4
 800b12a:	d807      	bhi.n	800b13c <memmove+0x20>
 800b12c:	1e43      	subs	r3, r0, #1
 800b12e:	42a1      	cmp	r1, r4
 800b130:	d008      	beq.n	800b144 <memmove+0x28>
 800b132:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b13a:	e7f8      	b.n	800b12e <memmove+0x12>
 800b13c:	4402      	add	r2, r0
 800b13e:	4601      	mov	r1, r0
 800b140:	428a      	cmp	r2, r1
 800b142:	d100      	bne.n	800b146 <memmove+0x2a>
 800b144:	bd10      	pop	{r4, pc}
 800b146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b14a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b14e:	e7f7      	b.n	800b140 <memmove+0x24>

0800b150 <_fstat_r>:
 800b150:	b538      	push	{r3, r4, r5, lr}
 800b152:	4d07      	ldr	r5, [pc, #28]	@ (800b170 <_fstat_r+0x20>)
 800b154:	2300      	movs	r3, #0
 800b156:	4604      	mov	r4, r0
 800b158:	4608      	mov	r0, r1
 800b15a:	4611      	mov	r1, r2
 800b15c:	602b      	str	r3, [r5, #0]
 800b15e:	f7f6 faf3 	bl	8001748 <_fstat>
 800b162:	1c43      	adds	r3, r0, #1
 800b164:	d102      	bne.n	800b16c <_fstat_r+0x1c>
 800b166:	682b      	ldr	r3, [r5, #0]
 800b168:	b103      	cbz	r3, 800b16c <_fstat_r+0x1c>
 800b16a:	6023      	str	r3, [r4, #0]
 800b16c:	bd38      	pop	{r3, r4, r5, pc}
 800b16e:	bf00      	nop
 800b170:	20001538 	.word	0x20001538

0800b174 <_isatty_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4d06      	ldr	r5, [pc, #24]	@ (800b190 <_isatty_r+0x1c>)
 800b178:	2300      	movs	r3, #0
 800b17a:	4604      	mov	r4, r0
 800b17c:	4608      	mov	r0, r1
 800b17e:	602b      	str	r3, [r5, #0]
 800b180:	f7f6 faf2 	bl	8001768 <_isatty>
 800b184:	1c43      	adds	r3, r0, #1
 800b186:	d102      	bne.n	800b18e <_isatty_r+0x1a>
 800b188:	682b      	ldr	r3, [r5, #0]
 800b18a:	b103      	cbz	r3, 800b18e <_isatty_r+0x1a>
 800b18c:	6023      	str	r3, [r4, #0]
 800b18e:	bd38      	pop	{r3, r4, r5, pc}
 800b190:	20001538 	.word	0x20001538

0800b194 <_sbrk_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4d06      	ldr	r5, [pc, #24]	@ (800b1b0 <_sbrk_r+0x1c>)
 800b198:	2300      	movs	r3, #0
 800b19a:	4604      	mov	r4, r0
 800b19c:	4608      	mov	r0, r1
 800b19e:	602b      	str	r3, [r5, #0]
 800b1a0:	f7f6 fafa 	bl	8001798 <_sbrk>
 800b1a4:	1c43      	adds	r3, r0, #1
 800b1a6:	d102      	bne.n	800b1ae <_sbrk_r+0x1a>
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	b103      	cbz	r3, 800b1ae <_sbrk_r+0x1a>
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	bd38      	pop	{r3, r4, r5, pc}
 800b1b0:	20001538 	.word	0x20001538

0800b1b4 <abort>:
 800b1b4:	b508      	push	{r3, lr}
 800b1b6:	2006      	movs	r0, #6
 800b1b8:	f000 f85a 	bl	800b270 <raise>
 800b1bc:	2001      	movs	r0, #1
 800b1be:	f7f6 fa73 	bl	80016a8 <_exit>

0800b1c2 <_realloc_r>:
 800b1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c6:	4680      	mov	r8, r0
 800b1c8:	4615      	mov	r5, r2
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	b921      	cbnz	r1, 800b1d8 <_realloc_r+0x16>
 800b1ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	f7ff b9ce 	b.w	800a574 <_malloc_r>
 800b1d8:	b92a      	cbnz	r2, 800b1e6 <_realloc_r+0x24>
 800b1da:	f7ff f957 	bl	800a48c <_free_r>
 800b1de:	2400      	movs	r4, #0
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e6:	f000 f85f 	bl	800b2a8 <_malloc_usable_size_r>
 800b1ea:	4285      	cmp	r5, r0
 800b1ec:	4606      	mov	r6, r0
 800b1ee:	d802      	bhi.n	800b1f6 <_realloc_r+0x34>
 800b1f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b1f4:	d8f4      	bhi.n	800b1e0 <_realloc_r+0x1e>
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	f7ff f9bb 	bl	800a574 <_malloc_r>
 800b1fe:	4607      	mov	r7, r0
 800b200:	2800      	cmp	r0, #0
 800b202:	d0ec      	beq.n	800b1de <_realloc_r+0x1c>
 800b204:	42b5      	cmp	r5, r6
 800b206:	462a      	mov	r2, r5
 800b208:	4621      	mov	r1, r4
 800b20a:	bf28      	it	cs
 800b20c:	4632      	movcs	r2, r6
 800b20e:	f7ff f910 	bl	800a432 <memcpy>
 800b212:	4621      	mov	r1, r4
 800b214:	4640      	mov	r0, r8
 800b216:	f7ff f939 	bl	800a48c <_free_r>
 800b21a:	463c      	mov	r4, r7
 800b21c:	e7e0      	b.n	800b1e0 <_realloc_r+0x1e>

0800b21e <_raise_r>:
 800b21e:	291f      	cmp	r1, #31
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4605      	mov	r5, r0
 800b224:	460c      	mov	r4, r1
 800b226:	d904      	bls.n	800b232 <_raise_r+0x14>
 800b228:	2316      	movs	r3, #22
 800b22a:	6003      	str	r3, [r0, #0]
 800b22c:	f04f 30ff 	mov.w	r0, #4294967295
 800b230:	bd38      	pop	{r3, r4, r5, pc}
 800b232:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b234:	b112      	cbz	r2, 800b23c <_raise_r+0x1e>
 800b236:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b23a:	b94b      	cbnz	r3, 800b250 <_raise_r+0x32>
 800b23c:	4628      	mov	r0, r5
 800b23e:	f000 f831 	bl	800b2a4 <_getpid_r>
 800b242:	4622      	mov	r2, r4
 800b244:	4601      	mov	r1, r0
 800b246:	4628      	mov	r0, r5
 800b248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b24c:	f000 b818 	b.w	800b280 <_kill_r>
 800b250:	2b01      	cmp	r3, #1
 800b252:	d00a      	beq.n	800b26a <_raise_r+0x4c>
 800b254:	1c59      	adds	r1, r3, #1
 800b256:	d103      	bne.n	800b260 <_raise_r+0x42>
 800b258:	2316      	movs	r3, #22
 800b25a:	6003      	str	r3, [r0, #0]
 800b25c:	2001      	movs	r0, #1
 800b25e:	e7e7      	b.n	800b230 <_raise_r+0x12>
 800b260:	2100      	movs	r1, #0
 800b262:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b266:	4620      	mov	r0, r4
 800b268:	4798      	blx	r3
 800b26a:	2000      	movs	r0, #0
 800b26c:	e7e0      	b.n	800b230 <_raise_r+0x12>
	...

0800b270 <raise>:
 800b270:	4b02      	ldr	r3, [pc, #8]	@ (800b27c <raise+0xc>)
 800b272:	4601      	mov	r1, r0
 800b274:	6818      	ldr	r0, [r3, #0]
 800b276:	f7ff bfd2 	b.w	800b21e <_raise_r>
 800b27a:	bf00      	nop
 800b27c:	2000001c 	.word	0x2000001c

0800b280 <_kill_r>:
 800b280:	b538      	push	{r3, r4, r5, lr}
 800b282:	4d07      	ldr	r5, [pc, #28]	@ (800b2a0 <_kill_r+0x20>)
 800b284:	2300      	movs	r3, #0
 800b286:	4604      	mov	r4, r0
 800b288:	4608      	mov	r0, r1
 800b28a:	4611      	mov	r1, r2
 800b28c:	602b      	str	r3, [r5, #0]
 800b28e:	f7f6 f9fb 	bl	8001688 <_kill>
 800b292:	1c43      	adds	r3, r0, #1
 800b294:	d102      	bne.n	800b29c <_kill_r+0x1c>
 800b296:	682b      	ldr	r3, [r5, #0]
 800b298:	b103      	cbz	r3, 800b29c <_kill_r+0x1c>
 800b29a:	6023      	str	r3, [r4, #0]
 800b29c:	bd38      	pop	{r3, r4, r5, pc}
 800b29e:	bf00      	nop
 800b2a0:	20001538 	.word	0x20001538

0800b2a4 <_getpid_r>:
 800b2a4:	f7f6 b9e8 	b.w	8001678 <_getpid>

0800b2a8 <_malloc_usable_size_r>:
 800b2a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2ac:	1f18      	subs	r0, r3, #4
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	bfbc      	itt	lt
 800b2b2:	580b      	ldrlt	r3, [r1, r0]
 800b2b4:	18c0      	addlt	r0, r0, r3
 800b2b6:	4770      	bx	lr

0800b2b8 <_init>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	bf00      	nop
 800b2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2be:	bc08      	pop	{r3}
 800b2c0:	469e      	mov	lr, r3
 800b2c2:	4770      	bx	lr

0800b2c4 <_fini>:
 800b2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c6:	bf00      	nop
 800b2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ca:	bc08      	pop	{r3}
 800b2cc:	469e      	mov	lr, r3
 800b2ce:	4770      	bx	lr
