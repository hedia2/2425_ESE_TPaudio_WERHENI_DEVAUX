
TP Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008514  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  080086a4  080086a4  000096a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008990  08008990  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008990  08008990  00009990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008998  08008998  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008998  08008998  00009998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800899c  0800899c  0000999c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080089a0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  20000068  08008a08  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  08008a08  0000a5cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f4b  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cec  00000000  00000000  00021fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00025cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f9f  00000000  00000000  00027118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a724  00000000  00000000  000280b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6ee  00000000  00000000  000527db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f915b  00000000  00000000  0006eec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168024  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dc8  00000000  00000000  00168068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0016de30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800868c 	.word	0x0800868c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800868c 	.word	0x0800868c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MCP23S17_WriteRegister>:
#include "components/MCP23S17.h"




HAL_StatusTypeDef MCP23S17_WriteRegister(uint8_t reg, uint8_t data){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
	uint8_t pData[3];

	pData[0] = MCP23S17_ADDR;
 8000590:	2340      	movs	r3, #64	@ 0x40
 8000592:	733b      	strb	r3, [r7, #12]
	pData[1] = reg;
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	737b      	strb	r3, [r7, #13]
	pData[2] = data;
 8000598:	79bb      	ldrb	r3, [r7, #6]
 800059a:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(CS_Vu_GPIO_Port, CS_Vu_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2180      	movs	r1, #128	@ 0x80
 80005a0:	480e      	ldr	r0, [pc, #56]	@ (80005dc <MCP23S17_WriteRegister+0x5c>)
 80005a2:	f001 fe4d 	bl	8002240 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80005a6:	200a      	movs	r0, #10
 80005a8:	f001 f984 	bl	80018b4 <HAL_Delay>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&MCP23S17_SPI, pData, 3, HAL_MAX_DELAY);
 80005ac:	f107 010c 	add.w	r1, r7, #12
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b4:	2203      	movs	r2, #3
 80005b6:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <MCP23S17_WriteRegister+0x60>)
 80005b8:	f005 faae 	bl	8005b18 <HAL_SPI_Transmit>
 80005bc:	4603      	mov	r3, r0
 80005be:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80005c0:	200a      	movs	r0, #10
 80005c2:	f001 f977 	bl	80018b4 <HAL_Delay>
	HAL_GPIO_WritePin(CS_Vu_GPIO_Port, CS_Vu_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	4804      	ldr	r0, [pc, #16]	@ (80005dc <MCP23S17_WriteRegister+0x5c>)
 80005cc:	f001 fe38 	bl	8002240 <HAL_GPIO_WritePin>
	return ret;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	48000400 	.word	0x48000400
 80005e0:	200002d4 	.word	0x200002d4

080005e4 <MCP23S17_Init>:

void MCP23S17_Init()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_Vu_GPIO_Port, RESET_Vu_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2101      	movs	r1, #1
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f0:	f001 fe26 	bl	8002240 <HAL_GPIO_WritePin>
	MCP23S17_WriteRegister(IODIRA, CONFIG);
 80005f4:	2100      	movs	r1, #0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff ffc2 	bl	8000580 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(IODIRB, CONFIG);
 80005fc:	2100      	movs	r1, #0
 80005fe:	2001      	movs	r0, #1
 8000600:	f7ff ffbe 	bl	8000580 <MCP23S17_WriteRegister>
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <MCP23S17_Chenillard>:

void MCP23S17_Chenillard(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
    //
    for (int i = 0; i < 8; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	e025      	b.n	8000660 <MCP23S17_Chenillard+0x58>

    	MCP23S17_WriteRegister(0x12, ~(1 << i));
 8000614:	2201      	movs	r2, #1
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	fa02 f303 	lsl.w	r3, r2, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	43db      	mvns	r3, r3
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4619      	mov	r1, r3
 8000624:	2012      	movs	r0, #18
 8000626:	f7ff ffab 	bl	8000580 <MCP23S17_WriteRegister>
    	MCP23S17_WriteRegister(0x13, ~(1 << i));
 800062a:	2201      	movs	r2, #1
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	43db      	mvns	r3, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	4619      	mov	r1, r3
 800063a:	2013      	movs	r0, #19
 800063c:	f7ff ffa0 	bl	8000580 <MCP23S17_WriteRegister>
        printf("LED %d allumée\r\n", i + 1);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	4619      	mov	r1, r3
 8000646:	480a      	ldr	r0, [pc, #40]	@ (8000670 <MCP23S17_Chenillard+0x68>)
 8000648:	f006 febe 	bl	80073c8 <iprintf>
        HAL_Delay(100);
 800064c:	2064      	movs	r0, #100	@ 0x64
 800064e:	f001 f931 	bl	80018b4 <HAL_Delay>


        MCP23S17_WriteRegister(0x12, 0xFF);
 8000652:	21ff      	movs	r1, #255	@ 0xff
 8000654:	2012      	movs	r0, #18
 8000656:	f7ff ff93 	bl	8000580 <MCP23S17_WriteRegister>
    for (int i = 0; i < 8; i++) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3301      	adds	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b07      	cmp	r3, #7
 8000664:	ddd6      	ble.n	8000614 <MCP23S17_Chenillard+0xc>
    }
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	080086a4 	.word	0x080086a4

08000674 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800067a:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <MX_DMA_Init+0x48>)
 800067c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800067e:	4a0f      	ldr	r2, [pc, #60]	@ (80006bc <MX_DMA_Init+0x48>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6493      	str	r3, [r2, #72]	@ 0x48
 8000686:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <MX_DMA_Init+0x48>)
 8000688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2105      	movs	r1, #5
 8000696:	2010      	movs	r0, #16
 8000698:	f001 fa0b 	bl	8001ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800069c:	2010      	movs	r0, #16
 800069e:	f001 fa24 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2105      	movs	r1, #5
 80006a6:	2011      	movs	r0, #17
 80006a8:	f001 fa03 	bl	8001ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006ac:	2011      	movs	r0, #17
 80006ae:	f001 fa1c 	bl	8001aea <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <drv_uart2_receive>:

#include "usart.h"
#include "gpio.h"

uint8_t drv_uart2_receive(char * pData, uint16_t size)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart2, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 80006cc:	887a      	ldrh	r2, [r7, #2]
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <drv_uart2_receive+0x24>)
 80006d6:	f005 fdd0 	bl	800627a <HAL_UART_Receive>

	return 0;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000033c 	.word	0x2000033c

080006e8 <drv_uart2_transmit>:

uint8_t drv_uart2_transmit(const char * pData, uint16_t size)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 80006f4:	887a      	ldrh	r2, [r7, #2]
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	4803      	ldr	r0, [pc, #12]	@ (800070c <drv_uart2_transmit+0x24>)
 80006fe:	f005 fd33 	bl	8006168 <HAL_UART_Transmit>

	return 0;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000033c 	.word	0x2000033c

08000710 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b38      	ldr	r3, [pc, #224]	@ (8000808 <MX_GPIO_Init+0xf8>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a37      	ldr	r2, [pc, #220]	@ (8000808 <MX_GPIO_Init+0xf8>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b35      	ldr	r3, [pc, #212]	@ (8000808 <MX_GPIO_Init+0xf8>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	4b32      	ldr	r3, [pc, #200]	@ (8000808 <MX_GPIO_Init+0xf8>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a31      	ldr	r2, [pc, #196]	@ (8000808 <MX_GPIO_Init+0xf8>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b2f      	ldr	r3, [pc, #188]	@ (8000808 <MX_GPIO_Init+0xf8>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b2c      	ldr	r3, [pc, #176]	@ (8000808 <MX_GPIO_Init+0xf8>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	4a2b      	ldr	r2, [pc, #172]	@ (8000808 <MX_GPIO_Init+0xf8>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000762:	4b29      	ldr	r3, [pc, #164]	@ (8000808 <MX_GPIO_Init+0xf8>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b26      	ldr	r3, [pc, #152]	@ (8000808 <MX_GPIO_Init+0xf8>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a25      	ldr	r2, [pc, #148]	@ (8000808 <MX_GPIO_Init+0xf8>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077a:	4b23      	ldr	r3, [pc, #140]	@ (8000808 <MX_GPIO_Init+0xf8>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_Vu_GPIO_Port, RESET_Vu_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2101      	movs	r1, #1
 800078a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078e:	f001 fd57 	bl	8002240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079a:	f001 fd51 	bl	8002240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_Vu_GPIO_Port, CS_Vu_Pin, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	2180      	movs	r1, #128	@ 0x80
 80007a2:	481a      	ldr	r0, [pc, #104]	@ (800080c <MX_GPIO_Init+0xfc>)
 80007a4:	f001 fd4c 	bl	8002240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	4814      	ldr	r0, [pc, #80]	@ (8000810 <MX_GPIO_Init+0x100>)
 80007c0:	f001 fb94 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RESET_Vu_Pin|LD2_Pin;
 80007c4:	2321      	movs	r3, #33	@ 0x21
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007de:	f001 fb85 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Vu_Pin;
 80007e2:	2380      	movs	r3, #128	@ 0x80
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_Vu_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_GPIO_Init+0xfc>)
 80007fa:	f001 fb77 	bl	8001eec <HAL_GPIO_Init>

}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	@ 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000
 800080c:	48000400 	.word	0x48000400
 8000810:	48000800 	.word	0x48000800

08000814 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_I2C2_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	@ (800088c <MX_I2C2_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_I2C2_Init+0x74>)
 8000820:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <MX_I2C2_Init+0x7c>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000824:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_I2C2_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_I2C2_Init+0x74>)
 800082c:	2201      	movs	r2, #1
 800082e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_I2C2_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_I2C2_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_I2C2_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_I2C2_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_I2C2_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800084e:	480e      	ldr	r0, [pc, #56]	@ (8000888 <MX_I2C2_Init+0x74>)
 8000850:	f001 fd28 	bl	80022a4 <HAL_I2C_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800085a:	f000 f96a 	bl	8000b32 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	4809      	ldr	r0, [pc, #36]	@ (8000888 <MX_I2C2_Init+0x74>)
 8000862:	f002 f943 	bl	8002aec <HAL_I2CEx_ConfigAnalogFilter>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800086c:	f000 f961 	bl	8000b32 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_I2C2_Init+0x74>)
 8000874:	f002 f985 	bl	8002b82 <HAL_I2CEx_ConfigDigitalFilter>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 f958 	bl	8000b32 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000084 	.word	0x20000084
 800088c:	40005800 	.word	0x40005800
 8000890:	10d19ce4 	.word	0x10d19ce4

08000894 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b0ac      	sub	sp, #176	@ 0xb0
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2288      	movs	r2, #136	@ 0x88
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f006 fe53 	bl	8007560 <memset>
  if(i2cHandle->Instance==I2C2)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a21      	ldr	r2, [pc, #132]	@ (8000944 <HAL_I2C_MspInit+0xb0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d13b      	bne.n	800093c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008c4:	2380      	movs	r3, #128	@ 0x80
 80008c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 f807 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008dc:	f000 f929 	bl	8000b32 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <HAL_I2C_MspInit+0xb4>)
 80008e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e4:	4a18      	ldr	r2, [pc, #96]	@ (8000948 <HAL_I2C_MspInit+0xb4>)
 80008e6:	f043 0302 	orr.w	r3, r3, #2
 80008ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <HAL_I2C_MspInit+0xb4>)
 80008ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f0:	f003 0302 	and.w	r3, r3, #2
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80008fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000900:	2312      	movs	r3, #18
 8000902:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000912:	2304      	movs	r3, #4
 8000914:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800091c:	4619      	mov	r1, r3
 800091e:	480b      	ldr	r0, [pc, #44]	@ (800094c <HAL_I2C_MspInit+0xb8>)
 8000920:	f001 fae4 	bl	8001eec <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000924:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <HAL_I2C_MspInit+0xb4>)
 8000926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000928:	4a07      	ldr	r2, [pc, #28]	@ (8000948 <HAL_I2C_MspInit+0xb4>)
 800092a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800092e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000930:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <HAL_I2C_MspInit+0xb4>)
 8000932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000934:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800093c:	bf00      	nop
 800093e:	37b0      	adds	r7, #176	@ 0xb0
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40005800 	.word	0x40005800
 8000948:	40021000 	.word	0x40021000
 800094c:	48000400 	.word	0x48000400

08000950 <getCHIP_ID>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint16_t getCHIP_ID(uint8_t reg, uint8_t I2C_addr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af04      	add	r7, sp, #16
 8000956:	4603      	mov	r3, r0
 8000958:	460a      	mov	r2, r1
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	4613      	mov	r3, r2
 800095e:	71bb      	strb	r3, [r7, #6]
   uint16_t data = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	81bb      	strh	r3, [r7, #12]
   HAL_StatusTypeDef status;

   status = HAL_I2C_Mem_Read(&hi2c2, I2C_addr, reg, I2C_MEMADD_SIZE_8BIT, &data, 2, HAL_MAX_DELAY);
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	b299      	uxth	r1, r3
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	b29a      	uxth	r2, r3
 800096c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000970:	9302      	str	r3, [sp, #8]
 8000972:	2302      	movs	r3, #2
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	2301      	movs	r3, #1
 800097e:	4808      	ldr	r0, [pc, #32]	@ (80009a0 <getCHIP_ID+0x50>)
 8000980:	f001 fd2c 	bl	80023dc <HAL_I2C_Mem_Read>
 8000984:	4603      	mov	r3, r0
 8000986:	73fb      	strb	r3, [r7, #15]
   if (status != HAL_OK){
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <getCHIP_ID+0x44>
       return -1;
 800098e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000992:	e000      	b.n	8000996 <getCHIP_ID+0x46>
   }
   return data;
 8000994:	89bb      	ldrh	r3, [r7, #12]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000084 	.word	0x20000084

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009aa:	f000 ff07 	bl	80017bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ae:	f000 f845 	bl	8000a3c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009b2:	f000 f894 	bl	8000ade <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f7ff feab 	bl	8000710 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ba:	f7ff fe5b 	bl	8000674 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009be:	f000 fe47 	bl	8001650 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80009c2:	f000 fc49 	bl	8001258 <MX_SPI3_Init>
  MX_I2C2_Init();
 80009c6:	f7ff ff25 	bl	8000814 <MX_I2C2_Init>
  MX_SAI2_Init();
 80009ca:	f000 f8b9 	bl	8000b40 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */

	__HAL_SAI_ENABLE(&hsai_BlockA2);
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <main+0x84>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <main+0x84>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80009dc:	601a      	str	r2, [r3, #0]

	h_shell.drv.receive = drv_uart2_receive;
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <main+0x88>)
 80009e0:	4a13      	ldr	r2, [pc, #76]	@ (8000a30 <main+0x8c>)
 80009e2:	65da      	str	r2, [r3, #92]	@ 0x5c
	h_shell.drv.transmit = drv_uart2_transmit;
 80009e4:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <main+0x88>)
 80009e6:	4a13      	ldr	r2, [pc, #76]	@ (8000a34 <main+0x90>)
 80009e8:	659a      	str	r2, [r3, #88]	@ 0x58

	MCP23S17_Init();
 80009ea:	f7ff fdfb 	bl	80005e4 <MCP23S17_Init>
	//MCP23S17_WriteRegister(MCP23S17_GPIOA, 0x00);

	uint16_t chip_ID = getCHIP_ID(CODEC_ID_REG, CODEC_ADDR);
 80009ee:	2114      	movs	r1, #20
 80009f0:	2000      	movs	r0, #0
 80009f2:	f7ff ffad 	bl	8000950 <getCHIP_ID>
 80009f6:	4603      	mov	r3, r0
 80009f8:	80fb      	strh	r3, [r7, #6]
	// CHIP ID = 0x11a0

	//HAL_SAI_Receive_DMA(hsai, pData, Size);
	shell_init(&h_shell);
 80009fa:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <main+0x88>)
 80009fc:	f000 fb2a 	bl	8001054 <shell_init>
	shell_run(&h_shell);
 8000a00:	480a      	ldr	r0, [pc, #40]	@ (8000a2c <main+0x88>)
 8000a02:	f000 fbcb 	bl	800119c <shell_run>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		MCP23S17_Chenillard();
 8000a06:	f7ff fdff 	bl	8000608 <MCP23S17_Chenillard>
		printf("Toggle Led... \r\n");
 8000a0a:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <main+0x94>)
 8000a0c:	f006 fd44 	bl	8007498 <puts>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a10:	2120      	movs	r1, #32
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a16:	f001 fc2b 	bl	8002270 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a1e:	f000 ff49 	bl	80018b4 <HAL_Delay>
	{
 8000a22:	bf00      	nop
 8000a24:	e7ef      	b.n	8000a06 <main+0x62>
 8000a26:	bf00      	nop
 8000a28:	20000138 	.word	0x20000138
 8000a2c:	200000d8 	.word	0x200000d8
 8000a30:	080006c1 	.word	0x080006c1
 8000a34:	080006e9 	.word	0x080006e9
 8000a38:	080086b8 	.word	0x080086b8

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b096      	sub	sp, #88	@ 0x58
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	2244      	movs	r2, #68	@ 0x44
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f006 fd88 	bl	8007560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	463b      	mov	r3, r7
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a5e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a62:	f002 f8e9 	bl	8002c38 <HAL_PWREx_ControlVoltageScaling>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a6c:	f000 f861 	bl	8000b32 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a70:	2302      	movs	r3, #2
 8000a72:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a78:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a82:	2302      	movs	r3, #2
 8000a84:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 f920 	bl	8002ce4 <HAL_RCC_OscConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000aaa:	f000 f842 	bl	8000b32 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	230f      	movs	r3, #15
 8000ab0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 fce8 	bl	800349c <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ad2:	f000 f82e 	bl	8000b32 <Error_Handler>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3758      	adds	r7, #88	@ 0x58
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b0a2      	sub	sp, #136	@ 0x88
 8000ae2:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	2288      	movs	r2, #136	@ 0x88
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f006 fd38 	bl	8007560 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	66bb      	str	r3, [r7, #104]	@ 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000afa:	2302      	movs	r3, #2
 8000afc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b02:	2308      	movs	r3, #8
 8000b04:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b06:	2307      	movs	r3, #7
 8000b08:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000b12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b16:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 fee2 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000b26:	f000 f804 	bl	8000b32 <Error_Handler>
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	3788      	adds	r7, #136	@ 0x88
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b36:	b672      	cpsid	i
}
 8000b38:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b3a:	bf00      	nop
 8000b3c:	e7fd      	b.n	8000b3a <Error_Handler+0x8>
	...

08000b40 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000b44:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf0 <MX_SAI2_Init+0xb0>)
 8000b46:	4a2b      	ldr	r2, [pc, #172]	@ (8000bf4 <MX_SAI2_Init+0xb4>)
 8000b48:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b4a:	4b29      	ldr	r3, [pc, #164]	@ (8000bf0 <MX_SAI2_Init+0xb0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b50:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <MX_SAI2_Init+0xb0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b56:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <MX_SAI2_Init+0xb0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b5c:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <MX_SAI2_Init+0xb0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b62:	4b23      	ldr	r3, [pc, #140]	@ (8000bf0 <MX_SAI2_Init+0xb0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000b68:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <MX_SAI2_Init+0xb0>)
 8000b6a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b6e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b70:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <MX_SAI2_Init+0xb0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b76:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <MX_SAI2_Init+0xb0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <MX_SAI2_Init+0xb0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <MX_SAI2_Init+0xb0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000b88:	2302      	movs	r3, #2
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4818      	ldr	r0, [pc, #96]	@ (8000bf0 <MX_SAI2_Init+0xb0>)
 8000b90:	f004 f9c2 	bl	8004f18 <HAL_SAI_InitProtocol>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000b9a:	f7ff ffca 	bl	8000b32 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <MX_SAI2_Init+0xb8>)
 8000ba0:	4a16      	ldr	r2, [pc, #88]	@ (8000bfc <MX_SAI2_Init+0xbc>)
 8000ba2:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <MX_SAI2_Init+0xb8>)
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000baa:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <MX_SAI2_Init+0xb8>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_SAI2_Init+0xb8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <MX_SAI2_Init+0xb8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_SAI2_Init+0xb8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <MX_SAI2_Init+0xb8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <MX_SAI2_Init+0xb8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000bce:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <MX_SAI2_Init+0xb8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4807      	ldr	r0, [pc, #28]	@ (8000bf8 <MX_SAI2_Init+0xb8>)
 8000bdc:	f004 f99c 	bl	8004f18 <HAL_SAI_InitProtocol>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000be6:	f7ff ffa4 	bl	8000b32 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000138 	.word	0x20000138
 8000bf4:	40015804 	.word	0x40015804
 8000bf8:	200001bc 	.word	0x200001bc
 8000bfc:	40015824 	.word	0x40015824

08000c00 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	@ 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a64      	ldr	r2, [pc, #400]	@ (8000da0 <HAL_SAI_MspInit+0x1a0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d15e      	bne.n	8000cd0 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000c12:	4b64      	ldr	r3, [pc, #400]	@ (8000da4 <HAL_SAI_MspInit+0x1a4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d113      	bne.n	8000c42 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000c1a:	4b63      	ldr	r3, [pc, #396]	@ (8000da8 <HAL_SAI_MspInit+0x1a8>)
 8000c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c1e:	4a62      	ldr	r2, [pc, #392]	@ (8000da8 <HAL_SAI_MspInit+0x1a8>)
 8000c20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c26:	4b60      	ldr	r3, [pc, #384]	@ (8000da8 <HAL_SAI_MspInit+0x1a8>)
 8000c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2105      	movs	r1, #5
 8000c36:	204b      	movs	r0, #75	@ 0x4b
 8000c38:	f000 ff3b 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000c3c:	204b      	movs	r0, #75	@ 0x4b
 8000c3e:	f000 ff54 	bl	8001aea <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000c42:	4b58      	ldr	r3, [pc, #352]	@ (8000da4 <HAL_SAI_MspInit+0x1a4>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	4a56      	ldr	r2, [pc, #344]	@ (8000da4 <HAL_SAI_MspInit+0x1a4>)
 8000c4a:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c4c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000c5e:	230d      	movs	r3, #13
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4850      	ldr	r0, [pc, #320]	@ (8000dac <HAL_SAI_MspInit+0x1ac>)
 8000c6a:	f001 f93f 	bl	8001eec <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000c6e:	4b50      	ldr	r3, [pc, #320]	@ (8000db0 <HAL_SAI_MspInit+0x1b0>)
 8000c70:	4a50      	ldr	r2, [pc, #320]	@ (8000db4 <HAL_SAI_MspInit+0x1b4>)
 8000c72:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000c74:	4b4e      	ldr	r3, [pc, #312]	@ (8000db0 <HAL_SAI_MspInit+0x1b0>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c7a:	4b4d      	ldr	r3, [pc, #308]	@ (8000db0 <HAL_SAI_MspInit+0x1b0>)
 8000c7c:	2210      	movs	r2, #16
 8000c7e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c80:	4b4b      	ldr	r3, [pc, #300]	@ (8000db0 <HAL_SAI_MspInit+0x1b0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000c86:	4b4a      	ldr	r3, [pc, #296]	@ (8000db0 <HAL_SAI_MspInit+0x1b0>)
 8000c88:	2280      	movs	r2, #128	@ 0x80
 8000c8a:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c8c:	4b48      	ldr	r3, [pc, #288]	@ (8000db0 <HAL_SAI_MspInit+0x1b0>)
 8000c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c92:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c94:	4b46      	ldr	r3, [pc, #280]	@ (8000db0 <HAL_SAI_MspInit+0x1b0>)
 8000c96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c9a:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000c9c:	4b44      	ldr	r3, [pc, #272]	@ (8000db0 <HAL_SAI_MspInit+0x1b0>)
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000ca2:	4b43      	ldr	r3, [pc, #268]	@ (8000db0 <HAL_SAI_MspInit+0x1b0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000ca8:	4841      	ldr	r0, [pc, #260]	@ (8000db0 <HAL_SAI_MspInit+0x1b0>)
 8000caa:	f000 ff39 	bl	8001b20 <HAL_DMA_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000cb4:	f7ff ff3d 	bl	8000b32 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a3d      	ldr	r2, [pc, #244]	@ (8000db0 <HAL_SAI_MspInit+0x1b0>)
 8000cbc:	671a      	str	r2, [r3, #112]	@ 0x70
 8000cbe:	4a3c      	ldr	r2, [pc, #240]	@ (8000db0 <HAL_SAI_MspInit+0x1b0>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a3a      	ldr	r2, [pc, #232]	@ (8000db0 <HAL_SAI_MspInit+0x1b0>)
 8000cc8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000cca:	4a39      	ldr	r2, [pc, #228]	@ (8000db0 <HAL_SAI_MspInit+0x1b0>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a38      	ldr	r2, [pc, #224]	@ (8000db8 <HAL_SAI_MspInit+0x1b8>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d15e      	bne.n	8000d98 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000cda:	4b32      	ldr	r3, [pc, #200]	@ (8000da4 <HAL_SAI_MspInit+0x1a4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d113      	bne.n	8000d0a <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000ce2:	4b31      	ldr	r3, [pc, #196]	@ (8000da8 <HAL_SAI_MspInit+0x1a8>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ce6:	4a30      	ldr	r2, [pc, #192]	@ (8000da8 <HAL_SAI_MspInit+0x1a8>)
 8000ce8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cee:	4b2e      	ldr	r3, [pc, #184]	@ (8000da8 <HAL_SAI_MspInit+0x1a8>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2105      	movs	r1, #5
 8000cfe:	204b      	movs	r0, #75	@ 0x4b
 8000d00:	f000 fed7 	bl	8001ab2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000d04:	204b      	movs	r0, #75	@ 0x4b
 8000d06:	f000 fef0 	bl	8001aea <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000d0a:	4b26      	ldr	r3, [pc, #152]	@ (8000da4 <HAL_SAI_MspInit+0x1a4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	4a24      	ldr	r2, [pc, #144]	@ (8000da4 <HAL_SAI_MspInit+0x1a4>)
 8000d12:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000d26:	230d      	movs	r3, #13
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4822      	ldr	r0, [pc, #136]	@ (8000dbc <HAL_SAI_MspInit+0x1bc>)
 8000d32:	f001 f8db 	bl	8001eec <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000d36:	4b22      	ldr	r3, [pc, #136]	@ (8000dc0 <HAL_SAI_MspInit+0x1c0>)
 8000d38:	4a22      	ldr	r2, [pc, #136]	@ (8000dc4 <HAL_SAI_MspInit+0x1c4>)
 8000d3a:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000d3c:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <HAL_SAI_MspInit+0x1c0>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d42:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc0 <HAL_SAI_MspInit+0x1c0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <HAL_SAI_MspInit+0x1c0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <HAL_SAI_MspInit+0x1c0>)
 8000d50:	2280      	movs	r2, #128	@ 0x80
 8000d52:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <HAL_SAI_MspInit+0x1c0>)
 8000d56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d5a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	@ (8000dc0 <HAL_SAI_MspInit+0x1c0>)
 8000d5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d62:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000d64:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <HAL_SAI_MspInit+0x1c0>)
 8000d66:	2220      	movs	r2, #32
 8000d68:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <HAL_SAI_MspInit+0x1c0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000d70:	4813      	ldr	r0, [pc, #76]	@ (8000dc0 <HAL_SAI_MspInit+0x1c0>)
 8000d72:	f000 fed5 	bl	8001b20 <HAL_DMA_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000d7c:	f7ff fed9 	bl	8000b32 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc0 <HAL_SAI_MspInit+0x1c0>)
 8000d84:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d86:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc0 <HAL_SAI_MspInit+0x1c0>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc0 <HAL_SAI_MspInit+0x1c0>)
 8000d90:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000d92:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc0 <HAL_SAI_MspInit+0x1c0>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	@ 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40015804 	.word	0x40015804
 8000da4:	200002d0 	.word	0x200002d0
 8000da8:	40021000 	.word	0x40021000
 8000dac:	48000400 	.word	0x48000400
 8000db0:	20000240 	.word	0x20000240
 8000db4:	4002006c 	.word	0x4002006c
 8000db8:	40015824 	.word	0x40015824
 8000dbc:	48000800 	.word	0x48000800
 8000dc0:	20000288 	.word	0x20000288
 8000dc4:	40020080 	.word	0x40020080

08000dc8 <sh_pins>:
#include "components/MCP23S17.h"




static int sh_pins(h_shell_t * h_shell, int argc, char ** argv) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]


	MCP23S17_Init();
 8000dd4:	f7ff fc06 	bl	80005e4 <MCP23S17_Init>
	MCP23S17_WriteRegister(MCP23S17_GPIOA, 0x00);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2012      	movs	r0, #18
 8000ddc:	f7ff fbd0 	bl	8000580 <MCP23S17_WriteRegister>
	return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <sh_status>:
static int sh_status(h_shell_t * h_shell, int argc, char ** argv) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
	int size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	3308      	adds	r3, #8
 8000dfc:	4a09      	ldr	r2, [pc, #36]	@ (8000e24 <sh_status+0x38>)
 8000dfe:	2128      	movs	r1, #40	@ 0x28
 8000e00:	4618      	mov	r0, r3
 8000e02:	f006 f9eb 	bl	80071dc <sniprintf>
 8000e06:	6178      	str	r0, [r7, #20]
			"System status: OK\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	6979      	ldr	r1, [r7, #20]
 8000e12:	b289      	uxth	r1, r1
 8000e14:	4610      	mov	r0, r2
 8000e16:	4798      	blx	r3
	return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	080086c8 	.word	0x080086c8

08000e28 <sh_led>:

static int sh_led(h_shell_t * h_shell, int argc, char ** argv) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
	int size;

	if (argc != 2) {
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d012      	beq.n	8000e60 <sh_led+0x38>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3308      	adds	r3, #8
 8000e3e:	4a31      	ldr	r2, [pc, #196]	@ (8000f04 <sh_led+0xdc>)
 8000e40:	2128      	movs	r1, #40	@ 0x28
 8000e42:	4618      	mov	r0, r3
 8000e44:	f006 f9ca 	bl	80071dc <sniprintf>
 8000e48:	6178      	str	r0, [r7, #20]
				"Usage: led <0|1>\r\n");
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	3208      	adds	r2, #8
 8000e52:	6979      	ldr	r1, [r7, #20]
 8000e54:	b289      	uxth	r1, r1
 8000e56:	4610      	mov	r0, r2
 8000e58:	4798      	blx	r3
		return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e5e:	e04d      	b.n	8000efc <sh_led+0xd4>
	}

	if (strcmp(argv[1], "0") == 0) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3304      	adds	r3, #4
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4928      	ldr	r1, [pc, #160]	@ (8000f08 <sh_led+0xe0>)
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff f9b1 	bl	80001d0 <strcmp>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d10e      	bne.n	8000e92 <sh_led+0x6a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2120      	movs	r1, #32
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7c:	f001 f9e0 	bl	8002240 <HAL_GPIO_WritePin>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "LED turned OFF\r\n");
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3308      	adds	r3, #8
 8000e84:	4a21      	ldr	r2, [pc, #132]	@ (8000f0c <sh_led+0xe4>)
 8000e86:	2128      	movs	r1, #40	@ 0x28
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f006 f9a7 	bl	80071dc <sniprintf>
 8000e8e:	6178      	str	r0, [r7, #20]
 8000e90:	e02b      	b.n	8000eea <sh_led+0xc2>
	}
	else if (strcmp(argv[1], "1") == 0) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3304      	adds	r3, #4
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	491d      	ldr	r1, [pc, #116]	@ (8000f10 <sh_led+0xe8>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff f998 	bl	80001d0 <strcmp>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10e      	bne.n	8000ec4 <sh_led+0x9c>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eae:	f001 f9c7 	bl	8002240 <HAL_GPIO_WritePin>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "LED turned ON\r\n");
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3308      	adds	r3, #8
 8000eb6:	4a17      	ldr	r2, [pc, #92]	@ (8000f14 <sh_led+0xec>)
 8000eb8:	2128      	movs	r1, #40	@ 0x28
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f006 f98e 	bl	80071dc <sniprintf>
 8000ec0:	6178      	str	r0, [r7, #20]
 8000ec2:	e012      	b.n	8000eea <sh_led+0xc2>
	}
	else {
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	3308      	adds	r3, #8
 8000ec8:	4a13      	ldr	r2, [pc, #76]	@ (8000f18 <sh_led+0xf0>)
 8000eca:	2128      	movs	r1, #40	@ 0x28
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f006 f985 	bl	80071dc <sniprintf>
 8000ed2:	6178      	str	r0, [r7, #20]
				"Invalid argument. Use 0 or 1\r\n");
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	3208      	adds	r2, #8
 8000edc:	6979      	ldr	r1, [r7, #20]
 8000ede:	b289      	uxth	r1, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4798      	blx	r3
		return -1;
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee8:	e008      	b.n	8000efc <sh_led+0xd4>
	}

	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	3208      	adds	r2, #8
 8000ef2:	6979      	ldr	r1, [r7, #20]
 8000ef4:	b289      	uxth	r1, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4798      	blx	r3
	return 0;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	080086dc 	.word	0x080086dc
 8000f08:	080086f0 	.word	0x080086f0
 8000f0c:	080086f4 	.word	0x080086f4
 8000f10:	08008708 	.word	0x08008708
 8000f14:	0800870c 	.word	0x0800870c
 8000f18:	0800871c 	.word	0x0800871c

08000f1c <sh_help>:

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	int i;
	int size;

	if (argc > 1) {
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	dd59      	ble.n	8000fe2 <sh_help+0xc6>
		for (i = 0; i < h_shell->func_list_size; i++) {
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	e03b      	b.n	8000fac <sh_help+0x90>
			if (strcmp(h_shell->func_list[i].cmd_name, argv[1]) == 0) {
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4610      	mov	r0, r2
 8000f50:	f7ff f93e 	bl	80001d0 <strcmp>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d125      	bne.n	8000fa6 <sh_help+0x8a>
				size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f103 0008 	add.w	r0, r3, #8
						"%s: %s\r\n", h_shell->func_list[i].cmd_name,
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6819      	ldr	r1, [r3, #0]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	4613      	mov	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	681c      	ldr	r4, [r3, #0]
						h_shell->func_list[i].description);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6819      	ldr	r1, [r3, #0]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	689b      	ldr	r3, [r3, #8]
				size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	4623      	mov	r3, r4
 8000f88:	4a30      	ldr	r2, [pc, #192]	@ (800104c <sh_help+0x130>)
 8000f8a:	2128      	movs	r1, #40	@ 0x28
 8000f8c:	f006 f926 	bl	80071dc <sniprintf>
 8000f90:	6138      	str	r0, [r7, #16]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	6939      	ldr	r1, [r7, #16]
 8000f9c:	b289      	uxth	r1, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4798      	blx	r3
				return 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e04d      	b.n	8001042 <sh_help+0x126>
		for (i = 0; i < h_shell->func_list_size; i++) {
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	dbbe      	blt.n	8000f34 <sh_help+0x18>
			}
		}
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f103 0008 	add.w	r0, r3, #8
				"Unknown command: %s\r\n", argv[1]);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3304      	adds	r3, #4
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a23      	ldr	r2, [pc, #140]	@ (8001050 <sh_help+0x134>)
 8000fc4:	2128      	movs	r1, #40	@ 0x28
 8000fc6:	f006 f909 	bl	80071dc <sniprintf>
 8000fca:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	6939      	ldr	r1, [r7, #16]
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4798      	blx	r3
		return -1;
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fe0:	e02f      	b.n	8001042 <sh_help+0x126>
	}

	for(i = 0; i < h_shell->func_list_size; i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e026      	b.n	8001036 <sh_help+0x11a>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f103 0008 	add.w	r0, r3, #8
				"%s: %s\r\n", h_shell->func_list[i].cmd_name,
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6819      	ldr	r1, [r3, #0]
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	681c      	ldr	r4, [r3, #0]
				h_shell->func_list[i].description);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	689b      	ldr	r3, [r3, #8]
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	4623      	mov	r3, r4
 8001016:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <sh_help+0x130>)
 8001018:	2128      	movs	r1, #40	@ 0x28
 800101a:	f006 f8df 	bl	80071dc <sniprintf>
 800101e:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	3208      	adds	r2, #8
 8001028:	6939      	ldr	r1, [r7, #16]
 800102a:	b289      	uxth	r1, r1
 800102c:	4610      	mov	r0, r2
 800102e:	4798      	blx	r3
	for(i = 0; i < h_shell->func_list_size; i++) {
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	dbd3      	blt.n	8000fe8 <sh_help+0xcc>
	}

	return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}
 800104a:	bf00      	nop
 800104c:	0800873c 	.word	0x0800873c
 8001050:	08008748 	.word	0x08008748

08001054 <shell_init>:



};

void shell_init(h_shell_t * h_shell) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	int size = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]

	h_shell->func_list = shell_functions;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a14      	ldr	r2, [pc, #80]	@ (80010b4 <shell_init+0x60>)
 8001064:	601a      	str	r2, [r3, #0]
	h_shell->func_list_size = sizeof(shell_functions) / sizeof(shell_functions[0]);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2204      	movs	r2, #4
 800106a:	605a      	str	r2, [r3, #4]

	size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3308      	adds	r3, #8
 8001070:	4a11      	ldr	r2, [pc, #68]	@ (80010b8 <shell_init+0x64>)
 8001072:	2128      	movs	r1, #40	@ 0x28
 8001074:	4618      	mov	r0, r3
 8001076:	f006 f8b1 	bl	80071dc <sniprintf>
 800107a:	60f8      	str	r0, [r7, #12]
			"\r\n\r\n===== Super auto radio v1.0 =====\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	68f9      	ldr	r1, [r7, #12]
 8001086:	b289      	uxth	r1, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4798      	blx	r3

	size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3308      	adds	r3, #8
 8001090:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <shell_init+0x68>)
 8001092:	2128      	movs	r1, #40	@ 0x28
 8001094:	4618      	mov	r0, r3
 8001096:	f006 f8a1 	bl	80071dc <sniprintf>
 800109a:	60f8      	str	r0, [r7, #12]
			"Type 'help' for available commands\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	68f9      	ldr	r1, [r7, #12]
 80010a6:	b289      	uxth	r1, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4798      	blx	r3
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	08008824 	.word	0x08008824
 80010b8:	080087cc 	.word	0x080087cc
 80010bc:	080087f4 	.word	0x080087f4

080010c0 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08e      	sub	sp, #56	@ 0x38
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	int i;
	int argc = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	@ 0x30
	char *argv[ARGC_MAX];
	char *token;

	token = strtok(buf, " ");
 80010ce:	4931      	ldr	r1, [pc, #196]	@ (8001194 <shell_exec+0xd4>)
 80010d0:	6838      	ldr	r0, [r7, #0]
 80010d2:	f006 f9e9 	bl	80074a8 <strtok>
 80010d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
	while (token != NULL && argc < ARGC_MAX) {
 80010d8:	e00d      	b.n	80010f6 <shell_exec+0x36>
		argv[argc++] = token;
 80010da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	633a      	str	r2, [r7, #48]	@ 0x30
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	3338      	adds	r3, #56	@ 0x38
 80010e4:	443b      	add	r3, r7
 80010e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010e8:	f843 2c30 	str.w	r2, [r3, #-48]
		token = strtok(NULL, " ");
 80010ec:	4929      	ldr	r1, [pc, #164]	@ (8001194 <shell_exec+0xd4>)
 80010ee:	2000      	movs	r0, #0
 80010f0:	f006 f9da 	bl	80074a8 <strtok>
 80010f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
	while (token != NULL && argc < ARGC_MAX) {
 80010f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <shell_exec+0x42>
 80010fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010fe:	2b07      	cmp	r3, #7
 8001100:	ddeb      	ble.n	80010da <shell_exec+0x1a>
	}

	if (argc == 0) return 0;
 8001102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <shell_exec+0x4c>
 8001108:	2300      	movs	r3, #0
 800110a:	e03e      	b.n	800118a <shell_exec+0xca>

	for (i = 0; i < h_shell->func_list_size; i++) {
 800110c:	2300      	movs	r3, #0
 800110e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001110:	e023      	b.n	800115a <shell_exec+0x9a>
		if (strcmp(h_shell->func_list[i].cmd_name, argv[0]) == 0) {
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6819      	ldr	r1, [r3, #0]
 8001116:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f851 	bl	80001d0 <strcmp>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10f      	bne.n	8001154 <shell_exec+0x94>
			return h_shell->func_list[i].func(h_shell, argc, argv);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6819      	ldr	r1, [r3, #0]
 8001138:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f107 0208 	add.w	r2, r7, #8
 800114a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	4798      	blx	r3
 8001150:	4603      	mov	r3, r0
 8001152:	e01a      	b.n	800118a <shell_exec+0xca>
	for (i = 0; i < h_shell->func_list_size; i++) {
 8001154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001156:	3301      	adds	r3, #1
 8001158:	637b      	str	r3, [r7, #52]	@ 0x34
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001160:	429a      	cmp	r2, r3
 8001162:	dbd6      	blt.n	8001112 <shell_exec+0x52>
		}
	}


	int size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f103 0008 	add.w	r0, r3, #8
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <shell_exec+0xd8>)
 800116e:	2128      	movs	r1, #40	@ 0x28
 8001170:	f006 f834 	bl	80071dc <sniprintf>
 8001174:	62b8      	str	r0, [r7, #40]	@ 0x28
			"Unknown command: %s\r\n", argv[0]);
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001180:	b289      	uxth	r1, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4798      	blx	r3
	return -1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800118a:	4618      	mov	r0, r3
 800118c:	3738      	adds	r7, #56	@ 0x38
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	0800881c 	.word	0x0800881c
 8001198:	08008748 	.word	0x08008748

0800119c <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "shell@radio>> ";

int shell_run(h_shell_t * h_shell) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	int reading = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
	int pos = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, strlen(prompt));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b0:	210e      	movs	r1, #14
 80011b2:	4826      	ldr	r0, [pc, #152]	@ (800124c <shell_run+0xb0>)
 80011b4:	4798      	blx	r3
		reading = 1;
 80011b6:	2301      	movs	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]

		while(reading) {
 80011ba:	e03a      	b.n	8001232 <shell_run+0x96>
			char c;
			h_shell->drv.receive(&c, 1);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c0:	f107 020f 	add.w	r2, r7, #15
 80011c4:	2101      	movs	r1, #1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4798      	blx	r3

			switch (c) {
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d00f      	beq.n	80011f0 <shell_run+0x54>
 80011d0:	2b0d      	cmp	r3, #13
 80011d2:	d119      	bne.n	8001208 <shell_run+0x6c>
			case '\r':
				h_shell->drv.transmit("\r\n", 2);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d8:	2102      	movs	r1, #2
 80011da:	481d      	ldr	r0, [pc, #116]	@ (8001250 <shell_run+0xb4>)
 80011dc:	4798      	blx	r3
				h_shell->cmd_buffer[pos] = 0;
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4413      	add	r3, r2
 80011e4:	3330      	adds	r3, #48	@ 0x30
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
				reading = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
				break;
 80011ee:	e020      	b.n	8001232 <shell_run+0x96>

			case '\b':
				if (pos > 0) {
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	dd1c      	ble.n	8001230 <shell_run+0x94>
					pos--;
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	613b      	str	r3, [r7, #16]
					h_shell->drv.transmit(backspace, 3);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001200:	2103      	movs	r1, #3
 8001202:	4814      	ldr	r0, [pc, #80]	@ (8001254 <shell_run+0xb8>)
 8001204:	4798      	blx	r3
				}
				break;
 8001206:	e013      	b.n	8001230 <shell_run+0x94>

			default:
				if (pos < BUFFER_SIZE - 1) {
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	2b26      	cmp	r3, #38	@ 0x26
 800120c:	dc11      	bgt.n	8001232 <shell_run+0x96>
					h_shell->drv.transmit(&c, 1);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001212:	f107 020f 	add.w	r2, r7, #15
 8001216:	2101      	movs	r1, #1
 8001218:	4610      	mov	r0, r2
 800121a:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c;
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	613a      	str	r2, [r7, #16]
 8001222:	7bf9      	ldrb	r1, [r7, #15]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	460a      	mov	r2, r1
 800122a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800122e:	e000      	b.n	8001232 <shell_run+0x96>
				break;
 8001230:	bf00      	nop
		while(reading) {
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1c1      	bne.n	80011bc <shell_run+0x20>
				}
			}
		}

		shell_exec(h_shell, h_shell->cmd_buffer);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3330      	adds	r3, #48	@ 0x30
 800123c:	4619      	mov	r1, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff3e 	bl	80010c0 <shell_exec>
		pos = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
		h_shell->drv.transmit(prompt, strlen(prompt));
 8001248:	e7b0      	b.n	80011ac <shell_run+0x10>
 800124a:	bf00      	nop
 800124c:	08008858 	.word	0x08008858
 8001250:	08008820 	.word	0x08008820
 8001254:	08008854 	.word	0x08008854

08001258 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800125c:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <MX_SPI3_Init+0x74>)
 800125e:	4a1c      	ldr	r2, [pc, #112]	@ (80012d0 <MX_SPI3_Init+0x78>)
 8001260:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001262:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <MX_SPI3_Init+0x74>)
 8001264:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001268:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800126a:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <MX_SPI3_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001270:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <MX_SPI3_Init+0x74>)
 8001272:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001276:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001278:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <MX_SPI3_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800127e:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <MX_SPI3_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_SPI3_Init+0x74>)
 8001286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800128a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <MX_SPI3_Init+0x74>)
 800128e:	2220      	movs	r2, #32
 8001290:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_SPI3_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_SPI3_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <MX_SPI3_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012a4:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_SPI3_Init+0x74>)
 80012a6:	2207      	movs	r2, #7
 80012a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <MX_SPI3_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_SPI3_Init+0x74>)
 80012b2:	2208      	movs	r2, #8
 80012b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_SPI3_Init+0x74>)
 80012b8:	f004 fb8b 	bl	80059d2 <HAL_SPI_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012c2:	f7ff fc36 	bl	8000b32 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200002d4 	.word	0x200002d4
 80012d0:	40003c00 	.word	0x40003c00

080012d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	@ 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a25      	ldr	r2, [pc, #148]	@ (8001388 <HAL_SPI_MspInit+0xb4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d144      	bne.n	8001380 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012f6:	4b25      	ldr	r3, [pc, #148]	@ (800138c <HAL_SPI_MspInit+0xb8>)
 80012f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fa:	4a24      	ldr	r2, [pc, #144]	@ (800138c <HAL_SPI_MspInit+0xb8>)
 80012fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001300:	6593      	str	r3, [r2, #88]	@ 0x58
 8001302:	4b22      	ldr	r3, [pc, #136]	@ (800138c <HAL_SPI_MspInit+0xb8>)
 8001304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001306:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <HAL_SPI_MspInit+0xb8>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	4a1e      	ldr	r2, [pc, #120]	@ (800138c <HAL_SPI_MspInit+0xb8>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131a:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <HAL_SPI_MspInit+0xb8>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_SPI_MspInit+0xb8>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a18      	ldr	r2, [pc, #96]	@ (800138c <HAL_SPI_MspInit+0xb8>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b16      	ldr	r3, [pc, #88]	@ (800138c <HAL_SPI_MspInit+0xb8>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800133e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001350:	2306      	movs	r3, #6
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	480d      	ldr	r0, [pc, #52]	@ (8001390 <HAL_SPI_MspInit+0xbc>)
 800135c:	f000 fdc6 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001360:	2320      	movs	r3, #32
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001370:	2306      	movs	r3, #6
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4806      	ldr	r0, [pc, #24]	@ (8001394 <HAL_SPI_MspInit+0xc0>)
 800137c:	f000 fdb6 	bl	8001eec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	@ 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40003c00 	.word	0x40003c00
 800138c:	40021000 	.word	0x40021000
 8001390:	48000800 	.word	0x48000800
 8001394:	48000400 	.word	0x48000400

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_MspInit+0x4c>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013a2:	4a10      	ldr	r2, [pc, #64]	@ (80013e4 <HAL_MspInit+0x4c>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <HAL_MspInit+0x4c>)
 80013ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <HAL_MspInit+0x4c>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ba:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <HAL_MspInit+0x4c>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <HAL_MspInit+0x4c>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	210f      	movs	r1, #15
 80013d2:	f06f 0001 	mvn.w	r0, #1
 80013d6:	f000 fb6c 	bl	8001ab2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000

080013e8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80013f0:	1d39      	adds	r1, r7, #4
 80013f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013f6:	2201      	movs	r2, #1
 80013f8:	4803      	ldr	r0, [pc, #12]	@ (8001408 <__io_putchar+0x20>)
 80013fa:	f004 feb5 	bl	8006168 <HAL_UART_Transmit>

  return ch;
 80013fe:	687b      	ldr	r3, [r7, #4]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000033c 	.word	0x2000033c

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <NMI_Handler+0x4>

08001414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <MemManage_Handler+0x4>

08001424 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <UsageFault_Handler+0x4>

08001434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001446:	f000 fa15 	bl	8001874 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800144a:	f005 fe37 	bl	80070bc <xTaskGetSchedulerState>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d001      	beq.n	8001458 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001454:	f005 fea0 	bl	8007198 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <DMA1_Channel6_IRQHandler+0x10>)
 8001462:	f000 fc94 	bl	8001d8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000240 	.word	0x20000240

08001470 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <DMA1_Channel7_IRQHandler+0x10>)
 8001476:	f000 fc8a 	bl	8001d8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000288 	.word	0x20000288

08001484 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8001488:	4803      	ldr	r0, [pc, #12]	@ (8001498 <SAI2_IRQHandler+0x14>)
 800148a:	f003 ff4f 	bl	800532c <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 800148e:	4803      	ldr	r0, [pc, #12]	@ (800149c <SAI2_IRQHandler+0x18>)
 8001490:	f003 ff4c 	bl	800532c <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000138 	.word	0x20000138
 800149c:	200001bc 	.word	0x200001bc

080014a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return 1;
 80014a4:	2301      	movs	r3, #1
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <_kill>:

int _kill(int pid, int sig)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ba:	f006 f859 	bl	8007570 <__errno>
 80014be:	4603      	mov	r3, r0
 80014c0:	2216      	movs	r2, #22
 80014c2:	601a      	str	r2, [r3, #0]
  return -1;
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_exit>:

void _exit (int status)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ffe7 	bl	80014b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014e2:	bf00      	nop
 80014e4:	e7fd      	b.n	80014e2 <_exit+0x12>

080014e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	e00a      	b.n	800150e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f8:	f3af 8000 	nop.w
 80014fc:	4601      	mov	r1, r0
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	60ba      	str	r2, [r7, #8]
 8001504:	b2ca      	uxtb	r2, r1
 8001506:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3301      	adds	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	429a      	cmp	r2, r3
 8001514:	dbf0      	blt.n	80014f8 <_read+0x12>
  }

  return len;
 8001516:	687b      	ldr	r3, [r7, #4]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	e009      	b.n	8001546 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	60ba      	str	r2, [r7, #8]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff54 	bl	80013e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	dbf1      	blt.n	8001532 <_write+0x12>
  }
  return len;
 800154e:	687b      	ldr	r3, [r7, #4]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <_close>:

int _close(int file)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001580:	605a      	str	r2, [r3, #4]
  return 0;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_isatty>:

int _isatty(int file)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c8:	4a14      	ldr	r2, [pc, #80]	@ (800161c <_sbrk+0x5c>)
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <_sbrk+0x60>)
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <_sbrk+0x64>)
 80015de:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <_sbrk+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d207      	bcs.n	8001600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f0:	f005 ffbe 	bl	8007570 <__errno>
 80015f4:	4603      	mov	r3, r0
 80015f6:	220c      	movs	r2, #12
 80015f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015fe:	e009      	b.n	8001614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001606:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	4a05      	ldr	r2, [pc, #20]	@ (8001624 <_sbrk+0x64>)
 8001610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20018000 	.word	0x20018000
 8001620:	00000400 	.word	0x00000400
 8001624:	20000338 	.word	0x20000338
 8001628:	200005d0 	.word	0x200005d0

0800162c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	@ (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001654:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <MX_USART2_UART_Init+0x58>)
 8001656:	4a15      	ldr	r2, [pc, #84]	@ (80016ac <MX_USART2_UART_Init+0x5c>)
 8001658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800165a:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <MX_USART2_UART_Init+0x58>)
 800165c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <MX_USART2_UART_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <MX_USART2_UART_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800166e:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <MX_USART2_UART_Init+0x58>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <MX_USART2_UART_Init+0x58>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <MX_USART2_UART_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <MX_USART2_UART_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001686:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <MX_USART2_UART_Init+0x58>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <MX_USART2_UART_Init+0x58>)
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_USART2_UART_Init+0x58>)
 8001694:	f004 fd1a 	bl	80060cc <HAL_UART_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800169e:	f7ff fa48 	bl	8000b32 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000033c 	.word	0x2000033c
 80016ac:	40004400 	.word	0x40004400

080016b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b0ac      	sub	sp, #176	@ 0xb0
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2288      	movs	r2, #136	@ 0x88
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f005 ff45 	bl	8007560 <memset>
  if(uartHandle->Instance==USART2)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a21      	ldr	r2, [pc, #132]	@ (8001760 <HAL_UART_MspInit+0xb0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d13b      	bne.n	8001758 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 f8f9 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016f8:	f7ff fa1b 	bl	8000b32 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016fc:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <HAL_UART_MspInit+0xb4>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001700:	4a18      	ldr	r2, [pc, #96]	@ (8001764 <HAL_UART_MspInit+0xb4>)
 8001702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001706:	6593      	str	r3, [r2, #88]	@ 0x58
 8001708:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <HAL_UART_MspInit+0xb4>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <HAL_UART_MspInit+0xb4>)
 8001716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001718:	4a12      	ldr	r2, [pc, #72]	@ (8001764 <HAL_UART_MspInit+0xb4>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001720:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <HAL_UART_MspInit+0xb4>)
 8001722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800172c:	230c      	movs	r3, #12
 800172e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001744:	2307      	movs	r3, #7
 8001746:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800174e:	4619      	mov	r1, r3
 8001750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001754:	f000 fbca 	bl	8001eec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001758:	bf00      	nop
 800175a:	37b0      	adds	r7, #176	@ 0xb0
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40004400 	.word	0x40004400
 8001764:	40021000 	.word	0x40021000

08001768 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001768:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800176c:	f7ff ff5e 	bl	800162c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001770:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001772:	490d      	ldr	r1, [pc, #52]	@ (80017a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001774:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <LoopForever+0xe>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001778:	e002      	b.n	8001780 <LoopCopyDataInit>

0800177a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800177c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177e:	3304      	adds	r3, #4

08001780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001784:	d3f9      	bcc.n	800177a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001788:	4c0a      	ldr	r4, [pc, #40]	@ (80017b4 <LoopForever+0x16>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800178c:	e001      	b.n	8001792 <LoopFillZerobss>

0800178e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001790:	3204      	adds	r2, #4

08001792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001794:	d3fb      	bcc.n	800178e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001796:	f005 fef1 	bl	800757c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800179a:	f7ff f903 	bl	80009a4 <main>

0800179e <LoopForever>:

LoopForever:
    b LoopForever
 800179e:	e7fe      	b.n	800179e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80017ac:	080089a0 	.word	0x080089a0
  ldr r2, =_sbss
 80017b0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80017b4:	200005cc 	.word	0x200005cc

080017b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017b8:	e7fe      	b.n	80017b8 <ADC1_2_IRQHandler>
	...

080017bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <HAL_Init+0x3c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a0b      	ldr	r2, [pc, #44]	@ (80017f8 <HAL_Init+0x3c>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d2:	2003      	movs	r0, #3
 80017d4:	f000 f962 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017d8:	200f      	movs	r0, #15
 80017da:	f000 f80f 	bl	80017fc <HAL_InitTick>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	e001      	b.n	80017ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ea:	f7ff fdd5 	bl	8001398 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017ee:	79fb      	ldrb	r3, [r7, #7]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40022000 	.word	0x40022000

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001808:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <HAL_InitTick+0x6c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d023      	beq.n	8001858 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001810:	4b16      	ldr	r3, [pc, #88]	@ (800186c <HAL_InitTick+0x70>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <HAL_InitTick+0x6c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800181e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f96d 	bl	8001b06 <HAL_SYSTICK_Config>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10f      	bne.n	8001852 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d809      	bhi.n	800184c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001840:	f000 f937 	bl	8001ab2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001844:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <HAL_InitTick+0x74>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e007      	b.n	800185c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e004      	b.n	800185c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	e001      	b.n	800185c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000008 	.word	0x20000008
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_IncTick+0x20>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x24>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a04      	ldr	r2, [pc, #16]	@ (8001898 <HAL_IncTick+0x24>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008
 8001898:	200003c4 	.word	0x200003c4

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	200003c4 	.word	0x200003c4

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff ffee 	bl	800189c <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018ce:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffde 	bl	800189c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	@ (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	@ (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	@ (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	@ (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	@ (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	@ 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	@ 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a7c:	f7ff ff8e 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff29 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff3e 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff8e 	bl	80019f0 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5d 	bl	800199c <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff31 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffa2 	bl	8001a58 <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e098      	b.n	8001c64 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b4d      	ldr	r3, [pc, #308]	@ (8001c70 <HAL_DMA_Init+0x150>)
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d80f      	bhi.n	8001b5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b4b      	ldr	r3, [pc, #300]	@ (8001c74 <HAL_DMA_Init+0x154>)
 8001b46:	4413      	add	r3, r2
 8001b48:	4a4b      	ldr	r2, [pc, #300]	@ (8001c78 <HAL_DMA_Init+0x158>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	009a      	lsls	r2, r3, #2
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a48      	ldr	r2, [pc, #288]	@ (8001c7c <HAL_DMA_Init+0x15c>)
 8001b5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b5c:	e00e      	b.n	8001b7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b46      	ldr	r3, [pc, #280]	@ (8001c80 <HAL_DMA_Init+0x160>)
 8001b66:	4413      	add	r3, r2
 8001b68:	4a43      	ldr	r2, [pc, #268]	@ (8001c78 <HAL_DMA_Init+0x158>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	009a      	lsls	r2, r3, #2
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a42      	ldr	r2, [pc, #264]	@ (8001c84 <HAL_DMA_Init+0x164>)
 8001b7a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bd6:	d039      	beq.n	8001c4c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	4a27      	ldr	r2, [pc, #156]	@ (8001c7c <HAL_DMA_Init+0x15c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d11a      	bne.n	8001c18 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001be2:	4b29      	ldr	r3, [pc, #164]	@ (8001c88 <HAL_DMA_Init+0x168>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f003 031c 	and.w	r3, r3, #28
 8001bee:	210f      	movs	r1, #15
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	4924      	ldr	r1, [pc, #144]	@ (8001c88 <HAL_DMA_Init+0x168>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001bfc:	4b22      	ldr	r3, [pc, #136]	@ (8001c88 <HAL_DMA_Init+0x168>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6859      	ldr	r1, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c08:	f003 031c 	and.w	r3, r3, #28
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	491d      	ldr	r1, [pc, #116]	@ (8001c88 <HAL_DMA_Init+0x168>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
 8001c16:	e019      	b.n	8001c4c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c18:	4b1c      	ldr	r3, [pc, #112]	@ (8001c8c <HAL_DMA_Init+0x16c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c20:	f003 031c 	and.w	r3, r3, #28
 8001c24:	210f      	movs	r1, #15
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	4917      	ldr	r1, [pc, #92]	@ (8001c8c <HAL_DMA_Init+0x16c>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c32:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <HAL_DMA_Init+0x16c>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6859      	ldr	r1, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f003 031c 	and.w	r3, r3, #28
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	4911      	ldr	r1, [pc, #68]	@ (8001c8c <HAL_DMA_Init+0x16c>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	40020407 	.word	0x40020407
 8001c74:	bffdfff8 	.word	0xbffdfff8
 8001c78:	cccccccd 	.word	0xcccccccd
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	bffdfbf8 	.word	0xbffdfbf8
 8001c84:	40020400 	.word	0x40020400
 8001c88:	400200a8 	.word	0x400200a8
 8001c8c:	400204a8 	.word	0x400204a8

08001c90 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d008      	beq.n	8001cba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2204      	movs	r2, #4
 8001cac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e022      	b.n	8001d00 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 020e 	bic.w	r2, r2, #14
 8001cc8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	f003 021c 	and.w	r2, r3, #28
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d005      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2204      	movs	r2, #4
 8001d28:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	73fb      	strb	r3, [r7, #15]
 8001d2e:	e029      	b.n	8001d84 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 020e 	bic.w	r2, r2, #14
 8001d3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d54:	f003 021c 	and.w	r2, r3, #28
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d62:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
    }
  }
  return status;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	f003 031c 	and.w	r3, r3, #28
 8001dae:	2204      	movs	r2, #4
 8001db0:	409a      	lsls	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d026      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x7a>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d021      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d107      	bne.n	8001de2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0204 	bic.w	r2, r2, #4
 8001de0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f003 021c 	and.w	r2, r3, #28
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	2104      	movs	r1, #4
 8001df0:	fa01 f202 	lsl.w	r2, r1, r2
 8001df4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d071      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e06:	e06c      	b.n	8001ee2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0c:	f003 031c 	and.w	r3, r3, #28
 8001e10:	2202      	movs	r2, #2
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d02e      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xec>
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d029      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10b      	bne.n	8001e4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 020a 	bic.w	r2, r2, #10
 8001e42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e50:	f003 021c 	and.w	r2, r3, #28
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	2102      	movs	r1, #2
 8001e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d038      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001e78:	e033      	b.n	8001ee2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f003 031c 	and.w	r3, r3, #28
 8001e82:	2208      	movs	r2, #8
 8001e84:	409a      	lsls	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d02a      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x156>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d025      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 020e 	bic.w	r2, r2, #14
 8001ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eac:	f003 021c 	and.w	r2, r3, #28
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ee2:	bf00      	nop
 8001ee4:	bf00      	nop
}
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efa:	e17f      	b.n	80021fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2101      	movs	r1, #1
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8171 	beq.w	80021f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d005      	beq.n	8001f2c <HAL_GPIO_Init+0x40>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d130      	bne.n	8001f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f62:	2201      	movs	r2, #1
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	091b      	lsrs	r3, r3, #4
 8001f78:	f003 0201 	and.w	r2, r3, #1
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d118      	bne.n	8001fcc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	08db      	lsrs	r3, r3, #3
 8001fb6:	f003 0201 	and.w	r2, r3, #1
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d017      	beq.n	8002008 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d123      	bne.n	800205c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	08da      	lsrs	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3208      	adds	r2, #8
 800201c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	08da      	lsrs	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3208      	adds	r2, #8
 8002056:	6939      	ldr	r1, [r7, #16]
 8002058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0203 	and.w	r2, r3, #3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80ac 	beq.w	80021f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209e:	4b5f      	ldr	r3, [pc, #380]	@ (800221c <HAL_GPIO_Init+0x330>)
 80020a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a2:	4a5e      	ldr	r2, [pc, #376]	@ (800221c <HAL_GPIO_Init+0x330>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80020aa:	4b5c      	ldr	r3, [pc, #368]	@ (800221c <HAL_GPIO_Init+0x330>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020b6:	4a5a      	ldr	r2, [pc, #360]	@ (8002220 <HAL_GPIO_Init+0x334>)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4013      	ands	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020e0:	d025      	beq.n	800212e <HAL_GPIO_Init+0x242>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002224 <HAL_GPIO_Init+0x338>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01f      	beq.n	800212a <HAL_GPIO_Init+0x23e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002228 <HAL_GPIO_Init+0x33c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d019      	beq.n	8002126 <HAL_GPIO_Init+0x23a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4d      	ldr	r2, [pc, #308]	@ (800222c <HAL_GPIO_Init+0x340>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d013      	beq.n	8002122 <HAL_GPIO_Init+0x236>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002230 <HAL_GPIO_Init+0x344>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00d      	beq.n	800211e <HAL_GPIO_Init+0x232>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4b      	ldr	r2, [pc, #300]	@ (8002234 <HAL_GPIO_Init+0x348>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d007      	beq.n	800211a <HAL_GPIO_Init+0x22e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4a      	ldr	r2, [pc, #296]	@ (8002238 <HAL_GPIO_Init+0x34c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d101      	bne.n	8002116 <HAL_GPIO_Init+0x22a>
 8002112:	2306      	movs	r3, #6
 8002114:	e00c      	b.n	8002130 <HAL_GPIO_Init+0x244>
 8002116:	2307      	movs	r3, #7
 8002118:	e00a      	b.n	8002130 <HAL_GPIO_Init+0x244>
 800211a:	2305      	movs	r3, #5
 800211c:	e008      	b.n	8002130 <HAL_GPIO_Init+0x244>
 800211e:	2304      	movs	r3, #4
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x244>
 8002122:	2303      	movs	r3, #3
 8002124:	e004      	b.n	8002130 <HAL_GPIO_Init+0x244>
 8002126:	2302      	movs	r3, #2
 8002128:	e002      	b.n	8002130 <HAL_GPIO_Init+0x244>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_GPIO_Init+0x244>
 800212e:	2300      	movs	r3, #0
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	f002 0203 	and.w	r2, r2, #3
 8002136:	0092      	lsls	r2, r2, #2
 8002138:	4093      	lsls	r3, r2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002140:	4937      	ldr	r1, [pc, #220]	@ (8002220 <HAL_GPIO_Init+0x334>)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	3302      	adds	r3, #2
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800214e:	4b3b      	ldr	r3, [pc, #236]	@ (800223c <HAL_GPIO_Init+0x350>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002172:	4a32      	ldr	r2, [pc, #200]	@ (800223c <HAL_GPIO_Init+0x350>)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002178:	4b30      	ldr	r3, [pc, #192]	@ (800223c <HAL_GPIO_Init+0x350>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800219c:	4a27      	ldr	r2, [pc, #156]	@ (800223c <HAL_GPIO_Init+0x350>)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021a2:	4b26      	ldr	r3, [pc, #152]	@ (800223c <HAL_GPIO_Init+0x350>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021c6:	4a1d      	ldr	r2, [pc, #116]	@ (800223c <HAL_GPIO_Init+0x350>)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <HAL_GPIO_Init+0x350>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021f0:	4a12      	ldr	r2, [pc, #72]	@ (800223c <HAL_GPIO_Init+0x350>)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	f47f ae78 	bne.w	8001efc <HAL_GPIO_Init+0x10>
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	371c      	adds	r7, #28
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	40010000 	.word	0x40010000
 8002224:	48000400 	.word	0x48000400
 8002228:	48000800 	.word	0x48000800
 800222c:	48000c00 	.word	0x48000c00
 8002230:	48001000 	.word	0x48001000
 8002234:	48001400 	.word	0x48001400
 8002238:	48001800 	.word	0x48001800
 800223c:	40010400 	.word	0x40010400

08002240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
 800224c:	4613      	mov	r3, r2
 800224e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002250:	787b      	ldrb	r3, [r7, #1]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800225c:	e002      	b.n	8002264 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4013      	ands	r3, r2
 8002288:	041a      	lsls	r2, r3, #16
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	43d9      	mvns	r1, r3
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	400b      	ands	r3, r1
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	619a      	str	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e08d      	b.n	80023d2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe fae2 	bl	8000894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2224      	movs	r2, #36	@ 0x24
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002304:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d107      	bne.n	800231e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	e006      	b.n	800232c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800232a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d108      	bne.n	8002346 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	e007      	b.n	8002356 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002354:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002368:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002378:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69d9      	ldr	r1, [r3, #28]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	4608      	mov	r0, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	817b      	strh	r3, [r7, #10]
 80023ee:	460b      	mov	r3, r1
 80023f0:	813b      	strh	r3, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b20      	cmp	r3, #32
 8002400:	f040 80fd 	bne.w	80025fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_I2C_Mem_Read+0x34>
 800240a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002416:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0f1      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_I2C_Mem_Read+0x4e>
 8002426:	2302      	movs	r3, #2
 8002428:	e0ea      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002432:	f7ff fa33 	bl	800189c <HAL_GetTick>
 8002436:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2319      	movs	r3, #25
 800243e:	2201      	movs	r2, #1
 8002440:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f95b 	bl	8002700 <I2C_WaitOnFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d5      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2222      	movs	r2, #34	@ 0x22
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2240      	movs	r2, #64	@ 0x40
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a3a      	ldr	r2, [r7, #32]
 800246e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002474:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800247c:	88f8      	ldrh	r0, [r7, #6]
 800247e:	893a      	ldrh	r2, [r7, #8]
 8002480:	8979      	ldrh	r1, [r7, #10]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	4603      	mov	r3, r0
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f8bf 	bl	8002610 <I2C_RequestMemoryRead>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0ad      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2bff      	cmp	r3, #255	@ 0xff
 80024ac:	d90e      	bls.n	80024cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	8979      	ldrh	r1, [r7, #10]
 80024bc:	4b52      	ldr	r3, [pc, #328]	@ (8002608 <HAL_I2C_Mem_Read+0x22c>)
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 fadf 	bl	8002a88 <I2C_TransferConfig>
 80024ca:	e00f      	b.n	80024ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	8979      	ldrh	r1, [r7, #10]
 80024de:	4b4a      	ldr	r3, [pc, #296]	@ (8002608 <HAL_I2C_Mem_Read+0x22c>)
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 face 	bl	8002a88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f2:	2200      	movs	r2, #0
 80024f4:	2104      	movs	r1, #4
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f902 	bl	8002700 <I2C_WaitOnFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e07c      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d034      	beq.n	80025ac <HAL_I2C_Mem_Read+0x1d0>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002546:	2b00      	cmp	r3, #0
 8002548:	d130      	bne.n	80025ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002550:	2200      	movs	r2, #0
 8002552:	2180      	movs	r1, #128	@ 0x80
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f8d3 	bl	8002700 <I2C_WaitOnFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e04d      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	2bff      	cmp	r3, #255	@ 0xff
 800256c:	d90e      	bls.n	800258c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002578:	b2da      	uxtb	r2, r3
 800257a:	8979      	ldrh	r1, [r7, #10]
 800257c:	2300      	movs	r3, #0
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fa7f 	bl	8002a88 <I2C_TransferConfig>
 800258a:	e00f      	b.n	80025ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259a:	b2da      	uxtb	r2, r3
 800259c:	8979      	ldrh	r1, [r7, #10]
 800259e:	2300      	movs	r3, #0
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fa6e 	bl	8002a88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d19a      	bne.n	80024ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f940 	bl	8002840 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e01a      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2220      	movs	r2, #32
 80025d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b0b      	ldr	r3, [pc, #44]	@ (800260c <HAL_I2C_Mem_Read+0x230>)
 80025de:	400b      	ands	r3, r1
 80025e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80025fe:	2302      	movs	r3, #2
  }
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	80002400 	.word	0x80002400
 800260c:	fe00e800 	.word	0xfe00e800

08002610 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af02      	add	r7, sp, #8
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	4608      	mov	r0, r1
 800261a:	4611      	mov	r1, r2
 800261c:	461a      	mov	r2, r3
 800261e:	4603      	mov	r3, r0
 8002620:	817b      	strh	r3, [r7, #10]
 8002622:	460b      	mov	r3, r1
 8002624:	813b      	strh	r3, [r7, #8]
 8002626:	4613      	mov	r3, r2
 8002628:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	8979      	ldrh	r1, [r7, #10]
 8002630:	4b20      	ldr	r3, [pc, #128]	@ (80026b4 <I2C_RequestMemoryRead+0xa4>)
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	2300      	movs	r3, #0
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fa26 	bl	8002a88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	69b9      	ldr	r1, [r7, #24]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f8b6 	bl	80027b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e02c      	b.n	80026aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002650:	88fb      	ldrh	r3, [r7, #6]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d105      	bne.n	8002662 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002656:	893b      	ldrh	r3, [r7, #8]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002660:	e015      	b.n	800268e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002662:	893b      	ldrh	r3, [r7, #8]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	b29b      	uxth	r3, r3
 8002668:	b2da      	uxtb	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	69b9      	ldr	r1, [r7, #24]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f89c 	bl	80027b2 <I2C_WaitOnTXISFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e012      	b.n	80026aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002684:	893b      	ldrh	r3, [r7, #8]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2200      	movs	r2, #0
 8002696:	2140      	movs	r1, #64	@ 0x40
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f831 	bl	8002700 <I2C_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	80002000 	.word	0x80002000

080026b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d103      	bne.n	80026d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2200      	movs	r2, #0
 80026d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d007      	beq.n	80026f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	619a      	str	r2, [r3, #24]
  }
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002710:	e03b      	b.n	800278a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	6839      	ldr	r1, [r7, #0]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f8d6 	bl	80028c8 <I2C_IsErrorOccurred>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e041      	b.n	80027aa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800272c:	d02d      	beq.n	800278a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272e:	f7ff f8b5 	bl	800189c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d302      	bcc.n	8002744 <I2C_WaitOnFlagUntilTimeout+0x44>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d122      	bne.n	800278a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4013      	ands	r3, r2
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	429a      	cmp	r2, r3
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	429a      	cmp	r2, r3
 8002760:	d113      	bne.n	800278a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e00f      	b.n	80027aa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699a      	ldr	r2, [r3, #24]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4013      	ands	r3, r2
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	429a      	cmp	r2, r3
 8002798:	bf0c      	ite	eq
 800279a:	2301      	moveq	r3, #1
 800279c:	2300      	movne	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d0b4      	beq.n	8002712 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027be:	e033      	b.n	8002828 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f87f 	bl	80028c8 <I2C_IsErrorOccurred>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e031      	b.n	8002838 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027da:	d025      	beq.n	8002828 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027dc:	f7ff f85e 	bl	800189c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d302      	bcc.n	80027f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d11a      	bne.n	8002828 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d013      	beq.n	8002828 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002804:	f043 0220 	orr.w	r2, r3, #32
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e007      	b.n	8002838 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b02      	cmp	r3, #2
 8002834:	d1c4      	bne.n	80027c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800284c:	e02f      	b.n	80028ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f838 	bl	80028c8 <I2C_IsErrorOccurred>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e02d      	b.n	80028be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002862:	f7ff f81b 	bl	800189c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d11a      	bne.n	80028ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b20      	cmp	r3, #32
 8002884:	d013      	beq.n	80028ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	f043 0220 	orr.w	r2, r3, #32
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e007      	b.n	80028be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d1c8      	bne.n	800284e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	@ 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d068      	beq.n	80029c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2210      	movs	r2, #16
 80028fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028fc:	e049      	b.n	8002992 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002904:	d045      	beq.n	8002992 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002906:	f7fe ffc9 	bl	800189c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <I2C_IsErrorOccurred+0x54>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d13a      	bne.n	8002992 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002926:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800292e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800293a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800293e:	d121      	bne.n	8002984 <I2C_IsErrorOccurred+0xbc>
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002946:	d01d      	beq.n	8002984 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	2b20      	cmp	r3, #32
 800294c:	d01a      	beq.n	8002984 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800295c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800295e:	f7fe ff9d 	bl	800189c <HAL_GetTick>
 8002962:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002964:	e00e      	b.n	8002984 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002966:	f7fe ff99 	bl	800189c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b19      	cmp	r3, #25
 8002972:	d907      	bls.n	8002984 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	f043 0320 	orr.w	r3, r3, #32
 800297a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002982:	e006      	b.n	8002992 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b20      	cmp	r3, #32
 8002990:	d1e9      	bne.n	8002966 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b20      	cmp	r3, #32
 800299e:	d003      	beq.n	80029a8 <I2C_IsErrorOccurred+0xe0>
 80029a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0aa      	beq.n	80028fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d103      	bne.n	80029b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2220      	movs	r2, #32
 80029b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	f043 0308 	orr.w	r3, r3, #8
 8002a00:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01c      	beq.n	8002a76 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fe3b 	bl	80026b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <I2C_IsErrorOccurred+0x1bc>)
 8002a4e:	400b      	ands	r3, r1
 8002a50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3728      	adds	r7, #40	@ 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	fe00e800 	.word	0xfe00e800

08002a88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	460b      	mov	r3, r1
 8002a94:	817b      	strh	r3, [r7, #10]
 8002a96:	4613      	mov	r3, r2
 8002a98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a9a:	897b      	ldrh	r3, [r7, #10]
 8002a9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aa0:	7a7b      	ldrb	r3, [r7, #9]
 8002aa2:	041b      	lsls	r3, r3, #16
 8002aa4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aa8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ab6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	0d5b      	lsrs	r3, r3, #21
 8002ac2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ac6:	4b08      	ldr	r3, [pc, #32]	@ (8002ae8 <I2C_TransferConfig+0x60>)
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	43db      	mvns	r3, r3
 8002acc:	ea02 0103 	and.w	r1, r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	03ff63ff 	.word	0x03ff63ff

08002aec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d138      	bne.n	8002b74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e032      	b.n	8002b76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2224      	movs	r2, #36	@ 0x24
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6819      	ldr	r1, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d139      	bne.n	8002c0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e033      	b.n	8002c0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2224      	movs	r2, #36	@ 0x24
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0201 	bic.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e000      	b.n	8002c0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c20:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40007000 	.word	0x40007000

08002c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c46:	d130      	bne.n	8002caa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c48:	4b23      	ldr	r3, [pc, #140]	@ (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c54:	d038      	beq.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c56:	4b20      	ldr	r3, [pc, #128]	@ (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c66:	4b1d      	ldr	r3, [pc, #116]	@ (8002cdc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2232      	movs	r2, #50	@ 0x32
 8002c6c:	fb02 f303 	mul.w	r3, r2, r3
 8002c70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0c9b      	lsrs	r3, r3, #18
 8002c78:	3301      	adds	r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c7c:	e002      	b.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c84:	4b14      	ldr	r3, [pc, #80]	@ (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c90:	d102      	bne.n	8002c98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f2      	bne.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c98:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ca4:	d110      	bne.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e00f      	b.n	8002cca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002caa:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb6:	d007      	beq.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cb8:	4b07      	ldr	r3, [pc, #28]	@ (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cc0:	4a05      	ldr	r2, [pc, #20]	@ (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	431bde83 	.word	0x431bde83

08002ce4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e3ca      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf6:	4b97      	ldr	r3, [pc, #604]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d00:	4b94      	ldr	r3, [pc, #592]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80e4 	beq.w	8002ee0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_RCC_OscConfig+0x4a>
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	2b0c      	cmp	r3, #12
 8002d22:	f040 808b 	bne.w	8002e3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	f040 8087 	bne.w	8002e3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d2e:	4b89      	ldr	r3, [pc, #548]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_RCC_OscConfig+0x62>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e3a2      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1a      	ldr	r2, [r3, #32]
 8002d4a:	4b82      	ldr	r3, [pc, #520]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <HAL_RCC_OscConfig+0x7c>
 8002d56:	4b7f      	ldr	r3, [pc, #508]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d5e:	e005      	b.n	8002d6c <HAL_RCC_OscConfig+0x88>
 8002d60:	4b7c      	ldr	r3, [pc, #496]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d223      	bcs.n	8002db8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fd55 	bl	8003824 <RCC_SetFlashLatencyFromMSIRange>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e383      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d84:	4b73      	ldr	r3, [pc, #460]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a72      	ldr	r2, [pc, #456]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d8a:	f043 0308 	orr.w	r3, r3, #8
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b70      	ldr	r3, [pc, #448]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	496d      	ldr	r1, [pc, #436]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002da2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	4968      	ldr	r1, [pc, #416]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
 8002db6:	e025      	b.n	8002e04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db8:	4b66      	ldr	r3, [pc, #408]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a65      	ldr	r2, [pc, #404]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dbe:	f043 0308 	orr.w	r3, r3, #8
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b63      	ldr	r3, [pc, #396]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4960      	ldr	r1, [pc, #384]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	495b      	ldr	r1, [pc, #364]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fd15 	bl	8003824 <RCC_SetFlashLatencyFromMSIRange>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e343      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e04:	f000 fc4a 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b52      	ldr	r3, [pc, #328]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	4950      	ldr	r1, [pc, #320]	@ (8002f58 <HAL_RCC_OscConfig+0x274>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e20:	4a4e      	ldr	r2, [pc, #312]	@ (8002f5c <HAL_RCC_OscConfig+0x278>)
 8002e22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e24:	4b4e      	ldr	r3, [pc, #312]	@ (8002f60 <HAL_RCC_OscConfig+0x27c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe fce7 	bl	80017fc <HAL_InitTick>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d052      	beq.n	8002ede <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	e327      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d032      	beq.n	8002eaa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e44:	4b43      	ldr	r3, [pc, #268]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a42      	ldr	r2, [pc, #264]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e50:	f7fe fd24 	bl	800189c <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e58:	f7fe fd20 	bl	800189c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e310      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e76:	4b37      	ldr	r3, [pc, #220]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a36      	ldr	r2, [pc, #216]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e7c:	f043 0308 	orr.w	r3, r3, #8
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b34      	ldr	r3, [pc, #208]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4931      	ldr	r1, [pc, #196]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e94:	4b2f      	ldr	r3, [pc, #188]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	492c      	ldr	r1, [pc, #176]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
 8002ea8:	e01a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a29      	ldr	r2, [pc, #164]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fcf1 	bl	800189c <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fced 	bl	800189c <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e2dd      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ed0:	4b20      	ldr	r3, [pc, #128]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f0      	bne.n	8002ebe <HAL_RCC_OscConfig+0x1da>
 8002edc:	e000      	b.n	8002ee0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ede:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d074      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d005      	beq.n	8002efe <HAL_RCC_OscConfig+0x21a>
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	d10e      	bne.n	8002f16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d10b      	bne.n	8002f16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efe:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d064      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x2f0>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d160      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e2ba      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x24a>
 8002f20:	4b0c      	ldr	r3, [pc, #48]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0b      	ldr	r2, [pc, #44]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	e026      	b.n	8002f7c <HAL_RCC_OscConfig+0x298>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f36:	d115      	bne.n	8002f64 <HAL_RCC_OscConfig+0x280>
 8002f38:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a05      	ldr	r2, [pc, #20]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b03      	ldr	r3, [pc, #12]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a02      	ldr	r2, [pc, #8]	@ (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	e014      	b.n	8002f7c <HAL_RCC_OscConfig+0x298>
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	08008868 	.word	0x08008868
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	20000004 	.word	0x20000004
 8002f64:	4ba0      	ldr	r3, [pc, #640]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a9f      	ldr	r2, [pc, #636]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b9d      	ldr	r3, [pc, #628]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a9c      	ldr	r2, [pc, #624]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe fc8a 	bl	800189c <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fc86 	bl	800189c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	@ 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e276      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f9e:	4b92      	ldr	r3, [pc, #584]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x2a8>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fc76 	bl	800189c <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fc72 	bl	800189c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	@ 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e262      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fc6:	4b88      	ldr	r3, [pc, #544]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x2d0>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d060      	beq.n	80030a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x310>
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b0c      	cmp	r3, #12
 8002fec:	d119      	bne.n	8003022 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d116      	bne.n	8003022 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff4:	4b7c      	ldr	r3, [pc, #496]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_OscConfig+0x328>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e23f      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b76      	ldr	r3, [pc, #472]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	4973      	ldr	r1, [pc, #460]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003020:	e040      	b.n	80030a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d023      	beq.n	8003072 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800302a:	4b6f      	ldr	r3, [pc, #444]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a6e      	ldr	r2, [pc, #440]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe fc31 	bl	800189c <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303e:	f7fe fc2d 	bl	800189c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e21d      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003050:	4b65      	ldr	r3, [pc, #404]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	4b62      	ldr	r3, [pc, #392]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	495f      	ldr	r1, [pc, #380]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]
 8003070:	e018      	b.n	80030a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003072:	4b5d      	ldr	r3, [pc, #372]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a5c      	ldr	r2, [pc, #368]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800307c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fe fc0d 	bl	800189c <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003086:	f7fe fc09 	bl	800189c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e1f9      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003098:	4b53      	ldr	r3, [pc, #332]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f0      	bne.n	8003086 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d03c      	beq.n	800312a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01c      	beq.n	80030f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b8:	4b4b      	ldr	r3, [pc, #300]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030be:	4a4a      	ldr	r2, [pc, #296]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fe fbe8 	bl	800189c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fe fbe4 	bl	800189c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e1d4      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030e2:	4b41      	ldr	r3, [pc, #260]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ef      	beq.n	80030d0 <HAL_RCC_OscConfig+0x3ec>
 80030f0:	e01b      	b.n	800312a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f2:	4b3d      	ldr	r3, [pc, #244]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030f8:	4a3b      	ldr	r2, [pc, #236]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003102:	f7fe fbcb 	bl	800189c <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310a:	f7fe fbc7 	bl	800189c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1b7      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800311c:	4b32      	ldr	r3, [pc, #200]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 800311e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1ef      	bne.n	800310a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80a6 	beq.w	8003284 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800313c:	4b2a      	ldr	r3, [pc, #168]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10d      	bne.n	8003164 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003148:	4b27      	ldr	r3, [pc, #156]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314c:	4a26      	ldr	r2, [pc, #152]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003152:	6593      	str	r3, [r2, #88]	@ 0x58
 8003154:	4b24      	ldr	r3, [pc, #144]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003160:	2301      	movs	r3, #1
 8003162:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003164:	4b21      	ldr	r3, [pc, #132]	@ (80031ec <HAL_RCC_OscConfig+0x508>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d118      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003170:	4b1e      	ldr	r3, [pc, #120]	@ (80031ec <HAL_RCC_OscConfig+0x508>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1d      	ldr	r2, [pc, #116]	@ (80031ec <HAL_RCC_OscConfig+0x508>)
 8003176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317c:	f7fe fb8e 	bl	800189c <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003184:	f7fe fb8a 	bl	800189c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e17a      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003196:	4b15      	ldr	r3, [pc, #84]	@ (80031ec <HAL_RCC_OscConfig+0x508>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d108      	bne.n	80031bc <HAL_RCC_OscConfig+0x4d8>
 80031aa:	4b0f      	ldr	r3, [pc, #60]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b0:	4a0d      	ldr	r2, [pc, #52]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031ba:	e029      	b.n	8003210 <HAL_RCC_OscConfig+0x52c>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d115      	bne.n	80031f0 <HAL_RCC_OscConfig+0x50c>
 80031c4:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ca:	4a07      	ldr	r2, [pc, #28]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031cc:	f043 0304 	orr.w	r3, r3, #4
 80031d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031d4:	4b04      	ldr	r3, [pc, #16]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031da:	4a03      	ldr	r2, [pc, #12]	@ (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031e4:	e014      	b.n	8003210 <HAL_RCC_OscConfig+0x52c>
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40007000 	.word	0x40007000
 80031f0:	4b9c      	ldr	r3, [pc, #624]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f6:	4a9b      	ldr	r2, [pc, #620]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003200:	4b98      	ldr	r3, [pc, #608]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003206:	4a97      	ldr	r2, [pc, #604]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 8003208:	f023 0304 	bic.w	r3, r3, #4
 800320c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d016      	beq.n	8003246 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fe fb40 	bl	800189c <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800321e:	e00a      	b.n	8003236 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003220:	f7fe fb3c 	bl	800189c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e12a      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003236:	4b8b      	ldr	r3, [pc, #556]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ed      	beq.n	8003220 <HAL_RCC_OscConfig+0x53c>
 8003244:	e015      	b.n	8003272 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003246:	f7fe fb29 	bl	800189c <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7fe fb25 	bl	800189c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e113      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003264:	4b7f      	ldr	r3, [pc, #508]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ed      	bne.n	800324e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003272:	7ffb      	ldrb	r3, [r7, #31]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003278:	4b7a      	ldr	r3, [pc, #488]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	4a79      	ldr	r2, [pc, #484]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 800327e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003282:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80fe 	beq.w	800348a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003292:	2b02      	cmp	r3, #2
 8003294:	f040 80d0 	bne.w	8003438 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003298:	4b72      	ldr	r3, [pc, #456]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f003 0203 	and.w	r2, r3, #3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d130      	bne.n	800330e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	3b01      	subs	r3, #1
 80032b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d127      	bne.n	800330e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d11f      	bne.n	800330e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032d8:	2a07      	cmp	r2, #7
 80032da:	bf14      	ite	ne
 80032dc:	2201      	movne	r2, #1
 80032de:	2200      	moveq	r2, #0
 80032e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d113      	bne.n	800330e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f0:	085b      	lsrs	r3, r3, #1
 80032f2:	3b01      	subs	r3, #1
 80032f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d109      	bne.n	800330e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	3b01      	subs	r3, #1
 8003308:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d06e      	beq.n	80033ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b0c      	cmp	r3, #12
 8003312:	d069      	beq.n	80033e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003314:	4b53      	ldr	r3, [pc, #332]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003320:	4b50      	ldr	r3, [pc, #320]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0ad      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003330:	4b4c      	ldr	r3, [pc, #304]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a4b      	ldr	r2, [pc, #300]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 8003336:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800333a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800333c:	f7fe faae 	bl	800189c <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003344:	f7fe faaa 	bl	800189c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e09a      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003356:	4b43      	ldr	r3, [pc, #268]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003362:	4b40      	ldr	r3, [pc, #256]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	4b40      	ldr	r3, [pc, #256]	@ (8003468 <HAL_RCC_OscConfig+0x784>)
 8003368:	4013      	ands	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003372:	3a01      	subs	r2, #1
 8003374:	0112      	lsls	r2, r2, #4
 8003376:	4311      	orrs	r1, r2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800337c:	0212      	lsls	r2, r2, #8
 800337e:	4311      	orrs	r1, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003384:	0852      	lsrs	r2, r2, #1
 8003386:	3a01      	subs	r2, #1
 8003388:	0552      	lsls	r2, r2, #21
 800338a:	4311      	orrs	r1, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003390:	0852      	lsrs	r2, r2, #1
 8003392:	3a01      	subs	r2, #1
 8003394:	0652      	lsls	r2, r2, #25
 8003396:	4311      	orrs	r1, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800339c:	0912      	lsrs	r2, r2, #4
 800339e:	0452      	lsls	r2, r2, #17
 80033a0:	430a      	orrs	r2, r1
 80033a2:	4930      	ldr	r1, [pc, #192]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 80033ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a2a      	ldr	r2, [pc, #168]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 80033ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033c0:	f7fe fa6c 	bl	800189c <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe fa68 	bl	800189c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e058      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033da:	4b22      	ldr	r3, [pc, #136]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033e6:	e050      	b.n	800348a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e04f      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d148      	bne.n	800348a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a19      	ldr	r2, [pc, #100]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 80033fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003402:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003404:	4b17      	ldr	r3, [pc, #92]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4a16      	ldr	r2, [pc, #88]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 800340a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800340e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003410:	f7fe fa44 	bl	800189c <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003418:	f7fe fa40 	bl	800189c <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e030      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800342a:	4b0e      	ldr	r3, [pc, #56]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x734>
 8003436:	e028      	b.n	800348a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d023      	beq.n	8003486 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343e:	4b09      	ldr	r3, [pc, #36]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a08      	ldr	r2, [pc, #32]	@ (8003464 <HAL_RCC_OscConfig+0x780>)
 8003444:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344a:	f7fe fa27 	bl	800189c <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003450:	e00c      	b.n	800346c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003452:	f7fe fa23 	bl	800189c <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d905      	bls.n	800346c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e013      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
 8003464:	40021000 	.word	0x40021000
 8003468:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346c:	4b09      	ldr	r3, [pc, #36]	@ (8003494 <HAL_RCC_OscConfig+0x7b0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ec      	bne.n	8003452 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003478:	4b06      	ldr	r3, [pc, #24]	@ (8003494 <HAL_RCC_OscConfig+0x7b0>)
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	4905      	ldr	r1, [pc, #20]	@ (8003494 <HAL_RCC_OscConfig+0x7b0>)
 800347e:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <HAL_RCC_OscConfig+0x7b4>)
 8003480:	4013      	ands	r3, r2
 8003482:	60cb      	str	r3, [r1, #12]
 8003484:	e001      	b.n	800348a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3720      	adds	r7, #32
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021000 	.word	0x40021000
 8003498:	feeefffc 	.word	0xfeeefffc

0800349c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0e7      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b0:	4b75      	ldr	r3, [pc, #468]	@ (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d910      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b72      	ldr	r3, [pc, #456]	@ (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 0207 	bic.w	r2, r3, #7
 80034c6:	4970      	ldr	r1, [pc, #448]	@ (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b6e      	ldr	r3, [pc, #440]	@ (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0cf      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d010      	beq.n	800350e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	4b66      	ldr	r3, [pc, #408]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d908      	bls.n	800350e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034fc:	4b63      	ldr	r3, [pc, #396]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4960      	ldr	r1, [pc, #384]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d04c      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003522:	4b5a      	ldr	r3, [pc, #360]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d121      	bne.n	8003572 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e0a6      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353a:	4b54      	ldr	r3, [pc, #336]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d115      	bne.n	8003572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e09a      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003552:	4b4e      	ldr	r3, [pc, #312]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e08e      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003562:	4b4a      	ldr	r3, [pc, #296]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e086      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003572:	4b46      	ldr	r3, [pc, #280]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f023 0203 	bic.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4943      	ldr	r1, [pc, #268]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003584:	f7fe f98a 	bl	800189c <HAL_GetTick>
 8003588:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800358c:	f7fe f986 	bl	800189c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e06e      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	4b3a      	ldr	r3, [pc, #232]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 020c 	and.w	r2, r3, #12
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d1eb      	bne.n	800358c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d010      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	4b31      	ldr	r3, [pc, #196]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d208      	bcs.n	80035e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	4b2e      	ldr	r3, [pc, #184]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	492b      	ldr	r1, [pc, #172]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e2:	4b29      	ldr	r3, [pc, #164]	@ (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d210      	bcs.n	8003612 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f0:	4b25      	ldr	r3, [pc, #148]	@ (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f023 0207 	bic.w	r2, r3, #7
 80035f8:	4923      	ldr	r1, [pc, #140]	@ (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003600:	4b21      	ldr	r3, [pc, #132]	@ (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d001      	beq.n	8003612 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e036      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800361e:	4b1b      	ldr	r3, [pc, #108]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	4918      	ldr	r1, [pc, #96]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d009      	beq.n	8003650 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800363c:	4b13      	ldr	r3, [pc, #76]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4910      	ldr	r1, [pc, #64]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 800364c:	4313      	orrs	r3, r2
 800364e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003650:	f000 f824 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8003654:	4602      	mov	r2, r0
 8003656:	4b0d      	ldr	r3, [pc, #52]	@ (800368c <HAL_RCC_ClockConfig+0x1f0>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	490b      	ldr	r1, [pc, #44]	@ (8003690 <HAL_RCC_ClockConfig+0x1f4>)
 8003662:	5ccb      	ldrb	r3, [r1, r3]
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
 800366c:	4a09      	ldr	r2, [pc, #36]	@ (8003694 <HAL_RCC_ClockConfig+0x1f8>)
 800366e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003670:	4b09      	ldr	r3, [pc, #36]	@ (8003698 <HAL_RCC_ClockConfig+0x1fc>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe f8c1 	bl	80017fc <HAL_InitTick>
 800367a:	4603      	mov	r3, r0
 800367c:	72fb      	strb	r3, [r7, #11]

  return status;
 800367e:	7afb      	ldrb	r3, [r7, #11]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40022000 	.word	0x40022000
 800368c:	40021000 	.word	0x40021000
 8003690:	08008868 	.word	0x08008868
 8003694:	20000000 	.word	0x20000000
 8003698:	20000004 	.word	0x20000004

0800369c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800369c:	b480      	push	{r7}
 800369e:	b089      	sub	sp, #36	@ 0x24
 80036a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036aa:	4b3e      	ldr	r3, [pc, #248]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b4:	4b3b      	ldr	r3, [pc, #236]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x34>
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d121      	bne.n	800370e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d11e      	bne.n	800370e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036d0:	4b34      	ldr	r3, [pc, #208]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036dc:	4b31      	ldr	r3, [pc, #196]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e2:	0a1b      	lsrs	r3, r3, #8
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	e005      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036ec:	4b2d      	ldr	r3, [pc, #180]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036f8:	4a2b      	ldr	r2, [pc, #172]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003700:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10d      	bne.n	8003724 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b04      	cmp	r3, #4
 8003712:	d102      	bne.n	800371a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003714:	4b25      	ldr	r3, [pc, #148]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	e004      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d101      	bne.n	8003724 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003720:	4b23      	ldr	r3, [pc, #140]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003722:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	2b0c      	cmp	r3, #12
 8003728:	d134      	bne.n	8003794 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800372a:	4b1e      	ldr	r3, [pc, #120]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d003      	beq.n	8003742 <HAL_RCC_GetSysClockFreq+0xa6>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d003      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0xac>
 8003740:	e005      	b.n	800374e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003742:	4b1a      	ldr	r3, [pc, #104]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003744:	617b      	str	r3, [r7, #20]
      break;
 8003746:	e005      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003748:	4b19      	ldr	r3, [pc, #100]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800374a:	617b      	str	r3, [r7, #20]
      break;
 800374c:	e002      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	617b      	str	r3, [r7, #20]
      break;
 8003752:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003754:	4b13      	ldr	r3, [pc, #76]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	3301      	adds	r3, #1
 8003760:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003762:	4b10      	ldr	r3, [pc, #64]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	fb03 f202 	mul.w	r2, r3, r2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800377a:	4b0a      	ldr	r3, [pc, #40]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	0e5b      	lsrs	r3, r3, #25
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	3301      	adds	r3, #1
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003794:	69bb      	ldr	r3, [r7, #24]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3724      	adds	r7, #36	@ 0x24
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08008880 	.word	0x08008880
 80037ac:	00f42400 	.word	0x00f42400
 80037b0:	007a1200 	.word	0x007a1200

080037b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000000 	.word	0x20000000

080037cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037d0:	f7ff fff0 	bl	80037b4 <HAL_RCC_GetHCLKFreq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	0a1b      	lsrs	r3, r3, #8
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	4904      	ldr	r1, [pc, #16]	@ (80037f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037e2:	5ccb      	ldrb	r3, [r1, r3]
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000
 80037f4:	08008878 	.word	0x08008878

080037f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037fc:	f7ff ffda 	bl	80037b4 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b06      	ldr	r3, [pc, #24]	@ (800381c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0adb      	lsrs	r3, r3, #11
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4904      	ldr	r1, [pc, #16]	@ (8003820 <HAL_RCC_GetPCLK2Freq+0x28>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003818:	4618      	mov	r0, r3
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	08008878 	.word	0x08008878

08003824 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003830:	4b2a      	ldr	r3, [pc, #168]	@ (80038dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800383c:	f7ff f9ee 	bl	8002c1c <HAL_PWREx_GetVoltageRange>
 8003840:	6178      	str	r0, [r7, #20]
 8003842:	e014      	b.n	800386e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003844:	4b25      	ldr	r3, [pc, #148]	@ (80038dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003848:	4a24      	ldr	r2, [pc, #144]	@ (80038dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800384e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003850:	4b22      	ldr	r3, [pc, #136]	@ (80038dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800385c:	f7ff f9de 	bl	8002c1c <HAL_PWREx_GetVoltageRange>
 8003860:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003862:	4b1e      	ldr	r3, [pc, #120]	@ (80038dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	4a1d      	ldr	r2, [pc, #116]	@ (80038dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800386c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003874:	d10b      	bne.n	800388e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b80      	cmp	r3, #128	@ 0x80
 800387a:	d919      	bls.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003880:	d902      	bls.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003882:	2302      	movs	r3, #2
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	e013      	b.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003888:	2301      	movs	r3, #1
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	e010      	b.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b80      	cmp	r3, #128	@ 0x80
 8003892:	d902      	bls.n	800389a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003894:	2303      	movs	r3, #3
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	e00a      	b.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b80      	cmp	r3, #128	@ 0x80
 800389e:	d102      	bne.n	80038a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038a0:	2302      	movs	r3, #2
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	e004      	b.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b70      	cmp	r3, #112	@ 0x70
 80038aa:	d101      	bne.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038ac:	2301      	movs	r3, #1
 80038ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038b0:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f023 0207 	bic.w	r2, r3, #7
 80038b8:	4909      	ldr	r1, [pc, #36]	@ (80038e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038c0:	4b07      	ldr	r3, [pc, #28]	@ (80038e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d001      	beq.n	80038d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40022000 	.word	0x40022000

080038e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038ec:	2300      	movs	r3, #0
 80038ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038f0:	2300      	movs	r3, #0
 80038f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d041      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003904:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003908:	d02a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800390a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800390e:	d824      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003910:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003914:	d008      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003916:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800391a:	d81e      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003920:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003924:	d010      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003926:	e018      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003928:	4b86      	ldr	r3, [pc, #536]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4a85      	ldr	r2, [pc, #532]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003932:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003934:	e015      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	2100      	movs	r1, #0
 800393c:	4618      	mov	r0, r3
 800393e:	f001 f829 	bl	8004994 <RCCEx_PLLSAI1_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003946:	e00c      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3320      	adds	r3, #32
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f001 f914 	bl	8004b7c <RCCEx_PLLSAI2_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003958:	e003      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	74fb      	strb	r3, [r7, #19]
      break;
 800395e:	e000      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003962:	7cfb      	ldrb	r3, [r7, #19]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003968:	4b76      	ldr	r3, [pc, #472]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003976:	4973      	ldr	r1, [pc, #460]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800397e:	e001      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d041      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003994:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003998:	d02a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800399a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800399e:	d824      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039a4:	d008      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039aa:	d81e      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039b4:	d010      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039b6:	e018      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039b8:	4b62      	ldr	r3, [pc, #392]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a61      	ldr	r2, [pc, #388]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039c4:	e015      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 ffe1 	bl	8004994 <RCCEx_PLLSAI1_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039d6:	e00c      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3320      	adds	r3, #32
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 f8cc 	bl	8004b7c <RCCEx_PLLSAI2_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039e8:	e003      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	74fb      	strb	r3, [r7, #19]
      break;
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f2:	7cfb      	ldrb	r3, [r7, #19]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039f8:	4b52      	ldr	r3, [pc, #328]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a06:	494f      	ldr	r1, [pc, #316]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a0e:	e001      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80a0 	beq.w	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a22:	2300      	movs	r3, #0
 8003a24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a26:	4b47      	ldr	r3, [pc, #284]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a36:	2300      	movs	r3, #0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00d      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3c:	4b41      	ldr	r3, [pc, #260]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a40:	4a40      	ldr	r2, [pc, #256]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a48:	4b3e      	ldr	r3, [pc, #248]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a54:	2301      	movs	r3, #1
 8003a56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a58:	4b3b      	ldr	r3, [pc, #236]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a64:	f7fd ff1a 	bl	800189c <HAL_GetTick>
 8003a68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a6a:	e009      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a6c:	f7fd ff16 	bl	800189c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d902      	bls.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	74fb      	strb	r3, [r7, #19]
        break;
 8003a7e:	e005      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a80:	4b31      	ldr	r3, [pc, #196]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0ef      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a8c:	7cfb      	ldrb	r3, [r7, #19]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d15c      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a92:	4b2c      	ldr	r3, [pc, #176]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01f      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d019      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ab0:	4b24      	ldr	r3, [pc, #144]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003abc:	4b21      	ldr	r3, [pc, #132]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac2:	4a20      	ldr	r2, [pc, #128]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003acc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003adc:	4a19      	ldr	r2, [pc, #100]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aee:	f7fd fed5 	bl	800189c <HAL_GetTick>
 8003af2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af4:	e00b      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af6:	f7fd fed1 	bl	800189c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d902      	bls.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	74fb      	strb	r3, [r7, #19]
            break;
 8003b0c:	e006      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ec      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b22:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b32:	4904      	ldr	r1, [pc, #16]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b3a:	e009      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	74bb      	strb	r3, [r7, #18]
 8003b40:	e006      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	7cfb      	ldrb	r3, [r7, #19]
 8003b4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b50:	7c7b      	ldrb	r3, [r7, #17]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d105      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b56:	4b9e      	ldr	r3, [pc, #632]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5a:	4a9d      	ldr	r2, [pc, #628]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b6e:	4b98      	ldr	r3, [pc, #608]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b74:	f023 0203 	bic.w	r2, r3, #3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7c:	4994      	ldr	r1, [pc, #592]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b90:	4b8f      	ldr	r3, [pc, #572]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	f023 020c 	bic.w	r2, r3, #12
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9e:	498c      	ldr	r1, [pc, #560]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bb2:	4b87      	ldr	r3, [pc, #540]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	4983      	ldr	r1, [pc, #524]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bd4:	4b7e      	ldr	r3, [pc, #504]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	497b      	ldr	r1, [pc, #492]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bf6:	4b76      	ldr	r3, [pc, #472]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c04:	4972      	ldr	r1, [pc, #456]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c18:	4b6d      	ldr	r3, [pc, #436]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c26:	496a      	ldr	r1, [pc, #424]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c3a:	4b65      	ldr	r3, [pc, #404]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c48:	4961      	ldr	r1, [pc, #388]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c5c:	4b5c      	ldr	r3, [pc, #368]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6a:	4959      	ldr	r1, [pc, #356]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c7e:	4b54      	ldr	r3, [pc, #336]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c84:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8c:	4950      	ldr	r1, [pc, #320]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cae:	4948      	ldr	r1, [pc, #288]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cc2:	4b43      	ldr	r3, [pc, #268]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd0:	493f      	ldr	r1, [pc, #252]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d028      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ce4:	4b3a      	ldr	r3, [pc, #232]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cf2:	4937      	ldr	r1, [pc, #220]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d02:	d106      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d04:	4b32      	ldr	r3, [pc, #200]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4a31      	ldr	r2, [pc, #196]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d0e:	60d3      	str	r3, [r2, #12]
 8003d10:	e011      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d1a:	d10c      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	2101      	movs	r1, #1
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fe36 	bl	8004994 <RCCEx_PLLSAI1_Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d32:	7cfb      	ldrb	r3, [r7, #19]
 8003d34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d028      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d42:	4b23      	ldr	r3, [pc, #140]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d50:	491f      	ldr	r1, [pc, #124]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d60:	d106      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d62:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d6c:	60d3      	str	r3, [r2, #12]
 8003d6e:	e011      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2101      	movs	r1, #1
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fe07 	bl	8004994 <RCCEx_PLLSAI1_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d8a:	7cfb      	ldrb	r3, [r7, #19]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02b      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003da0:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dae:	4908      	ldr	r1, [pc, #32]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dbe:	d109      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc0:	4b03      	ldr	r3, [pc, #12]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a02      	ldr	r2, [pc, #8]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dca:	60d3      	str	r3, [r2, #12]
 8003dcc:	e014      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3304      	adds	r3, #4
 8003de2:	2101      	movs	r1, #1
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fdd5 	bl	8004994 <RCCEx_PLLSAI1_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dee:	7cfb      	ldrb	r3, [r7, #19]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003df4:	7cfb      	ldrb	r3, [r7, #19]
 8003df6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d02f      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e04:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e12:	4928      	ldr	r1, [pc, #160]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e22:	d10d      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	2102      	movs	r1, #2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fdb2 	bl	8004994 <RCCEx_PLLSAI1_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e34:	7cfb      	ldrb	r3, [r7, #19]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d014      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e3a:	7cfb      	ldrb	r3, [r7, #19]
 8003e3c:	74bb      	strb	r3, [r7, #18]
 8003e3e:	e011      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e48:	d10c      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3320      	adds	r3, #32
 8003e4e:	2102      	movs	r1, #2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fe93 	bl	8004b7c <RCCEx_PLLSAI2_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e5a:	7cfb      	ldrb	r3, [r7, #19]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e60:	7cfb      	ldrb	r3, [r7, #19]
 8003e62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e70:	4b10      	ldr	r3, [pc, #64]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e76:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e7e:	490d      	ldr	r1, [pc, #52]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e92:	4b08      	ldr	r3, [pc, #32]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ea2:	4904      	ldr	r1, [pc, #16]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003eaa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000

08003eb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003eca:	d13e      	bne.n	8003f4a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003ecc:	4bb2      	ldr	r3, [pc, #712]	@ (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ed6:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ede:	d028      	beq.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ee6:	f200 8542 	bhi.w	800496e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ef0:	d005      	beq.n	8003efe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ef8:	d00e      	beq.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003efa:	f000 bd38 	b.w	800496e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003efe:	4ba6      	ldr	r3, [pc, #664]	@ (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	f040 8532 	bne.w	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8003f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f12:	61fb      	str	r3, [r7, #28]
      break;
 8003f14:	f000 bd2d 	b.w	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003f18:	4b9f      	ldr	r3, [pc, #636]	@ (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	f040 8527 	bne.w	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003f28:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003f2c:	61fb      	str	r3, [r7, #28]
      break;
 8003f2e:	f000 bd22 	b.w	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003f32:	4b99      	ldr	r3, [pc, #612]	@ (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f3e:	f040 851c 	bne.w	800497a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8003f42:	4b96      	ldr	r3, [pc, #600]	@ (800419c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003f44:	61fb      	str	r3, [r7, #28]
      break;
 8003f46:	f000 bd18 	b.w	800497a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f4a:	4b93      	ldr	r3, [pc, #588]	@ (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d036      	beq.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d840      	bhi.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d003      	beq.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d020      	beq.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003f6c:	e039      	b.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003f6e:	4b8a      	ldr	r3, [pc, #552]	@ (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d116      	bne.n	8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003f7a:	4b87      	ldr	r3, [pc, #540]	@ (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003f86:	4b84      	ldr	r3, [pc, #528]	@ (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	e005      	b.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003f92:	4b81      	ldr	r3, [pc, #516]	@ (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f98:	0a1b      	lsrs	r3, r3, #8
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	4a80      	ldr	r2, [pc, #512]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003fa6:	e01f      	b.n	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61bb      	str	r3, [r7, #24]
      break;
 8003fac:	e01c      	b.n	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fae:	4b7a      	ldr	r3, [pc, #488]	@ (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fba:	d102      	bne.n	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003fbc:	4b79      	ldr	r3, [pc, #484]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003fbe:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003fc0:	e012      	b.n	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
      break;
 8003fc6:	e00f      	b.n	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003fc8:	4b73      	ldr	r3, [pc, #460]	@ (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fd4:	d102      	bne.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003fd6:	4b74      	ldr	r3, [pc, #464]	@ (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003fd8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003fda:	e005      	b.n	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61bb      	str	r3, [r7, #24]
      break;
 8003fe0:	e002      	b.n	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
      break;
 8003fe6:	bf00      	nop
    }

    switch(PeriphClk)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003fee:	f000 80dd 	beq.w	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ff8:	f200 84c1 	bhi.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004002:	f000 80d3 	beq.w	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800400c:	f200 84b7 	bhi.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004016:	f000 835f 	beq.w	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004020:	f200 84ad 	bhi.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800402a:	f000 847e 	beq.w	800492a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004034:	f200 84a3 	bhi.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800403e:	f000 82cd 	beq.w	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004048:	f200 8499 	bhi.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004052:	f000 80ab 	beq.w	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800405c:	f200 848f 	bhi.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004066:	f000 8090 	beq.w	800418a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004070:	f200 8485 	bhi.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800407a:	d07f      	beq.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004082:	f200 847c 	bhi.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800408c:	f000 8403 	beq.w	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004096:	f200 8472 	bhi.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040a0:	f000 83af 	beq.w	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040aa:	f200 8468 	bhi.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040b4:	f000 8379 	beq.w	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040be:	f200 845e 	bhi.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b80      	cmp	r3, #128	@ 0x80
 80040c6:	f000 8344 	beq.w	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b80      	cmp	r3, #128	@ 0x80
 80040ce:	f200 8456 	bhi.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d84b      	bhi.n	8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 844f 	beq.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	2b1f      	cmp	r3, #31
 80040e6:	f200 844a 	bhi.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80040ea:	a201      	add	r2, pc, #4	@ (adr r2, 80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80040ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f0:	080042d9 	.word	0x080042d9
 80040f4:	08004347 	.word	0x08004347
 80040f8:	0800497f 	.word	0x0800497f
 80040fc:	080043db 	.word	0x080043db
 8004100:	0800497f 	.word	0x0800497f
 8004104:	0800497f 	.word	0x0800497f
 8004108:	0800497f 	.word	0x0800497f
 800410c:	08004461 	.word	0x08004461
 8004110:	0800497f 	.word	0x0800497f
 8004114:	0800497f 	.word	0x0800497f
 8004118:	0800497f 	.word	0x0800497f
 800411c:	0800497f 	.word	0x0800497f
 8004120:	0800497f 	.word	0x0800497f
 8004124:	0800497f 	.word	0x0800497f
 8004128:	0800497f 	.word	0x0800497f
 800412c:	080044d9 	.word	0x080044d9
 8004130:	0800497f 	.word	0x0800497f
 8004134:	0800497f 	.word	0x0800497f
 8004138:	0800497f 	.word	0x0800497f
 800413c:	0800497f 	.word	0x0800497f
 8004140:	0800497f 	.word	0x0800497f
 8004144:	0800497f 	.word	0x0800497f
 8004148:	0800497f 	.word	0x0800497f
 800414c:	0800497f 	.word	0x0800497f
 8004150:	0800497f 	.word	0x0800497f
 8004154:	0800497f 	.word	0x0800497f
 8004158:	0800497f 	.word	0x0800497f
 800415c:	0800497f 	.word	0x0800497f
 8004160:	0800497f 	.word	0x0800497f
 8004164:	0800497f 	.word	0x0800497f
 8004168:	0800497f 	.word	0x0800497f
 800416c:	0800455b 	.word	0x0800455b
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b40      	cmp	r3, #64	@ 0x40
 8004174:	f000 82c1 	beq.w	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004178:	f000 bc01 	b.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800417c:	69b9      	ldr	r1, [r7, #24]
 800417e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004182:	f000 fdd9 	bl	8004d38 <RCCEx_GetSAIxPeriphCLKFreq>
 8004186:	61f8      	str	r0, [r7, #28]
      break;
 8004188:	e3fa      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800418a:	69b9      	ldr	r1, [r7, #24]
 800418c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004190:	f000 fdd2 	bl	8004d38 <RCCEx_GetSAIxPeriphCLKFreq>
 8004194:	61f8      	str	r0, [r7, #28]
      break;
 8004196:	e3f3      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004198:	40021000 	.word	0x40021000
 800419c:	0003d090 	.word	0x0003d090
 80041a0:	08008880 	.word	0x08008880
 80041a4:	00f42400 	.word	0x00f42400
 80041a8:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80041ac:	4ba9      	ldr	r3, [pc, #676]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80041be:	d00c      	beq.n	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80041c6:	d87f      	bhi.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041ce:	d04e      	beq.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041d6:	d01d      	beq.n	8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80041d8:	e076      	b.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80041da:	4b9e      	ldr	r3, [pc, #632]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d172      	bne.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80041e6:	4b9b      	ldr	r3, [pc, #620]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80041f2:	4b98      	ldr	r3, [pc, #608]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	091b      	lsrs	r3, r3, #4
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	e005      	b.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80041fe:	4b95      	ldr	r3, [pc, #596]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	4a93      	ldr	r2, [pc, #588]	@ (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800420c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004210:	61fb      	str	r3, [r7, #28]
          break;
 8004212:	e05b      	b.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004214:	4b8f      	ldr	r3, [pc, #572]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004220:	d156      	bne.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004222:	4b8c      	ldr	r3, [pc, #560]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800422a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800422e:	d14f      	bne.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004230:	4b88      	ldr	r3, [pc, #544]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800423a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	fb03 f202 	mul.w	r2, r3, r2
 8004244:	4b83      	ldr	r3, [pc, #524]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	3301      	adds	r3, #1
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004256:	4b7f      	ldr	r3, [pc, #508]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	0d5b      	lsrs	r3, r3, #21
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	3301      	adds	r3, #1
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	61fb      	str	r3, [r7, #28]
          break;
 800426c:	e030      	b.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800426e:	4b79      	ldr	r3, [pc, #484]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004276:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800427a:	d12b      	bne.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800427c:	4b75      	ldr	r3, [pc, #468]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004284:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004288:	d124      	bne.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800428a:	4b72      	ldr	r3, [pc, #456]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004294:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	fb03 f202 	mul.w	r2, r3, r2
 800429e:	4b6d      	ldr	r3, [pc, #436]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	091b      	lsrs	r3, r3, #4
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	3301      	adds	r3, #1
 80042aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ae:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80042b0:	4b68      	ldr	r3, [pc, #416]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	0d5b      	lsrs	r3, r3, #21
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	3301      	adds	r3, #1
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	61fb      	str	r3, [r7, #28]
          break;
 80042c6:	e005      	b.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80042c8:	bf00      	nop
 80042ca:	e359      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042cc:	bf00      	nop
 80042ce:	e357      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042d0:	bf00      	nop
 80042d2:	e355      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042d4:	bf00      	nop
        break;
 80042d6:	e353      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80042d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d827      	bhi.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80042ea:	a201      	add	r2, pc, #4	@ (adr r2, 80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80042ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f0:	08004301 	.word	0x08004301
 80042f4:	08004309 	.word	0x08004309
 80042f8:	08004311 	.word	0x08004311
 80042fc:	08004325 	.word	0x08004325
          frequency = HAL_RCC_GetPCLK2Freq();
 8004300:	f7ff fa7a 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 8004304:	61f8      	str	r0, [r7, #28]
          break;
 8004306:	e01d      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004308:	f7ff f9c8 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800430c:	61f8      	str	r0, [r7, #28]
          break;
 800430e:	e019      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004310:	4b50      	ldr	r3, [pc, #320]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800431c:	d10f      	bne.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800431e:	4b4f      	ldr	r3, [pc, #316]	@ (800445c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004320:	61fb      	str	r3, [r7, #28]
          break;
 8004322:	e00c      	b.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004324:	4b4b      	ldr	r3, [pc, #300]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b02      	cmp	r3, #2
 8004330:	d107      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8004332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004336:	61fb      	str	r3, [r7, #28]
          break;
 8004338:	e003      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 800433a:	bf00      	nop
 800433c:	e320      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800433e:	bf00      	nop
 8004340:	e31e      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004342:	bf00      	nop
        break;
 8004344:	e31c      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004346:	4b43      	ldr	r3, [pc, #268]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d83a      	bhi.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004358:	a201      	add	r2, pc, #4	@ (adr r2, 8004360 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004395 	.word	0x08004395
 8004364:	080043cf 	.word	0x080043cf
 8004368:	080043cf 	.word	0x080043cf
 800436c:	080043cf 	.word	0x080043cf
 8004370:	0800439d 	.word	0x0800439d
 8004374:	080043cf 	.word	0x080043cf
 8004378:	080043cf 	.word	0x080043cf
 800437c:	080043cf 	.word	0x080043cf
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043cf 	.word	0x080043cf
 8004388:	080043cf 	.word	0x080043cf
 800438c:	080043cf 	.word	0x080043cf
 8004390:	080043b9 	.word	0x080043b9
          frequency = HAL_RCC_GetPCLK1Freq();
 8004394:	f7ff fa1a 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8004398:	61f8      	str	r0, [r7, #28]
          break;
 800439a:	e01d      	b.n	80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 800439c:	f7ff f97e 	bl	800369c <HAL_RCC_GetSysClockFreq>
 80043a0:	61f8      	str	r0, [r7, #28]
          break;
 80043a2:	e019      	b.n	80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043b0:	d10f      	bne.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80043b2:	4b2a      	ldr	r3, [pc, #168]	@ (800445c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80043b4:	61fb      	str	r3, [r7, #28]
          break;
 80043b6:	e00c      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043b8:	4b26      	ldr	r3, [pc, #152]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d107      	bne.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80043c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ca:	61fb      	str	r3, [r7, #28]
          break;
 80043cc:	e003      	b.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80043ce:	bf00      	nop
 80043d0:	e2d6      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043d2:	bf00      	nop
 80043d4:	e2d4      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043d6:	bf00      	nop
        break;
 80043d8:	e2d2      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80043da:	4b1e      	ldr	r3, [pc, #120]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b30      	cmp	r3, #48	@ 0x30
 80043ea:	d021      	beq.n	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	2b30      	cmp	r3, #48	@ 0x30
 80043f0:	d829      	bhi.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d011      	beq.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d823      	bhi.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b10      	cmp	r3, #16
 8004408:	d004      	beq.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800440a:	e01c      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800440c:	f7ff f9de 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8004410:	61f8      	str	r0, [r7, #28]
          break;
 8004412:	e01d      	b.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004414:	f7ff f942 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8004418:	61f8      	str	r0, [r7, #28]
          break;
 800441a:	e019      	b.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800441c:	4b0d      	ldr	r3, [pc, #52]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004428:	d10f      	bne.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800442a:	4b0c      	ldr	r3, [pc, #48]	@ (800445c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800442c:	61fb      	str	r3, [r7, #28]
          break;
 800442e:	e00c      	b.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004430:	4b08      	ldr	r3, [pc, #32]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b02      	cmp	r3, #2
 800443c:	d107      	bne.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800443e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004442:	61fb      	str	r3, [r7, #28]
          break;
 8004444:	e003      	b.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8004446:	bf00      	nop
 8004448:	e29a      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800444a:	bf00      	nop
 800444c:	e298      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800444e:	bf00      	nop
        break;
 8004450:	e296      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	08008880 	.word	0x08008880
 800445c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004460:	4b9b      	ldr	r3, [pc, #620]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004466:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004470:	d021      	beq.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2bc0      	cmp	r3, #192	@ 0xc0
 8004476:	d829      	bhi.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b80      	cmp	r3, #128	@ 0x80
 800447c:	d011      	beq.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b80      	cmp	r3, #128	@ 0x80
 8004482:	d823      	bhi.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b40      	cmp	r3, #64	@ 0x40
 800448e:	d004      	beq.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004490:	e01c      	b.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004492:	f7ff f99b 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8004496:	61f8      	str	r0, [r7, #28]
          break;
 8004498:	e01d      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800449a:	f7ff f8ff 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800449e:	61f8      	str	r0, [r7, #28]
          break;
 80044a0:	e019      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044a2:	4b8b      	ldr	r3, [pc, #556]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ae:	d10f      	bne.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80044b0:	4b88      	ldr	r3, [pc, #544]	@ (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80044b2:	61fb      	str	r3, [r7, #28]
          break;
 80044b4:	e00c      	b.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044b6:	4b86      	ldr	r3, [pc, #536]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d107      	bne.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80044c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044c8:	61fb      	str	r3, [r7, #28]
          break;
 80044ca:	e003      	b.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80044cc:	bf00      	nop
 80044ce:	e257      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044d0:	bf00      	nop
 80044d2:	e255      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044d4:	bf00      	nop
        break;
 80044d6:	e253      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80044d8:	4b7d      	ldr	r3, [pc, #500]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ea:	d025      	beq.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044f2:	d82c      	bhi.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044fa:	d013      	beq.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004502:	d824      	bhi.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d004      	beq.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004510:	d004      	beq.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8004512:	e01c      	b.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004514:	f7ff f95a 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8004518:	61f8      	str	r0, [r7, #28]
          break;
 800451a:	e01d      	b.n	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800451c:	f7ff f8be 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8004520:	61f8      	str	r0, [r7, #28]
          break;
 8004522:	e019      	b.n	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004524:	4b6a      	ldr	r3, [pc, #424]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800452c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004530:	d10f      	bne.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8004532:	4b68      	ldr	r3, [pc, #416]	@ (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004534:	61fb      	str	r3, [r7, #28]
          break;
 8004536:	e00c      	b.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004538:	4b65      	ldr	r3, [pc, #404]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b02      	cmp	r3, #2
 8004544:	d107      	bne.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8004546:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800454a:	61fb      	str	r3, [r7, #28]
          break;
 800454c:	e003      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 800454e:	bf00      	nop
 8004550:	e216      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004552:	bf00      	nop
 8004554:	e214      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004556:	bf00      	nop
        break;
 8004558:	e212      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800455a:	4b5d      	ldr	r3, [pc, #372]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004560:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800456c:	d025      	beq.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004574:	d82c      	bhi.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800457c:	d013      	beq.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004584:	d824      	bhi.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004592:	d004      	beq.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8004594:	e01c      	b.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004596:	f7ff f919 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 800459a:	61f8      	str	r0, [r7, #28]
          break;
 800459c:	e01d      	b.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800459e:	f7ff f87d 	bl	800369c <HAL_RCC_GetSysClockFreq>
 80045a2:	61f8      	str	r0, [r7, #28]
          break;
 80045a4:	e019      	b.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045a6:	4b4a      	ldr	r3, [pc, #296]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045b2:	d10f      	bne.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80045b4:	4b47      	ldr	r3, [pc, #284]	@ (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80045b6:	61fb      	str	r3, [r7, #28]
          break;
 80045b8:	e00c      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045ba:	4b45      	ldr	r3, [pc, #276]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80045bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d107      	bne.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80045c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045cc:	61fb      	str	r3, [r7, #28]
          break;
 80045ce:	e003      	b.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80045d0:	bf00      	nop
 80045d2:	e1d5      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045d4:	bf00      	nop
 80045d6:	e1d3      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045d8:	bf00      	nop
        break;
 80045da:	e1d1      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80045dc:	4b3c      	ldr	r3, [pc, #240]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045ee:	d00c      	beq.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045f6:	d864      	bhi.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045fe:	d008      	beq.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004606:	d030      	beq.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004608:	e05b      	b.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800460a:	f7ff f847 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800460e:	61f8      	str	r0, [r7, #28]
          break;
 8004610:	e05c      	b.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004612:	4b2f      	ldr	r3, [pc, #188]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800461a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800461e:	d152      	bne.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004620:	4b2b      	ldr	r3, [pc, #172]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d04c      	beq.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800462c:	4b28      	ldr	r3, [pc, #160]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	0a1b      	lsrs	r3, r3, #8
 8004632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004636:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	fb03 f202 	mul.w	r2, r3, r2
 8004640:	4b23      	ldr	r3, [pc, #140]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	3301      	adds	r3, #1
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004652:	4b1f      	ldr	r3, [pc, #124]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	0e5b      	lsrs	r3, r3, #25
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	3301      	adds	r3, #1
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	fbb2 f3f3 	udiv	r3, r2, r3
 8004666:	61fb      	str	r3, [r7, #28]
          break;
 8004668:	e02d      	b.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800466a:	4b19      	ldr	r3, [pc, #100]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004672:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004676:	d128      	bne.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004678:	4b15      	ldr	r3, [pc, #84]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d022      	beq.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004684:	4b12      	ldr	r3, [pc, #72]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	0a1b      	lsrs	r3, r3, #8
 800468a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800468e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	fb03 f202 	mul.w	r2, r3, r2
 8004698:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	3301      	adds	r3, #1
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80046aa:	4b09      	ldr	r3, [pc, #36]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	0e5b      	lsrs	r3, r3, #25
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	3301      	adds	r3, #1
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80046be:	61fb      	str	r3, [r7, #28]
          break;
 80046c0:	e003      	b.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80046c2:	bf00      	nop
 80046c4:	e15c      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046c6:	bf00      	nop
 80046c8:	e15a      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046ca:	bf00      	nop
        break;
 80046cc:	e158      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80046ce:	bf00      	nop
 80046d0:	40021000 	.word	0x40021000
 80046d4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80046d8:	4b9d      	ldr	r3, [pc, #628]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046e2:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80046ea:	f7ff f885 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 80046ee:	61f8      	str	r0, [r7, #28]
        break;
 80046f0:	e146      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80046f2:	f7fe ffd3 	bl	800369c <HAL_RCC_GetSysClockFreq>
 80046f6:	61f8      	str	r0, [r7, #28]
        break;
 80046f8:	e142      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80046fa:	4b95      	ldr	r3, [pc, #596]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004700:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800470c:	d013      	beq.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004714:	d819      	bhi.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004722:	d004      	beq.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004724:	e011      	b.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004726:	f7ff f851 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 800472a:	61f8      	str	r0, [r7, #28]
          break;
 800472c:	e010      	b.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800472e:	f7fe ffb5 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8004732:	61f8      	str	r0, [r7, #28]
          break;
 8004734:	e00c      	b.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004736:	4b86      	ldr	r3, [pc, #536]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004742:	d104      	bne.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004744:	4b83      	ldr	r3, [pc, #524]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004746:	61fb      	str	r3, [r7, #28]
          break;
 8004748:	e001      	b.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800474a:	bf00      	nop
 800474c:	e118      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800474e:	bf00      	nop
        break;
 8004750:	e116      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004752:	4b7f      	ldr	r3, [pc, #508]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004764:	d013      	beq.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800476c:	d819      	bhi.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d004      	beq.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800477a:	d004      	beq.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 800477c:	e011      	b.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 800477e:	f7ff f825 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8004782:	61f8      	str	r0, [r7, #28]
          break;
 8004784:	e010      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004786:	f7fe ff89 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800478a:	61f8      	str	r0, [r7, #28]
          break;
 800478c:	e00c      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800478e:	4b70      	ldr	r3, [pc, #448]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479a:	d104      	bne.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 800479c:	4b6d      	ldr	r3, [pc, #436]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800479e:	61fb      	str	r3, [r7, #28]
          break;
 80047a0:	e001      	b.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80047a2:	bf00      	nop
 80047a4:	e0ec      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047a6:	bf00      	nop
        break;
 80047a8:	e0ea      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80047aa:	4b69      	ldr	r3, [pc, #420]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047bc:	d013      	beq.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047c4:	d819      	bhi.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d004      	beq.n	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d2:	d004      	beq.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80047d4:	e011      	b.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80047d6:	f7fe fff9 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 80047da:	61f8      	str	r0, [r7, #28]
          break;
 80047dc:	e010      	b.n	8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80047de:	f7fe ff5d 	bl	800369c <HAL_RCC_GetSysClockFreq>
 80047e2:	61f8      	str	r0, [r7, #28]
          break;
 80047e4:	e00c      	b.n	8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047e6:	4b5a      	ldr	r3, [pc, #360]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f2:	d104      	bne.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80047f4:	4b57      	ldr	r3, [pc, #348]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80047f6:	61fb      	str	r3, [r7, #28]
          break;
 80047f8:	e001      	b.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80047fa:	bf00      	nop
 80047fc:	e0c0      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047fe:	bf00      	nop
        break;
 8004800:	e0be      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004802:	4b53      	ldr	r3, [pc, #332]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004808:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004814:	d02c      	beq.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800481c:	d833      	bhi.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004824:	d01a      	beq.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800482c:	d82b      	bhi.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800483a:	d004      	beq.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 800483c:	e023      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800483e:	f7fe ffc5 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8004842:	61f8      	str	r0, [r7, #28]
          break;
 8004844:	e026      	b.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004846:	4b42      	ldr	r3, [pc, #264]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004848:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b02      	cmp	r3, #2
 8004852:	d11a      	bne.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004854:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004858:	61fb      	str	r3, [r7, #28]
          break;
 800485a:	e016      	b.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800485c:	4b3c      	ldr	r3, [pc, #240]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004868:	d111      	bne.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800486a:	4b3a      	ldr	r3, [pc, #232]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800486c:	61fb      	str	r3, [r7, #28]
          break;
 800486e:	e00e      	b.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004870:	4b37      	ldr	r3, [pc, #220]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b02      	cmp	r3, #2
 800487c:	d109      	bne.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800487e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004882:	61fb      	str	r3, [r7, #28]
          break;
 8004884:	e005      	b.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8004886:	bf00      	nop
 8004888:	e07a      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800488a:	bf00      	nop
 800488c:	e078      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800488e:	bf00      	nop
 8004890:	e076      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004892:	bf00      	nop
        break;
 8004894:	e074      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004896:	4b2e      	ldr	r3, [pc, #184]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048a8:	d02c      	beq.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048b0:	d833      	bhi.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048b8:	d01a      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048c0:	d82b      	bhi.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d004      	beq.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ce:	d004      	beq.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80048d0:	e023      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048d2:	f7fe ff7b 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 80048d6:	61f8      	str	r0, [r7, #28]
          break;
 80048d8:	e026      	b.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80048da:	4b1d      	ldr	r3, [pc, #116]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80048dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d11a      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80048e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80048ec:	61fb      	str	r3, [r7, #28]
          break;
 80048ee:	e016      	b.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048f0:	4b17      	ldr	r3, [pc, #92]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fc:	d111      	bne.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80048fe:	4b15      	ldr	r3, [pc, #84]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004900:	61fb      	str	r3, [r7, #28]
          break;
 8004902:	e00e      	b.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004904:	4b12      	ldr	r3, [pc, #72]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b02      	cmp	r3, #2
 8004910:	d109      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004916:	61fb      	str	r3, [r7, #28]
          break;
 8004918:	e005      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800491a:	bf00      	nop
 800491c:	e030      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800491e:	bf00      	nop
 8004920:	e02e      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004922:	bf00      	nop
 8004924:	e02c      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004926:	bf00      	nop
        break;
 8004928:	e02a      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800492a:	4b09      	ldr	r3, [pc, #36]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004930:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d004      	beq.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004942:	d009      	beq.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004944:	e012      	b.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004946:	f7fe ff41 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 800494a:	61f8      	str	r0, [r7, #28]
          break;
 800494c:	e00e      	b.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800494e:	bf00      	nop
 8004950:	40021000 	.word	0x40021000
 8004954:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004958:	4b0c      	ldr	r3, [pc, #48]	@ (800498c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004964:	d101      	bne.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004966:	4b0a      	ldr	r3, [pc, #40]	@ (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004968:	61fb      	str	r3, [r7, #28]
          break;
 800496a:	bf00      	nop
        break;
 800496c:	e008      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800496e:	bf00      	nop
 8004970:	e006      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004972:	bf00      	nop
 8004974:	e004      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004976:	bf00      	nop
 8004978:	e002      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800497a:	bf00      	nop
 800497c:	e000      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800497e:	bf00      	nop
    }
  }

  return(frequency);
 8004980:	69fb      	ldr	r3, [r7, #28]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000
 8004990:	00f42400 	.word	0x00f42400

08004994 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049a2:	4b75      	ldr	r3, [pc, #468]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d018      	beq.n	80049e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049ae:	4b72      	ldr	r3, [pc, #456]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f003 0203 	and.w	r2, r3, #3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d10d      	bne.n	80049da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
       ||
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d009      	beq.n	80049da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049c6:	4b6c      	ldr	r3, [pc, #432]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	091b      	lsrs	r3, r3, #4
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
       ||
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d047      	beq.n	8004a6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	73fb      	strb	r3, [r7, #15]
 80049de:	e044      	b.n	8004a6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d018      	beq.n	8004a1a <RCCEx_PLLSAI1_Config+0x86>
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d825      	bhi.n	8004a38 <RCCEx_PLLSAI1_Config+0xa4>
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d002      	beq.n	80049f6 <RCCEx_PLLSAI1_Config+0x62>
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d009      	beq.n	8004a08 <RCCEx_PLLSAI1_Config+0x74>
 80049f4:	e020      	b.n	8004a38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049f6:	4b60      	ldr	r3, [pc, #384]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d11d      	bne.n	8004a3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a06:	e01a      	b.n	8004a3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a08:	4b5b      	ldr	r3, [pc, #364]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d116      	bne.n	8004a42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a18:	e013      	b.n	8004a42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a1a:	4b57      	ldr	r3, [pc, #348]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10f      	bne.n	8004a46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a26:	4b54      	ldr	r3, [pc, #336]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a36:	e006      	b.n	8004a46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a3c:	e004      	b.n	8004a48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a3e:	bf00      	nop
 8004a40:	e002      	b.n	8004a48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a42:	bf00      	nop
 8004a44:	e000      	b.n	8004a48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a46:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10d      	bne.n	8004a6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6819      	ldr	r1, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	430b      	orrs	r3, r1
 8004a64:	4944      	ldr	r1, [pc, #272]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d17d      	bne.n	8004b6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a70:	4b41      	ldr	r3, [pc, #260]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a40      	ldr	r2, [pc, #256]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a7c:	f7fc ff0e 	bl	800189c <HAL_GetTick>
 8004a80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a82:	e009      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a84:	f7fc ff0a 	bl	800189c <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d902      	bls.n	8004a98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	73fb      	strb	r3, [r7, #15]
        break;
 8004a96:	e005      	b.n	8004aa4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a98:	4b37      	ldr	r3, [pc, #220]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ef      	bne.n	8004a84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d160      	bne.n	8004b6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d111      	bne.n	8004ad4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ab0:	4b31      	ldr	r3, [pc, #196]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6892      	ldr	r2, [r2, #8]
 8004ac0:	0211      	lsls	r1, r2, #8
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68d2      	ldr	r2, [r2, #12]
 8004ac6:	0912      	lsrs	r2, r2, #4
 8004ac8:	0452      	lsls	r2, r2, #17
 8004aca:	430a      	orrs	r2, r1
 8004acc:	492a      	ldr	r1, [pc, #168]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	610b      	str	r3, [r1, #16]
 8004ad2:	e027      	b.n	8004b24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d112      	bne.n	8004b00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ada:	4b27      	ldr	r3, [pc, #156]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004ae2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6892      	ldr	r2, [r2, #8]
 8004aea:	0211      	lsls	r1, r2, #8
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6912      	ldr	r2, [r2, #16]
 8004af0:	0852      	lsrs	r2, r2, #1
 8004af2:	3a01      	subs	r2, #1
 8004af4:	0552      	lsls	r2, r2, #21
 8004af6:	430a      	orrs	r2, r1
 8004af8:	491f      	ldr	r1, [pc, #124]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	610b      	str	r3, [r1, #16]
 8004afe:	e011      	b.n	8004b24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b00:	4b1d      	ldr	r3, [pc, #116]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b08:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6892      	ldr	r2, [r2, #8]
 8004b10:	0211      	lsls	r1, r2, #8
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6952      	ldr	r2, [r2, #20]
 8004b16:	0852      	lsrs	r2, r2, #1
 8004b18:	3a01      	subs	r2, #1
 8004b1a:	0652      	lsls	r2, r2, #25
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	4916      	ldr	r1, [pc, #88]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b24:	4b14      	ldr	r3, [pc, #80]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a13      	ldr	r2, [pc, #76]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b30:	f7fc feb4 	bl	800189c <HAL_GetTick>
 8004b34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b36:	e009      	b.n	8004b4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b38:	f7fc feb0 	bl	800189c <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d902      	bls.n	8004b4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	73fb      	strb	r3, [r7, #15]
          break;
 8004b4a:	e005      	b.n	8004b58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ef      	beq.n	8004b38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	4904      	ldr	r1, [pc, #16]	@ (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40021000 	.word	0x40021000

08004b7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b8a:	4b6a      	ldr	r3, [pc, #424]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d018      	beq.n	8004bc8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b96:	4b67      	ldr	r3, [pc, #412]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0203 	and.w	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d10d      	bne.n	8004bc2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
       ||
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004bae:	4b61      	ldr	r3, [pc, #388]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	091b      	lsrs	r3, r3, #4
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
       ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d047      	beq.n	8004c52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
 8004bc6:	e044      	b.n	8004c52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d018      	beq.n	8004c02 <RCCEx_PLLSAI2_Config+0x86>
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d825      	bhi.n	8004c20 <RCCEx_PLLSAI2_Config+0xa4>
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d002      	beq.n	8004bde <RCCEx_PLLSAI2_Config+0x62>
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d009      	beq.n	8004bf0 <RCCEx_PLLSAI2_Config+0x74>
 8004bdc:	e020      	b.n	8004c20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bde:	4b55      	ldr	r3, [pc, #340]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d11d      	bne.n	8004c26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bee:	e01a      	b.n	8004c26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bf0:	4b50      	ldr	r3, [pc, #320]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d116      	bne.n	8004c2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c00:	e013      	b.n	8004c2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c02:	4b4c      	ldr	r3, [pc, #304]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10f      	bne.n	8004c2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c0e:	4b49      	ldr	r3, [pc, #292]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c1e:	e006      	b.n	8004c2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
      break;
 8004c24:	e004      	b.n	8004c30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c26:	bf00      	nop
 8004c28:	e002      	b.n	8004c30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e000      	b.n	8004c30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10d      	bne.n	8004c52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c36:	4b3f      	ldr	r3, [pc, #252]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6819      	ldr	r1, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	4939      	ldr	r1, [pc, #228]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d167      	bne.n	8004d28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c58:	4b36      	ldr	r3, [pc, #216]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a35      	ldr	r2, [pc, #212]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c64:	f7fc fe1a 	bl	800189c <HAL_GetTick>
 8004c68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c6a:	e009      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c6c:	f7fc fe16 	bl	800189c <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d902      	bls.n	8004c80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c7e:	e005      	b.n	8004c8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c80:	4b2c      	ldr	r3, [pc, #176]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1ef      	bne.n	8004c6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d14a      	bne.n	8004d28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d111      	bne.n	8004cbc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c98:	4b26      	ldr	r3, [pc, #152]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6892      	ldr	r2, [r2, #8]
 8004ca8:	0211      	lsls	r1, r2, #8
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	68d2      	ldr	r2, [r2, #12]
 8004cae:	0912      	lsrs	r2, r2, #4
 8004cb0:	0452      	lsls	r2, r2, #17
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	491f      	ldr	r1, [pc, #124]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	614b      	str	r3, [r1, #20]
 8004cba:	e011      	b.n	8004ce0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004cc4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6892      	ldr	r2, [r2, #8]
 8004ccc:	0211      	lsls	r1, r2, #8
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6912      	ldr	r2, [r2, #16]
 8004cd2:	0852      	lsrs	r2, r2, #1
 8004cd4:	3a01      	subs	r2, #1
 8004cd6:	0652      	lsls	r2, r2, #25
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	4916      	ldr	r1, [pc, #88]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ce0:	4b14      	ldr	r3, [pc, #80]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a13      	ldr	r2, [pc, #76]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cec:	f7fc fdd6 	bl	800189c <HAL_GetTick>
 8004cf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cf2:	e009      	b.n	8004d08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cf4:	f7fc fdd2 	bl	800189c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d902      	bls.n	8004d08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	73fb      	strb	r3, [r7, #15]
          break;
 8004d06:	e005      	b.n	8004d14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d08:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0ef      	beq.n	8004cf4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d1a:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	4904      	ldr	r1, [pc, #16]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000

08004d38 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b089      	sub	sp, #36	@ 0x24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d54:	d10c      	bne.n	8004d70 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004d56:	4b6e      	ldr	r3, [pc, #440]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004d60:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d68:	d112      	bne.n	8004d90 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8004f14 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	e00f      	b.n	8004d90 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d76:	d10b      	bne.n	8004d90 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004d78:	4b65      	ldr	r3, [pc, #404]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004d82:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d8a:	d101      	bne.n	8004d90 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004d8c:	4b61      	ldr	r3, [pc, #388]	@ (8004f14 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004d8e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f040 80b4 	bne.w	8004f00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004da2:	d003      	beq.n	8004dac <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004daa:	d135      	bne.n	8004e18 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004dac:	4b58      	ldr	r3, [pc, #352]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004db8:	f040 80a1 	bne.w	8004efe <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004dbc:	4b54      	ldr	r3, [pc, #336]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 809a 	beq.w	8004efe <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004dca:	4b51      	ldr	r3, [pc, #324]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	091b      	lsrs	r3, r3, #4
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004dde:	4b4c      	ldr	r3, [pc, #304]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004de8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004df0:	4b47      	ldr	r3, [pc, #284]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004dfc:	2311      	movs	r3, #17
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	e001      	b.n	8004e06 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004e02:	2307      	movs	r3, #7
 8004e04:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	fb03 f202 	mul.w	r2, r3, r2
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004e16:	e072      	b.n	8004efe <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d133      	bne.n	8004e86 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004e1e:	4b3c      	ldr	r3, [pc, #240]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e2a:	d169      	bne.n	8004f00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004e2c:	4b38      	ldr	r3, [pc, #224]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d063      	beq.n	8004f00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004e38:	4b35      	ldr	r3, [pc, #212]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	091b      	lsrs	r3, r3, #4
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	3301      	adds	r3, #1
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004e4c:	4b30      	ldr	r3, [pc, #192]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	0a1b      	lsrs	r3, r3, #8
 8004e52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e56:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10a      	bne.n	8004e74 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004e6a:	2311      	movs	r3, #17
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e001      	b.n	8004e74 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004e70:	2307      	movs	r3, #7
 8004e72:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	fb03 f202 	mul.w	r2, r3, r2
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	61fb      	str	r3, [r7, #28]
 8004e84:	e03c      	b.n	8004f00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e8c:	d003      	beq.n	8004e96 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e94:	d134      	bne.n	8004f00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004e96:	4b1e      	ldr	r3, [pc, #120]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ea2:	d12d      	bne.n	8004f00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d027      	beq.n	8004f00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004eb0:	4b17      	ldr	r3, [pc, #92]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	091b      	lsrs	r3, r3, #4
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	3301      	adds	r3, #1
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004ec4:	4b12      	ldr	r3, [pc, #72]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ece:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8004f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8004ee2:	2311      	movs	r3, #17
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	e001      	b.n	8004eec <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004ee8:	2307      	movs	r3, #7
 8004eea:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	fb03 f202 	mul.w	r2, r3, r2
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	e000      	b.n	8004f00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004efe:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004f00:	69fb      	ldr	r3, [r7, #28]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3724      	adds	r7, #36	@ 0x24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000
 8004f14:	001fff68 	.word	0x001fff68

08004f18 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d904      	bls.n	8004f36 <HAL_SAI_InitProtocol+0x1e>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	3b03      	subs	r3, #3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d812      	bhi.n	8004f5a <HAL_SAI_InitProtocol+0x42>
 8004f34:	e008      	b.n	8004f48 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 fba3 	bl	8005688 <SAI_InitI2S>
 8004f42:	4603      	mov	r3, r0
 8004f44:	75fb      	strb	r3, [r7, #23]
      break;
 8004f46:	e00b      	b.n	8004f60 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 fc4c 	bl	80057ec <SAI_InitPCM>
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]
      break;
 8004f58:	e002      	b.n	8004f60 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f5e:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d104      	bne.n	8004f70 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 f808 	bl	8004f7c <HAL_SAI_Init>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e155      	b.n	800523a <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fb fe2c 	bl	8000c00 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fca1 	bl	80058f0 <SAI_Disable>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e140      	b.n	800523a <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d00c      	beq.n	8004fe2 <HAL_SAI_Init+0x66>
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d80d      	bhi.n	8004fe8 <HAL_SAI_Init+0x6c>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <HAL_SAI_Init+0x5a>
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d003      	beq.n	8004fdc <HAL_SAI_Init+0x60>
 8004fd4:	e008      	b.n	8004fe8 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
      break;
 8004fda:	e008      	b.n	8004fee <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004fdc:	2310      	movs	r3, #16
 8004fde:	61fb      	str	r3, [r7, #28]
      break;
 8004fe0:	e005      	b.n	8004fee <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004fe2:	2320      	movs	r3, #32
 8004fe4:	61fb      	str	r3, [r7, #28]
      break;
 8004fe6:	e002      	b.n	8004fee <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
      break;
 8004fec:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d81d      	bhi.n	8005032 <HAL_SAI_Init+0xb6>
 8004ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ffc <HAL_SAI_Init+0x80>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	0800500d 	.word	0x0800500d
 8005000:	08005013 	.word	0x08005013
 8005004:	0800501b 	.word	0x0800501b
 8005008:	08005023 	.word	0x08005023
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
      break;
 8005010:	e012      	b.n	8005038 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005016:	617b      	str	r3, [r7, #20]
      break;
 8005018:	e00e      	b.n	8005038 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800501a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800501e:	617b      	str	r3, [r7, #20]
      break;
 8005020:	e00a      	b.n	8005038 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005022:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005026:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	61fb      	str	r3, [r7, #28]
      break;
 8005030:	e002      	b.n	8005038 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
      break;
 8005036:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a81      	ldr	r2, [pc, #516]	@ (8005244 <HAL_SAI_Init+0x2c8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <HAL_SAI_Init+0xd0>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a80      	ldr	r2, [pc, #512]	@ (8005248 <HAL_SAI_Init+0x2cc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d103      	bne.n	8005054 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800504c:	4a7f      	ldr	r2, [pc, #508]	@ (800524c <HAL_SAI_Init+0x2d0>)
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e002      	b.n	800505a <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005054:	4a7e      	ldr	r2, [pc, #504]	@ (8005250 <HAL_SAI_Init+0x2d4>)
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d041      	beq.n	80050e6 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a77      	ldr	r2, [pc, #476]	@ (8005244 <HAL_SAI_Init+0x2c8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_SAI_Init+0xfa>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a75      	ldr	r2, [pc, #468]	@ (8005248 <HAL_SAI_Init+0x2cc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d105      	bne.n	8005082 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005076:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800507a:	f7fe ff1d 	bl	8003eb8 <HAL_RCCEx_GetPeriphCLKFreq>
 800507e:	6138      	str	r0, [r7, #16]
 8005080:	e004      	b.n	800508c <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005082:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005086:	f7fe ff17 	bl	8003eb8 <HAL_RCCEx_GetPeriphCLKFreq>
 800508a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	461a      	mov	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	025b      	lsls	r3, r3, #9
 800509e:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4a6b      	ldr	r2, [pc, #428]	@ (8005254 <HAL_SAI_Init+0x2d8>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	08da      	lsrs	r2, r3, #3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80050b2:	68f9      	ldr	r1, [r7, #12]
 80050b4:	4b67      	ldr	r3, [pc, #412]	@ (8005254 <HAL_SAI_Init+0x2d8>)
 80050b6:	fba3 2301 	umull	r2, r3, r3, r1
 80050ba:	08da      	lsrs	r2, r3, #3
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	1aca      	subs	r2, r1, r3
 80050c6:	2a08      	cmp	r2, #8
 80050c8:	d904      	bls.n	80050d4 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d104      	bne.n	80050e6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	085a      	lsrs	r2, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_SAI_Init+0x17a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d109      	bne.n	800510a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_SAI_Init+0x186>
 80050fe:	2300      	movs	r3, #0
 8005100:	e001      	b.n	8005106 <HAL_SAI_Init+0x18a>
 8005102:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	e008      	b.n	800511c <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d102      	bne.n	8005118 <HAL_SAI_Init+0x19c>
 8005112:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005116:	e000      	b.n	800511a <HAL_SAI_Init+0x19e>
 8005118:	2300      	movs	r3, #0
 800511a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6819      	ldr	r1, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	4b4c      	ldr	r3, [pc, #304]	@ (8005258 <HAL_SAI_Init+0x2dc>)
 8005128:	400b      	ands	r3, r1
 800512a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6819      	ldr	r1, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005140:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	431a      	orrs	r2, r3
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8005154:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005160:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	051b      	lsls	r3, r3, #20
 8005168:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005180:	f023 030f 	bic.w	r3, r3, #15
 8005184:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6859      	ldr	r1, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6899      	ldr	r1, [r3, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b2b      	ldr	r3, [pc, #172]	@ (800525c <HAL_SAI_Init+0x2e0>)
 80051b0:	400b      	ands	r3, r1
 80051b2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6899      	ldr	r1, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80051c4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80051ca:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80051d0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d6:	3b01      	subs	r3, #1
 80051d8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80051da:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68d9      	ldr	r1, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80051f2:	400b      	ands	r3, r1
 80051f4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68d9      	ldr	r1, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005204:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800520a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800520c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005212:	3b01      	subs	r3, #1
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3720      	adds	r7, #32
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40015404 	.word	0x40015404
 8005248:	40015424 	.word	0x40015424
 800524c:	40015400 	.word	0x40015400
 8005250:	40015800 	.word	0x40015800
 8005254:	cccccccd 	.word	0xcccccccd
 8005258:	ff05c010 	.word	0xff05c010
 800525c:	fff88000 	.word	0xfff88000

08005260 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_SAI_Abort+0x1a>
 8005276:	2302      	movs	r3, #2
 8005278:	e053      	b.n	8005322 <HAL_SAI_Abort+0xc2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fb34 	bl	80058f0 <SAI_Disable>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052a0:	d125      	bne.n	80052ee <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80052b0:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b12      	cmp	r3, #18
 80052bc:	d108      	bne.n	80052d0 <HAL_SAI_Abort+0x70>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fc fce0 	bl	8001c90 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b22      	cmp	r3, #34	@ 0x22
 80052da:	d108      	bne.n	80052ee <HAL_SAI_Abort+0x8e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fc fcd1 	bl	8001c90 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2200      	movs	r2, #0
 80052f4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052fe:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0208 	orr.w	r2, r2, #8
 800530e:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8005320:	7bfb      	ldrb	r3, [r7, #15]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8192 	beq.w	8005666 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d009      	beq.n	8005378 <HAL_SAI_IRQHandler+0x4c>
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d004      	beq.n	8005378 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	4798      	blx	r3
 8005376:	e176      	b.n	8005666 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01e      	beq.n	80053c0 <HAL_SAI_IRQHandler+0x94>
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d019      	beq.n	80053c0 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2201      	movs	r2, #1
 8005392:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b22      	cmp	r3, #34	@ 0x22
 800539e:	d101      	bne.n	80053a4 <HAL_SAI_IRQHandler+0x78>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <HAL_SAI_IRQHandler+0x7a>
 80053a4:	2302      	movs	r3, #2
 80053a6:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f95b 	bl	8005674 <HAL_SAI_ErrorCallback>
 80053be:	e152      	b.n	8005666 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d011      	beq.n	80053ee <HAL_SAI_IRQHandler+0xc2>
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00c      	beq.n	80053ee <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2202      	movs	r2, #2
 80053da:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 8140 	beq.w	8005666 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ea:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80053ec:	e13b      	b.n	8005666 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d055      	beq.n	80054a4 <HAL_SAI_IRQHandler+0x178>
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d050      	beq.n	80054a4 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2220      	movs	r2, #32
 8005408:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005410:	f043 0204 	orr.w	r2, r3, #4
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d038      	beq.n	8005496 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005428:	2b00      	cmp	r3, #0
 800542a:	d016      	beq.n	800545a <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005430:	4a8f      	ldr	r2, [pc, #572]	@ (8005670 <HAL_SAI_IRQHandler+0x344>)
 8005432:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005438:	4618      	mov	r0, r3
 800543a:	f7fc fc67 	bl	8001d0c <HAL_DMA_Abort_IT>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800544a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f90d 	bl	8005674 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 80fc 	beq.w	800565c <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005468:	4a81      	ldr	r2, [pc, #516]	@ (8005670 <HAL_SAI_IRQHandler+0x344>)
 800546a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005470:	4618      	mov	r0, r3
 8005472:	f7fc fc4b 	bl	8001d0c <HAL_DMA_Abort_IT>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 80ef 	beq.w	800565c <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005484:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f8f0 	bl	8005674 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005494:	e0e2      	b.n	800565c <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff fee2 	bl	8005260 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f8e9 	bl	8005674 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054a2:	e0db      	b.n	800565c <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d055      	beq.n	800555a <HAL_SAI_IRQHandler+0x22e>
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d050      	beq.n	800555a <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2240      	movs	r2, #64	@ 0x40
 80054be:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054c6:	f043 0208 	orr.w	r2, r3, #8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d038      	beq.n	800554c <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054e6:	4a62      	ldr	r2, [pc, #392]	@ (8005670 <HAL_SAI_IRQHandler+0x344>)
 80054e8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fc fc0c 	bl	8001d0c <HAL_DMA_Abort_IT>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005500:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8b2 	bl	8005674 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80a3 	beq.w	8005660 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551e:	4a54      	ldr	r2, [pc, #336]	@ (8005670 <HAL_SAI_IRQHandler+0x344>)
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005526:	4618      	mov	r0, r3
 8005528:	f7fc fbf0 	bl	8001d0c <HAL_DMA_Abort_IT>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8096 	beq.w	8005660 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800553a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f895 	bl	8005674 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800554a:	e089      	b.n	8005660 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff fe87 	bl	8005260 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f88e 	bl	8005674 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005558:	e082      	b.n	8005660 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d061      	beq.n	8005628 <HAL_SAI_IRQHandler+0x2fc>
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b00      	cmp	r3, #0
 800556c:	d05c      	beq.n	8005628 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2204      	movs	r2, #4
 8005574:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800557c:	f043 0220 	orr.w	r2, r3, #32
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d036      	beq.n	80055fe <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d016      	beq.n	80055c6 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800559c:	4a34      	ldr	r2, [pc, #208]	@ (8005670 <HAL_SAI_IRQHandler+0x344>)
 800559e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fc fbb1 	bl	8001d0c <HAL_DMA_Abort_IT>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f857 	bl	8005674 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d04a      	beq.n	8005664 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d2:	4a27      	ldr	r2, [pc, #156]	@ (8005670 <HAL_SAI_IRQHandler+0x344>)
 80055d4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fc fb96 	bl	8001d0c <HAL_DMA_Abort_IT>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d03e      	beq.n	8005664 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f83c 	bl	8005674 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055fc:	e032      	b.n	8005664 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2200      	movs	r2, #0
 8005604:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800560e:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f827 	bl	8005674 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005626:	e01d      	b.n	8005664 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f003 0310 	and.w	r3, r3, #16
 800562e:	2b00      	cmp	r3, #0
 8005630:	d019      	beq.n	8005666 <HAL_SAI_IRQHandler+0x33a>
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b00      	cmp	r3, #0
 800563a:	d014      	beq.n	8005666 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2210      	movs	r2, #16
 8005642:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800564a:	f043 0210 	orr.w	r2, r3, #16
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f80d 	bl	8005674 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800565a:	e004      	b.n	8005666 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800565c:	bf00      	nop
 800565e:	e002      	b.n	8005666 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005660:	bf00      	nop
 8005662:	e000      	b.n	8005666 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005664:	bf00      	nop
}
 8005666:	bf00      	nop
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	08005965 	.word	0x08005965

08005674 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <SAI_InitI2S+0x2e>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d103      	bne.n	80056be <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80056bc:	e002      	b.n	80056c4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80056ca:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e077      	b.n	80057de <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d107      	bne.n	8005704 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005700:	651a      	str	r2, [r3, #80]	@ 0x50
 8005702:	e006      	b.n	8005712 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800570a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d84f      	bhi.n	80057b8 <SAI_InitI2S+0x130>
 8005718:	a201      	add	r2, pc, #4	@ (adr r2, 8005720 <SAI_InitI2S+0x98>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005731 	.word	0x08005731
 8005724:	08005753 	.word	0x08005753
 8005728:	08005775 	.word	0x08005775
 800572c:	08005797 	.word	0x08005797
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2280      	movs	r2, #128	@ 0x80
 8005734:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	085b      	lsrs	r3, r3, #1
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	085b      	lsrs	r3, r3, #1
 8005744:	011a      	lsls	r2, r3, #4
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2240      	movs	r2, #64	@ 0x40
 800574e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005750:	e035      	b.n	80057be <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2280      	movs	r2, #128	@ 0x80
 8005756:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	019a      	lsls	r2, r3, #6
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	085b      	lsrs	r3, r3, #1
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2280      	movs	r2, #128	@ 0x80
 8005770:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005772:	e024      	b.n	80057be <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	22c0      	movs	r2, #192	@ 0xc0
 8005778:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	085b      	lsrs	r3, r3, #1
 800577e:	019a      	lsls	r2, r3, #6
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2280      	movs	r2, #128	@ 0x80
 8005792:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005794:	e013      	b.n	80057be <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	22e0      	movs	r2, #224	@ 0xe0
 800579a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	019a      	lsls	r2, r3, #6
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2280      	movs	r2, #128	@ 0x80
 80057b4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80057b6:	e002      	b.n	80057be <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	75fb      	strb	r3, [r7, #23]
      break;
 80057bc:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d10b      	bne.n	80057dc <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d102      	bne.n	80057d0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2210      	movs	r2, #16
 80057ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d102      	bne.n	80057dc <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2208      	movs	r2, #8
 80057da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop

080057ec <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <SAI_InitPCM+0x2e>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d103      	bne.n	8005822 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005820:	e002      	b.n	8005828 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005834:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800583c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005850:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b04      	cmp	r3, #4
 8005856:	d103      	bne.n	8005860 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	645a      	str	r2, [r3, #68]	@ 0x44
 800585e:	e002      	b.n	8005866 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	220d      	movs	r2, #13
 8005864:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b03      	cmp	r3, #3
 800586a:	d837      	bhi.n	80058dc <SAI_InitPCM+0xf0>
 800586c:	a201      	add	r2, pc, #4	@ (adr r2, 8005874 <SAI_InitPCM+0x88>)
 800586e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005872:	bf00      	nop
 8005874:	08005885 	.word	0x08005885
 8005878:	0800589b 	.word	0x0800589b
 800587c:	080058b1 	.word	0x080058b1
 8005880:	080058c7 	.word	0x080058c7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2280      	movs	r2, #128	@ 0x80
 8005888:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	011a      	lsls	r2, r3, #4
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2240      	movs	r2, #64	@ 0x40
 8005896:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005898:	e023      	b.n	80058e2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2280      	movs	r2, #128	@ 0x80
 800589e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2280      	movs	r2, #128	@ 0x80
 80058ac:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80058ae:	e018      	b.n	80058e2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	22c0      	movs	r2, #192	@ 0xc0
 80058b4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2280      	movs	r2, #128	@ 0x80
 80058c2:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80058c4:	e00d      	b.n	80058e2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	22e0      	movs	r2, #224	@ 0xe0
 80058ca:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2280      	movs	r2, #128	@ 0x80
 80058d8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80058da:	e002      	b.n	80058e2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	75fb      	strb	r3, [r7, #23]
      break;
 80058e0:	bf00      	nop
  }

  return status;
 80058e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80058f8:	4b18      	ldr	r3, [pc, #96]	@ (800595c <SAI_Disable+0x6c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a18      	ldr	r2, [pc, #96]	@ (8005960 <SAI_Disable+0x70>)
 80058fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005902:	0b1b      	lsrs	r3, r3, #12
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800591a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005928:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	72fb      	strb	r3, [r7, #11]
      break;
 8005936:	e009      	b.n	800594c <SAI_Disable+0x5c>
    }
    count--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3b01      	subs	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e7      	bne.n	800591c <SAI_Disable+0x2c>

  return status;
 800594c:	7afb      	ldrb	r3, [r7, #11]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	20000000 	.word	0x20000000
 8005960:	95cbec1b 	.word	0x95cbec1b

08005964 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005970:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005980:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2200      	movs	r2, #0
 8005988:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005992:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800599a:	2b20      	cmp	r3, #32
 800599c:	d00a      	beq.n	80059b4 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f7ff ffa6 	bl	80058f0 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0208 	orr.w	r2, r2, #8
 80059b2:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f7ff fe55 	bl	8005674 <HAL_SAI_ErrorCallback>
#endif
}
 80059ca:	bf00      	nop
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e095      	b.n	8005b10 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d108      	bne.n	80059fe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059f4:	d009      	beq.n	8005a0a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	61da      	str	r2, [r3, #28]
 80059fc:	e005      	b.n	8005a0a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7fb fc55 	bl	80012d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a40:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a4a:	d902      	bls.n	8005a52 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	e002      	b.n	8005a58 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a56:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005a60:	d007      	beq.n	8005a72 <HAL_SPI_Init+0xa0>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a6a:	d002      	beq.n	8005a72 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab4:	ea42 0103 	orr.w	r1, r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	0c1b      	lsrs	r3, r3, #16
 8005ace:	f003 0204 	and.w	r2, r3, #4
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad6:	f003 0310 	and.w	r3, r3, #16
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005aee:	ea42 0103 	orr.w	r1, r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b28:	f7fb feb8 	bl	800189c <HAL_GetTick>
 8005b2c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005b2e:	88fb      	ldrh	r3, [r7, #6]
 8005b30:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d001      	beq.n	8005b42 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e15c      	b.n	8005dfc <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_SPI_Transmit+0x36>
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e154      	b.n	8005dfc <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_SPI_Transmit+0x48>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e14d      	b.n	8005dfc <HAL_SPI_Transmit+0x2e4>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	88fa      	ldrh	r2, [r7, #6]
 8005b80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	88fa      	ldrh	r2, [r7, #6]
 8005b86:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb2:	d10f      	bne.n	8005bd4 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bde:	2b40      	cmp	r3, #64	@ 0x40
 8005be0:	d007      	beq.n	8005bf2 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bfa:	d952      	bls.n	8005ca2 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_SPI_Transmit+0xf2>
 8005c04:	8b7b      	ldrh	r3, [r7, #26]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d145      	bne.n	8005c96 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0e:	881a      	ldrh	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1a:	1c9a      	adds	r2, r3, #2
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c2e:	e032      	b.n	8005c96 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d112      	bne.n	8005c64 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c42:	881a      	ldrh	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	1c9a      	adds	r2, r3, #2
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c62:	e018      	b.n	8005c96 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c64:	f7fb fe1a 	bl	800189c <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d803      	bhi.n	8005c7c <HAL_SPI_Transmit+0x164>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c7a:	d102      	bne.n	8005c82 <HAL_SPI_Transmit+0x16a>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d109      	bne.n	8005c96 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e0b2      	b.n	8005dfc <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1c7      	bne.n	8005c30 <HAL_SPI_Transmit+0x118>
 8005ca0:	e083      	b.n	8005daa <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <HAL_SPI_Transmit+0x198>
 8005caa:	8b7b      	ldrh	r3, [r7, #26]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d177      	bne.n	8005da0 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d912      	bls.n	8005ce0 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbe:	881a      	ldrh	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cca:	1c9a      	adds	r2, r3, #2
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b02      	subs	r3, #2
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cde:	e05f      	b.n	8005da0 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	7812      	ldrb	r2, [r2, #0]
 8005cec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d06:	e04b      	b.n	8005da0 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d12b      	bne.n	8005d6e <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d912      	bls.n	8005d46 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d24:	881a      	ldrh	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d30:	1c9a      	adds	r2, r3, #2
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b02      	subs	r3, #2
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d44:	e02c      	b.n	8005da0 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	330c      	adds	r3, #12
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d6c:	e018      	b.n	8005da0 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d6e:	f7fb fd95 	bl	800189c <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d803      	bhi.n	8005d86 <HAL_SPI_Transmit+0x26e>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d84:	d102      	bne.n	8005d8c <HAL_SPI_Transmit+0x274>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e02d      	b.n	8005dfc <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1ae      	bne.n	8005d08 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f946 	bl	8006040 <SPI_EndRxTxTransaction>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
  }
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3720      	adds	r7, #32
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	4613      	mov	r3, r2
 8005e12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e14:	f7fb fd42 	bl	800189c <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1c:	1a9b      	subs	r3, r3, r2
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	4413      	add	r3, r2
 8005e22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e24:	f7fb fd3a 	bl	800189c <HAL_GetTick>
 8005e28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e2a:	4b39      	ldr	r3, [pc, #228]	@ (8005f10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	015b      	lsls	r3, r3, #5
 8005e30:	0d1b      	lsrs	r3, r3, #20
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	fb02 f303 	mul.w	r3, r2, r3
 8005e38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e3a:	e054      	b.n	8005ee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e42:	d050      	beq.n	8005ee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e44:	f7fb fd2a 	bl	800189c <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d902      	bls.n	8005e5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d13d      	bne.n	8005ed6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e72:	d111      	bne.n	8005e98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e7c:	d004      	beq.n	8005e88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e86:	d107      	bne.n	8005e98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea0:	d10f      	bne.n	8005ec2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ec0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e017      	b.n	8005f06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	bf0c      	ite	eq
 8005ef6:	2301      	moveq	r3, #1
 8005ef8:	2300      	movne	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	461a      	mov	r2, r3
 8005efe:	79fb      	ldrb	r3, [r7, #7]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d19b      	bne.n	8005e3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3720      	adds	r7, #32
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000000 	.word	0x20000000

08005f14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08a      	sub	sp, #40	@ 0x28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f26:	f7fb fcb9 	bl	800189c <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	4413      	add	r3, r2
 8005f34:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005f36:	f7fb fcb1 	bl	800189c <HAL_GetTick>
 8005f3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f44:	4b3d      	ldr	r3, [pc, #244]	@ (800603c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	00da      	lsls	r2, r3, #3
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	0d1b      	lsrs	r3, r3, #20
 8005f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f5c:	e060      	b.n	8006020 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f64:	d107      	bne.n	8005f76 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f7c:	d050      	beq.n	8006020 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f7e:	f7fb fc8d 	bl	800189c <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d902      	bls.n	8005f94 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d13d      	bne.n	8006010 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fa2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fac:	d111      	bne.n	8005fd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fb6:	d004      	beq.n	8005fc2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fc0:	d107      	bne.n	8005fd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fda:	d10f      	bne.n	8005ffc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ffa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e010      	b.n	8006032 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	3b01      	subs	r3, #1
 800601e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	4013      	ands	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	429a      	cmp	r2, r3
 800602e:	d196      	bne.n	8005f5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3728      	adds	r7, #40	@ 0x28
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20000000 	.word	0x20000000

08006040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af02      	add	r7, sp, #8
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2200      	movs	r2, #0
 8006054:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff ff5b 	bl	8005f14 <SPI_WaitFifoStateUntilTimeout>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d007      	beq.n	8006074 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006068:	f043 0220 	orr.w	r2, r3, #32
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e027      	b.n	80060c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2200      	movs	r2, #0
 800607c:	2180      	movs	r1, #128	@ 0x80
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff fec0 	bl	8005e04 <SPI_WaitFlagStateUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800608e:	f043 0220 	orr.w	r2, r3, #32
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e014      	b.n	80060c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f7ff ff34 	bl	8005f14 <SPI_WaitFifoStateUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060b6:	f043 0220 	orr.w	r2, r3, #32
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e000      	b.n	80060c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e040      	b.n	8006160 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7fb fade 	bl	80016b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2224      	movs	r2, #36	@ 0x24
 80060f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fc32 	bl	800697c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f977 	bl	800640c <UART_SetConfig>
 800611e:	4603      	mov	r3, r0
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e01b      	b.n	8006160 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fcb1 	bl	8006ac0 <UART_CheckIdleState>
 800615e:	4603      	mov	r3, r0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	@ 0x28
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	4613      	mov	r3, r2
 8006176:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800617c:	2b20      	cmp	r3, #32
 800617e:	d177      	bne.n	8006270 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <HAL_UART_Transmit+0x24>
 8006186:	88fb      	ldrh	r3, [r7, #6]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e070      	b.n	8006272 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2221      	movs	r2, #33	@ 0x21
 800619c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800619e:	f7fb fb7d 	bl	800189c <HAL_GetTick>
 80061a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	88fa      	ldrh	r2, [r7, #6]
 80061b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061bc:	d108      	bne.n	80061d0 <HAL_UART_Transmit+0x68>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	e003      	b.n	80061d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061d4:	2300      	movs	r3, #0
 80061d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061d8:	e02f      	b.n	800623a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2200      	movs	r2, #0
 80061e2:	2180      	movs	r1, #128	@ 0x80
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fd13 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e03b      	b.n	8006272 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10b      	bne.n	8006218 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	881a      	ldrh	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800620c:	b292      	uxth	r2, r2
 800620e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	3302      	adds	r3, #2
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	e007      	b.n	8006228 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	781a      	ldrb	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	3301      	adds	r3, #1
 8006226:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1c9      	bne.n	80061da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2200      	movs	r2, #0
 800624e:	2140      	movs	r1, #64	@ 0x40
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fcdd 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d004      	beq.n	8006266 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2220      	movs	r2, #32
 8006260:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e005      	b.n	8006272 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	e000      	b.n	8006272 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006270:	2302      	movs	r3, #2
  }
}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b08a      	sub	sp, #40	@ 0x28
 800627e:	af02      	add	r7, sp, #8
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	4613      	mov	r3, r2
 8006288:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006290:	2b20      	cmp	r3, #32
 8006292:	f040 80b6 	bne.w	8006402 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <HAL_UART_Receive+0x28>
 800629c:	88fb      	ldrh	r3, [r7, #6]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e0ae      	b.n	8006404 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2222      	movs	r2, #34	@ 0x22
 80062b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062bc:	f7fb faee 	bl	800189c <HAL_GetTick>
 80062c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	88fa      	ldrh	r2, [r7, #6]
 80062c6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	88fa      	ldrh	r2, [r7, #6]
 80062ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062da:	d10e      	bne.n	80062fa <HAL_UART_Receive+0x80>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d105      	bne.n	80062f0 <HAL_UART_Receive+0x76>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80062ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062ee:	e02d      	b.n	800634c <HAL_UART_Receive+0xd2>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	22ff      	movs	r2, #255	@ 0xff
 80062f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062f8:	e028      	b.n	800634c <HAL_UART_Receive+0xd2>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10d      	bne.n	800631e <HAL_UART_Receive+0xa4>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d104      	bne.n	8006314 <HAL_UART_Receive+0x9a>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	22ff      	movs	r2, #255	@ 0xff
 800630e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006312:	e01b      	b.n	800634c <HAL_UART_Receive+0xd2>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	227f      	movs	r2, #127	@ 0x7f
 8006318:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800631c:	e016      	b.n	800634c <HAL_UART_Receive+0xd2>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006326:	d10d      	bne.n	8006344 <HAL_UART_Receive+0xca>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d104      	bne.n	800633a <HAL_UART_Receive+0xc0>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	227f      	movs	r2, #127	@ 0x7f
 8006334:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006338:	e008      	b.n	800634c <HAL_UART_Receive+0xd2>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	223f      	movs	r2, #63	@ 0x3f
 800633e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006342:	e003      	b.n	800634c <HAL_UART_Receive+0xd2>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006352:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800635c:	d108      	bne.n	8006370 <HAL_UART_Receive+0xf6>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d104      	bne.n	8006370 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006366:	2300      	movs	r3, #0
 8006368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	61bb      	str	r3, [r7, #24]
 800636e:	e003      	b.n	8006378 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006374:	2300      	movs	r3, #0
 8006376:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006378:	e037      	b.n	80063ea <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2200      	movs	r2, #0
 8006382:	2120      	movs	r1, #32
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 fc43 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2220      	movs	r2, #32
 8006394:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e033      	b.n	8006404 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10c      	bne.n	80063bc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	8a7b      	ldrh	r3, [r7, #18]
 80063ac:	4013      	ands	r3, r2
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	3302      	adds	r3, #2
 80063b8:	61bb      	str	r3, [r7, #24]
 80063ba:	e00d      	b.n	80063d8 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	8a7b      	ldrh	r3, [r7, #18]
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	4013      	ands	r3, r2
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	3301      	adds	r3, #1
 80063d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1c1      	bne.n	800637a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	e000      	b.n	8006404 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006402:	2302      	movs	r3, #2
  }
}
 8006404:	4618      	mov	r0, r3
 8006406:	3720      	adds	r7, #32
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800640c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006410:	b08a      	sub	sp, #40	@ 0x28
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	431a      	orrs	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	431a      	orrs	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	4313      	orrs	r3, r2
 8006432:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	4ba4      	ldr	r3, [pc, #656]	@ (80066cc <UART_SetConfig+0x2c0>)
 800643c:	4013      	ands	r3, r2
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006444:	430b      	orrs	r3, r1
 8006446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a99      	ldr	r2, [pc, #612]	@ (80066d0 <UART_SetConfig+0x2c4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d004      	beq.n	8006478 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006474:	4313      	orrs	r3, r2
 8006476:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006488:	430a      	orrs	r2, r1
 800648a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a90      	ldr	r2, [pc, #576]	@ (80066d4 <UART_SetConfig+0x2c8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d126      	bne.n	80064e4 <UART_SetConfig+0xd8>
 8006496:	4b90      	ldr	r3, [pc, #576]	@ (80066d8 <UART_SetConfig+0x2cc>)
 8006498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800649c:	f003 0303 	and.w	r3, r3, #3
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d81b      	bhi.n	80064dc <UART_SetConfig+0xd0>
 80064a4:	a201      	add	r2, pc, #4	@ (adr r2, 80064ac <UART_SetConfig+0xa0>)
 80064a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064aa:	bf00      	nop
 80064ac:	080064bd 	.word	0x080064bd
 80064b0:	080064cd 	.word	0x080064cd
 80064b4:	080064c5 	.word	0x080064c5
 80064b8:	080064d5 	.word	0x080064d5
 80064bc:	2301      	movs	r3, #1
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c2:	e116      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80064c4:	2302      	movs	r3, #2
 80064c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ca:	e112      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80064cc:	2304      	movs	r3, #4
 80064ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064d2:	e10e      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80064d4:	2308      	movs	r3, #8
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064da:	e10a      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80064dc:	2310      	movs	r3, #16
 80064de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e2:	e106      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a7c      	ldr	r2, [pc, #496]	@ (80066dc <UART_SetConfig+0x2d0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d138      	bne.n	8006560 <UART_SetConfig+0x154>
 80064ee:	4b7a      	ldr	r3, [pc, #488]	@ (80066d8 <UART_SetConfig+0x2cc>)
 80064f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f4:	f003 030c 	and.w	r3, r3, #12
 80064f8:	2b0c      	cmp	r3, #12
 80064fa:	d82d      	bhi.n	8006558 <UART_SetConfig+0x14c>
 80064fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006504 <UART_SetConfig+0xf8>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	08006539 	.word	0x08006539
 8006508:	08006559 	.word	0x08006559
 800650c:	08006559 	.word	0x08006559
 8006510:	08006559 	.word	0x08006559
 8006514:	08006549 	.word	0x08006549
 8006518:	08006559 	.word	0x08006559
 800651c:	08006559 	.word	0x08006559
 8006520:	08006559 	.word	0x08006559
 8006524:	08006541 	.word	0x08006541
 8006528:	08006559 	.word	0x08006559
 800652c:	08006559 	.word	0x08006559
 8006530:	08006559 	.word	0x08006559
 8006534:	08006551 	.word	0x08006551
 8006538:	2300      	movs	r3, #0
 800653a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800653e:	e0d8      	b.n	80066f2 <UART_SetConfig+0x2e6>
 8006540:	2302      	movs	r3, #2
 8006542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006546:	e0d4      	b.n	80066f2 <UART_SetConfig+0x2e6>
 8006548:	2304      	movs	r3, #4
 800654a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800654e:	e0d0      	b.n	80066f2 <UART_SetConfig+0x2e6>
 8006550:	2308      	movs	r3, #8
 8006552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006556:	e0cc      	b.n	80066f2 <UART_SetConfig+0x2e6>
 8006558:	2310      	movs	r3, #16
 800655a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800655e:	e0c8      	b.n	80066f2 <UART_SetConfig+0x2e6>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a5e      	ldr	r2, [pc, #376]	@ (80066e0 <UART_SetConfig+0x2d4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d125      	bne.n	80065b6 <UART_SetConfig+0x1aa>
 800656a:	4b5b      	ldr	r3, [pc, #364]	@ (80066d8 <UART_SetConfig+0x2cc>)
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006570:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006574:	2b30      	cmp	r3, #48	@ 0x30
 8006576:	d016      	beq.n	80065a6 <UART_SetConfig+0x19a>
 8006578:	2b30      	cmp	r3, #48	@ 0x30
 800657a:	d818      	bhi.n	80065ae <UART_SetConfig+0x1a2>
 800657c:	2b20      	cmp	r3, #32
 800657e:	d00a      	beq.n	8006596 <UART_SetConfig+0x18a>
 8006580:	2b20      	cmp	r3, #32
 8006582:	d814      	bhi.n	80065ae <UART_SetConfig+0x1a2>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <UART_SetConfig+0x182>
 8006588:	2b10      	cmp	r3, #16
 800658a:	d008      	beq.n	800659e <UART_SetConfig+0x192>
 800658c:	e00f      	b.n	80065ae <UART_SetConfig+0x1a2>
 800658e:	2300      	movs	r3, #0
 8006590:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006594:	e0ad      	b.n	80066f2 <UART_SetConfig+0x2e6>
 8006596:	2302      	movs	r3, #2
 8006598:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800659c:	e0a9      	b.n	80066f2 <UART_SetConfig+0x2e6>
 800659e:	2304      	movs	r3, #4
 80065a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065a4:	e0a5      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80065a6:	2308      	movs	r3, #8
 80065a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ac:	e0a1      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80065ae:	2310      	movs	r3, #16
 80065b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b4:	e09d      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a4a      	ldr	r2, [pc, #296]	@ (80066e4 <UART_SetConfig+0x2d8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d125      	bne.n	800660c <UART_SetConfig+0x200>
 80065c0:	4b45      	ldr	r3, [pc, #276]	@ (80066d8 <UART_SetConfig+0x2cc>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80065cc:	d016      	beq.n	80065fc <UART_SetConfig+0x1f0>
 80065ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80065d0:	d818      	bhi.n	8006604 <UART_SetConfig+0x1f8>
 80065d2:	2b80      	cmp	r3, #128	@ 0x80
 80065d4:	d00a      	beq.n	80065ec <UART_SetConfig+0x1e0>
 80065d6:	2b80      	cmp	r3, #128	@ 0x80
 80065d8:	d814      	bhi.n	8006604 <UART_SetConfig+0x1f8>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <UART_SetConfig+0x1d8>
 80065de:	2b40      	cmp	r3, #64	@ 0x40
 80065e0:	d008      	beq.n	80065f4 <UART_SetConfig+0x1e8>
 80065e2:	e00f      	b.n	8006604 <UART_SetConfig+0x1f8>
 80065e4:	2300      	movs	r3, #0
 80065e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ea:	e082      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80065ec:	2302      	movs	r3, #2
 80065ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f2:	e07e      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80065f4:	2304      	movs	r3, #4
 80065f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065fa:	e07a      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80065fc:	2308      	movs	r3, #8
 80065fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006602:	e076      	b.n	80066f2 <UART_SetConfig+0x2e6>
 8006604:	2310      	movs	r3, #16
 8006606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800660a:	e072      	b.n	80066f2 <UART_SetConfig+0x2e6>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a35      	ldr	r2, [pc, #212]	@ (80066e8 <UART_SetConfig+0x2dc>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d12a      	bne.n	800666c <UART_SetConfig+0x260>
 8006616:	4b30      	ldr	r3, [pc, #192]	@ (80066d8 <UART_SetConfig+0x2cc>)
 8006618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800661c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006624:	d01a      	beq.n	800665c <UART_SetConfig+0x250>
 8006626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800662a:	d81b      	bhi.n	8006664 <UART_SetConfig+0x258>
 800662c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006630:	d00c      	beq.n	800664c <UART_SetConfig+0x240>
 8006632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006636:	d815      	bhi.n	8006664 <UART_SetConfig+0x258>
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <UART_SetConfig+0x238>
 800663c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006640:	d008      	beq.n	8006654 <UART_SetConfig+0x248>
 8006642:	e00f      	b.n	8006664 <UART_SetConfig+0x258>
 8006644:	2300      	movs	r3, #0
 8006646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800664a:	e052      	b.n	80066f2 <UART_SetConfig+0x2e6>
 800664c:	2302      	movs	r3, #2
 800664e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006652:	e04e      	b.n	80066f2 <UART_SetConfig+0x2e6>
 8006654:	2304      	movs	r3, #4
 8006656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665a:	e04a      	b.n	80066f2 <UART_SetConfig+0x2e6>
 800665c:	2308      	movs	r3, #8
 800665e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006662:	e046      	b.n	80066f2 <UART_SetConfig+0x2e6>
 8006664:	2310      	movs	r3, #16
 8006666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800666a:	e042      	b.n	80066f2 <UART_SetConfig+0x2e6>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a17      	ldr	r2, [pc, #92]	@ (80066d0 <UART_SetConfig+0x2c4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d13a      	bne.n	80066ec <UART_SetConfig+0x2e0>
 8006676:	4b18      	ldr	r3, [pc, #96]	@ (80066d8 <UART_SetConfig+0x2cc>)
 8006678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800667c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006680:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006684:	d01a      	beq.n	80066bc <UART_SetConfig+0x2b0>
 8006686:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800668a:	d81b      	bhi.n	80066c4 <UART_SetConfig+0x2b8>
 800668c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006690:	d00c      	beq.n	80066ac <UART_SetConfig+0x2a0>
 8006692:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006696:	d815      	bhi.n	80066c4 <UART_SetConfig+0x2b8>
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <UART_SetConfig+0x298>
 800669c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066a0:	d008      	beq.n	80066b4 <UART_SetConfig+0x2a8>
 80066a2:	e00f      	b.n	80066c4 <UART_SetConfig+0x2b8>
 80066a4:	2300      	movs	r3, #0
 80066a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066aa:	e022      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80066ac:	2302      	movs	r3, #2
 80066ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066b2:	e01e      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80066b4:	2304      	movs	r3, #4
 80066b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ba:	e01a      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80066bc:	2308      	movs	r3, #8
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066c2:	e016      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80066c4:	2310      	movs	r3, #16
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ca:	e012      	b.n	80066f2 <UART_SetConfig+0x2e6>
 80066cc:	efff69f3 	.word	0xefff69f3
 80066d0:	40008000 	.word	0x40008000
 80066d4:	40013800 	.word	0x40013800
 80066d8:	40021000 	.word	0x40021000
 80066dc:	40004400 	.word	0x40004400
 80066e0:	40004800 	.word	0x40004800
 80066e4:	40004c00 	.word	0x40004c00
 80066e8:	40005000 	.word	0x40005000
 80066ec:	2310      	movs	r3, #16
 80066ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a9f      	ldr	r2, [pc, #636]	@ (8006974 <UART_SetConfig+0x568>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d17a      	bne.n	80067f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006700:	2b08      	cmp	r3, #8
 8006702:	d824      	bhi.n	800674e <UART_SetConfig+0x342>
 8006704:	a201      	add	r2, pc, #4	@ (adr r2, 800670c <UART_SetConfig+0x300>)
 8006706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670a:	bf00      	nop
 800670c:	08006731 	.word	0x08006731
 8006710:	0800674f 	.word	0x0800674f
 8006714:	08006739 	.word	0x08006739
 8006718:	0800674f 	.word	0x0800674f
 800671c:	0800673f 	.word	0x0800673f
 8006720:	0800674f 	.word	0x0800674f
 8006724:	0800674f 	.word	0x0800674f
 8006728:	0800674f 	.word	0x0800674f
 800672c:	08006747 	.word	0x08006747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006730:	f7fd f84c 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8006734:	61f8      	str	r0, [r7, #28]
        break;
 8006736:	e010      	b.n	800675a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006738:	4b8f      	ldr	r3, [pc, #572]	@ (8006978 <UART_SetConfig+0x56c>)
 800673a:	61fb      	str	r3, [r7, #28]
        break;
 800673c:	e00d      	b.n	800675a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800673e:	f7fc ffad 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8006742:	61f8      	str	r0, [r7, #28]
        break;
 8006744:	e009      	b.n	800675a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800674a:	61fb      	str	r3, [r7, #28]
        break;
 800674c:	e005      	b.n	800675a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006758:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 80fb 	beq.w	8006958 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	4613      	mov	r3, r2
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	4413      	add	r3, r2
 800676c:	69fa      	ldr	r2, [r7, #28]
 800676e:	429a      	cmp	r2, r3
 8006770:	d305      	bcc.n	800677e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	429a      	cmp	r2, r3
 800677c:	d903      	bls.n	8006786 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006784:	e0e8      	b.n	8006958 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	2200      	movs	r2, #0
 800678a:	461c      	mov	r4, r3
 800678c:	4615      	mov	r5, r2
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	022b      	lsls	r3, r5, #8
 8006798:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800679c:	0222      	lsls	r2, r4, #8
 800679e:	68f9      	ldr	r1, [r7, #12]
 80067a0:	6849      	ldr	r1, [r1, #4]
 80067a2:	0849      	lsrs	r1, r1, #1
 80067a4:	2000      	movs	r0, #0
 80067a6:	4688      	mov	r8, r1
 80067a8:	4681      	mov	r9, r0
 80067aa:	eb12 0a08 	adds.w	sl, r2, r8
 80067ae:	eb43 0b09 	adc.w	fp, r3, r9
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	603b      	str	r3, [r7, #0]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067c0:	4650      	mov	r0, sl
 80067c2:	4659      	mov	r1, fp
 80067c4:	f7f9 fd64 	bl	8000290 <__aeabi_uldivmod>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4613      	mov	r3, r2
 80067ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067d6:	d308      	bcc.n	80067ea <UART_SetConfig+0x3de>
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067de:	d204      	bcs.n	80067ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	60da      	str	r2, [r3, #12]
 80067e8:	e0b6      	b.n	8006958 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067f0:	e0b2      	b.n	8006958 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067fa:	d15e      	bne.n	80068ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80067fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006800:	2b08      	cmp	r3, #8
 8006802:	d828      	bhi.n	8006856 <UART_SetConfig+0x44a>
 8006804:	a201      	add	r2, pc, #4	@ (adr r2, 800680c <UART_SetConfig+0x400>)
 8006806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680a:	bf00      	nop
 800680c:	08006831 	.word	0x08006831
 8006810:	08006839 	.word	0x08006839
 8006814:	08006841 	.word	0x08006841
 8006818:	08006857 	.word	0x08006857
 800681c:	08006847 	.word	0x08006847
 8006820:	08006857 	.word	0x08006857
 8006824:	08006857 	.word	0x08006857
 8006828:	08006857 	.word	0x08006857
 800682c:	0800684f 	.word	0x0800684f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006830:	f7fc ffcc 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8006834:	61f8      	str	r0, [r7, #28]
        break;
 8006836:	e014      	b.n	8006862 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006838:	f7fc ffde 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 800683c:	61f8      	str	r0, [r7, #28]
        break;
 800683e:	e010      	b.n	8006862 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006840:	4b4d      	ldr	r3, [pc, #308]	@ (8006978 <UART_SetConfig+0x56c>)
 8006842:	61fb      	str	r3, [r7, #28]
        break;
 8006844:	e00d      	b.n	8006862 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006846:	f7fc ff29 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800684a:	61f8      	str	r0, [r7, #28]
        break;
 800684c:	e009      	b.n	8006862 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006852:	61fb      	str	r3, [r7, #28]
        break;
 8006854:	e005      	b.n	8006862 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006860:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d077      	beq.n	8006958 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	005a      	lsls	r2, r3, #1
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	085b      	lsrs	r3, r3, #1
 8006872:	441a      	add	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	fbb2 f3f3 	udiv	r3, r2, r3
 800687c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	2b0f      	cmp	r3, #15
 8006882:	d916      	bls.n	80068b2 <UART_SetConfig+0x4a6>
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800688a:	d212      	bcs.n	80068b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f023 030f 	bic.w	r3, r3, #15
 8006894:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	085b      	lsrs	r3, r3, #1
 800689a:	b29b      	uxth	r3, r3
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	8afb      	ldrh	r3, [r7, #22]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	8afa      	ldrh	r2, [r7, #22]
 80068ae:	60da      	str	r2, [r3, #12]
 80068b0:	e052      	b.n	8006958 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80068b8:	e04e      	b.n	8006958 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068be:	2b08      	cmp	r3, #8
 80068c0:	d827      	bhi.n	8006912 <UART_SetConfig+0x506>
 80068c2:	a201      	add	r2, pc, #4	@ (adr r2, 80068c8 <UART_SetConfig+0x4bc>)
 80068c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c8:	080068ed 	.word	0x080068ed
 80068cc:	080068f5 	.word	0x080068f5
 80068d0:	080068fd 	.word	0x080068fd
 80068d4:	08006913 	.word	0x08006913
 80068d8:	08006903 	.word	0x08006903
 80068dc:	08006913 	.word	0x08006913
 80068e0:	08006913 	.word	0x08006913
 80068e4:	08006913 	.word	0x08006913
 80068e8:	0800690b 	.word	0x0800690b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ec:	f7fc ff6e 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 80068f0:	61f8      	str	r0, [r7, #28]
        break;
 80068f2:	e014      	b.n	800691e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068f4:	f7fc ff80 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 80068f8:	61f8      	str	r0, [r7, #28]
        break;
 80068fa:	e010      	b.n	800691e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006978 <UART_SetConfig+0x56c>)
 80068fe:	61fb      	str	r3, [r7, #28]
        break;
 8006900:	e00d      	b.n	800691e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006902:	f7fc fecb 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8006906:	61f8      	str	r0, [r7, #28]
        break;
 8006908:	e009      	b.n	800691e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800690a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800690e:	61fb      	str	r3, [r7, #28]
        break;
 8006910:	e005      	b.n	800691e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800691c:	bf00      	nop
    }

    if (pclk != 0U)
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d019      	beq.n	8006958 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	085a      	lsrs	r2, r3, #1
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	441a      	add	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	fbb2 f3f3 	udiv	r3, r2, r3
 8006936:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	2b0f      	cmp	r3, #15
 800693c:	d909      	bls.n	8006952 <UART_SetConfig+0x546>
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006944:	d205      	bcs.n	8006952 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	b29a      	uxth	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60da      	str	r2, [r3, #12]
 8006950:	e002      	b.n	8006958 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006964:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006968:	4618      	mov	r0, r3
 800696a:	3728      	adds	r7, #40	@ 0x28
 800696c:	46bd      	mov	sp, r7
 800696e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006972:	bf00      	nop
 8006974:	40008000 	.word	0x40008000
 8006978:	00f42400 	.word	0x00f42400

0800697c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00a      	beq.n	8006a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01a      	beq.n	8006a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a7a:	d10a      	bne.n	8006a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	605a      	str	r2, [r3, #4]
  }
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b098      	sub	sp, #96	@ 0x60
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ad0:	f7fa fee4 	bl	800189c <HAL_GetTick>
 8006ad4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d12e      	bne.n	8006b42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aec:	2200      	movs	r2, #0
 8006aee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f88c 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d021      	beq.n	8006b42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b12:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e6      	bne.n	8006afe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e062      	b.n	8006c08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d149      	bne.n	8006be4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f856 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d03c      	beq.n	8006be4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	623b      	str	r3, [r7, #32]
   return(result);
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b90:	e841 2300 	strex	r3, r2, [r1]
 8006b94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e6      	bne.n	8006b6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	e853 3f00 	ldrex	r3, [r3]
 8006baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0301 	bic.w	r3, r3, #1
 8006bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3308      	adds	r3, #8
 8006bba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bbc:	61fa      	str	r2, [r7, #28]
 8006bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	69b9      	ldr	r1, [r7, #24]
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	e841 2300 	strex	r3, r2, [r1]
 8006bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1e5      	bne.n	8006b9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e011      	b.n	8006c08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3758      	adds	r7, #88	@ 0x58
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c20:	e04f      	b.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c28:	d04b      	beq.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c2a:	f7fa fe37 	bl	800189c <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d302      	bcc.n	8006c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e04e      	b.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d037      	beq.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b80      	cmp	r3, #128	@ 0x80
 8006c56:	d034      	beq.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b40      	cmp	r3, #64	@ 0x40
 8006c5c:	d031      	beq.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d110      	bne.n	8006c8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2208      	movs	r2, #8
 8006c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 f838 	bl	8006cea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e029      	b.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c9c:	d111      	bne.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 f81e 	bl	8006cea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e00f      	b.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69da      	ldr	r2, [r3, #28]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	bf0c      	ite	eq
 8006cd2:	2301      	moveq	r3, #1
 8006cd4:	2300      	movne	r3, #0
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d0a0      	beq.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b095      	sub	sp, #84	@ 0x54
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d10:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e6      	bne.n	8006cf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3308      	adds	r3, #8
 8006d2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f023 0301 	bic.w	r3, r3, #1
 8006d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3308      	adds	r3, #8
 8006d42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e5      	bne.n	8006d24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d118      	bne.n	8006d92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f023 0310 	bic.w	r3, r3, #16
 8006d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d7e:	61bb      	str	r3, [r7, #24]
 8006d80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	6979      	ldr	r1, [r7, #20]
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e6      	bne.n	8006d60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006da6:	bf00      	nop
 8006da8:	3754      	adds	r7, #84	@ 0x54
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006db2:	b480      	push	{r7}
 8006db4:	b085      	sub	sp, #20
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	601a      	str	r2, [r3, #0]
}
 8006dee:	bf00      	nop
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b085      	sub	sp, #20
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6892      	ldr	r2, [r2, #8]
 8006e10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6852      	ldr	r2, [r2, #4]
 8006e1a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d103      	bne.n	8006e2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	1e5a      	subs	r2, r3, #1
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
	...

08006e50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8006f98 <xTaskIncrementTick+0x148>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f040 808f 	bne.w	8006f82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e64:	4b4d      	ldr	r3, [pc, #308]	@ (8006f9c <xTaskIncrementTick+0x14c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8006f9c <xTaskIncrementTick+0x14c>)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d121      	bne.n	8006ebc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e78:	4b49      	ldr	r3, [pc, #292]	@ (8006fa0 <xTaskIncrementTick+0x150>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00b      	beq.n	8006e9a <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop
 8006e98:	e7fd      	b.n	8006e96 <xTaskIncrementTick+0x46>
 8006e9a:	4b41      	ldr	r3, [pc, #260]	@ (8006fa0 <xTaskIncrementTick+0x150>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	4b40      	ldr	r3, [pc, #256]	@ (8006fa4 <xTaskIncrementTick+0x154>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a3e      	ldr	r2, [pc, #248]	@ (8006fa0 <xTaskIncrementTick+0x150>)
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	4a3e      	ldr	r2, [pc, #248]	@ (8006fa4 <xTaskIncrementTick+0x154>)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	4b3e      	ldr	r3, [pc, #248]	@ (8006fa8 <xTaskIncrementTick+0x158>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8006fa8 <xTaskIncrementTick+0x158>)
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	f000 f8e0 	bl	800707c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8006fac <xTaskIncrementTick+0x15c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d348      	bcc.n	8006f58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ec6:	4b36      	ldr	r3, [pc, #216]	@ (8006fa0 <xTaskIncrementTick+0x150>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d104      	bne.n	8006eda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed0:	4b36      	ldr	r3, [pc, #216]	@ (8006fac <xTaskIncrementTick+0x15c>)
 8006ed2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ed6:	601a      	str	r2, [r3, #0]
					break;
 8006ed8:	e03e      	b.n	8006f58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eda:	4b31      	ldr	r3, [pc, #196]	@ (8006fa0 <xTaskIncrementTick+0x150>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d203      	bcs.n	8006efa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8006fac <xTaskIncrementTick+0x15c>)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ef8:	e02e      	b.n	8006f58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	3304      	adds	r3, #4
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff ff7b 	bl	8006dfa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d004      	beq.n	8006f16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	3318      	adds	r3, #24
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff ff72 	bl	8006dfa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	409a      	lsls	r2, r3
 8006f1e:	4b24      	ldr	r3, [pc, #144]	@ (8006fb0 <xTaskIncrementTick+0x160>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	4a22      	ldr	r2, [pc, #136]	@ (8006fb0 <xTaskIncrementTick+0x160>)
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4a1f      	ldr	r2, [pc, #124]	@ (8006fb4 <xTaskIncrementTick+0x164>)
 8006f36:	441a      	add	r2, r3
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4610      	mov	r0, r2
 8006f40:	f7ff ff37 	bl	8006db2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f48:	4b1b      	ldr	r3, [pc, #108]	@ (8006fb8 <xTaskIncrementTick+0x168>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d3b9      	bcc.n	8006ec6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006f52:	2301      	movs	r3, #1
 8006f54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f56:	e7b6      	b.n	8006ec6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f58:	4b17      	ldr	r3, [pc, #92]	@ (8006fb8 <xTaskIncrementTick+0x168>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f5e:	4915      	ldr	r1, [pc, #84]	@ (8006fb4 <xTaskIncrementTick+0x164>)
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d901      	bls.n	8006f74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006f70:	2301      	movs	r3, #1
 8006f72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f74:	4b11      	ldr	r3, [pc, #68]	@ (8006fbc <xTaskIncrementTick+0x16c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d007      	beq.n	8006f8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	e004      	b.n	8006f8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f82:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc0 <xTaskIncrementTick+0x170>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3301      	adds	r3, #1
 8006f88:	4a0d      	ldr	r2, [pc, #52]	@ (8006fc0 <xTaskIncrementTick+0x170>)
 8006f8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f8c:	697b      	ldr	r3, [r7, #20]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	2000047c 	.word	0x2000047c
 8006f9c:	20000460 	.word	0x20000460
 8006fa0:	20000458 	.word	0x20000458
 8006fa4:	2000045c 	.word	0x2000045c
 8006fa8:	20000474 	.word	0x20000474
 8006fac:	20000478 	.word	0x20000478
 8006fb0:	20000464 	.word	0x20000464
 8006fb4:	200003cc 	.word	0x200003cc
 8006fb8:	200003c8 	.word	0x200003c8
 8006fbc:	20000470 	.word	0x20000470
 8006fc0:	2000046c 	.word	0x2000046c

08006fc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fca:	4b27      	ldr	r3, [pc, #156]	@ (8007068 <vTaskSwitchContext+0xa4>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fd2:	4b26      	ldr	r3, [pc, #152]	@ (800706c <vTaskSwitchContext+0xa8>)
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fd8:	e040      	b.n	800705c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006fda:	4b24      	ldr	r3, [pc, #144]	@ (800706c <vTaskSwitchContext+0xa8>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe0:	4b23      	ldr	r3, [pc, #140]	@ (8007070 <vTaskSwitchContext+0xac>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	fab3 f383 	clz	r3, r3
 8006fec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006fee:	7afb      	ldrb	r3, [r7, #11]
 8006ff0:	f1c3 031f 	rsb	r3, r3, #31
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	491f      	ldr	r1, [pc, #124]	@ (8007074 <vTaskSwitchContext+0xb0>)
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <vTaskSwitchContext+0x5e>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	607b      	str	r3, [r7, #4]
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	e7fd      	b.n	800701e <vTaskSwitchContext+0x5a>
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4a11      	ldr	r2, [pc, #68]	@ (8007074 <vTaskSwitchContext+0xb0>)
 800702e:	4413      	add	r3, r2
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	605a      	str	r2, [r3, #4]
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	3308      	adds	r3, #8
 8007044:	429a      	cmp	r2, r3
 8007046:	d104      	bne.n	8007052 <vTaskSwitchContext+0x8e>
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	605a      	str	r2, [r3, #4]
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	4a07      	ldr	r2, [pc, #28]	@ (8007078 <vTaskSwitchContext+0xb4>)
 800705a:	6013      	str	r3, [r2, #0]
}
 800705c:	bf00      	nop
 800705e:	371c      	adds	r7, #28
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	2000047c 	.word	0x2000047c
 800706c:	20000470 	.word	0x20000470
 8007070:	20000464 	.word	0x20000464
 8007074:	200003cc 	.word	0x200003cc
 8007078:	200003c8 	.word	0x200003c8

0800707c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007082:	4b0c      	ldr	r3, [pc, #48]	@ (80070b4 <prvResetNextTaskUnblockTime+0x38>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d104      	bne.n	8007096 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800708c:	4b0a      	ldr	r3, [pc, #40]	@ (80070b8 <prvResetNextTaskUnblockTime+0x3c>)
 800708e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007092:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007094:	e008      	b.n	80070a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007096:	4b07      	ldr	r3, [pc, #28]	@ (80070b4 <prvResetNextTaskUnblockTime+0x38>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	4a04      	ldr	r2, [pc, #16]	@ (80070b8 <prvResetNextTaskUnblockTime+0x3c>)
 80070a6:	6013      	str	r3, [r2, #0]
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	20000458 	.word	0x20000458
 80070b8:	20000478 	.word	0x20000478

080070bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070c2:	4b0b      	ldr	r3, [pc, #44]	@ (80070f0 <xTaskGetSchedulerState+0x34>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d102      	bne.n	80070d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070ca:	2301      	movs	r3, #1
 80070cc:	607b      	str	r3, [r7, #4]
 80070ce:	e008      	b.n	80070e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070d0:	4b08      	ldr	r3, [pc, #32]	@ (80070f4 <xTaskGetSchedulerState+0x38>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d102      	bne.n	80070de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070d8:	2302      	movs	r3, #2
 80070da:	607b      	str	r3, [r7, #4]
 80070dc:	e001      	b.n	80070e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070de:	2300      	movs	r3, #0
 80070e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070e2:	687b      	ldr	r3, [r7, #4]
	}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	20000468 	.word	0x20000468
 80070f4:	2000047c 	.word	0x2000047c
	...

08007100 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007100:	4b07      	ldr	r3, [pc, #28]	@ (8007120 <pxCurrentTCBConst2>)
 8007102:	6819      	ldr	r1, [r3, #0]
 8007104:	6808      	ldr	r0, [r1, #0]
 8007106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710a:	f380 8809 	msr	PSP, r0
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f04f 0000 	mov.w	r0, #0
 8007116:	f380 8811 	msr	BASEPRI, r0
 800711a:	4770      	bx	lr
 800711c:	f3af 8000 	nop.w

08007120 <pxCurrentTCBConst2>:
 8007120:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop
	...

08007130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007130:	f3ef 8009 	mrs	r0, PSP
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	4b15      	ldr	r3, [pc, #84]	@ (8007190 <pxCurrentTCBConst>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	f01e 0f10 	tst.w	lr, #16
 8007140:	bf08      	it	eq
 8007142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714a:	6010      	str	r0, [r2, #0]
 800714c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007154:	f380 8811 	msr	BASEPRI, r0
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f7ff ff30 	bl	8006fc4 <vTaskSwitchContext>
 8007164:	f04f 0000 	mov.w	r0, #0
 8007168:	f380 8811 	msr	BASEPRI, r0
 800716c:	bc09      	pop	{r0, r3}
 800716e:	6819      	ldr	r1, [r3, #0]
 8007170:	6808      	ldr	r0, [r1, #0]
 8007172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007176:	f01e 0f10 	tst.w	lr, #16
 800717a:	bf08      	it	eq
 800717c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007180:	f380 8809 	msr	PSP, r0
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	f3af 8000 	nop.w

08007190 <pxCurrentTCBConst>:
 8007190:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop

08007198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	607b      	str	r3, [r7, #4]
}
 80071b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071b2:	f7ff fe4d 	bl	8006e50 <xTaskIncrementTick>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071bc:	4b06      	ldr	r3, [pc, #24]	@ (80071d8 <xPortSysTickHandler+0x40>)
 80071be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	2300      	movs	r3, #0
 80071c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	e000ed04 	.word	0xe000ed04

080071dc <sniprintf>:
 80071dc:	b40c      	push	{r2, r3}
 80071de:	b530      	push	{r4, r5, lr}
 80071e0:	4b17      	ldr	r3, [pc, #92]	@ (8007240 <sniprintf+0x64>)
 80071e2:	1e0c      	subs	r4, r1, #0
 80071e4:	681d      	ldr	r5, [r3, #0]
 80071e6:	b09d      	sub	sp, #116	@ 0x74
 80071e8:	da08      	bge.n	80071fc <sniprintf+0x20>
 80071ea:	238b      	movs	r3, #139	@ 0x8b
 80071ec:	602b      	str	r3, [r5, #0]
 80071ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071f2:	b01d      	add	sp, #116	@ 0x74
 80071f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071f8:	b002      	add	sp, #8
 80071fa:	4770      	bx	lr
 80071fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007200:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007204:	bf14      	ite	ne
 8007206:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800720a:	4623      	moveq	r3, r4
 800720c:	9304      	str	r3, [sp, #16]
 800720e:	9307      	str	r3, [sp, #28]
 8007210:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007214:	9002      	str	r0, [sp, #8]
 8007216:	9006      	str	r0, [sp, #24]
 8007218:	f8ad 3016 	strh.w	r3, [sp, #22]
 800721c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800721e:	ab21      	add	r3, sp, #132	@ 0x84
 8007220:	a902      	add	r1, sp, #8
 8007222:	4628      	mov	r0, r5
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	f000 fa59 	bl	80076dc <_svfiprintf_r>
 800722a:	1c43      	adds	r3, r0, #1
 800722c:	bfbc      	itt	lt
 800722e:	238b      	movlt	r3, #139	@ 0x8b
 8007230:	602b      	strlt	r3, [r5, #0]
 8007232:	2c00      	cmp	r4, #0
 8007234:	d0dd      	beq.n	80071f2 <sniprintf+0x16>
 8007236:	9b02      	ldr	r3, [sp, #8]
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]
 800723c:	e7d9      	b.n	80071f2 <sniprintf+0x16>
 800723e:	bf00      	nop
 8007240:	20000018 	.word	0x20000018

08007244 <std>:
 8007244:	2300      	movs	r3, #0
 8007246:	b510      	push	{r4, lr}
 8007248:	4604      	mov	r4, r0
 800724a:	e9c0 3300 	strd	r3, r3, [r0]
 800724e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007252:	6083      	str	r3, [r0, #8]
 8007254:	8181      	strh	r1, [r0, #12]
 8007256:	6643      	str	r3, [r0, #100]	@ 0x64
 8007258:	81c2      	strh	r2, [r0, #14]
 800725a:	6183      	str	r3, [r0, #24]
 800725c:	4619      	mov	r1, r3
 800725e:	2208      	movs	r2, #8
 8007260:	305c      	adds	r0, #92	@ 0x5c
 8007262:	f000 f97d 	bl	8007560 <memset>
 8007266:	4b0d      	ldr	r3, [pc, #52]	@ (800729c <std+0x58>)
 8007268:	6263      	str	r3, [r4, #36]	@ 0x24
 800726a:	4b0d      	ldr	r3, [pc, #52]	@ (80072a0 <std+0x5c>)
 800726c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800726e:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <std+0x60>)
 8007270:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007272:	4b0d      	ldr	r3, [pc, #52]	@ (80072a8 <std+0x64>)
 8007274:	6323      	str	r3, [r4, #48]	@ 0x30
 8007276:	4b0d      	ldr	r3, [pc, #52]	@ (80072ac <std+0x68>)
 8007278:	6224      	str	r4, [r4, #32]
 800727a:	429c      	cmp	r4, r3
 800727c:	d006      	beq.n	800728c <std+0x48>
 800727e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007282:	4294      	cmp	r4, r2
 8007284:	d002      	beq.n	800728c <std+0x48>
 8007286:	33d0      	adds	r3, #208	@ 0xd0
 8007288:	429c      	cmp	r4, r3
 800728a:	d105      	bne.n	8007298 <std+0x54>
 800728c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007294:	f000 b996 	b.w	80075c4 <__retarget_lock_init_recursive>
 8007298:	bd10      	pop	{r4, pc}
 800729a:	bf00      	nop
 800729c:	08008139 	.word	0x08008139
 80072a0:	0800815b 	.word	0x0800815b
 80072a4:	08008193 	.word	0x08008193
 80072a8:	080081b7 	.word	0x080081b7
 80072ac:	20000480 	.word	0x20000480

080072b0 <stdio_exit_handler>:
 80072b0:	4a02      	ldr	r2, [pc, #8]	@ (80072bc <stdio_exit_handler+0xc>)
 80072b2:	4903      	ldr	r1, [pc, #12]	@ (80072c0 <stdio_exit_handler+0x10>)
 80072b4:	4803      	ldr	r0, [pc, #12]	@ (80072c4 <stdio_exit_handler+0x14>)
 80072b6:	f000 b869 	b.w	800738c <_fwalk_sglue>
 80072ba:	bf00      	nop
 80072bc:	2000000c 	.word	0x2000000c
 80072c0:	080080d1 	.word	0x080080d1
 80072c4:	2000001c 	.word	0x2000001c

080072c8 <cleanup_stdio>:
 80072c8:	6841      	ldr	r1, [r0, #4]
 80072ca:	4b0c      	ldr	r3, [pc, #48]	@ (80072fc <cleanup_stdio+0x34>)
 80072cc:	4299      	cmp	r1, r3
 80072ce:	b510      	push	{r4, lr}
 80072d0:	4604      	mov	r4, r0
 80072d2:	d001      	beq.n	80072d8 <cleanup_stdio+0x10>
 80072d4:	f000 fefc 	bl	80080d0 <_fflush_r>
 80072d8:	68a1      	ldr	r1, [r4, #8]
 80072da:	4b09      	ldr	r3, [pc, #36]	@ (8007300 <cleanup_stdio+0x38>)
 80072dc:	4299      	cmp	r1, r3
 80072de:	d002      	beq.n	80072e6 <cleanup_stdio+0x1e>
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 fef5 	bl	80080d0 <_fflush_r>
 80072e6:	68e1      	ldr	r1, [r4, #12]
 80072e8:	4b06      	ldr	r3, [pc, #24]	@ (8007304 <cleanup_stdio+0x3c>)
 80072ea:	4299      	cmp	r1, r3
 80072ec:	d004      	beq.n	80072f8 <cleanup_stdio+0x30>
 80072ee:	4620      	mov	r0, r4
 80072f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f4:	f000 beec 	b.w	80080d0 <_fflush_r>
 80072f8:	bd10      	pop	{r4, pc}
 80072fa:	bf00      	nop
 80072fc:	20000480 	.word	0x20000480
 8007300:	200004e8 	.word	0x200004e8
 8007304:	20000550 	.word	0x20000550

08007308 <global_stdio_init.part.0>:
 8007308:	b510      	push	{r4, lr}
 800730a:	4b0b      	ldr	r3, [pc, #44]	@ (8007338 <global_stdio_init.part.0+0x30>)
 800730c:	4c0b      	ldr	r4, [pc, #44]	@ (800733c <global_stdio_init.part.0+0x34>)
 800730e:	4a0c      	ldr	r2, [pc, #48]	@ (8007340 <global_stdio_init.part.0+0x38>)
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	4620      	mov	r0, r4
 8007314:	2200      	movs	r2, #0
 8007316:	2104      	movs	r1, #4
 8007318:	f7ff ff94 	bl	8007244 <std>
 800731c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007320:	2201      	movs	r2, #1
 8007322:	2109      	movs	r1, #9
 8007324:	f7ff ff8e 	bl	8007244 <std>
 8007328:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800732c:	2202      	movs	r2, #2
 800732e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007332:	2112      	movs	r1, #18
 8007334:	f7ff bf86 	b.w	8007244 <std>
 8007338:	200005b8 	.word	0x200005b8
 800733c:	20000480 	.word	0x20000480
 8007340:	080072b1 	.word	0x080072b1

08007344 <__sfp_lock_acquire>:
 8007344:	4801      	ldr	r0, [pc, #4]	@ (800734c <__sfp_lock_acquire+0x8>)
 8007346:	f000 b93e 	b.w	80075c6 <__retarget_lock_acquire_recursive>
 800734a:	bf00      	nop
 800734c:	200005bd 	.word	0x200005bd

08007350 <__sfp_lock_release>:
 8007350:	4801      	ldr	r0, [pc, #4]	@ (8007358 <__sfp_lock_release+0x8>)
 8007352:	f000 b939 	b.w	80075c8 <__retarget_lock_release_recursive>
 8007356:	bf00      	nop
 8007358:	200005bd 	.word	0x200005bd

0800735c <__sinit>:
 800735c:	b510      	push	{r4, lr}
 800735e:	4604      	mov	r4, r0
 8007360:	f7ff fff0 	bl	8007344 <__sfp_lock_acquire>
 8007364:	6a23      	ldr	r3, [r4, #32]
 8007366:	b11b      	cbz	r3, 8007370 <__sinit+0x14>
 8007368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800736c:	f7ff bff0 	b.w	8007350 <__sfp_lock_release>
 8007370:	4b04      	ldr	r3, [pc, #16]	@ (8007384 <__sinit+0x28>)
 8007372:	6223      	str	r3, [r4, #32]
 8007374:	4b04      	ldr	r3, [pc, #16]	@ (8007388 <__sinit+0x2c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1f5      	bne.n	8007368 <__sinit+0xc>
 800737c:	f7ff ffc4 	bl	8007308 <global_stdio_init.part.0>
 8007380:	e7f2      	b.n	8007368 <__sinit+0xc>
 8007382:	bf00      	nop
 8007384:	080072c9 	.word	0x080072c9
 8007388:	200005b8 	.word	0x200005b8

0800738c <_fwalk_sglue>:
 800738c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007390:	4607      	mov	r7, r0
 8007392:	4688      	mov	r8, r1
 8007394:	4614      	mov	r4, r2
 8007396:	2600      	movs	r6, #0
 8007398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800739c:	f1b9 0901 	subs.w	r9, r9, #1
 80073a0:	d505      	bpl.n	80073ae <_fwalk_sglue+0x22>
 80073a2:	6824      	ldr	r4, [r4, #0]
 80073a4:	2c00      	cmp	r4, #0
 80073a6:	d1f7      	bne.n	8007398 <_fwalk_sglue+0xc>
 80073a8:	4630      	mov	r0, r6
 80073aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ae:	89ab      	ldrh	r3, [r5, #12]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d907      	bls.n	80073c4 <_fwalk_sglue+0x38>
 80073b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073b8:	3301      	adds	r3, #1
 80073ba:	d003      	beq.n	80073c4 <_fwalk_sglue+0x38>
 80073bc:	4629      	mov	r1, r5
 80073be:	4638      	mov	r0, r7
 80073c0:	47c0      	blx	r8
 80073c2:	4306      	orrs	r6, r0
 80073c4:	3568      	adds	r5, #104	@ 0x68
 80073c6:	e7e9      	b.n	800739c <_fwalk_sglue+0x10>

080073c8 <iprintf>:
 80073c8:	b40f      	push	{r0, r1, r2, r3}
 80073ca:	b507      	push	{r0, r1, r2, lr}
 80073cc:	4906      	ldr	r1, [pc, #24]	@ (80073e8 <iprintf+0x20>)
 80073ce:	ab04      	add	r3, sp, #16
 80073d0:	6808      	ldr	r0, [r1, #0]
 80073d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d6:	6881      	ldr	r1, [r0, #8]
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	f000 faa5 	bl	8007928 <_vfiprintf_r>
 80073de:	b003      	add	sp, #12
 80073e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073e4:	b004      	add	sp, #16
 80073e6:	4770      	bx	lr
 80073e8:	20000018 	.word	0x20000018

080073ec <_puts_r>:
 80073ec:	6a03      	ldr	r3, [r0, #32]
 80073ee:	b570      	push	{r4, r5, r6, lr}
 80073f0:	6884      	ldr	r4, [r0, #8]
 80073f2:	4605      	mov	r5, r0
 80073f4:	460e      	mov	r6, r1
 80073f6:	b90b      	cbnz	r3, 80073fc <_puts_r+0x10>
 80073f8:	f7ff ffb0 	bl	800735c <__sinit>
 80073fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073fe:	07db      	lsls	r3, r3, #31
 8007400:	d405      	bmi.n	800740e <_puts_r+0x22>
 8007402:	89a3      	ldrh	r3, [r4, #12]
 8007404:	0598      	lsls	r0, r3, #22
 8007406:	d402      	bmi.n	800740e <_puts_r+0x22>
 8007408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800740a:	f000 f8dc 	bl	80075c6 <__retarget_lock_acquire_recursive>
 800740e:	89a3      	ldrh	r3, [r4, #12]
 8007410:	0719      	lsls	r1, r3, #28
 8007412:	d502      	bpl.n	800741a <_puts_r+0x2e>
 8007414:	6923      	ldr	r3, [r4, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d135      	bne.n	8007486 <_puts_r+0x9a>
 800741a:	4621      	mov	r1, r4
 800741c:	4628      	mov	r0, r5
 800741e:	f000 ff4d 	bl	80082bc <__swsetup_r>
 8007422:	b380      	cbz	r0, 8007486 <_puts_r+0x9a>
 8007424:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007428:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800742a:	07da      	lsls	r2, r3, #31
 800742c:	d405      	bmi.n	800743a <_puts_r+0x4e>
 800742e:	89a3      	ldrh	r3, [r4, #12]
 8007430:	059b      	lsls	r3, r3, #22
 8007432:	d402      	bmi.n	800743a <_puts_r+0x4e>
 8007434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007436:	f000 f8c7 	bl	80075c8 <__retarget_lock_release_recursive>
 800743a:	4628      	mov	r0, r5
 800743c:	bd70      	pop	{r4, r5, r6, pc}
 800743e:	2b00      	cmp	r3, #0
 8007440:	da04      	bge.n	800744c <_puts_r+0x60>
 8007442:	69a2      	ldr	r2, [r4, #24]
 8007444:	429a      	cmp	r2, r3
 8007446:	dc17      	bgt.n	8007478 <_puts_r+0x8c>
 8007448:	290a      	cmp	r1, #10
 800744a:	d015      	beq.n	8007478 <_puts_r+0x8c>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	6022      	str	r2, [r4, #0]
 8007452:	7019      	strb	r1, [r3, #0]
 8007454:	68a3      	ldr	r3, [r4, #8]
 8007456:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800745a:	3b01      	subs	r3, #1
 800745c:	60a3      	str	r3, [r4, #8]
 800745e:	2900      	cmp	r1, #0
 8007460:	d1ed      	bne.n	800743e <_puts_r+0x52>
 8007462:	2b00      	cmp	r3, #0
 8007464:	da11      	bge.n	800748a <_puts_r+0x9e>
 8007466:	4622      	mov	r2, r4
 8007468:	210a      	movs	r1, #10
 800746a:	4628      	mov	r0, r5
 800746c:	f000 fee8 	bl	8008240 <__swbuf_r>
 8007470:	3001      	adds	r0, #1
 8007472:	d0d7      	beq.n	8007424 <_puts_r+0x38>
 8007474:	250a      	movs	r5, #10
 8007476:	e7d7      	b.n	8007428 <_puts_r+0x3c>
 8007478:	4622      	mov	r2, r4
 800747a:	4628      	mov	r0, r5
 800747c:	f000 fee0 	bl	8008240 <__swbuf_r>
 8007480:	3001      	adds	r0, #1
 8007482:	d1e7      	bne.n	8007454 <_puts_r+0x68>
 8007484:	e7ce      	b.n	8007424 <_puts_r+0x38>
 8007486:	3e01      	subs	r6, #1
 8007488:	e7e4      	b.n	8007454 <_puts_r+0x68>
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	6022      	str	r2, [r4, #0]
 8007490:	220a      	movs	r2, #10
 8007492:	701a      	strb	r2, [r3, #0]
 8007494:	e7ee      	b.n	8007474 <_puts_r+0x88>
	...

08007498 <puts>:
 8007498:	4b02      	ldr	r3, [pc, #8]	@ (80074a4 <puts+0xc>)
 800749a:	4601      	mov	r1, r0
 800749c:	6818      	ldr	r0, [r3, #0]
 800749e:	f7ff bfa5 	b.w	80073ec <_puts_r>
 80074a2:	bf00      	nop
 80074a4:	20000018 	.word	0x20000018

080074a8 <strtok>:
 80074a8:	4b16      	ldr	r3, [pc, #88]	@ (8007504 <strtok+0x5c>)
 80074aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ae:	681f      	ldr	r7, [r3, #0]
 80074b0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80074b2:	4605      	mov	r5, r0
 80074b4:	460e      	mov	r6, r1
 80074b6:	b9ec      	cbnz	r4, 80074f4 <strtok+0x4c>
 80074b8:	2050      	movs	r0, #80	@ 0x50
 80074ba:	f000 fb4d 	bl	8007b58 <malloc>
 80074be:	4602      	mov	r2, r0
 80074c0:	6478      	str	r0, [r7, #68]	@ 0x44
 80074c2:	b920      	cbnz	r0, 80074ce <strtok+0x26>
 80074c4:	4b10      	ldr	r3, [pc, #64]	@ (8007508 <strtok+0x60>)
 80074c6:	4811      	ldr	r0, [pc, #68]	@ (800750c <strtok+0x64>)
 80074c8:	215b      	movs	r1, #91	@ 0x5b
 80074ca:	f000 f88d 	bl	80075e8 <__assert_func>
 80074ce:	e9c0 4400 	strd	r4, r4, [r0]
 80074d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80074d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80074da:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80074de:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80074e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80074e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80074ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80074ee:	6184      	str	r4, [r0, #24]
 80074f0:	7704      	strb	r4, [r0, #28]
 80074f2:	6244      	str	r4, [r0, #36]	@ 0x24
 80074f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	2301      	movs	r3, #1
 80074fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007500:	f000 b806 	b.w	8007510 <__strtok_r>
 8007504:	20000018 	.word	0x20000018
 8007508:	080088b0 	.word	0x080088b0
 800750c:	080088c7 	.word	0x080088c7

08007510 <__strtok_r>:
 8007510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007512:	4604      	mov	r4, r0
 8007514:	b908      	cbnz	r0, 800751a <__strtok_r+0xa>
 8007516:	6814      	ldr	r4, [r2, #0]
 8007518:	b144      	cbz	r4, 800752c <__strtok_r+0x1c>
 800751a:	4620      	mov	r0, r4
 800751c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007520:	460f      	mov	r7, r1
 8007522:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007526:	b91e      	cbnz	r6, 8007530 <__strtok_r+0x20>
 8007528:	b965      	cbnz	r5, 8007544 <__strtok_r+0x34>
 800752a:	6015      	str	r5, [r2, #0]
 800752c:	2000      	movs	r0, #0
 800752e:	e005      	b.n	800753c <__strtok_r+0x2c>
 8007530:	42b5      	cmp	r5, r6
 8007532:	d1f6      	bne.n	8007522 <__strtok_r+0x12>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1f0      	bne.n	800751a <__strtok_r+0xa>
 8007538:	6014      	str	r4, [r2, #0]
 800753a:	7003      	strb	r3, [r0, #0]
 800753c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800753e:	461c      	mov	r4, r3
 8007540:	e00c      	b.n	800755c <__strtok_r+0x4c>
 8007542:	b915      	cbnz	r5, 800754a <__strtok_r+0x3a>
 8007544:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007548:	460e      	mov	r6, r1
 800754a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800754e:	42ab      	cmp	r3, r5
 8007550:	d1f7      	bne.n	8007542 <__strtok_r+0x32>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0f3      	beq.n	800753e <__strtok_r+0x2e>
 8007556:	2300      	movs	r3, #0
 8007558:	f804 3c01 	strb.w	r3, [r4, #-1]
 800755c:	6014      	str	r4, [r2, #0]
 800755e:	e7ed      	b.n	800753c <__strtok_r+0x2c>

08007560 <memset>:
 8007560:	4402      	add	r2, r0
 8007562:	4603      	mov	r3, r0
 8007564:	4293      	cmp	r3, r2
 8007566:	d100      	bne.n	800756a <memset+0xa>
 8007568:	4770      	bx	lr
 800756a:	f803 1b01 	strb.w	r1, [r3], #1
 800756e:	e7f9      	b.n	8007564 <memset+0x4>

08007570 <__errno>:
 8007570:	4b01      	ldr	r3, [pc, #4]	@ (8007578 <__errno+0x8>)
 8007572:	6818      	ldr	r0, [r3, #0]
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	20000018 	.word	0x20000018

0800757c <__libc_init_array>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	4d0d      	ldr	r5, [pc, #52]	@ (80075b4 <__libc_init_array+0x38>)
 8007580:	4c0d      	ldr	r4, [pc, #52]	@ (80075b8 <__libc_init_array+0x3c>)
 8007582:	1b64      	subs	r4, r4, r5
 8007584:	10a4      	asrs	r4, r4, #2
 8007586:	2600      	movs	r6, #0
 8007588:	42a6      	cmp	r6, r4
 800758a:	d109      	bne.n	80075a0 <__libc_init_array+0x24>
 800758c:	4d0b      	ldr	r5, [pc, #44]	@ (80075bc <__libc_init_array+0x40>)
 800758e:	4c0c      	ldr	r4, [pc, #48]	@ (80075c0 <__libc_init_array+0x44>)
 8007590:	f001 f87c 	bl	800868c <_init>
 8007594:	1b64      	subs	r4, r4, r5
 8007596:	10a4      	asrs	r4, r4, #2
 8007598:	2600      	movs	r6, #0
 800759a:	42a6      	cmp	r6, r4
 800759c:	d105      	bne.n	80075aa <__libc_init_array+0x2e>
 800759e:	bd70      	pop	{r4, r5, r6, pc}
 80075a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a4:	4798      	blx	r3
 80075a6:	3601      	adds	r6, #1
 80075a8:	e7ee      	b.n	8007588 <__libc_init_array+0xc>
 80075aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ae:	4798      	blx	r3
 80075b0:	3601      	adds	r6, #1
 80075b2:	e7f2      	b.n	800759a <__libc_init_array+0x1e>
 80075b4:	08008998 	.word	0x08008998
 80075b8:	08008998 	.word	0x08008998
 80075bc:	08008998 	.word	0x08008998
 80075c0:	0800899c 	.word	0x0800899c

080075c4 <__retarget_lock_init_recursive>:
 80075c4:	4770      	bx	lr

080075c6 <__retarget_lock_acquire_recursive>:
 80075c6:	4770      	bx	lr

080075c8 <__retarget_lock_release_recursive>:
 80075c8:	4770      	bx	lr

080075ca <memcpy>:
 80075ca:	440a      	add	r2, r1
 80075cc:	4291      	cmp	r1, r2
 80075ce:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80075d2:	d100      	bne.n	80075d6 <memcpy+0xc>
 80075d4:	4770      	bx	lr
 80075d6:	b510      	push	{r4, lr}
 80075d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075e0:	4291      	cmp	r1, r2
 80075e2:	d1f9      	bne.n	80075d8 <memcpy+0xe>
 80075e4:	bd10      	pop	{r4, pc}
	...

080075e8 <__assert_func>:
 80075e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075ea:	4614      	mov	r4, r2
 80075ec:	461a      	mov	r2, r3
 80075ee:	4b09      	ldr	r3, [pc, #36]	@ (8007614 <__assert_func+0x2c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4605      	mov	r5, r0
 80075f4:	68d8      	ldr	r0, [r3, #12]
 80075f6:	b954      	cbnz	r4, 800760e <__assert_func+0x26>
 80075f8:	4b07      	ldr	r3, [pc, #28]	@ (8007618 <__assert_func+0x30>)
 80075fa:	461c      	mov	r4, r3
 80075fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007600:	9100      	str	r1, [sp, #0]
 8007602:	462b      	mov	r3, r5
 8007604:	4905      	ldr	r1, [pc, #20]	@ (800761c <__assert_func+0x34>)
 8007606:	f000 fddb 	bl	80081c0 <fiprintf>
 800760a:	f000 ffa1 	bl	8008550 <abort>
 800760e:	4b04      	ldr	r3, [pc, #16]	@ (8007620 <__assert_func+0x38>)
 8007610:	e7f4      	b.n	80075fc <__assert_func+0x14>
 8007612:	bf00      	nop
 8007614:	20000018 	.word	0x20000018
 8007618:	0800895c 	.word	0x0800895c
 800761c:	0800892e 	.word	0x0800892e
 8007620:	08008921 	.word	0x08008921

08007624 <__ssputs_r>:
 8007624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007628:	688e      	ldr	r6, [r1, #8]
 800762a:	461f      	mov	r7, r3
 800762c:	42be      	cmp	r6, r7
 800762e:	680b      	ldr	r3, [r1, #0]
 8007630:	4682      	mov	sl, r0
 8007632:	460c      	mov	r4, r1
 8007634:	4690      	mov	r8, r2
 8007636:	d82d      	bhi.n	8007694 <__ssputs_r+0x70>
 8007638:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800763c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007640:	d026      	beq.n	8007690 <__ssputs_r+0x6c>
 8007642:	6965      	ldr	r5, [r4, #20]
 8007644:	6909      	ldr	r1, [r1, #16]
 8007646:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800764a:	eba3 0901 	sub.w	r9, r3, r1
 800764e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007652:	1c7b      	adds	r3, r7, #1
 8007654:	444b      	add	r3, r9
 8007656:	106d      	asrs	r5, r5, #1
 8007658:	429d      	cmp	r5, r3
 800765a:	bf38      	it	cc
 800765c:	461d      	movcc	r5, r3
 800765e:	0553      	lsls	r3, r2, #21
 8007660:	d527      	bpl.n	80076b2 <__ssputs_r+0x8e>
 8007662:	4629      	mov	r1, r5
 8007664:	f000 faa2 	bl	8007bac <_malloc_r>
 8007668:	4606      	mov	r6, r0
 800766a:	b360      	cbz	r0, 80076c6 <__ssputs_r+0xa2>
 800766c:	6921      	ldr	r1, [r4, #16]
 800766e:	464a      	mov	r2, r9
 8007670:	f7ff ffab 	bl	80075ca <memcpy>
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800767a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767e:	81a3      	strh	r3, [r4, #12]
 8007680:	6126      	str	r6, [r4, #16]
 8007682:	6165      	str	r5, [r4, #20]
 8007684:	444e      	add	r6, r9
 8007686:	eba5 0509 	sub.w	r5, r5, r9
 800768a:	6026      	str	r6, [r4, #0]
 800768c:	60a5      	str	r5, [r4, #8]
 800768e:	463e      	mov	r6, r7
 8007690:	42be      	cmp	r6, r7
 8007692:	d900      	bls.n	8007696 <__ssputs_r+0x72>
 8007694:	463e      	mov	r6, r7
 8007696:	6820      	ldr	r0, [r4, #0]
 8007698:	4632      	mov	r2, r6
 800769a:	4641      	mov	r1, r8
 800769c:	f000 fec6 	bl	800842c <memmove>
 80076a0:	68a3      	ldr	r3, [r4, #8]
 80076a2:	1b9b      	subs	r3, r3, r6
 80076a4:	60a3      	str	r3, [r4, #8]
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	4433      	add	r3, r6
 80076aa:	6023      	str	r3, [r4, #0]
 80076ac:	2000      	movs	r0, #0
 80076ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b2:	462a      	mov	r2, r5
 80076b4:	f000 fd96 	bl	80081e4 <_realloc_r>
 80076b8:	4606      	mov	r6, r0
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d1e0      	bne.n	8007680 <__ssputs_r+0x5c>
 80076be:	6921      	ldr	r1, [r4, #16]
 80076c0:	4650      	mov	r0, sl
 80076c2:	f000 ff4d 	bl	8008560 <_free_r>
 80076c6:	230c      	movs	r3, #12
 80076c8:	f8ca 3000 	str.w	r3, [sl]
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076d2:	81a3      	strh	r3, [r4, #12]
 80076d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076d8:	e7e9      	b.n	80076ae <__ssputs_r+0x8a>
	...

080076dc <_svfiprintf_r>:
 80076dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e0:	4698      	mov	r8, r3
 80076e2:	898b      	ldrh	r3, [r1, #12]
 80076e4:	061b      	lsls	r3, r3, #24
 80076e6:	b09d      	sub	sp, #116	@ 0x74
 80076e8:	4607      	mov	r7, r0
 80076ea:	460d      	mov	r5, r1
 80076ec:	4614      	mov	r4, r2
 80076ee:	d510      	bpl.n	8007712 <_svfiprintf_r+0x36>
 80076f0:	690b      	ldr	r3, [r1, #16]
 80076f2:	b973      	cbnz	r3, 8007712 <_svfiprintf_r+0x36>
 80076f4:	2140      	movs	r1, #64	@ 0x40
 80076f6:	f000 fa59 	bl	8007bac <_malloc_r>
 80076fa:	6028      	str	r0, [r5, #0]
 80076fc:	6128      	str	r0, [r5, #16]
 80076fe:	b930      	cbnz	r0, 800770e <_svfiprintf_r+0x32>
 8007700:	230c      	movs	r3, #12
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007708:	b01d      	add	sp, #116	@ 0x74
 800770a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770e:	2340      	movs	r3, #64	@ 0x40
 8007710:	616b      	str	r3, [r5, #20]
 8007712:	2300      	movs	r3, #0
 8007714:	9309      	str	r3, [sp, #36]	@ 0x24
 8007716:	2320      	movs	r3, #32
 8007718:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800771c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007720:	2330      	movs	r3, #48	@ 0x30
 8007722:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80078c0 <_svfiprintf_r+0x1e4>
 8007726:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800772a:	f04f 0901 	mov.w	r9, #1
 800772e:	4623      	mov	r3, r4
 8007730:	469a      	mov	sl, r3
 8007732:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007736:	b10a      	cbz	r2, 800773c <_svfiprintf_r+0x60>
 8007738:	2a25      	cmp	r2, #37	@ 0x25
 800773a:	d1f9      	bne.n	8007730 <_svfiprintf_r+0x54>
 800773c:	ebba 0b04 	subs.w	fp, sl, r4
 8007740:	d00b      	beq.n	800775a <_svfiprintf_r+0x7e>
 8007742:	465b      	mov	r3, fp
 8007744:	4622      	mov	r2, r4
 8007746:	4629      	mov	r1, r5
 8007748:	4638      	mov	r0, r7
 800774a:	f7ff ff6b 	bl	8007624 <__ssputs_r>
 800774e:	3001      	adds	r0, #1
 8007750:	f000 80a7 	beq.w	80078a2 <_svfiprintf_r+0x1c6>
 8007754:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007756:	445a      	add	r2, fp
 8007758:	9209      	str	r2, [sp, #36]	@ 0x24
 800775a:	f89a 3000 	ldrb.w	r3, [sl]
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 809f 	beq.w	80078a2 <_svfiprintf_r+0x1c6>
 8007764:	2300      	movs	r3, #0
 8007766:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800776a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800776e:	f10a 0a01 	add.w	sl, sl, #1
 8007772:	9304      	str	r3, [sp, #16]
 8007774:	9307      	str	r3, [sp, #28]
 8007776:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800777a:	931a      	str	r3, [sp, #104]	@ 0x68
 800777c:	4654      	mov	r4, sl
 800777e:	2205      	movs	r2, #5
 8007780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007784:	484e      	ldr	r0, [pc, #312]	@ (80078c0 <_svfiprintf_r+0x1e4>)
 8007786:	f7f8 fd33 	bl	80001f0 <memchr>
 800778a:	9a04      	ldr	r2, [sp, #16]
 800778c:	b9d8      	cbnz	r0, 80077c6 <_svfiprintf_r+0xea>
 800778e:	06d0      	lsls	r0, r2, #27
 8007790:	bf44      	itt	mi
 8007792:	2320      	movmi	r3, #32
 8007794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007798:	0711      	lsls	r1, r2, #28
 800779a:	bf44      	itt	mi
 800779c:	232b      	movmi	r3, #43	@ 0x2b
 800779e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077a2:	f89a 3000 	ldrb.w	r3, [sl]
 80077a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80077a8:	d015      	beq.n	80077d6 <_svfiprintf_r+0xfa>
 80077aa:	9a07      	ldr	r2, [sp, #28]
 80077ac:	4654      	mov	r4, sl
 80077ae:	2000      	movs	r0, #0
 80077b0:	f04f 0c0a 	mov.w	ip, #10
 80077b4:	4621      	mov	r1, r4
 80077b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ba:	3b30      	subs	r3, #48	@ 0x30
 80077bc:	2b09      	cmp	r3, #9
 80077be:	d94b      	bls.n	8007858 <_svfiprintf_r+0x17c>
 80077c0:	b1b0      	cbz	r0, 80077f0 <_svfiprintf_r+0x114>
 80077c2:	9207      	str	r2, [sp, #28]
 80077c4:	e014      	b.n	80077f0 <_svfiprintf_r+0x114>
 80077c6:	eba0 0308 	sub.w	r3, r0, r8
 80077ca:	fa09 f303 	lsl.w	r3, r9, r3
 80077ce:	4313      	orrs	r3, r2
 80077d0:	9304      	str	r3, [sp, #16]
 80077d2:	46a2      	mov	sl, r4
 80077d4:	e7d2      	b.n	800777c <_svfiprintf_r+0xa0>
 80077d6:	9b03      	ldr	r3, [sp, #12]
 80077d8:	1d19      	adds	r1, r3, #4
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	9103      	str	r1, [sp, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bfbb      	ittet	lt
 80077e2:	425b      	neglt	r3, r3
 80077e4:	f042 0202 	orrlt.w	r2, r2, #2
 80077e8:	9307      	strge	r3, [sp, #28]
 80077ea:	9307      	strlt	r3, [sp, #28]
 80077ec:	bfb8      	it	lt
 80077ee:	9204      	strlt	r2, [sp, #16]
 80077f0:	7823      	ldrb	r3, [r4, #0]
 80077f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80077f4:	d10a      	bne.n	800780c <_svfiprintf_r+0x130>
 80077f6:	7863      	ldrb	r3, [r4, #1]
 80077f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80077fa:	d132      	bne.n	8007862 <_svfiprintf_r+0x186>
 80077fc:	9b03      	ldr	r3, [sp, #12]
 80077fe:	1d1a      	adds	r2, r3, #4
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	9203      	str	r2, [sp, #12]
 8007804:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007808:	3402      	adds	r4, #2
 800780a:	9305      	str	r3, [sp, #20]
 800780c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80078d0 <_svfiprintf_r+0x1f4>
 8007810:	7821      	ldrb	r1, [r4, #0]
 8007812:	2203      	movs	r2, #3
 8007814:	4650      	mov	r0, sl
 8007816:	f7f8 fceb 	bl	80001f0 <memchr>
 800781a:	b138      	cbz	r0, 800782c <_svfiprintf_r+0x150>
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	eba0 000a 	sub.w	r0, r0, sl
 8007822:	2240      	movs	r2, #64	@ 0x40
 8007824:	4082      	lsls	r2, r0
 8007826:	4313      	orrs	r3, r2
 8007828:	3401      	adds	r4, #1
 800782a:	9304      	str	r3, [sp, #16]
 800782c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007830:	4824      	ldr	r0, [pc, #144]	@ (80078c4 <_svfiprintf_r+0x1e8>)
 8007832:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007836:	2206      	movs	r2, #6
 8007838:	f7f8 fcda 	bl	80001f0 <memchr>
 800783c:	2800      	cmp	r0, #0
 800783e:	d036      	beq.n	80078ae <_svfiprintf_r+0x1d2>
 8007840:	4b21      	ldr	r3, [pc, #132]	@ (80078c8 <_svfiprintf_r+0x1ec>)
 8007842:	bb1b      	cbnz	r3, 800788c <_svfiprintf_r+0x1b0>
 8007844:	9b03      	ldr	r3, [sp, #12]
 8007846:	3307      	adds	r3, #7
 8007848:	f023 0307 	bic.w	r3, r3, #7
 800784c:	3308      	adds	r3, #8
 800784e:	9303      	str	r3, [sp, #12]
 8007850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007852:	4433      	add	r3, r6
 8007854:	9309      	str	r3, [sp, #36]	@ 0x24
 8007856:	e76a      	b.n	800772e <_svfiprintf_r+0x52>
 8007858:	fb0c 3202 	mla	r2, ip, r2, r3
 800785c:	460c      	mov	r4, r1
 800785e:	2001      	movs	r0, #1
 8007860:	e7a8      	b.n	80077b4 <_svfiprintf_r+0xd8>
 8007862:	2300      	movs	r3, #0
 8007864:	3401      	adds	r4, #1
 8007866:	9305      	str	r3, [sp, #20]
 8007868:	4619      	mov	r1, r3
 800786a:	f04f 0c0a 	mov.w	ip, #10
 800786e:	4620      	mov	r0, r4
 8007870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007874:	3a30      	subs	r2, #48	@ 0x30
 8007876:	2a09      	cmp	r2, #9
 8007878:	d903      	bls.n	8007882 <_svfiprintf_r+0x1a6>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0c6      	beq.n	800780c <_svfiprintf_r+0x130>
 800787e:	9105      	str	r1, [sp, #20]
 8007880:	e7c4      	b.n	800780c <_svfiprintf_r+0x130>
 8007882:	fb0c 2101 	mla	r1, ip, r1, r2
 8007886:	4604      	mov	r4, r0
 8007888:	2301      	movs	r3, #1
 800788a:	e7f0      	b.n	800786e <_svfiprintf_r+0x192>
 800788c:	ab03      	add	r3, sp, #12
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	462a      	mov	r2, r5
 8007892:	4b0e      	ldr	r3, [pc, #56]	@ (80078cc <_svfiprintf_r+0x1f0>)
 8007894:	a904      	add	r1, sp, #16
 8007896:	4638      	mov	r0, r7
 8007898:	f3af 8000 	nop.w
 800789c:	1c42      	adds	r2, r0, #1
 800789e:	4606      	mov	r6, r0
 80078a0:	d1d6      	bne.n	8007850 <_svfiprintf_r+0x174>
 80078a2:	89ab      	ldrh	r3, [r5, #12]
 80078a4:	065b      	lsls	r3, r3, #25
 80078a6:	f53f af2d 	bmi.w	8007704 <_svfiprintf_r+0x28>
 80078aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078ac:	e72c      	b.n	8007708 <_svfiprintf_r+0x2c>
 80078ae:	ab03      	add	r3, sp, #12
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	462a      	mov	r2, r5
 80078b4:	4b05      	ldr	r3, [pc, #20]	@ (80078cc <_svfiprintf_r+0x1f0>)
 80078b6:	a904      	add	r1, sp, #16
 80078b8:	4638      	mov	r0, r7
 80078ba:	f000 fa65 	bl	8007d88 <_printf_i>
 80078be:	e7ed      	b.n	800789c <_svfiprintf_r+0x1c0>
 80078c0:	0800895d 	.word	0x0800895d
 80078c4:	08008967 	.word	0x08008967
 80078c8:	00000000 	.word	0x00000000
 80078cc:	08007625 	.word	0x08007625
 80078d0:	08008963 	.word	0x08008963

080078d4 <__sfputc_r>:
 80078d4:	6893      	ldr	r3, [r2, #8]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	2b00      	cmp	r3, #0
 80078da:	b410      	push	{r4}
 80078dc:	6093      	str	r3, [r2, #8]
 80078de:	da08      	bge.n	80078f2 <__sfputc_r+0x1e>
 80078e0:	6994      	ldr	r4, [r2, #24]
 80078e2:	42a3      	cmp	r3, r4
 80078e4:	db01      	blt.n	80078ea <__sfputc_r+0x16>
 80078e6:	290a      	cmp	r1, #10
 80078e8:	d103      	bne.n	80078f2 <__sfputc_r+0x1e>
 80078ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078ee:	f000 bca7 	b.w	8008240 <__swbuf_r>
 80078f2:	6813      	ldr	r3, [r2, #0]
 80078f4:	1c58      	adds	r0, r3, #1
 80078f6:	6010      	str	r0, [r2, #0]
 80078f8:	7019      	strb	r1, [r3, #0]
 80078fa:	4608      	mov	r0, r1
 80078fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007900:	4770      	bx	lr

08007902 <__sfputs_r>:
 8007902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007904:	4606      	mov	r6, r0
 8007906:	460f      	mov	r7, r1
 8007908:	4614      	mov	r4, r2
 800790a:	18d5      	adds	r5, r2, r3
 800790c:	42ac      	cmp	r4, r5
 800790e:	d101      	bne.n	8007914 <__sfputs_r+0x12>
 8007910:	2000      	movs	r0, #0
 8007912:	e007      	b.n	8007924 <__sfputs_r+0x22>
 8007914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007918:	463a      	mov	r2, r7
 800791a:	4630      	mov	r0, r6
 800791c:	f7ff ffda 	bl	80078d4 <__sfputc_r>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d1f3      	bne.n	800790c <__sfputs_r+0xa>
 8007924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007928 <_vfiprintf_r>:
 8007928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	460d      	mov	r5, r1
 800792e:	b09d      	sub	sp, #116	@ 0x74
 8007930:	4614      	mov	r4, r2
 8007932:	4698      	mov	r8, r3
 8007934:	4606      	mov	r6, r0
 8007936:	b118      	cbz	r0, 8007940 <_vfiprintf_r+0x18>
 8007938:	6a03      	ldr	r3, [r0, #32]
 800793a:	b90b      	cbnz	r3, 8007940 <_vfiprintf_r+0x18>
 800793c:	f7ff fd0e 	bl	800735c <__sinit>
 8007940:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007942:	07d9      	lsls	r1, r3, #31
 8007944:	d405      	bmi.n	8007952 <_vfiprintf_r+0x2a>
 8007946:	89ab      	ldrh	r3, [r5, #12]
 8007948:	059a      	lsls	r2, r3, #22
 800794a:	d402      	bmi.n	8007952 <_vfiprintf_r+0x2a>
 800794c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800794e:	f7ff fe3a 	bl	80075c6 <__retarget_lock_acquire_recursive>
 8007952:	89ab      	ldrh	r3, [r5, #12]
 8007954:	071b      	lsls	r3, r3, #28
 8007956:	d501      	bpl.n	800795c <_vfiprintf_r+0x34>
 8007958:	692b      	ldr	r3, [r5, #16]
 800795a:	b99b      	cbnz	r3, 8007984 <_vfiprintf_r+0x5c>
 800795c:	4629      	mov	r1, r5
 800795e:	4630      	mov	r0, r6
 8007960:	f000 fcac 	bl	80082bc <__swsetup_r>
 8007964:	b170      	cbz	r0, 8007984 <_vfiprintf_r+0x5c>
 8007966:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007968:	07dc      	lsls	r4, r3, #31
 800796a:	d504      	bpl.n	8007976 <_vfiprintf_r+0x4e>
 800796c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007970:	b01d      	add	sp, #116	@ 0x74
 8007972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007976:	89ab      	ldrh	r3, [r5, #12]
 8007978:	0598      	lsls	r0, r3, #22
 800797a:	d4f7      	bmi.n	800796c <_vfiprintf_r+0x44>
 800797c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800797e:	f7ff fe23 	bl	80075c8 <__retarget_lock_release_recursive>
 8007982:	e7f3      	b.n	800796c <_vfiprintf_r+0x44>
 8007984:	2300      	movs	r3, #0
 8007986:	9309      	str	r3, [sp, #36]	@ 0x24
 8007988:	2320      	movs	r3, #32
 800798a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800798e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007992:	2330      	movs	r3, #48	@ 0x30
 8007994:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007b44 <_vfiprintf_r+0x21c>
 8007998:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800799c:	f04f 0901 	mov.w	r9, #1
 80079a0:	4623      	mov	r3, r4
 80079a2:	469a      	mov	sl, r3
 80079a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079a8:	b10a      	cbz	r2, 80079ae <_vfiprintf_r+0x86>
 80079aa:	2a25      	cmp	r2, #37	@ 0x25
 80079ac:	d1f9      	bne.n	80079a2 <_vfiprintf_r+0x7a>
 80079ae:	ebba 0b04 	subs.w	fp, sl, r4
 80079b2:	d00b      	beq.n	80079cc <_vfiprintf_r+0xa4>
 80079b4:	465b      	mov	r3, fp
 80079b6:	4622      	mov	r2, r4
 80079b8:	4629      	mov	r1, r5
 80079ba:	4630      	mov	r0, r6
 80079bc:	f7ff ffa1 	bl	8007902 <__sfputs_r>
 80079c0:	3001      	adds	r0, #1
 80079c2:	f000 80a7 	beq.w	8007b14 <_vfiprintf_r+0x1ec>
 80079c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079c8:	445a      	add	r2, fp
 80079ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80079cc:	f89a 3000 	ldrb.w	r3, [sl]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 809f 	beq.w	8007b14 <_vfiprintf_r+0x1ec>
 80079d6:	2300      	movs	r3, #0
 80079d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80079dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e0:	f10a 0a01 	add.w	sl, sl, #1
 80079e4:	9304      	str	r3, [sp, #16]
 80079e6:	9307      	str	r3, [sp, #28]
 80079e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80079ee:	4654      	mov	r4, sl
 80079f0:	2205      	movs	r2, #5
 80079f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f6:	4853      	ldr	r0, [pc, #332]	@ (8007b44 <_vfiprintf_r+0x21c>)
 80079f8:	f7f8 fbfa 	bl	80001f0 <memchr>
 80079fc:	9a04      	ldr	r2, [sp, #16]
 80079fe:	b9d8      	cbnz	r0, 8007a38 <_vfiprintf_r+0x110>
 8007a00:	06d1      	lsls	r1, r2, #27
 8007a02:	bf44      	itt	mi
 8007a04:	2320      	movmi	r3, #32
 8007a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a0a:	0713      	lsls	r3, r2, #28
 8007a0c:	bf44      	itt	mi
 8007a0e:	232b      	movmi	r3, #43	@ 0x2b
 8007a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a14:	f89a 3000 	ldrb.w	r3, [sl]
 8007a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a1a:	d015      	beq.n	8007a48 <_vfiprintf_r+0x120>
 8007a1c:	9a07      	ldr	r2, [sp, #28]
 8007a1e:	4654      	mov	r4, sl
 8007a20:	2000      	movs	r0, #0
 8007a22:	f04f 0c0a 	mov.w	ip, #10
 8007a26:	4621      	mov	r1, r4
 8007a28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a2c:	3b30      	subs	r3, #48	@ 0x30
 8007a2e:	2b09      	cmp	r3, #9
 8007a30:	d94b      	bls.n	8007aca <_vfiprintf_r+0x1a2>
 8007a32:	b1b0      	cbz	r0, 8007a62 <_vfiprintf_r+0x13a>
 8007a34:	9207      	str	r2, [sp, #28]
 8007a36:	e014      	b.n	8007a62 <_vfiprintf_r+0x13a>
 8007a38:	eba0 0308 	sub.w	r3, r0, r8
 8007a3c:	fa09 f303 	lsl.w	r3, r9, r3
 8007a40:	4313      	orrs	r3, r2
 8007a42:	9304      	str	r3, [sp, #16]
 8007a44:	46a2      	mov	sl, r4
 8007a46:	e7d2      	b.n	80079ee <_vfiprintf_r+0xc6>
 8007a48:	9b03      	ldr	r3, [sp, #12]
 8007a4a:	1d19      	adds	r1, r3, #4
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	9103      	str	r1, [sp, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	bfbb      	ittet	lt
 8007a54:	425b      	neglt	r3, r3
 8007a56:	f042 0202 	orrlt.w	r2, r2, #2
 8007a5a:	9307      	strge	r3, [sp, #28]
 8007a5c:	9307      	strlt	r3, [sp, #28]
 8007a5e:	bfb8      	it	lt
 8007a60:	9204      	strlt	r2, [sp, #16]
 8007a62:	7823      	ldrb	r3, [r4, #0]
 8007a64:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a66:	d10a      	bne.n	8007a7e <_vfiprintf_r+0x156>
 8007a68:	7863      	ldrb	r3, [r4, #1]
 8007a6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a6c:	d132      	bne.n	8007ad4 <_vfiprintf_r+0x1ac>
 8007a6e:	9b03      	ldr	r3, [sp, #12]
 8007a70:	1d1a      	adds	r2, r3, #4
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	9203      	str	r2, [sp, #12]
 8007a76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a7a:	3402      	adds	r4, #2
 8007a7c:	9305      	str	r3, [sp, #20]
 8007a7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007b54 <_vfiprintf_r+0x22c>
 8007a82:	7821      	ldrb	r1, [r4, #0]
 8007a84:	2203      	movs	r2, #3
 8007a86:	4650      	mov	r0, sl
 8007a88:	f7f8 fbb2 	bl	80001f0 <memchr>
 8007a8c:	b138      	cbz	r0, 8007a9e <_vfiprintf_r+0x176>
 8007a8e:	9b04      	ldr	r3, [sp, #16]
 8007a90:	eba0 000a 	sub.w	r0, r0, sl
 8007a94:	2240      	movs	r2, #64	@ 0x40
 8007a96:	4082      	lsls	r2, r0
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	3401      	adds	r4, #1
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa2:	4829      	ldr	r0, [pc, #164]	@ (8007b48 <_vfiprintf_r+0x220>)
 8007aa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007aa8:	2206      	movs	r2, #6
 8007aaa:	f7f8 fba1 	bl	80001f0 <memchr>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d03f      	beq.n	8007b32 <_vfiprintf_r+0x20a>
 8007ab2:	4b26      	ldr	r3, [pc, #152]	@ (8007b4c <_vfiprintf_r+0x224>)
 8007ab4:	bb1b      	cbnz	r3, 8007afe <_vfiprintf_r+0x1d6>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	3307      	adds	r3, #7
 8007aba:	f023 0307 	bic.w	r3, r3, #7
 8007abe:	3308      	adds	r3, #8
 8007ac0:	9303      	str	r3, [sp, #12]
 8007ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac4:	443b      	add	r3, r7
 8007ac6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ac8:	e76a      	b.n	80079a0 <_vfiprintf_r+0x78>
 8007aca:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ace:	460c      	mov	r4, r1
 8007ad0:	2001      	movs	r0, #1
 8007ad2:	e7a8      	b.n	8007a26 <_vfiprintf_r+0xfe>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	3401      	adds	r4, #1
 8007ad8:	9305      	str	r3, [sp, #20]
 8007ada:	4619      	mov	r1, r3
 8007adc:	f04f 0c0a 	mov.w	ip, #10
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ae6:	3a30      	subs	r2, #48	@ 0x30
 8007ae8:	2a09      	cmp	r2, #9
 8007aea:	d903      	bls.n	8007af4 <_vfiprintf_r+0x1cc>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0c6      	beq.n	8007a7e <_vfiprintf_r+0x156>
 8007af0:	9105      	str	r1, [sp, #20]
 8007af2:	e7c4      	b.n	8007a7e <_vfiprintf_r+0x156>
 8007af4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007af8:	4604      	mov	r4, r0
 8007afa:	2301      	movs	r3, #1
 8007afc:	e7f0      	b.n	8007ae0 <_vfiprintf_r+0x1b8>
 8007afe:	ab03      	add	r3, sp, #12
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	462a      	mov	r2, r5
 8007b04:	4b12      	ldr	r3, [pc, #72]	@ (8007b50 <_vfiprintf_r+0x228>)
 8007b06:	a904      	add	r1, sp, #16
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f3af 8000 	nop.w
 8007b0e:	4607      	mov	r7, r0
 8007b10:	1c78      	adds	r0, r7, #1
 8007b12:	d1d6      	bne.n	8007ac2 <_vfiprintf_r+0x19a>
 8007b14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b16:	07d9      	lsls	r1, r3, #31
 8007b18:	d405      	bmi.n	8007b26 <_vfiprintf_r+0x1fe>
 8007b1a:	89ab      	ldrh	r3, [r5, #12]
 8007b1c:	059a      	lsls	r2, r3, #22
 8007b1e:	d402      	bmi.n	8007b26 <_vfiprintf_r+0x1fe>
 8007b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b22:	f7ff fd51 	bl	80075c8 <__retarget_lock_release_recursive>
 8007b26:	89ab      	ldrh	r3, [r5, #12]
 8007b28:	065b      	lsls	r3, r3, #25
 8007b2a:	f53f af1f 	bmi.w	800796c <_vfiprintf_r+0x44>
 8007b2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b30:	e71e      	b.n	8007970 <_vfiprintf_r+0x48>
 8007b32:	ab03      	add	r3, sp, #12
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	462a      	mov	r2, r5
 8007b38:	4b05      	ldr	r3, [pc, #20]	@ (8007b50 <_vfiprintf_r+0x228>)
 8007b3a:	a904      	add	r1, sp, #16
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f000 f923 	bl	8007d88 <_printf_i>
 8007b42:	e7e4      	b.n	8007b0e <_vfiprintf_r+0x1e6>
 8007b44:	0800895d 	.word	0x0800895d
 8007b48:	08008967 	.word	0x08008967
 8007b4c:	00000000 	.word	0x00000000
 8007b50:	08007903 	.word	0x08007903
 8007b54:	08008963 	.word	0x08008963

08007b58 <malloc>:
 8007b58:	4b02      	ldr	r3, [pc, #8]	@ (8007b64 <malloc+0xc>)
 8007b5a:	4601      	mov	r1, r0
 8007b5c:	6818      	ldr	r0, [r3, #0]
 8007b5e:	f000 b825 	b.w	8007bac <_malloc_r>
 8007b62:	bf00      	nop
 8007b64:	20000018 	.word	0x20000018

08007b68 <sbrk_aligned>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	4e0f      	ldr	r6, [pc, #60]	@ (8007ba8 <sbrk_aligned+0x40>)
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	6831      	ldr	r1, [r6, #0]
 8007b70:	4605      	mov	r5, r0
 8007b72:	b911      	cbnz	r1, 8007b7a <sbrk_aligned+0x12>
 8007b74:	f000 fcca 	bl	800850c <_sbrk_r>
 8007b78:	6030      	str	r0, [r6, #0]
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f000 fcc5 	bl	800850c <_sbrk_r>
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	d103      	bne.n	8007b8e <sbrk_aligned+0x26>
 8007b86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	bd70      	pop	{r4, r5, r6, pc}
 8007b8e:	1cc4      	adds	r4, r0, #3
 8007b90:	f024 0403 	bic.w	r4, r4, #3
 8007b94:	42a0      	cmp	r0, r4
 8007b96:	d0f8      	beq.n	8007b8a <sbrk_aligned+0x22>
 8007b98:	1a21      	subs	r1, r4, r0
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f000 fcb6 	bl	800850c <_sbrk_r>
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d1f2      	bne.n	8007b8a <sbrk_aligned+0x22>
 8007ba4:	e7ef      	b.n	8007b86 <sbrk_aligned+0x1e>
 8007ba6:	bf00      	nop
 8007ba8:	200005c0 	.word	0x200005c0

08007bac <_malloc_r>:
 8007bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bb0:	1ccd      	adds	r5, r1, #3
 8007bb2:	f025 0503 	bic.w	r5, r5, #3
 8007bb6:	3508      	adds	r5, #8
 8007bb8:	2d0c      	cmp	r5, #12
 8007bba:	bf38      	it	cc
 8007bbc:	250c      	movcc	r5, #12
 8007bbe:	2d00      	cmp	r5, #0
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	db01      	blt.n	8007bc8 <_malloc_r+0x1c>
 8007bc4:	42a9      	cmp	r1, r5
 8007bc6:	d904      	bls.n	8007bd2 <_malloc_r+0x26>
 8007bc8:	230c      	movs	r3, #12
 8007bca:	6033      	str	r3, [r6, #0]
 8007bcc:	2000      	movs	r0, #0
 8007bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ca8 <_malloc_r+0xfc>
 8007bd6:	f000 faa3 	bl	8008120 <__malloc_lock>
 8007bda:	f8d8 3000 	ldr.w	r3, [r8]
 8007bde:	461c      	mov	r4, r3
 8007be0:	bb44      	cbnz	r4, 8007c34 <_malloc_r+0x88>
 8007be2:	4629      	mov	r1, r5
 8007be4:	4630      	mov	r0, r6
 8007be6:	f7ff ffbf 	bl	8007b68 <sbrk_aligned>
 8007bea:	1c43      	adds	r3, r0, #1
 8007bec:	4604      	mov	r4, r0
 8007bee:	d158      	bne.n	8007ca2 <_malloc_r+0xf6>
 8007bf0:	f8d8 4000 	ldr.w	r4, [r8]
 8007bf4:	4627      	mov	r7, r4
 8007bf6:	2f00      	cmp	r7, #0
 8007bf8:	d143      	bne.n	8007c82 <_malloc_r+0xd6>
 8007bfa:	2c00      	cmp	r4, #0
 8007bfc:	d04b      	beq.n	8007c96 <_malloc_r+0xea>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	4639      	mov	r1, r7
 8007c02:	4630      	mov	r0, r6
 8007c04:	eb04 0903 	add.w	r9, r4, r3
 8007c08:	f000 fc80 	bl	800850c <_sbrk_r>
 8007c0c:	4581      	cmp	r9, r0
 8007c0e:	d142      	bne.n	8007c96 <_malloc_r+0xea>
 8007c10:	6821      	ldr	r1, [r4, #0]
 8007c12:	1a6d      	subs	r5, r5, r1
 8007c14:	4629      	mov	r1, r5
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7ff ffa6 	bl	8007b68 <sbrk_aligned>
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	d03a      	beq.n	8007c96 <_malloc_r+0xea>
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	442b      	add	r3, r5
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	f8d8 3000 	ldr.w	r3, [r8]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	bb62      	cbnz	r2, 8007c88 <_malloc_r+0xdc>
 8007c2e:	f8c8 7000 	str.w	r7, [r8]
 8007c32:	e00f      	b.n	8007c54 <_malloc_r+0xa8>
 8007c34:	6822      	ldr	r2, [r4, #0]
 8007c36:	1b52      	subs	r2, r2, r5
 8007c38:	d420      	bmi.n	8007c7c <_malloc_r+0xd0>
 8007c3a:	2a0b      	cmp	r2, #11
 8007c3c:	d917      	bls.n	8007c6e <_malloc_r+0xc2>
 8007c3e:	1961      	adds	r1, r4, r5
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	6025      	str	r5, [r4, #0]
 8007c44:	bf18      	it	ne
 8007c46:	6059      	strne	r1, [r3, #4]
 8007c48:	6863      	ldr	r3, [r4, #4]
 8007c4a:	bf08      	it	eq
 8007c4c:	f8c8 1000 	streq.w	r1, [r8]
 8007c50:	5162      	str	r2, [r4, r5]
 8007c52:	604b      	str	r3, [r1, #4]
 8007c54:	4630      	mov	r0, r6
 8007c56:	f000 fa69 	bl	800812c <__malloc_unlock>
 8007c5a:	f104 000b 	add.w	r0, r4, #11
 8007c5e:	1d23      	adds	r3, r4, #4
 8007c60:	f020 0007 	bic.w	r0, r0, #7
 8007c64:	1ac2      	subs	r2, r0, r3
 8007c66:	bf1c      	itt	ne
 8007c68:	1a1b      	subne	r3, r3, r0
 8007c6a:	50a3      	strne	r3, [r4, r2]
 8007c6c:	e7af      	b.n	8007bce <_malloc_r+0x22>
 8007c6e:	6862      	ldr	r2, [r4, #4]
 8007c70:	42a3      	cmp	r3, r4
 8007c72:	bf0c      	ite	eq
 8007c74:	f8c8 2000 	streq.w	r2, [r8]
 8007c78:	605a      	strne	r2, [r3, #4]
 8007c7a:	e7eb      	b.n	8007c54 <_malloc_r+0xa8>
 8007c7c:	4623      	mov	r3, r4
 8007c7e:	6864      	ldr	r4, [r4, #4]
 8007c80:	e7ae      	b.n	8007be0 <_malloc_r+0x34>
 8007c82:	463c      	mov	r4, r7
 8007c84:	687f      	ldr	r7, [r7, #4]
 8007c86:	e7b6      	b.n	8007bf6 <_malloc_r+0x4a>
 8007c88:	461a      	mov	r2, r3
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	d1fb      	bne.n	8007c88 <_malloc_r+0xdc>
 8007c90:	2300      	movs	r3, #0
 8007c92:	6053      	str	r3, [r2, #4]
 8007c94:	e7de      	b.n	8007c54 <_malloc_r+0xa8>
 8007c96:	230c      	movs	r3, #12
 8007c98:	6033      	str	r3, [r6, #0]
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f000 fa46 	bl	800812c <__malloc_unlock>
 8007ca0:	e794      	b.n	8007bcc <_malloc_r+0x20>
 8007ca2:	6005      	str	r5, [r0, #0]
 8007ca4:	e7d6      	b.n	8007c54 <_malloc_r+0xa8>
 8007ca6:	bf00      	nop
 8007ca8:	200005c4 	.word	0x200005c4

08007cac <_printf_common>:
 8007cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb0:	4616      	mov	r6, r2
 8007cb2:	4698      	mov	r8, r3
 8007cb4:	688a      	ldr	r2, [r1, #8]
 8007cb6:	690b      	ldr	r3, [r1, #16]
 8007cb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	bfb8      	it	lt
 8007cc0:	4613      	movlt	r3, r2
 8007cc2:	6033      	str	r3, [r6, #0]
 8007cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cc8:	4607      	mov	r7, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	b10a      	cbz	r2, 8007cd2 <_printf_common+0x26>
 8007cce:	3301      	adds	r3, #1
 8007cd0:	6033      	str	r3, [r6, #0]
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	0699      	lsls	r1, r3, #26
 8007cd6:	bf42      	ittt	mi
 8007cd8:	6833      	ldrmi	r3, [r6, #0]
 8007cda:	3302      	addmi	r3, #2
 8007cdc:	6033      	strmi	r3, [r6, #0]
 8007cde:	6825      	ldr	r5, [r4, #0]
 8007ce0:	f015 0506 	ands.w	r5, r5, #6
 8007ce4:	d106      	bne.n	8007cf4 <_printf_common+0x48>
 8007ce6:	f104 0a19 	add.w	sl, r4, #25
 8007cea:	68e3      	ldr	r3, [r4, #12]
 8007cec:	6832      	ldr	r2, [r6, #0]
 8007cee:	1a9b      	subs	r3, r3, r2
 8007cf0:	42ab      	cmp	r3, r5
 8007cf2:	dc26      	bgt.n	8007d42 <_printf_common+0x96>
 8007cf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cf8:	6822      	ldr	r2, [r4, #0]
 8007cfa:	3b00      	subs	r3, #0
 8007cfc:	bf18      	it	ne
 8007cfe:	2301      	movne	r3, #1
 8007d00:	0692      	lsls	r2, r2, #26
 8007d02:	d42b      	bmi.n	8007d5c <_printf_common+0xb0>
 8007d04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d08:	4641      	mov	r1, r8
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	47c8      	blx	r9
 8007d0e:	3001      	adds	r0, #1
 8007d10:	d01e      	beq.n	8007d50 <_printf_common+0xa4>
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	6922      	ldr	r2, [r4, #16]
 8007d16:	f003 0306 	and.w	r3, r3, #6
 8007d1a:	2b04      	cmp	r3, #4
 8007d1c:	bf02      	ittt	eq
 8007d1e:	68e5      	ldreq	r5, [r4, #12]
 8007d20:	6833      	ldreq	r3, [r6, #0]
 8007d22:	1aed      	subeq	r5, r5, r3
 8007d24:	68a3      	ldr	r3, [r4, #8]
 8007d26:	bf0c      	ite	eq
 8007d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d2c:	2500      	movne	r5, #0
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	bfc4      	itt	gt
 8007d32:	1a9b      	subgt	r3, r3, r2
 8007d34:	18ed      	addgt	r5, r5, r3
 8007d36:	2600      	movs	r6, #0
 8007d38:	341a      	adds	r4, #26
 8007d3a:	42b5      	cmp	r5, r6
 8007d3c:	d11a      	bne.n	8007d74 <_printf_common+0xc8>
 8007d3e:	2000      	movs	r0, #0
 8007d40:	e008      	b.n	8007d54 <_printf_common+0xa8>
 8007d42:	2301      	movs	r3, #1
 8007d44:	4652      	mov	r2, sl
 8007d46:	4641      	mov	r1, r8
 8007d48:	4638      	mov	r0, r7
 8007d4a:	47c8      	blx	r9
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	d103      	bne.n	8007d58 <_printf_common+0xac>
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d58:	3501      	adds	r5, #1
 8007d5a:	e7c6      	b.n	8007cea <_printf_common+0x3e>
 8007d5c:	18e1      	adds	r1, r4, r3
 8007d5e:	1c5a      	adds	r2, r3, #1
 8007d60:	2030      	movs	r0, #48	@ 0x30
 8007d62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d66:	4422      	add	r2, r4
 8007d68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d70:	3302      	adds	r3, #2
 8007d72:	e7c7      	b.n	8007d04 <_printf_common+0x58>
 8007d74:	2301      	movs	r3, #1
 8007d76:	4622      	mov	r2, r4
 8007d78:	4641      	mov	r1, r8
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	47c8      	blx	r9
 8007d7e:	3001      	adds	r0, #1
 8007d80:	d0e6      	beq.n	8007d50 <_printf_common+0xa4>
 8007d82:	3601      	adds	r6, #1
 8007d84:	e7d9      	b.n	8007d3a <_printf_common+0x8e>
	...

08007d88 <_printf_i>:
 8007d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d8c:	7e0f      	ldrb	r7, [r1, #24]
 8007d8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d90:	2f78      	cmp	r7, #120	@ 0x78
 8007d92:	4691      	mov	r9, r2
 8007d94:	4680      	mov	r8, r0
 8007d96:	460c      	mov	r4, r1
 8007d98:	469a      	mov	sl, r3
 8007d9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d9e:	d807      	bhi.n	8007db0 <_printf_i+0x28>
 8007da0:	2f62      	cmp	r7, #98	@ 0x62
 8007da2:	d80a      	bhi.n	8007dba <_printf_i+0x32>
 8007da4:	2f00      	cmp	r7, #0
 8007da6:	f000 80d2 	beq.w	8007f4e <_printf_i+0x1c6>
 8007daa:	2f58      	cmp	r7, #88	@ 0x58
 8007dac:	f000 80b9 	beq.w	8007f22 <_printf_i+0x19a>
 8007db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007db4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007db8:	e03a      	b.n	8007e30 <_printf_i+0xa8>
 8007dba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dbe:	2b15      	cmp	r3, #21
 8007dc0:	d8f6      	bhi.n	8007db0 <_printf_i+0x28>
 8007dc2:	a101      	add	r1, pc, #4	@ (adr r1, 8007dc8 <_printf_i+0x40>)
 8007dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dc8:	08007e21 	.word	0x08007e21
 8007dcc:	08007e35 	.word	0x08007e35
 8007dd0:	08007db1 	.word	0x08007db1
 8007dd4:	08007db1 	.word	0x08007db1
 8007dd8:	08007db1 	.word	0x08007db1
 8007ddc:	08007db1 	.word	0x08007db1
 8007de0:	08007e35 	.word	0x08007e35
 8007de4:	08007db1 	.word	0x08007db1
 8007de8:	08007db1 	.word	0x08007db1
 8007dec:	08007db1 	.word	0x08007db1
 8007df0:	08007db1 	.word	0x08007db1
 8007df4:	08007f35 	.word	0x08007f35
 8007df8:	08007e5f 	.word	0x08007e5f
 8007dfc:	08007eef 	.word	0x08007eef
 8007e00:	08007db1 	.word	0x08007db1
 8007e04:	08007db1 	.word	0x08007db1
 8007e08:	08007f57 	.word	0x08007f57
 8007e0c:	08007db1 	.word	0x08007db1
 8007e10:	08007e5f 	.word	0x08007e5f
 8007e14:	08007db1 	.word	0x08007db1
 8007e18:	08007db1 	.word	0x08007db1
 8007e1c:	08007ef7 	.word	0x08007ef7
 8007e20:	6833      	ldr	r3, [r6, #0]
 8007e22:	1d1a      	adds	r2, r3, #4
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6032      	str	r2, [r6, #0]
 8007e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e30:	2301      	movs	r3, #1
 8007e32:	e09d      	b.n	8007f70 <_printf_i+0x1e8>
 8007e34:	6833      	ldr	r3, [r6, #0]
 8007e36:	6820      	ldr	r0, [r4, #0]
 8007e38:	1d19      	adds	r1, r3, #4
 8007e3a:	6031      	str	r1, [r6, #0]
 8007e3c:	0606      	lsls	r6, r0, #24
 8007e3e:	d501      	bpl.n	8007e44 <_printf_i+0xbc>
 8007e40:	681d      	ldr	r5, [r3, #0]
 8007e42:	e003      	b.n	8007e4c <_printf_i+0xc4>
 8007e44:	0645      	lsls	r5, r0, #25
 8007e46:	d5fb      	bpl.n	8007e40 <_printf_i+0xb8>
 8007e48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e4c:	2d00      	cmp	r5, #0
 8007e4e:	da03      	bge.n	8007e58 <_printf_i+0xd0>
 8007e50:	232d      	movs	r3, #45	@ 0x2d
 8007e52:	426d      	negs	r5, r5
 8007e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e58:	4859      	ldr	r0, [pc, #356]	@ (8007fc0 <_printf_i+0x238>)
 8007e5a:	230a      	movs	r3, #10
 8007e5c:	e011      	b.n	8007e82 <_printf_i+0xfa>
 8007e5e:	6821      	ldr	r1, [r4, #0]
 8007e60:	6833      	ldr	r3, [r6, #0]
 8007e62:	0608      	lsls	r0, r1, #24
 8007e64:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e68:	d402      	bmi.n	8007e70 <_printf_i+0xe8>
 8007e6a:	0649      	lsls	r1, r1, #25
 8007e6c:	bf48      	it	mi
 8007e6e:	b2ad      	uxthmi	r5, r5
 8007e70:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e72:	4853      	ldr	r0, [pc, #332]	@ (8007fc0 <_printf_i+0x238>)
 8007e74:	6033      	str	r3, [r6, #0]
 8007e76:	bf14      	ite	ne
 8007e78:	230a      	movne	r3, #10
 8007e7a:	2308      	moveq	r3, #8
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e82:	6866      	ldr	r6, [r4, #4]
 8007e84:	60a6      	str	r6, [r4, #8]
 8007e86:	2e00      	cmp	r6, #0
 8007e88:	bfa2      	ittt	ge
 8007e8a:	6821      	ldrge	r1, [r4, #0]
 8007e8c:	f021 0104 	bicge.w	r1, r1, #4
 8007e90:	6021      	strge	r1, [r4, #0]
 8007e92:	b90d      	cbnz	r5, 8007e98 <_printf_i+0x110>
 8007e94:	2e00      	cmp	r6, #0
 8007e96:	d04b      	beq.n	8007f30 <_printf_i+0x1a8>
 8007e98:	4616      	mov	r6, r2
 8007e9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e9e:	fb03 5711 	mls	r7, r3, r1, r5
 8007ea2:	5dc7      	ldrb	r7, [r0, r7]
 8007ea4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ea8:	462f      	mov	r7, r5
 8007eaa:	42bb      	cmp	r3, r7
 8007eac:	460d      	mov	r5, r1
 8007eae:	d9f4      	bls.n	8007e9a <_printf_i+0x112>
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d10b      	bne.n	8007ecc <_printf_i+0x144>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	07df      	lsls	r7, r3, #31
 8007eb8:	d508      	bpl.n	8007ecc <_printf_i+0x144>
 8007eba:	6923      	ldr	r3, [r4, #16]
 8007ebc:	6861      	ldr	r1, [r4, #4]
 8007ebe:	4299      	cmp	r1, r3
 8007ec0:	bfde      	ittt	le
 8007ec2:	2330      	movle	r3, #48	@ 0x30
 8007ec4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ec8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007ecc:	1b92      	subs	r2, r2, r6
 8007ece:	6122      	str	r2, [r4, #16]
 8007ed0:	f8cd a000 	str.w	sl, [sp]
 8007ed4:	464b      	mov	r3, r9
 8007ed6:	aa03      	add	r2, sp, #12
 8007ed8:	4621      	mov	r1, r4
 8007eda:	4640      	mov	r0, r8
 8007edc:	f7ff fee6 	bl	8007cac <_printf_common>
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d14a      	bne.n	8007f7a <_printf_i+0x1f2>
 8007ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ee8:	b004      	add	sp, #16
 8007eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	f043 0320 	orr.w	r3, r3, #32
 8007ef4:	6023      	str	r3, [r4, #0]
 8007ef6:	4833      	ldr	r0, [pc, #204]	@ (8007fc4 <_printf_i+0x23c>)
 8007ef8:	2778      	movs	r7, #120	@ 0x78
 8007efa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	6831      	ldr	r1, [r6, #0]
 8007f02:	061f      	lsls	r7, r3, #24
 8007f04:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f08:	d402      	bmi.n	8007f10 <_printf_i+0x188>
 8007f0a:	065f      	lsls	r7, r3, #25
 8007f0c:	bf48      	it	mi
 8007f0e:	b2ad      	uxthmi	r5, r5
 8007f10:	6031      	str	r1, [r6, #0]
 8007f12:	07d9      	lsls	r1, r3, #31
 8007f14:	bf44      	itt	mi
 8007f16:	f043 0320 	orrmi.w	r3, r3, #32
 8007f1a:	6023      	strmi	r3, [r4, #0]
 8007f1c:	b11d      	cbz	r5, 8007f26 <_printf_i+0x19e>
 8007f1e:	2310      	movs	r3, #16
 8007f20:	e7ac      	b.n	8007e7c <_printf_i+0xf4>
 8007f22:	4827      	ldr	r0, [pc, #156]	@ (8007fc0 <_printf_i+0x238>)
 8007f24:	e7e9      	b.n	8007efa <_printf_i+0x172>
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	f023 0320 	bic.w	r3, r3, #32
 8007f2c:	6023      	str	r3, [r4, #0]
 8007f2e:	e7f6      	b.n	8007f1e <_printf_i+0x196>
 8007f30:	4616      	mov	r6, r2
 8007f32:	e7bd      	b.n	8007eb0 <_printf_i+0x128>
 8007f34:	6833      	ldr	r3, [r6, #0]
 8007f36:	6825      	ldr	r5, [r4, #0]
 8007f38:	6961      	ldr	r1, [r4, #20]
 8007f3a:	1d18      	adds	r0, r3, #4
 8007f3c:	6030      	str	r0, [r6, #0]
 8007f3e:	062e      	lsls	r6, r5, #24
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	d501      	bpl.n	8007f48 <_printf_i+0x1c0>
 8007f44:	6019      	str	r1, [r3, #0]
 8007f46:	e002      	b.n	8007f4e <_printf_i+0x1c6>
 8007f48:	0668      	lsls	r0, r5, #25
 8007f4a:	d5fb      	bpl.n	8007f44 <_printf_i+0x1bc>
 8007f4c:	8019      	strh	r1, [r3, #0]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	6123      	str	r3, [r4, #16]
 8007f52:	4616      	mov	r6, r2
 8007f54:	e7bc      	b.n	8007ed0 <_printf_i+0x148>
 8007f56:	6833      	ldr	r3, [r6, #0]
 8007f58:	1d1a      	adds	r2, r3, #4
 8007f5a:	6032      	str	r2, [r6, #0]
 8007f5c:	681e      	ldr	r6, [r3, #0]
 8007f5e:	6862      	ldr	r2, [r4, #4]
 8007f60:	2100      	movs	r1, #0
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7f8 f944 	bl	80001f0 <memchr>
 8007f68:	b108      	cbz	r0, 8007f6e <_printf_i+0x1e6>
 8007f6a:	1b80      	subs	r0, r0, r6
 8007f6c:	6060      	str	r0, [r4, #4]
 8007f6e:	6863      	ldr	r3, [r4, #4]
 8007f70:	6123      	str	r3, [r4, #16]
 8007f72:	2300      	movs	r3, #0
 8007f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f78:	e7aa      	b.n	8007ed0 <_printf_i+0x148>
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	4632      	mov	r2, r6
 8007f7e:	4649      	mov	r1, r9
 8007f80:	4640      	mov	r0, r8
 8007f82:	47d0      	blx	sl
 8007f84:	3001      	adds	r0, #1
 8007f86:	d0ad      	beq.n	8007ee4 <_printf_i+0x15c>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	079b      	lsls	r3, r3, #30
 8007f8c:	d413      	bmi.n	8007fb6 <_printf_i+0x22e>
 8007f8e:	68e0      	ldr	r0, [r4, #12]
 8007f90:	9b03      	ldr	r3, [sp, #12]
 8007f92:	4298      	cmp	r0, r3
 8007f94:	bfb8      	it	lt
 8007f96:	4618      	movlt	r0, r3
 8007f98:	e7a6      	b.n	8007ee8 <_printf_i+0x160>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4632      	mov	r2, r6
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	47d0      	blx	sl
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d09d      	beq.n	8007ee4 <_printf_i+0x15c>
 8007fa8:	3501      	adds	r5, #1
 8007faa:	68e3      	ldr	r3, [r4, #12]
 8007fac:	9903      	ldr	r1, [sp, #12]
 8007fae:	1a5b      	subs	r3, r3, r1
 8007fb0:	42ab      	cmp	r3, r5
 8007fb2:	dcf2      	bgt.n	8007f9a <_printf_i+0x212>
 8007fb4:	e7eb      	b.n	8007f8e <_printf_i+0x206>
 8007fb6:	2500      	movs	r5, #0
 8007fb8:	f104 0619 	add.w	r6, r4, #25
 8007fbc:	e7f5      	b.n	8007faa <_printf_i+0x222>
 8007fbe:	bf00      	nop
 8007fc0:	0800896e 	.word	0x0800896e
 8007fc4:	0800897f 	.word	0x0800897f

08007fc8 <__sflush_r>:
 8007fc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd0:	0716      	lsls	r6, r2, #28
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	d454      	bmi.n	8008082 <__sflush_r+0xba>
 8007fd8:	684b      	ldr	r3, [r1, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	dc02      	bgt.n	8007fe4 <__sflush_r+0x1c>
 8007fde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	dd48      	ble.n	8008076 <__sflush_r+0xae>
 8007fe4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fe6:	2e00      	cmp	r6, #0
 8007fe8:	d045      	beq.n	8008076 <__sflush_r+0xae>
 8007fea:	2300      	movs	r3, #0
 8007fec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ff0:	682f      	ldr	r7, [r5, #0]
 8007ff2:	6a21      	ldr	r1, [r4, #32]
 8007ff4:	602b      	str	r3, [r5, #0]
 8007ff6:	d030      	beq.n	800805a <__sflush_r+0x92>
 8007ff8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	0759      	lsls	r1, r3, #29
 8007ffe:	d505      	bpl.n	800800c <__sflush_r+0x44>
 8008000:	6863      	ldr	r3, [r4, #4]
 8008002:	1ad2      	subs	r2, r2, r3
 8008004:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008006:	b10b      	cbz	r3, 800800c <__sflush_r+0x44>
 8008008:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800800a:	1ad2      	subs	r2, r2, r3
 800800c:	2300      	movs	r3, #0
 800800e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008010:	6a21      	ldr	r1, [r4, #32]
 8008012:	4628      	mov	r0, r5
 8008014:	47b0      	blx	r6
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	d106      	bne.n	800802a <__sflush_r+0x62>
 800801c:	6829      	ldr	r1, [r5, #0]
 800801e:	291d      	cmp	r1, #29
 8008020:	d82b      	bhi.n	800807a <__sflush_r+0xb2>
 8008022:	4a2a      	ldr	r2, [pc, #168]	@ (80080cc <__sflush_r+0x104>)
 8008024:	410a      	asrs	r2, r1
 8008026:	07d6      	lsls	r6, r2, #31
 8008028:	d427      	bmi.n	800807a <__sflush_r+0xb2>
 800802a:	2200      	movs	r2, #0
 800802c:	6062      	str	r2, [r4, #4]
 800802e:	04d9      	lsls	r1, r3, #19
 8008030:	6922      	ldr	r2, [r4, #16]
 8008032:	6022      	str	r2, [r4, #0]
 8008034:	d504      	bpl.n	8008040 <__sflush_r+0x78>
 8008036:	1c42      	adds	r2, r0, #1
 8008038:	d101      	bne.n	800803e <__sflush_r+0x76>
 800803a:	682b      	ldr	r3, [r5, #0]
 800803c:	b903      	cbnz	r3, 8008040 <__sflush_r+0x78>
 800803e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008042:	602f      	str	r7, [r5, #0]
 8008044:	b1b9      	cbz	r1, 8008076 <__sflush_r+0xae>
 8008046:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800804a:	4299      	cmp	r1, r3
 800804c:	d002      	beq.n	8008054 <__sflush_r+0x8c>
 800804e:	4628      	mov	r0, r5
 8008050:	f000 fa86 	bl	8008560 <_free_r>
 8008054:	2300      	movs	r3, #0
 8008056:	6363      	str	r3, [r4, #52]	@ 0x34
 8008058:	e00d      	b.n	8008076 <__sflush_r+0xae>
 800805a:	2301      	movs	r3, #1
 800805c:	4628      	mov	r0, r5
 800805e:	47b0      	blx	r6
 8008060:	4602      	mov	r2, r0
 8008062:	1c50      	adds	r0, r2, #1
 8008064:	d1c9      	bne.n	8007ffa <__sflush_r+0x32>
 8008066:	682b      	ldr	r3, [r5, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0c6      	beq.n	8007ffa <__sflush_r+0x32>
 800806c:	2b1d      	cmp	r3, #29
 800806e:	d001      	beq.n	8008074 <__sflush_r+0xac>
 8008070:	2b16      	cmp	r3, #22
 8008072:	d11e      	bne.n	80080b2 <__sflush_r+0xea>
 8008074:	602f      	str	r7, [r5, #0]
 8008076:	2000      	movs	r0, #0
 8008078:	e022      	b.n	80080c0 <__sflush_r+0xf8>
 800807a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800807e:	b21b      	sxth	r3, r3
 8008080:	e01b      	b.n	80080ba <__sflush_r+0xf2>
 8008082:	690f      	ldr	r7, [r1, #16]
 8008084:	2f00      	cmp	r7, #0
 8008086:	d0f6      	beq.n	8008076 <__sflush_r+0xae>
 8008088:	0793      	lsls	r3, r2, #30
 800808a:	680e      	ldr	r6, [r1, #0]
 800808c:	bf08      	it	eq
 800808e:	694b      	ldreq	r3, [r1, #20]
 8008090:	600f      	str	r7, [r1, #0]
 8008092:	bf18      	it	ne
 8008094:	2300      	movne	r3, #0
 8008096:	eba6 0807 	sub.w	r8, r6, r7
 800809a:	608b      	str	r3, [r1, #8]
 800809c:	f1b8 0f00 	cmp.w	r8, #0
 80080a0:	dde9      	ble.n	8008076 <__sflush_r+0xae>
 80080a2:	6a21      	ldr	r1, [r4, #32]
 80080a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80080a6:	4643      	mov	r3, r8
 80080a8:	463a      	mov	r2, r7
 80080aa:	4628      	mov	r0, r5
 80080ac:	47b0      	blx	r6
 80080ae:	2800      	cmp	r0, #0
 80080b0:	dc08      	bgt.n	80080c4 <__sflush_r+0xfc>
 80080b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ba:	81a3      	strh	r3, [r4, #12]
 80080bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c4:	4407      	add	r7, r0
 80080c6:	eba8 0800 	sub.w	r8, r8, r0
 80080ca:	e7e7      	b.n	800809c <__sflush_r+0xd4>
 80080cc:	dfbffffe 	.word	0xdfbffffe

080080d0 <_fflush_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	690b      	ldr	r3, [r1, #16]
 80080d4:	4605      	mov	r5, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	b913      	cbnz	r3, 80080e0 <_fflush_r+0x10>
 80080da:	2500      	movs	r5, #0
 80080dc:	4628      	mov	r0, r5
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	b118      	cbz	r0, 80080ea <_fflush_r+0x1a>
 80080e2:	6a03      	ldr	r3, [r0, #32]
 80080e4:	b90b      	cbnz	r3, 80080ea <_fflush_r+0x1a>
 80080e6:	f7ff f939 	bl	800735c <__sinit>
 80080ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0f3      	beq.n	80080da <_fflush_r+0xa>
 80080f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080f4:	07d0      	lsls	r0, r2, #31
 80080f6:	d404      	bmi.n	8008102 <_fflush_r+0x32>
 80080f8:	0599      	lsls	r1, r3, #22
 80080fa:	d402      	bmi.n	8008102 <_fflush_r+0x32>
 80080fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080fe:	f7ff fa62 	bl	80075c6 <__retarget_lock_acquire_recursive>
 8008102:	4628      	mov	r0, r5
 8008104:	4621      	mov	r1, r4
 8008106:	f7ff ff5f 	bl	8007fc8 <__sflush_r>
 800810a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800810c:	07da      	lsls	r2, r3, #31
 800810e:	4605      	mov	r5, r0
 8008110:	d4e4      	bmi.n	80080dc <_fflush_r+0xc>
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	059b      	lsls	r3, r3, #22
 8008116:	d4e1      	bmi.n	80080dc <_fflush_r+0xc>
 8008118:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800811a:	f7ff fa55 	bl	80075c8 <__retarget_lock_release_recursive>
 800811e:	e7dd      	b.n	80080dc <_fflush_r+0xc>

08008120 <__malloc_lock>:
 8008120:	4801      	ldr	r0, [pc, #4]	@ (8008128 <__malloc_lock+0x8>)
 8008122:	f7ff ba50 	b.w	80075c6 <__retarget_lock_acquire_recursive>
 8008126:	bf00      	nop
 8008128:	200005bc 	.word	0x200005bc

0800812c <__malloc_unlock>:
 800812c:	4801      	ldr	r0, [pc, #4]	@ (8008134 <__malloc_unlock+0x8>)
 800812e:	f7ff ba4b 	b.w	80075c8 <__retarget_lock_release_recursive>
 8008132:	bf00      	nop
 8008134:	200005bc 	.word	0x200005bc

08008138 <__sread>:
 8008138:	b510      	push	{r4, lr}
 800813a:	460c      	mov	r4, r1
 800813c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008140:	f000 f9d2 	bl	80084e8 <_read_r>
 8008144:	2800      	cmp	r0, #0
 8008146:	bfab      	itete	ge
 8008148:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800814a:	89a3      	ldrhlt	r3, [r4, #12]
 800814c:	181b      	addge	r3, r3, r0
 800814e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008152:	bfac      	ite	ge
 8008154:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008156:	81a3      	strhlt	r3, [r4, #12]
 8008158:	bd10      	pop	{r4, pc}

0800815a <__swrite>:
 800815a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800815e:	461f      	mov	r7, r3
 8008160:	898b      	ldrh	r3, [r1, #12]
 8008162:	05db      	lsls	r3, r3, #23
 8008164:	4605      	mov	r5, r0
 8008166:	460c      	mov	r4, r1
 8008168:	4616      	mov	r6, r2
 800816a:	d505      	bpl.n	8008178 <__swrite+0x1e>
 800816c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008170:	2302      	movs	r3, #2
 8008172:	2200      	movs	r2, #0
 8008174:	f000 f9a6 	bl	80084c4 <_lseek_r>
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800817e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008182:	81a3      	strh	r3, [r4, #12]
 8008184:	4632      	mov	r2, r6
 8008186:	463b      	mov	r3, r7
 8008188:	4628      	mov	r0, r5
 800818a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800818e:	f000 b9cd 	b.w	800852c <_write_r>

08008192 <__sseek>:
 8008192:	b510      	push	{r4, lr}
 8008194:	460c      	mov	r4, r1
 8008196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800819a:	f000 f993 	bl	80084c4 <_lseek_r>
 800819e:	1c43      	adds	r3, r0, #1
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	bf15      	itete	ne
 80081a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081ae:	81a3      	strheq	r3, [r4, #12]
 80081b0:	bf18      	it	ne
 80081b2:	81a3      	strhne	r3, [r4, #12]
 80081b4:	bd10      	pop	{r4, pc}

080081b6 <__sclose>:
 80081b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ba:	f000 b951 	b.w	8008460 <_close_r>
	...

080081c0 <fiprintf>:
 80081c0:	b40e      	push	{r1, r2, r3}
 80081c2:	b503      	push	{r0, r1, lr}
 80081c4:	4601      	mov	r1, r0
 80081c6:	ab03      	add	r3, sp, #12
 80081c8:	4805      	ldr	r0, [pc, #20]	@ (80081e0 <fiprintf+0x20>)
 80081ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ce:	6800      	ldr	r0, [r0, #0]
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	f7ff fba9 	bl	8007928 <_vfiprintf_r>
 80081d6:	b002      	add	sp, #8
 80081d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081dc:	b003      	add	sp, #12
 80081de:	4770      	bx	lr
 80081e0:	20000018 	.word	0x20000018

080081e4 <_realloc_r>:
 80081e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e8:	4680      	mov	r8, r0
 80081ea:	4615      	mov	r5, r2
 80081ec:	460c      	mov	r4, r1
 80081ee:	b921      	cbnz	r1, 80081fa <_realloc_r+0x16>
 80081f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081f4:	4611      	mov	r1, r2
 80081f6:	f7ff bcd9 	b.w	8007bac <_malloc_r>
 80081fa:	b92a      	cbnz	r2, 8008208 <_realloc_r+0x24>
 80081fc:	f000 f9b0 	bl	8008560 <_free_r>
 8008200:	2400      	movs	r4, #0
 8008202:	4620      	mov	r0, r4
 8008204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008208:	f000 f9f4 	bl	80085f4 <_malloc_usable_size_r>
 800820c:	4285      	cmp	r5, r0
 800820e:	4606      	mov	r6, r0
 8008210:	d802      	bhi.n	8008218 <_realloc_r+0x34>
 8008212:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008216:	d8f4      	bhi.n	8008202 <_realloc_r+0x1e>
 8008218:	4629      	mov	r1, r5
 800821a:	4640      	mov	r0, r8
 800821c:	f7ff fcc6 	bl	8007bac <_malloc_r>
 8008220:	4607      	mov	r7, r0
 8008222:	2800      	cmp	r0, #0
 8008224:	d0ec      	beq.n	8008200 <_realloc_r+0x1c>
 8008226:	42b5      	cmp	r5, r6
 8008228:	462a      	mov	r2, r5
 800822a:	4621      	mov	r1, r4
 800822c:	bf28      	it	cs
 800822e:	4632      	movcs	r2, r6
 8008230:	f7ff f9cb 	bl	80075ca <memcpy>
 8008234:	4621      	mov	r1, r4
 8008236:	4640      	mov	r0, r8
 8008238:	f000 f992 	bl	8008560 <_free_r>
 800823c:	463c      	mov	r4, r7
 800823e:	e7e0      	b.n	8008202 <_realloc_r+0x1e>

08008240 <__swbuf_r>:
 8008240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008242:	460e      	mov	r6, r1
 8008244:	4614      	mov	r4, r2
 8008246:	4605      	mov	r5, r0
 8008248:	b118      	cbz	r0, 8008252 <__swbuf_r+0x12>
 800824a:	6a03      	ldr	r3, [r0, #32]
 800824c:	b90b      	cbnz	r3, 8008252 <__swbuf_r+0x12>
 800824e:	f7ff f885 	bl	800735c <__sinit>
 8008252:	69a3      	ldr	r3, [r4, #24]
 8008254:	60a3      	str	r3, [r4, #8]
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	071a      	lsls	r2, r3, #28
 800825a:	d501      	bpl.n	8008260 <__swbuf_r+0x20>
 800825c:	6923      	ldr	r3, [r4, #16]
 800825e:	b943      	cbnz	r3, 8008272 <__swbuf_r+0x32>
 8008260:	4621      	mov	r1, r4
 8008262:	4628      	mov	r0, r5
 8008264:	f000 f82a 	bl	80082bc <__swsetup_r>
 8008268:	b118      	cbz	r0, 8008272 <__swbuf_r+0x32>
 800826a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800826e:	4638      	mov	r0, r7
 8008270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	6922      	ldr	r2, [r4, #16]
 8008276:	1a98      	subs	r0, r3, r2
 8008278:	6963      	ldr	r3, [r4, #20]
 800827a:	b2f6      	uxtb	r6, r6
 800827c:	4283      	cmp	r3, r0
 800827e:	4637      	mov	r7, r6
 8008280:	dc05      	bgt.n	800828e <__swbuf_r+0x4e>
 8008282:	4621      	mov	r1, r4
 8008284:	4628      	mov	r0, r5
 8008286:	f7ff ff23 	bl	80080d0 <_fflush_r>
 800828a:	2800      	cmp	r0, #0
 800828c:	d1ed      	bne.n	800826a <__swbuf_r+0x2a>
 800828e:	68a3      	ldr	r3, [r4, #8]
 8008290:	3b01      	subs	r3, #1
 8008292:	60a3      	str	r3, [r4, #8]
 8008294:	6823      	ldr	r3, [r4, #0]
 8008296:	1c5a      	adds	r2, r3, #1
 8008298:	6022      	str	r2, [r4, #0]
 800829a:	701e      	strb	r6, [r3, #0]
 800829c:	6962      	ldr	r2, [r4, #20]
 800829e:	1c43      	adds	r3, r0, #1
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d004      	beq.n	80082ae <__swbuf_r+0x6e>
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	07db      	lsls	r3, r3, #31
 80082a8:	d5e1      	bpl.n	800826e <__swbuf_r+0x2e>
 80082aa:	2e0a      	cmp	r6, #10
 80082ac:	d1df      	bne.n	800826e <__swbuf_r+0x2e>
 80082ae:	4621      	mov	r1, r4
 80082b0:	4628      	mov	r0, r5
 80082b2:	f7ff ff0d 	bl	80080d0 <_fflush_r>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d0d9      	beq.n	800826e <__swbuf_r+0x2e>
 80082ba:	e7d6      	b.n	800826a <__swbuf_r+0x2a>

080082bc <__swsetup_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4b29      	ldr	r3, [pc, #164]	@ (8008364 <__swsetup_r+0xa8>)
 80082c0:	4605      	mov	r5, r0
 80082c2:	6818      	ldr	r0, [r3, #0]
 80082c4:	460c      	mov	r4, r1
 80082c6:	b118      	cbz	r0, 80082d0 <__swsetup_r+0x14>
 80082c8:	6a03      	ldr	r3, [r0, #32]
 80082ca:	b90b      	cbnz	r3, 80082d0 <__swsetup_r+0x14>
 80082cc:	f7ff f846 	bl	800735c <__sinit>
 80082d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082d4:	0719      	lsls	r1, r3, #28
 80082d6:	d422      	bmi.n	800831e <__swsetup_r+0x62>
 80082d8:	06da      	lsls	r2, r3, #27
 80082da:	d407      	bmi.n	80082ec <__swsetup_r+0x30>
 80082dc:	2209      	movs	r2, #9
 80082de:	602a      	str	r2, [r5, #0]
 80082e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082e4:	81a3      	strh	r3, [r4, #12]
 80082e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082ea:	e033      	b.n	8008354 <__swsetup_r+0x98>
 80082ec:	0758      	lsls	r0, r3, #29
 80082ee:	d512      	bpl.n	8008316 <__swsetup_r+0x5a>
 80082f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082f2:	b141      	cbz	r1, 8008306 <__swsetup_r+0x4a>
 80082f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082f8:	4299      	cmp	r1, r3
 80082fa:	d002      	beq.n	8008302 <__swsetup_r+0x46>
 80082fc:	4628      	mov	r0, r5
 80082fe:	f000 f92f 	bl	8008560 <_free_r>
 8008302:	2300      	movs	r3, #0
 8008304:	6363      	str	r3, [r4, #52]	@ 0x34
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800830c:	81a3      	strh	r3, [r4, #12]
 800830e:	2300      	movs	r3, #0
 8008310:	6063      	str	r3, [r4, #4]
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	f043 0308 	orr.w	r3, r3, #8
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	6923      	ldr	r3, [r4, #16]
 8008320:	b94b      	cbnz	r3, 8008336 <__swsetup_r+0x7a>
 8008322:	89a3      	ldrh	r3, [r4, #12]
 8008324:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800832c:	d003      	beq.n	8008336 <__swsetup_r+0x7a>
 800832e:	4621      	mov	r1, r4
 8008330:	4628      	mov	r0, r5
 8008332:	f000 f83f 	bl	80083b4 <__smakebuf_r>
 8008336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800833a:	f013 0201 	ands.w	r2, r3, #1
 800833e:	d00a      	beq.n	8008356 <__swsetup_r+0x9a>
 8008340:	2200      	movs	r2, #0
 8008342:	60a2      	str	r2, [r4, #8]
 8008344:	6962      	ldr	r2, [r4, #20]
 8008346:	4252      	negs	r2, r2
 8008348:	61a2      	str	r2, [r4, #24]
 800834a:	6922      	ldr	r2, [r4, #16]
 800834c:	b942      	cbnz	r2, 8008360 <__swsetup_r+0xa4>
 800834e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008352:	d1c5      	bne.n	80082e0 <__swsetup_r+0x24>
 8008354:	bd38      	pop	{r3, r4, r5, pc}
 8008356:	0799      	lsls	r1, r3, #30
 8008358:	bf58      	it	pl
 800835a:	6962      	ldrpl	r2, [r4, #20]
 800835c:	60a2      	str	r2, [r4, #8]
 800835e:	e7f4      	b.n	800834a <__swsetup_r+0x8e>
 8008360:	2000      	movs	r0, #0
 8008362:	e7f7      	b.n	8008354 <__swsetup_r+0x98>
 8008364:	20000018 	.word	0x20000018

08008368 <__swhatbuf_r>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	460c      	mov	r4, r1
 800836c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008370:	2900      	cmp	r1, #0
 8008372:	b096      	sub	sp, #88	@ 0x58
 8008374:	4615      	mov	r5, r2
 8008376:	461e      	mov	r6, r3
 8008378:	da0d      	bge.n	8008396 <__swhatbuf_r+0x2e>
 800837a:	89a3      	ldrh	r3, [r4, #12]
 800837c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008380:	f04f 0100 	mov.w	r1, #0
 8008384:	bf14      	ite	ne
 8008386:	2340      	movne	r3, #64	@ 0x40
 8008388:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800838c:	2000      	movs	r0, #0
 800838e:	6031      	str	r1, [r6, #0]
 8008390:	602b      	str	r3, [r5, #0]
 8008392:	b016      	add	sp, #88	@ 0x58
 8008394:	bd70      	pop	{r4, r5, r6, pc}
 8008396:	466a      	mov	r2, sp
 8008398:	f000 f872 	bl	8008480 <_fstat_r>
 800839c:	2800      	cmp	r0, #0
 800839e:	dbec      	blt.n	800837a <__swhatbuf_r+0x12>
 80083a0:	9901      	ldr	r1, [sp, #4]
 80083a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083aa:	4259      	negs	r1, r3
 80083ac:	4159      	adcs	r1, r3
 80083ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083b2:	e7eb      	b.n	800838c <__swhatbuf_r+0x24>

080083b4 <__smakebuf_r>:
 80083b4:	898b      	ldrh	r3, [r1, #12]
 80083b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083b8:	079d      	lsls	r5, r3, #30
 80083ba:	4606      	mov	r6, r0
 80083bc:	460c      	mov	r4, r1
 80083be:	d507      	bpl.n	80083d0 <__smakebuf_r+0x1c>
 80083c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80083c4:	6023      	str	r3, [r4, #0]
 80083c6:	6123      	str	r3, [r4, #16]
 80083c8:	2301      	movs	r3, #1
 80083ca:	6163      	str	r3, [r4, #20]
 80083cc:	b003      	add	sp, #12
 80083ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d0:	ab01      	add	r3, sp, #4
 80083d2:	466a      	mov	r2, sp
 80083d4:	f7ff ffc8 	bl	8008368 <__swhatbuf_r>
 80083d8:	9f00      	ldr	r7, [sp, #0]
 80083da:	4605      	mov	r5, r0
 80083dc:	4639      	mov	r1, r7
 80083de:	4630      	mov	r0, r6
 80083e0:	f7ff fbe4 	bl	8007bac <_malloc_r>
 80083e4:	b948      	cbnz	r0, 80083fa <__smakebuf_r+0x46>
 80083e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ea:	059a      	lsls	r2, r3, #22
 80083ec:	d4ee      	bmi.n	80083cc <__smakebuf_r+0x18>
 80083ee:	f023 0303 	bic.w	r3, r3, #3
 80083f2:	f043 0302 	orr.w	r3, r3, #2
 80083f6:	81a3      	strh	r3, [r4, #12]
 80083f8:	e7e2      	b.n	80083c0 <__smakebuf_r+0xc>
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	6020      	str	r0, [r4, #0]
 80083fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008402:	81a3      	strh	r3, [r4, #12]
 8008404:	9b01      	ldr	r3, [sp, #4]
 8008406:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800840a:	b15b      	cbz	r3, 8008424 <__smakebuf_r+0x70>
 800840c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008410:	4630      	mov	r0, r6
 8008412:	f000 f847 	bl	80084a4 <_isatty_r>
 8008416:	b128      	cbz	r0, 8008424 <__smakebuf_r+0x70>
 8008418:	89a3      	ldrh	r3, [r4, #12]
 800841a:	f023 0303 	bic.w	r3, r3, #3
 800841e:	f043 0301 	orr.w	r3, r3, #1
 8008422:	81a3      	strh	r3, [r4, #12]
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	431d      	orrs	r5, r3
 8008428:	81a5      	strh	r5, [r4, #12]
 800842a:	e7cf      	b.n	80083cc <__smakebuf_r+0x18>

0800842c <memmove>:
 800842c:	4288      	cmp	r0, r1
 800842e:	b510      	push	{r4, lr}
 8008430:	eb01 0402 	add.w	r4, r1, r2
 8008434:	d902      	bls.n	800843c <memmove+0x10>
 8008436:	4284      	cmp	r4, r0
 8008438:	4623      	mov	r3, r4
 800843a:	d807      	bhi.n	800844c <memmove+0x20>
 800843c:	1e43      	subs	r3, r0, #1
 800843e:	42a1      	cmp	r1, r4
 8008440:	d008      	beq.n	8008454 <memmove+0x28>
 8008442:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800844a:	e7f8      	b.n	800843e <memmove+0x12>
 800844c:	4402      	add	r2, r0
 800844e:	4601      	mov	r1, r0
 8008450:	428a      	cmp	r2, r1
 8008452:	d100      	bne.n	8008456 <memmove+0x2a>
 8008454:	bd10      	pop	{r4, pc}
 8008456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800845a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800845e:	e7f7      	b.n	8008450 <memmove+0x24>

08008460 <_close_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	4d06      	ldr	r5, [pc, #24]	@ (800847c <_close_r+0x1c>)
 8008464:	2300      	movs	r3, #0
 8008466:	4604      	mov	r4, r0
 8008468:	4608      	mov	r0, r1
 800846a:	602b      	str	r3, [r5, #0]
 800846c:	f7f9 f874 	bl	8001558 <_close>
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	d102      	bne.n	800847a <_close_r+0x1a>
 8008474:	682b      	ldr	r3, [r5, #0]
 8008476:	b103      	cbz	r3, 800847a <_close_r+0x1a>
 8008478:	6023      	str	r3, [r4, #0]
 800847a:	bd38      	pop	{r3, r4, r5, pc}
 800847c:	200005c8 	.word	0x200005c8

08008480 <_fstat_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4d07      	ldr	r5, [pc, #28]	@ (80084a0 <_fstat_r+0x20>)
 8008484:	2300      	movs	r3, #0
 8008486:	4604      	mov	r4, r0
 8008488:	4608      	mov	r0, r1
 800848a:	4611      	mov	r1, r2
 800848c:	602b      	str	r3, [r5, #0]
 800848e:	f7f9 f86f 	bl	8001570 <_fstat>
 8008492:	1c43      	adds	r3, r0, #1
 8008494:	d102      	bne.n	800849c <_fstat_r+0x1c>
 8008496:	682b      	ldr	r3, [r5, #0]
 8008498:	b103      	cbz	r3, 800849c <_fstat_r+0x1c>
 800849a:	6023      	str	r3, [r4, #0]
 800849c:	bd38      	pop	{r3, r4, r5, pc}
 800849e:	bf00      	nop
 80084a0:	200005c8 	.word	0x200005c8

080084a4 <_isatty_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	4d06      	ldr	r5, [pc, #24]	@ (80084c0 <_isatty_r+0x1c>)
 80084a8:	2300      	movs	r3, #0
 80084aa:	4604      	mov	r4, r0
 80084ac:	4608      	mov	r0, r1
 80084ae:	602b      	str	r3, [r5, #0]
 80084b0:	f7f9 f86e 	bl	8001590 <_isatty>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_isatty_r+0x1a>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	b103      	cbz	r3, 80084be <_isatty_r+0x1a>
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	200005c8 	.word	0x200005c8

080084c4 <_lseek_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	4d07      	ldr	r5, [pc, #28]	@ (80084e4 <_lseek_r+0x20>)
 80084c8:	4604      	mov	r4, r0
 80084ca:	4608      	mov	r0, r1
 80084cc:	4611      	mov	r1, r2
 80084ce:	2200      	movs	r2, #0
 80084d0:	602a      	str	r2, [r5, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	f7f9 f867 	bl	80015a6 <_lseek>
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d102      	bne.n	80084e2 <_lseek_r+0x1e>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	b103      	cbz	r3, 80084e2 <_lseek_r+0x1e>
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	bd38      	pop	{r3, r4, r5, pc}
 80084e4:	200005c8 	.word	0x200005c8

080084e8 <_read_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4d07      	ldr	r5, [pc, #28]	@ (8008508 <_read_r+0x20>)
 80084ec:	4604      	mov	r4, r0
 80084ee:	4608      	mov	r0, r1
 80084f0:	4611      	mov	r1, r2
 80084f2:	2200      	movs	r2, #0
 80084f4:	602a      	str	r2, [r5, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	f7f8 fff5 	bl	80014e6 <_read>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	d102      	bne.n	8008506 <_read_r+0x1e>
 8008500:	682b      	ldr	r3, [r5, #0]
 8008502:	b103      	cbz	r3, 8008506 <_read_r+0x1e>
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	bd38      	pop	{r3, r4, r5, pc}
 8008508:	200005c8 	.word	0x200005c8

0800850c <_sbrk_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	4d06      	ldr	r5, [pc, #24]	@ (8008528 <_sbrk_r+0x1c>)
 8008510:	2300      	movs	r3, #0
 8008512:	4604      	mov	r4, r0
 8008514:	4608      	mov	r0, r1
 8008516:	602b      	str	r3, [r5, #0]
 8008518:	f7f9 f852 	bl	80015c0 <_sbrk>
 800851c:	1c43      	adds	r3, r0, #1
 800851e:	d102      	bne.n	8008526 <_sbrk_r+0x1a>
 8008520:	682b      	ldr	r3, [r5, #0]
 8008522:	b103      	cbz	r3, 8008526 <_sbrk_r+0x1a>
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	bd38      	pop	{r3, r4, r5, pc}
 8008528:	200005c8 	.word	0x200005c8

0800852c <_write_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4d07      	ldr	r5, [pc, #28]	@ (800854c <_write_r+0x20>)
 8008530:	4604      	mov	r4, r0
 8008532:	4608      	mov	r0, r1
 8008534:	4611      	mov	r1, r2
 8008536:	2200      	movs	r2, #0
 8008538:	602a      	str	r2, [r5, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	f7f8 fff0 	bl	8001520 <_write>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d102      	bne.n	800854a <_write_r+0x1e>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	b103      	cbz	r3, 800854a <_write_r+0x1e>
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	200005c8 	.word	0x200005c8

08008550 <abort>:
 8008550:	b508      	push	{r3, lr}
 8008552:	2006      	movs	r0, #6
 8008554:	f000 f87e 	bl	8008654 <raise>
 8008558:	2001      	movs	r0, #1
 800855a:	f7f8 ffb9 	bl	80014d0 <_exit>
	...

08008560 <_free_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4605      	mov	r5, r0
 8008564:	2900      	cmp	r1, #0
 8008566:	d041      	beq.n	80085ec <_free_r+0x8c>
 8008568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800856c:	1f0c      	subs	r4, r1, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	bfb8      	it	lt
 8008572:	18e4      	addlt	r4, r4, r3
 8008574:	f7ff fdd4 	bl	8008120 <__malloc_lock>
 8008578:	4a1d      	ldr	r2, [pc, #116]	@ (80085f0 <_free_r+0x90>)
 800857a:	6813      	ldr	r3, [r2, #0]
 800857c:	b933      	cbnz	r3, 800858c <_free_r+0x2c>
 800857e:	6063      	str	r3, [r4, #4]
 8008580:	6014      	str	r4, [r2, #0]
 8008582:	4628      	mov	r0, r5
 8008584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008588:	f7ff bdd0 	b.w	800812c <__malloc_unlock>
 800858c:	42a3      	cmp	r3, r4
 800858e:	d908      	bls.n	80085a2 <_free_r+0x42>
 8008590:	6820      	ldr	r0, [r4, #0]
 8008592:	1821      	adds	r1, r4, r0
 8008594:	428b      	cmp	r3, r1
 8008596:	bf01      	itttt	eq
 8008598:	6819      	ldreq	r1, [r3, #0]
 800859a:	685b      	ldreq	r3, [r3, #4]
 800859c:	1809      	addeq	r1, r1, r0
 800859e:	6021      	streq	r1, [r4, #0]
 80085a0:	e7ed      	b.n	800857e <_free_r+0x1e>
 80085a2:	461a      	mov	r2, r3
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	b10b      	cbz	r3, 80085ac <_free_r+0x4c>
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	d9fa      	bls.n	80085a2 <_free_r+0x42>
 80085ac:	6811      	ldr	r1, [r2, #0]
 80085ae:	1850      	adds	r0, r2, r1
 80085b0:	42a0      	cmp	r0, r4
 80085b2:	d10b      	bne.n	80085cc <_free_r+0x6c>
 80085b4:	6820      	ldr	r0, [r4, #0]
 80085b6:	4401      	add	r1, r0
 80085b8:	1850      	adds	r0, r2, r1
 80085ba:	4283      	cmp	r3, r0
 80085bc:	6011      	str	r1, [r2, #0]
 80085be:	d1e0      	bne.n	8008582 <_free_r+0x22>
 80085c0:	6818      	ldr	r0, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	6053      	str	r3, [r2, #4]
 80085c6:	4408      	add	r0, r1
 80085c8:	6010      	str	r0, [r2, #0]
 80085ca:	e7da      	b.n	8008582 <_free_r+0x22>
 80085cc:	d902      	bls.n	80085d4 <_free_r+0x74>
 80085ce:	230c      	movs	r3, #12
 80085d0:	602b      	str	r3, [r5, #0]
 80085d2:	e7d6      	b.n	8008582 <_free_r+0x22>
 80085d4:	6820      	ldr	r0, [r4, #0]
 80085d6:	1821      	adds	r1, r4, r0
 80085d8:	428b      	cmp	r3, r1
 80085da:	bf04      	itt	eq
 80085dc:	6819      	ldreq	r1, [r3, #0]
 80085de:	685b      	ldreq	r3, [r3, #4]
 80085e0:	6063      	str	r3, [r4, #4]
 80085e2:	bf04      	itt	eq
 80085e4:	1809      	addeq	r1, r1, r0
 80085e6:	6021      	streq	r1, [r4, #0]
 80085e8:	6054      	str	r4, [r2, #4]
 80085ea:	e7ca      	b.n	8008582 <_free_r+0x22>
 80085ec:	bd38      	pop	{r3, r4, r5, pc}
 80085ee:	bf00      	nop
 80085f0:	200005c4 	.word	0x200005c4

080085f4 <_malloc_usable_size_r>:
 80085f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085f8:	1f18      	subs	r0, r3, #4
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bfbc      	itt	lt
 80085fe:	580b      	ldrlt	r3, [r1, r0]
 8008600:	18c0      	addlt	r0, r0, r3
 8008602:	4770      	bx	lr

08008604 <_raise_r>:
 8008604:	291f      	cmp	r1, #31
 8008606:	b538      	push	{r3, r4, r5, lr}
 8008608:	4605      	mov	r5, r0
 800860a:	460c      	mov	r4, r1
 800860c:	d904      	bls.n	8008618 <_raise_r+0x14>
 800860e:	2316      	movs	r3, #22
 8008610:	6003      	str	r3, [r0, #0]
 8008612:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008616:	bd38      	pop	{r3, r4, r5, pc}
 8008618:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800861a:	b112      	cbz	r2, 8008622 <_raise_r+0x1e>
 800861c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008620:	b94b      	cbnz	r3, 8008636 <_raise_r+0x32>
 8008622:	4628      	mov	r0, r5
 8008624:	f000 f830 	bl	8008688 <_getpid_r>
 8008628:	4622      	mov	r2, r4
 800862a:	4601      	mov	r1, r0
 800862c:	4628      	mov	r0, r5
 800862e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008632:	f000 b817 	b.w	8008664 <_kill_r>
 8008636:	2b01      	cmp	r3, #1
 8008638:	d00a      	beq.n	8008650 <_raise_r+0x4c>
 800863a:	1c59      	adds	r1, r3, #1
 800863c:	d103      	bne.n	8008646 <_raise_r+0x42>
 800863e:	2316      	movs	r3, #22
 8008640:	6003      	str	r3, [r0, #0]
 8008642:	2001      	movs	r0, #1
 8008644:	e7e7      	b.n	8008616 <_raise_r+0x12>
 8008646:	2100      	movs	r1, #0
 8008648:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800864c:	4620      	mov	r0, r4
 800864e:	4798      	blx	r3
 8008650:	2000      	movs	r0, #0
 8008652:	e7e0      	b.n	8008616 <_raise_r+0x12>

08008654 <raise>:
 8008654:	4b02      	ldr	r3, [pc, #8]	@ (8008660 <raise+0xc>)
 8008656:	4601      	mov	r1, r0
 8008658:	6818      	ldr	r0, [r3, #0]
 800865a:	f7ff bfd3 	b.w	8008604 <_raise_r>
 800865e:	bf00      	nop
 8008660:	20000018 	.word	0x20000018

08008664 <_kill_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	4d07      	ldr	r5, [pc, #28]	@ (8008684 <_kill_r+0x20>)
 8008668:	2300      	movs	r3, #0
 800866a:	4604      	mov	r4, r0
 800866c:	4608      	mov	r0, r1
 800866e:	4611      	mov	r1, r2
 8008670:	602b      	str	r3, [r5, #0]
 8008672:	f7f8 ff1d 	bl	80014b0 <_kill>
 8008676:	1c43      	adds	r3, r0, #1
 8008678:	d102      	bne.n	8008680 <_kill_r+0x1c>
 800867a:	682b      	ldr	r3, [r5, #0]
 800867c:	b103      	cbz	r3, 8008680 <_kill_r+0x1c>
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	bd38      	pop	{r3, r4, r5, pc}
 8008682:	bf00      	nop
 8008684:	200005c8 	.word	0x200005c8

08008688 <_getpid_r>:
 8008688:	f7f8 bf0a 	b.w	80014a0 <_getpid>

0800868c <_init>:
 800868c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868e:	bf00      	nop
 8008690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008692:	bc08      	pop	{r3}
 8008694:	469e      	mov	lr, r3
 8008696:	4770      	bx	lr

08008698 <_fini>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	bf00      	nop
 800869c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869e:	bc08      	pop	{r3}
 80086a0:	469e      	mov	lr, r3
 80086a2:	4770      	bx	lr
