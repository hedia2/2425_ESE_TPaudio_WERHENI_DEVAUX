
TP Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08009764  08009764  0000a764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a6c  08009a6c  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a6c  08009a6c  0000aa6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a74  08009a74  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a74  08009a74  0000aa74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a78  08009a78  0000aa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009a7c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001410  2000006c  08009ae8  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000147c  08009ae8  0000b47c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a471  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043c0  00000000  00000000  0002550d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  000298d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001164  00000000  00000000  0002af70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bbf2  00000000  00000000  0002c0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dab9  00000000  00000000  00057cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9f0a  00000000  00000000  0007577f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016f689  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f0  00000000  00000000  0016f6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00175dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800974c 	.word	0x0800974c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800974c 	.word	0x0800974c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MCP23S17_WriteRegister>:
#include "components/MCP23S17.h"




HAL_StatusTypeDef MCP23S17_WriteRegister(uint8_t reg, uint8_t data){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
	uint8_t pData[3];

	pData[0] = MCP23S17_ADDR;
 8000590:	2340      	movs	r3, #64	@ 0x40
 8000592:	733b      	strb	r3, [r7, #12]
	pData[1] = reg;
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	737b      	strb	r3, [r7, #13]
	pData[2] = data;
 8000598:	79bb      	ldrb	r3, [r7, #6]
 800059a:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(CS_Vu_GPIO_Port, CS_Vu_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2180      	movs	r1, #128	@ 0x80
 80005a0:	480e      	ldr	r0, [pc, #56]	@ (80005dc <MCP23S17_WriteRegister+0x5c>)
 80005a2:	f001 fe59 	bl	8002258 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80005a6:	200a      	movs	r0, #10
 80005a8:	f001 f990 	bl	80018cc <HAL_Delay>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&MCP23S17_SPI, pData, 3, HAL_MAX_DELAY);
 80005ac:	f107 010c 	add.w	r1, r7, #12
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b4:	2203      	movs	r2, #3
 80005b6:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <MCP23S17_WriteRegister+0x60>)
 80005b8:	f005 faba 	bl	8005b30 <HAL_SPI_Transmit>
 80005bc:	4603      	mov	r3, r0
 80005be:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80005c0:	200a      	movs	r0, #10
 80005c2:	f001 f983 	bl	80018cc <HAL_Delay>
	HAL_GPIO_WritePin(CS_Vu_GPIO_Port, CS_Vu_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	4804      	ldr	r0, [pc, #16]	@ (80005dc <MCP23S17_WriteRegister+0x5c>)
 80005cc:	f001 fe44 	bl	8002258 <HAL_GPIO_WritePin>
	return ret;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	48000400 	.word	0x48000400
 80005e0:	20000530 	.word	0x20000530

080005e4 <MCP23S17_Init>:

void MCP23S17_Init()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_Vu_GPIO_Port, RESET_Vu_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2101      	movs	r1, #1
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f0:	f001 fe32 	bl	8002258 <HAL_GPIO_WritePin>
	MCP23S17_WriteRegister(IODIRA, CONFIG);
 80005f4:	2100      	movs	r1, #0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff ffc2 	bl	8000580 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(IODIRB, CONFIG);
 80005fc:	2100      	movs	r1, #0
 80005fe:	2001      	movs	r0, #1
 8000600:	f7ff ffbe 	bl	8000580 <MCP23S17_WriteRegister>
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060e:	4b10      	ldr	r3, [pc, #64]	@ (8000650 <MX_DMA_Init+0x48>)
 8000610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000612:	4a0f      	ldr	r2, [pc, #60]	@ (8000650 <MX_DMA_Init+0x48>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6493      	str	r3, [r2, #72]	@ 0x48
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <MX_DMA_Init+0x48>)
 800061c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2105      	movs	r1, #5
 800062a:	2010      	movs	r0, #16
 800062c:	f001 fa4d 	bl	8001aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000630:	2010      	movs	r0, #16
 8000632:	f001 fa66 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2105      	movs	r1, #5
 800063a:	2011      	movs	r0, #17
 800063c:	f001 fa45 	bl	8001aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000640:	2011      	movs	r0, #17
 8000642:	f001 fa5e 	bl	8001b02 <HAL_NVIC_EnableIRQ>

}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000

08000654 <drv_uart2_receive>:

#include "usart.h"
#include "gpio.h"

uint8_t drv_uart2_receive(char * pData, uint16_t size)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	460b      	mov	r3, r1
 800065e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart2, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 8000660:	887a      	ldrh	r2, [r7, #2]
 8000662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	4803      	ldr	r0, [pc, #12]	@ (8000678 <drv_uart2_receive+0x24>)
 800066a:	f005 fe12 	bl	8006292 <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 800066e:	2300      	movs	r3, #0
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000598 	.word	0x20000598

0800067c <drv_uart2_transmit>:

uint8_t drv_uart2_transmit(const char * pData, uint16_t size)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8000688:	887a      	ldrh	r2, [r7, #2]
 800068a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	4803      	ldr	r0, [pc, #12]	@ (80006a0 <drv_uart2_transmit+0x24>)
 8000692:	f005 fd75 	bl	8006180 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000598 	.word	0x20000598

080006a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80006b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	4a06      	ldr	r2, [pc, #24]	@ (80006d4 <vApplicationGetIdleTaskMemory+0x30>)
 80006ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2280      	movs	r2, #128	@ 0x80
 80006c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	2000008c 	.word	0x2000008c
 80006d4:	200000e0 	.word	0x200000e0

080006d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006de:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <MX_FREERTOS_Init+0x30>)
 80006e0:	1d3c      	adds	r4, r7, #4
 80006e2:	461d      	mov	r5, r3
 80006e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f006 fb87 	bl	8006e08 <osThreadCreate>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a03      	ldr	r2, [pc, #12]	@ (800070c <MX_FREERTOS_Init+0x34>)
 80006fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bdb0      	pop	{r4, r5, r7, pc}
 8000708:	08009770 	.word	0x08009770
 800070c:	20000088 	.word	0x20000088

08000710 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f006 fbc1 	bl	8006ea0 <osDelay>
 800071e:	e7fb      	b.n	8000718 <StartDefaultTask+0x8>

08000720 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	@ 0x28
 8000724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b38      	ldr	r3, [pc, #224]	@ (8000818 <MX_GPIO_Init+0xf8>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a37      	ldr	r2, [pc, #220]	@ (8000818 <MX_GPIO_Init+0xf8>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b35      	ldr	r3, [pc, #212]	@ (8000818 <MX_GPIO_Init+0xf8>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b32      	ldr	r3, [pc, #200]	@ (8000818 <MX_GPIO_Init+0xf8>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a31      	ldr	r2, [pc, #196]	@ (8000818 <MX_GPIO_Init+0xf8>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b2f      	ldr	r3, [pc, #188]	@ (8000818 <MX_GPIO_Init+0xf8>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b2c      	ldr	r3, [pc, #176]	@ (8000818 <MX_GPIO_Init+0xf8>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	4a2b      	ldr	r2, [pc, #172]	@ (8000818 <MX_GPIO_Init+0xf8>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000772:	4b29      	ldr	r3, [pc, #164]	@ (8000818 <MX_GPIO_Init+0xf8>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b26      	ldr	r3, [pc, #152]	@ (8000818 <MX_GPIO_Init+0xf8>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	4a25      	ldr	r2, [pc, #148]	@ (8000818 <MX_GPIO_Init+0xf8>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078a:	4b23      	ldr	r3, [pc, #140]	@ (8000818 <MX_GPIO_Init+0xf8>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_Vu_GPIO_Port, RESET_Vu_Pin, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2101      	movs	r1, #1
 800079a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079e:	f001 fd5b 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2120      	movs	r1, #32
 80007a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007aa:	f001 fd55 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_Vu_GPIO_Port, CS_Vu_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	481a      	ldr	r0, [pc, #104]	@ (800081c <MX_GPIO_Init+0xfc>)
 80007b4:	f001 fd50 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4814      	ldr	r0, [pc, #80]	@ (8000820 <MX_GPIO_Init+0x100>)
 80007d0:	f001 fb98 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RESET_Vu_Pin|LD2_Pin;
 80007d4:	2321      	movs	r3, #33	@ 0x21
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ee:	f001 fb89 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Vu_Pin;
 80007f2:	2380      	movs	r3, #128	@ 0x80
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_Vu_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4804      	ldr	r0, [pc, #16]	@ (800081c <MX_GPIO_Init+0xfc>)
 800080a:	f001 fb7b 	bl	8001f04 <HAL_GPIO_Init>

}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	@ 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000
 800081c:	48000400 	.word	0x48000400
 8000820:	48000800 	.word	0x48000800

08000824 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000828:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <MX_I2C2_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	@ (800089c <MX_I2C2_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000830:	4a1b      	ldr	r2, [pc, #108]	@ (80008a0 <MX_I2C2_Init+0x7c>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_I2C2_Init+0x74>)
 800083c:	2201      	movs	r2, #1
 800083e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_I2C2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_I2C2_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800085e:	480e      	ldr	r0, [pc, #56]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000860:	f001 fd2c 	bl	80022bc <HAL_I2C_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800086a:	f000 f96e 	bl	8000b4a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086e:	2100      	movs	r1, #0
 8000870:	4809      	ldr	r0, [pc, #36]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000872:	f002 f947 	bl	8002b04 <HAL_I2CEx_ConfigAnalogFilter>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800087c:	f000 f965 	bl	8000b4a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000880:	2100      	movs	r1, #0
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000884:	f002 f989 	bl	8002b9a <HAL_I2CEx_ConfigDigitalFilter>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 f95c 	bl	8000b4a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200002e0 	.word	0x200002e0
 800089c:	40005800 	.word	0x40005800
 80008a0:	10d19ce4 	.word	0x10d19ce4

080008a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b0ac      	sub	sp, #176	@ 0xb0
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2288      	movs	r2, #136	@ 0x88
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f007 ff29 	bl	800871c <memset>
  if(i2cHandle->Instance==I2C2)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a21      	ldr	r2, [pc, #132]	@ (8000954 <HAL_I2C_MspInit+0xb0>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d13b      	bne.n	800094c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008d4:	2380      	movs	r3, #128	@ 0x80
 80008d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008d8:	2300      	movs	r3, #0
 80008da:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 f80b 	bl	80038fc <HAL_RCCEx_PeriphCLKConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008ec:	f000 f92d 	bl	8000b4a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f0:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <HAL_I2C_MspInit+0xb4>)
 80008f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f4:	4a18      	ldr	r2, [pc, #96]	@ (8000958 <HAL_I2C_MspInit+0xb4>)
 80008f6:	f043 0302 	orr.w	r3, r3, #2
 80008fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fc:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <HAL_I2C_MspInit+0xb4>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000908:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800090c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000910:	2312      	movs	r3, #18
 8000912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000922:	2304      	movs	r3, #4
 8000924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800092c:	4619      	mov	r1, r3
 800092e:	480b      	ldr	r0, [pc, #44]	@ (800095c <HAL_I2C_MspInit+0xb8>)
 8000930:	f001 fae8 	bl	8001f04 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <HAL_I2C_MspInit+0xb4>)
 8000936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000938:	4a07      	ldr	r2, [pc, #28]	@ (8000958 <HAL_I2C_MspInit+0xb4>)
 800093a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800093e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <HAL_I2C_MspInit+0xb4>)
 8000942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000944:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800094c:	bf00      	nop
 800094e:	37b0      	adds	r7, #176	@ 0xb0
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40005800 	.word	0x40005800
 8000958:	40021000 	.word	0x40021000
 800095c:	48000400 	.word	0x48000400

08000960 <getCHIP_ID>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t getCHIP_ID(uint8_t reg, uint8_t I2C_addr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af04      	add	r7, sp, #16
 8000966:	4603      	mov	r3, r0
 8000968:	460a      	mov	r2, r1
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	4613      	mov	r3, r2
 800096e:	71bb      	strb	r3, [r7, #6]
   uint8_t data = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	73bb      	strb	r3, [r7, #14]
   HAL_StatusTypeDef status;

   status = HAL_I2C_Mem_Read(&hi2c2, I2C_addr, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	b299      	uxth	r1, r3
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	b29a      	uxth	r2, r3
 800097c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	2301      	movs	r3, #1
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	f107 030e 	add.w	r3, r7, #14
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2301      	movs	r3, #1
 800098e:	4807      	ldr	r0, [pc, #28]	@ (80009ac <getCHIP_ID+0x4c>)
 8000990:	f001 fd30 	bl	80023f4 <HAL_I2C_Mem_Read>
 8000994:	4603      	mov	r3, r0
 8000996:	73fb      	strb	r3, [r7, #15]
   if (status != HAL_OK){
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <getCHIP_ID+0x42>
       return -1;
 800099e:	23ff      	movs	r3, #255	@ 0xff
 80009a0:	e000      	b.n	80009a4 <getCHIP_ID+0x44>
   }
   return data;
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200002e0 	.word	0x200002e0

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b6:	f000 ff0d 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ba:	f000 f84b 	bl	8000a54 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009be:	f000 f89a 	bl	8000af6 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c2:	f7ff fead 	bl	8000720 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c6:	f7ff fe1f 	bl	8000608 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009ca:	f000 fe4d 	bl	8001668 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80009ce:	f000 fc4f 	bl	8001270 <MX_SPI3_Init>
  MX_I2C2_Init();
 80009d2:	f7ff ff27 	bl	8000824 <MX_I2C2_Init>
  MX_SAI2_Init();
 80009d6:	f000 f8bf 	bl	8000b58 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */

	__HAL_SAI_ENABLE(&hsai_BlockA2);
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <main+0x90>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <main+0x90>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80009e8:	601a      	str	r2, [r3, #0]

	h_shell.drv.receive = drv_uart2_receive;
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <main+0x94>)
 80009ec:	4a16      	ldr	r2, [pc, #88]	@ (8000a48 <main+0x98>)
 80009ee:	65da      	str	r2, [r3, #92]	@ 0x5c
	h_shell.drv.transmit = drv_uart2_transmit;
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <main+0x94>)
 80009f2:	4a16      	ldr	r2, [pc, #88]	@ (8000a4c <main+0x9c>)
 80009f4:	659a      	str	r2, [r3, #88]	@ 0x58

	MCP23S17_Init();
 80009f6:	f7ff fdf5 	bl	80005e4 <MCP23S17_Init>
	MCP23S17_WriteRegister(MCP23S17_GPIOA, 0x00);
 80009fa:	2100      	movs	r1, #0
 80009fc:	2012      	movs	r0, #18
 80009fe:	f7ff fdbf 	bl	8000580 <MCP23S17_WriteRegister>

	uint8_t chip_ID = getCHIP_ID(CODEC_ID_REG, CODEC_ADDR);;
 8000a02:	2114      	movs	r1, #20
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff ffab 	bl	8000960 <getCHIP_ID>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	// CHIP ID = 160
	shell_init(&h_shell);
 8000a0e:	480d      	ldr	r0, [pc, #52]	@ (8000a44 <main+0x94>)
 8000a10:	f000 fb2c 	bl	800106c <shell_init>
	shell_run(&h_shell);
 8000a14:	480b      	ldr	r0, [pc, #44]	@ (8000a44 <main+0x94>)
 8000a16:	f000 fbcd 	bl	80011b4 <shell_run>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000a1a:	f7ff fe5d 	bl	80006d8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a1e:	f006 f9ec 	bl	8006dfa <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		printf("Toggle Led... \r\n");
 8000a22:	480b      	ldr	r0, [pc, #44]	@ (8000a50 <main+0xa0>)
 8000a24:	f007 fd66 	bl	80084f4 <puts>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a28:	2120      	movs	r1, #32
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2e:	f001 fc2b 	bl	8002288 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a36:	f000 ff49 	bl	80018cc <HAL_Delay>
		printf("Toggle Led... \r\n");
 8000a3a:	bf00      	nop
 8000a3c:	e7f1      	b.n	8000a22 <main+0x72>
 8000a3e:	bf00      	nop
 8000a40:	20000394 	.word	0x20000394
 8000a44:	20000334 	.word	0x20000334
 8000a48:	08000655 	.word	0x08000655
 8000a4c:	0800067d 	.word	0x0800067d
 8000a50:	0800978c 	.word	0x0800978c

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b096      	sub	sp, #88	@ 0x58
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2244      	movs	r2, #68	@ 0x44
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f007 fe5a 	bl	800871c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a76:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a7a:	f002 f8e9 	bl	8002c50 <HAL_PWREx_ControlVoltageScaling>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a84:	f000 f861 	bl	8000b4a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a92:	2310      	movs	r3, #16
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 f920 	bl	8002cfc <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ac2:	f000 f842 	bl	8000b4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2303      	movs	r3, #3
 8000acc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	2104      	movs	r1, #4
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f002 fce8 	bl	80034b4 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aea:	f000 f82e 	bl	8000b4a <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3758      	adds	r7, #88	@ 0x58
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b0a2      	sub	sp, #136	@ 0x88
 8000afa:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000afc:	463b      	mov	r3, r7
 8000afe:	2288      	movs	r2, #136	@ 0x88
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f007 fe0a 	bl	800871c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000b08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b0c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	66bb      	str	r3, [r7, #104]	@ 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b12:	2302      	movs	r3, #2
 8000b14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b1e:	2307      	movs	r3, #7
 8000b20:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b22:	2302      	movs	r3, #2
 8000b24:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000b2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b2e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 fee2 	bl	80038fc <HAL_RCCEx_PeriphCLKConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000b3e:	f000 f804 	bl	8000b4a <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3788      	adds	r7, #136	@ 0x88
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4e:	b672      	cpsid	i
}
 8000b50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b52:	bf00      	nop
 8000b54:	e7fd      	b.n	8000b52 <Error_Handler+0x8>
	...

08000b58 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <MX_SAI2_Init+0xb0>)
 8000b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8000c0c <MX_SAI2_Init+0xb4>)
 8000b60:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b62:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <MX_SAI2_Init+0xb0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b68:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <MX_SAI2_Init+0xb0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b6e:	4b26      	ldr	r3, [pc, #152]	@ (8000c08 <MX_SAI2_Init+0xb0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b74:	4b24      	ldr	r3, [pc, #144]	@ (8000c08 <MX_SAI2_Init+0xb0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b7a:	4b23      	ldr	r3, [pc, #140]	@ (8000c08 <MX_SAI2_Init+0xb0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000b80:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <MX_SAI2_Init+0xb0>)
 8000b82:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b86:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <MX_SAI2_Init+0xb0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <MX_SAI2_Init+0xb0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <MX_SAI2_Init+0xb0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <MX_SAI2_Init+0xb0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4818      	ldr	r0, [pc, #96]	@ (8000c08 <MX_SAI2_Init+0xb0>)
 8000ba8:	f004 f9c2 	bl	8004f30 <HAL_SAI_InitProtocol>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000bb2:	f7ff ffca 	bl	8000b4a <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <MX_SAI2_Init+0xb8>)
 8000bb8:	4a16      	ldr	r2, [pc, #88]	@ (8000c14 <MX_SAI2_Init+0xbc>)
 8000bba:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <MX_SAI2_Init+0xb8>)
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <MX_SAI2_Init+0xb8>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <MX_SAI2_Init+0xb8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <MX_SAI2_Init+0xb8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <MX_SAI2_Init+0xb8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <MX_SAI2_Init+0xb8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <MX_SAI2_Init+0xb8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <MX_SAI2_Init+0xb8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000bec:	2302      	movs	r3, #2
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4807      	ldr	r0, [pc, #28]	@ (8000c10 <MX_SAI2_Init+0xb8>)
 8000bf4:	f004 f99c 	bl	8004f30 <HAL_SAI_InitProtocol>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000bfe:	f7ff ffa4 	bl	8000b4a <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000394 	.word	0x20000394
 8000c0c:	40015804 	.word	0x40015804
 8000c10:	20000418 	.word	0x20000418
 8000c14:	40015824 	.word	0x40015824

08000c18 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	@ 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a64      	ldr	r2, [pc, #400]	@ (8000db8 <HAL_SAI_MspInit+0x1a0>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d15e      	bne.n	8000ce8 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000c2a:	4b64      	ldr	r3, [pc, #400]	@ (8000dbc <HAL_SAI_MspInit+0x1a4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d113      	bne.n	8000c5a <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000c32:	4b63      	ldr	r3, [pc, #396]	@ (8000dc0 <HAL_SAI_MspInit+0x1a8>)
 8000c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c36:	4a62      	ldr	r2, [pc, #392]	@ (8000dc0 <HAL_SAI_MspInit+0x1a8>)
 8000c38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c3e:	4b60      	ldr	r3, [pc, #384]	@ (8000dc0 <HAL_SAI_MspInit+0x1a8>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2105      	movs	r1, #5
 8000c4e:	204b      	movs	r0, #75	@ 0x4b
 8000c50:	f000 ff3b 	bl	8001aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000c54:	204b      	movs	r0, #75	@ 0x4b
 8000c56:	f000 ff54 	bl	8001b02 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000c5a:	4b58      	ldr	r3, [pc, #352]	@ (8000dbc <HAL_SAI_MspInit+0x1a4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	4a56      	ldr	r2, [pc, #344]	@ (8000dbc <HAL_SAI_MspInit+0x1a4>)
 8000c62:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c64:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000c76:	230d      	movs	r3, #13
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4850      	ldr	r0, [pc, #320]	@ (8000dc4 <HAL_SAI_MspInit+0x1ac>)
 8000c82:	f001 f93f 	bl	8001f04 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000c86:	4b50      	ldr	r3, [pc, #320]	@ (8000dc8 <HAL_SAI_MspInit+0x1b0>)
 8000c88:	4a50      	ldr	r2, [pc, #320]	@ (8000dcc <HAL_SAI_MspInit+0x1b4>)
 8000c8a:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000c8c:	4b4e      	ldr	r3, [pc, #312]	@ (8000dc8 <HAL_SAI_MspInit+0x1b0>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c92:	4b4d      	ldr	r3, [pc, #308]	@ (8000dc8 <HAL_SAI_MspInit+0x1b0>)
 8000c94:	2210      	movs	r2, #16
 8000c96:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c98:	4b4b      	ldr	r3, [pc, #300]	@ (8000dc8 <HAL_SAI_MspInit+0x1b0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8000dc8 <HAL_SAI_MspInit+0x1b0>)
 8000ca0:	2280      	movs	r2, #128	@ 0x80
 8000ca2:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ca4:	4b48      	ldr	r3, [pc, #288]	@ (8000dc8 <HAL_SAI_MspInit+0x1b0>)
 8000ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000caa:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cac:	4b46      	ldr	r3, [pc, #280]	@ (8000dc8 <HAL_SAI_MspInit+0x1b0>)
 8000cae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cb2:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000cb4:	4b44      	ldr	r3, [pc, #272]	@ (8000dc8 <HAL_SAI_MspInit+0x1b0>)
 8000cb6:	2220      	movs	r2, #32
 8000cb8:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000cba:	4b43      	ldr	r3, [pc, #268]	@ (8000dc8 <HAL_SAI_MspInit+0x1b0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000cc0:	4841      	ldr	r0, [pc, #260]	@ (8000dc8 <HAL_SAI_MspInit+0x1b0>)
 8000cc2:	f000 ff39 	bl	8001b38 <HAL_DMA_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000ccc:	f7ff ff3d 	bl	8000b4a <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a3d      	ldr	r2, [pc, #244]	@ (8000dc8 <HAL_SAI_MspInit+0x1b0>)
 8000cd4:	671a      	str	r2, [r3, #112]	@ 0x70
 8000cd6:	4a3c      	ldr	r2, [pc, #240]	@ (8000dc8 <HAL_SAI_MspInit+0x1b0>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a3a      	ldr	r2, [pc, #232]	@ (8000dc8 <HAL_SAI_MspInit+0x1b0>)
 8000ce0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000ce2:	4a39      	ldr	r2, [pc, #228]	@ (8000dc8 <HAL_SAI_MspInit+0x1b0>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a38      	ldr	r2, [pc, #224]	@ (8000dd0 <HAL_SAI_MspInit+0x1b8>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d15e      	bne.n	8000db0 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000cf2:	4b32      	ldr	r3, [pc, #200]	@ (8000dbc <HAL_SAI_MspInit+0x1a4>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d113      	bne.n	8000d22 <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000cfa:	4b31      	ldr	r3, [pc, #196]	@ (8000dc0 <HAL_SAI_MspInit+0x1a8>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfe:	4a30      	ldr	r2, [pc, #192]	@ (8000dc0 <HAL_SAI_MspInit+0x1a8>)
 8000d00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d06:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc0 <HAL_SAI_MspInit+0x1a8>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2105      	movs	r1, #5
 8000d16:	204b      	movs	r0, #75	@ 0x4b
 8000d18:	f000 fed7 	bl	8001aca <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000d1c:	204b      	movs	r0, #75	@ 0x4b
 8000d1e:	f000 fef0 	bl	8001b02 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000d22:	4b26      	ldr	r3, [pc, #152]	@ (8000dbc <HAL_SAI_MspInit+0x1a4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	3301      	adds	r3, #1
 8000d28:	4a24      	ldr	r2, [pc, #144]	@ (8000dbc <HAL_SAI_MspInit+0x1a4>)
 8000d2a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000d3e:	230d      	movs	r3, #13
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4822      	ldr	r0, [pc, #136]	@ (8000dd4 <HAL_SAI_MspInit+0x1bc>)
 8000d4a:	f001 f8db 	bl	8001f04 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000d4e:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <HAL_SAI_MspInit+0x1c0>)
 8000d50:	4a22      	ldr	r2, [pc, #136]	@ (8000ddc <HAL_SAI_MspInit+0x1c4>)
 8000d52:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000d54:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <HAL_SAI_MspInit+0x1c0>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <HAL_SAI_MspInit+0x1c0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <HAL_SAI_MspInit+0x1c0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <HAL_SAI_MspInit+0x1c0>)
 8000d68:	2280      	movs	r2, #128	@ 0x80
 8000d6a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <HAL_SAI_MspInit+0x1c0>)
 8000d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d72:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d74:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <HAL_SAI_MspInit+0x1c0>)
 8000d76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d7a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <HAL_SAI_MspInit+0x1c0>)
 8000d7e:	2220      	movs	r2, #32
 8000d80:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <HAL_SAI_MspInit+0x1c0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000d88:	4813      	ldr	r0, [pc, #76]	@ (8000dd8 <HAL_SAI_MspInit+0x1c0>)
 8000d8a:	f000 fed5 	bl	8001b38 <HAL_DMA_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000d94:	f7ff fed9 	bl	8000b4a <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd8 <HAL_SAI_MspInit+0x1c0>)
 8000d9c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd8 <HAL_SAI_MspInit+0x1c0>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <HAL_SAI_MspInit+0x1c0>)
 8000da8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000daa:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd8 <HAL_SAI_MspInit+0x1c0>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	@ 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40015804 	.word	0x40015804
 8000dbc:	2000052c 	.word	0x2000052c
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	48000400 	.word	0x48000400
 8000dc8:	2000049c 	.word	0x2000049c
 8000dcc:	4002006c 	.word	0x4002006c
 8000dd0:	40015824 	.word	0x40015824
 8000dd4:	48000800 	.word	0x48000800
 8000dd8:	200004e4 	.word	0x200004e4
 8000ddc:	40020080 	.word	0x40020080

08000de0 <sh_pins>:
#include "components/MCP23S17.h"




static int sh_pins(h_shell_t * h_shell, int argc, char ** argv) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]


	MCP23S17_Init();
 8000dec:	f7ff fbfa 	bl	80005e4 <MCP23S17_Init>
	MCP23S17_WriteRegister(MCP23S17_GPIOA, 0x00);
 8000df0:	2100      	movs	r1, #0
 8000df2:	2012      	movs	r0, #18
 8000df4:	f7ff fbc4 	bl	8000580 <MCP23S17_WriteRegister>
	return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <sh_status>:
static int sh_status(h_shell_t * h_shell, int argc, char ** argv) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
	int size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3308      	adds	r3, #8
 8000e14:	4a09      	ldr	r2, [pc, #36]	@ (8000e3c <sh_status+0x38>)
 8000e16:	2128      	movs	r1, #40	@ 0x28
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f007 fb73 	bl	8008504 <sniprintf>
 8000e1e:	6178      	str	r0, [r7, #20]
			"System status: OK\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	3208      	adds	r2, #8
 8000e28:	6979      	ldr	r1, [r7, #20]
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4798      	blx	r3
	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	0800979c 	.word	0x0800979c

08000e40 <sh_led>:

static int sh_led(h_shell_t * h_shell, int argc, char ** argv) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	int size;

	if (argc != 2) {
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d012      	beq.n	8000e78 <sh_led+0x38>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	3308      	adds	r3, #8
 8000e56:	4a31      	ldr	r2, [pc, #196]	@ (8000f1c <sh_led+0xdc>)
 8000e58:	2128      	movs	r1, #40	@ 0x28
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f007 fb52 	bl	8008504 <sniprintf>
 8000e60:	6178      	str	r0, [r7, #20]
				"Usage: led <0|1>\r\n");
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	6979      	ldr	r1, [r7, #20]
 8000e6c:	b289      	uxth	r1, r1
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4798      	blx	r3
		return -1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e76:	e04d      	b.n	8000f14 <sh_led+0xd4>
	}

	if (strcmp(argv[1], "0") == 0) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4928      	ldr	r1, [pc, #160]	@ (8000f20 <sh_led+0xe0>)
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff f9a5 	bl	80001d0 <strcmp>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d10e      	bne.n	8000eaa <sh_led+0x6a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2120      	movs	r1, #32
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e94:	f001 f9e0 	bl	8002258 <HAL_GPIO_WritePin>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "LED turned OFF\r\n");
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3308      	adds	r3, #8
 8000e9c:	4a21      	ldr	r2, [pc, #132]	@ (8000f24 <sh_led+0xe4>)
 8000e9e:	2128      	movs	r1, #40	@ 0x28
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f007 fb2f 	bl	8008504 <sniprintf>
 8000ea6:	6178      	str	r0, [r7, #20]
 8000ea8:	e02b      	b.n	8000f02 <sh_led+0xc2>
	}
	else if (strcmp(argv[1], "1") == 0) {
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3304      	adds	r3, #4
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	491d      	ldr	r1, [pc, #116]	@ (8000f28 <sh_led+0xe8>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff f98c 	bl	80001d0 <strcmp>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10e      	bne.n	8000edc <sh_led+0x9c>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec6:	f001 f9c7 	bl	8002258 <HAL_GPIO_WritePin>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "LED turned ON\r\n");
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	3308      	adds	r3, #8
 8000ece:	4a17      	ldr	r2, [pc, #92]	@ (8000f2c <sh_led+0xec>)
 8000ed0:	2128      	movs	r1, #40	@ 0x28
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f007 fb16 	bl	8008504 <sniprintf>
 8000ed8:	6178      	str	r0, [r7, #20]
 8000eda:	e012      	b.n	8000f02 <sh_led+0xc2>
	}
	else {
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3308      	adds	r3, #8
 8000ee0:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <sh_led+0xf0>)
 8000ee2:	2128      	movs	r1, #40	@ 0x28
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f007 fb0d 	bl	8008504 <sniprintf>
 8000eea:	6178      	str	r0, [r7, #20]
				"Invalid argument. Use 0 or 1\r\n");
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	3208      	adds	r2, #8
 8000ef4:	6979      	ldr	r1, [r7, #20]
 8000ef6:	b289      	uxth	r1, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4798      	blx	r3
		return -1;
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f00:	e008      	b.n	8000f14 <sh_led+0xd4>
	}

	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	6979      	ldr	r1, [r7, #20]
 8000f0c:	b289      	uxth	r1, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4798      	blx	r3
	return 0;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	080097b0 	.word	0x080097b0
 8000f20:	080097c4 	.word	0x080097c4
 8000f24:	080097c8 	.word	0x080097c8
 8000f28:	080097dc 	.word	0x080097dc
 8000f2c:	080097e0 	.word	0x080097e0
 8000f30:	080097f0 	.word	0x080097f0

08000f34 <sh_help>:

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
	int i;
	int size;

	if (argc > 1) {
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	dd59      	ble.n	8000ffa <sh_help+0xc6>
		for (i = 0; i < h_shell->func_list_size; i++) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	e03b      	b.n	8000fc4 <sh_help+0x90>
			if (strcmp(h_shell->func_list[i].cmd_name, argv[1]) == 0) {
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6819      	ldr	r1, [r3, #0]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3304      	adds	r3, #4
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4610      	mov	r0, r2
 8000f68:	f7ff f932 	bl	80001d0 <strcmp>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d125      	bne.n	8000fbe <sh_help+0x8a>
				size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f103 0008 	add.w	r0, r3, #8
						"%s: %s\r\n", h_shell->func_list[i].cmd_name,
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6819      	ldr	r1, [r3, #0]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	681c      	ldr	r4, [r3, #0]
						h_shell->func_list[i].description);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6819      	ldr	r1, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	689b      	ldr	r3, [r3, #8]
				size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	4623      	mov	r3, r4
 8000fa0:	4a30      	ldr	r2, [pc, #192]	@ (8001064 <sh_help+0x130>)
 8000fa2:	2128      	movs	r1, #40	@ 0x28
 8000fa4:	f007 faae 	bl	8008504 <sniprintf>
 8000fa8:	6138      	str	r0, [r7, #16]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	3208      	adds	r2, #8
 8000fb2:	6939      	ldr	r1, [r7, #16]
 8000fb4:	b289      	uxth	r1, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4798      	blx	r3
				return 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e04d      	b.n	800105a <sh_help+0x126>
		for (i = 0; i < h_shell->func_list_size; i++) {
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	dbbe      	blt.n	8000f4c <sh_help+0x18>
			}
		}
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f103 0008 	add.w	r0, r3, #8
				"Unknown command: %s\r\n", argv[1]);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3304      	adds	r3, #4
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a23      	ldr	r2, [pc, #140]	@ (8001068 <sh_help+0x134>)
 8000fdc:	2128      	movs	r1, #40	@ 0x28
 8000fde:	f007 fa91 	bl	8008504 <sniprintf>
 8000fe2:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	3208      	adds	r2, #8
 8000fec:	6939      	ldr	r1, [r7, #16]
 8000fee:	b289      	uxth	r1, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4798      	blx	r3
		return -1;
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ff8:	e02f      	b.n	800105a <sh_help+0x126>
	}

	for(i = 0; i < h_shell->func_list_size; i++) {
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	e026      	b.n	800104e <sh_help+0x11a>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f103 0008 	add.w	r0, r3, #8
				"%s: %s\r\n", h_shell->func_list[i].cmd_name,
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6819      	ldr	r1, [r3, #0]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	681c      	ldr	r4, [r3, #0]
				h_shell->func_list[i].description);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6819      	ldr	r1, [r3, #0]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	689b      	ldr	r3, [r3, #8]
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	4623      	mov	r3, r4
 800102e:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <sh_help+0x130>)
 8001030:	2128      	movs	r1, #40	@ 0x28
 8001032:	f007 fa67 	bl	8008504 <sniprintf>
 8001036:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	3208      	adds	r2, #8
 8001040:	6939      	ldr	r1, [r7, #16]
 8001042:	b289      	uxth	r1, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4798      	blx	r3
	for(i = 0; i < h_shell->func_list_size; i++) {
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3301      	adds	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	429a      	cmp	r2, r3
 8001056:	dbd3      	blt.n	8001000 <sh_help+0xcc>
	}

	return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd90      	pop	{r4, r7, pc}
 8001062:	bf00      	nop
 8001064:	08009810 	.word	0x08009810
 8001068:	0800981c 	.word	0x0800981c

0800106c <shell_init>:



};

void shell_init(h_shell_t * h_shell) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	int size = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]

	h_shell->func_list = shell_functions;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <shell_init+0x60>)
 800107c:	601a      	str	r2, [r3, #0]
	h_shell->func_list_size = sizeof(shell_functions) / sizeof(shell_functions[0]);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2204      	movs	r2, #4
 8001082:	605a      	str	r2, [r3, #4]

	size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3308      	adds	r3, #8
 8001088:	4a11      	ldr	r2, [pc, #68]	@ (80010d0 <shell_init+0x64>)
 800108a:	2128      	movs	r1, #40	@ 0x28
 800108c:	4618      	mov	r0, r3
 800108e:	f007 fa39 	bl	8008504 <sniprintf>
 8001092:	60f8      	str	r0, [r7, #12]
			"\r\n\r\n===== Super auto radio v1.0 =====\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	68f9      	ldr	r1, [r7, #12]
 800109e:	b289      	uxth	r1, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4798      	blx	r3

	size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3308      	adds	r3, #8
 80010a8:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <shell_init+0x68>)
 80010aa:	2128      	movs	r1, #40	@ 0x28
 80010ac:	4618      	mov	r0, r3
 80010ae:	f007 fa29 	bl	8008504 <sniprintf>
 80010b2:	60f8      	str	r0, [r7, #12]
			"Type 'help' for available commands\r\n");
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	68f9      	ldr	r1, [r7, #12]
 80010be:	b289      	uxth	r1, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4798      	blx	r3
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	08009900 	.word	0x08009900
 80010d0:	080098a0 	.word	0x080098a0
 80010d4:	080098c8 	.word	0x080098c8

080010d8 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08e      	sub	sp, #56	@ 0x38
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	int i;
	int argc = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	@ 0x30
	char *argv[ARGC_MAX];
	char *token;

	token = strtok(buf, " ");
 80010e6:	4931      	ldr	r1, [pc, #196]	@ (80011ac <shell_exec+0xd4>)
 80010e8:	6838      	ldr	r0, [r7, #0]
 80010ea:	f007 fb1f 	bl	800872c <strtok>
 80010ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
	while (token != NULL && argc < ARGC_MAX) {
 80010f0:	e00d      	b.n	800110e <shell_exec+0x36>
		argv[argc++] = token;
 80010f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	3338      	adds	r3, #56	@ 0x38
 80010fc:	443b      	add	r3, r7
 80010fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001100:	f843 2c30 	str.w	r2, [r3, #-48]
		token = strtok(NULL, " ");
 8001104:	4929      	ldr	r1, [pc, #164]	@ (80011ac <shell_exec+0xd4>)
 8001106:	2000      	movs	r0, #0
 8001108:	f007 fb10 	bl	800872c <strtok>
 800110c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	while (token != NULL && argc < ARGC_MAX) {
 800110e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <shell_exec+0x42>
 8001114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001116:	2b07      	cmp	r3, #7
 8001118:	ddeb      	ble.n	80010f2 <shell_exec+0x1a>
	}

	if (argc == 0) return 0;
 800111a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <shell_exec+0x4c>
 8001120:	2300      	movs	r3, #0
 8001122:	e03e      	b.n	80011a2 <shell_exec+0xca>

	for (i = 0; i < h_shell->func_list_size; i++) {
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	@ 0x34
 8001128:	e023      	b.n	8001172 <shell_exec+0x9a>
		if (strcmp(h_shell->func_list[i].cmd_name, argv[0]) == 0) {
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6819      	ldr	r1, [r3, #0]
 800112e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f845 	bl	80001d0 <strcmp>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10f      	bne.n	800116c <shell_exec+0x94>
			return h_shell->func_list[i].func(h_shell, argc, argv);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6819      	ldr	r1, [r3, #0]
 8001150:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	440b      	add	r3, r1
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f107 0208 	add.w	r2, r7, #8
 8001162:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	4798      	blx	r3
 8001168:	4603      	mov	r3, r0
 800116a:	e01a      	b.n	80011a2 <shell_exec+0xca>
	for (i = 0; i < h_shell->func_list_size; i++) {
 800116c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800116e:	3301      	adds	r3, #1
 8001170:	637b      	str	r3, [r7, #52]	@ 0x34
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001178:	429a      	cmp	r2, r3
 800117a:	dbd6      	blt.n	800112a <shell_exec+0x52>
		}
	}


	int size = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f103 0008 	add.w	r0, r3, #8
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <shell_exec+0xd8>)
 8001186:	2128      	movs	r1, #40	@ 0x28
 8001188:	f007 f9bc 	bl	8008504 <sniprintf>
 800118c:	62b8      	str	r0, [r7, #40]	@ 0x28
			"Unknown command: %s\r\n", argv[0]);
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001198:	b289      	uxth	r1, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4798      	blx	r3
	return -1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3738      	adds	r7, #56	@ 0x38
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	080098f0 	.word	0x080098f0
 80011b0:	0800981c 	.word	0x0800981c

080011b4 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "shell@radio>> ";

int shell_run(h_shell_t * h_shell) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	int reading = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
	int pos = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, strlen(prompt));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c8:	210e      	movs	r1, #14
 80011ca:	4826      	ldr	r0, [pc, #152]	@ (8001264 <shell_run+0xb0>)
 80011cc:	4798      	blx	r3
		reading = 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]

		while(reading) {
 80011d2:	e03a      	b.n	800124a <shell_run+0x96>
			char c;
			h_shell->drv.receive(&c, 1);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d8:	f107 020f 	add.w	r2, r7, #15
 80011dc:	2101      	movs	r1, #1
 80011de:	4610      	mov	r0, r2
 80011e0:	4798      	blx	r3

			switch (c) {
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d00f      	beq.n	8001208 <shell_run+0x54>
 80011e8:	2b0d      	cmp	r3, #13
 80011ea:	d119      	bne.n	8001220 <shell_run+0x6c>
			case '\r':
				h_shell->drv.transmit("\r\n", 2);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f0:	2102      	movs	r1, #2
 80011f2:	481d      	ldr	r0, [pc, #116]	@ (8001268 <shell_run+0xb4>)
 80011f4:	4798      	blx	r3
				h_shell->cmd_buffer[pos] = 0;
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4413      	add	r3, r2
 80011fc:	3330      	adds	r3, #48	@ 0x30
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
				reading = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
				break;
 8001206:	e020      	b.n	800124a <shell_run+0x96>

			case '\b':
				if (pos > 0) {
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	2b00      	cmp	r3, #0
 800120c:	dd1c      	ble.n	8001248 <shell_run+0x94>
					pos--;
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	3b01      	subs	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
					h_shell->drv.transmit(backspace, 3);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001218:	2103      	movs	r1, #3
 800121a:	4814      	ldr	r0, [pc, #80]	@ (800126c <shell_run+0xb8>)
 800121c:	4798      	blx	r3
				}
				break;
 800121e:	e013      	b.n	8001248 <shell_run+0x94>

			default:
				if (pos < BUFFER_SIZE - 1) {
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	2b26      	cmp	r3, #38	@ 0x26
 8001224:	dc11      	bgt.n	800124a <shell_run+0x96>
					h_shell->drv.transmit(&c, 1);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122a:	f107 020f 	add.w	r2, r7, #15
 800122e:	2101      	movs	r1, #1
 8001230:	4610      	mov	r0, r2
 8001232:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c;
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	613a      	str	r2, [r7, #16]
 800123a:	7bf9      	ldrb	r1, [r7, #15]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	460a      	mov	r2, r1
 8001242:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8001246:	e000      	b.n	800124a <shell_run+0x96>
				break;
 8001248:	bf00      	nop
		while(reading) {
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1c1      	bne.n	80011d4 <shell_run+0x20>
				}
			}
		}

		shell_exec(h_shell, h_shell->cmd_buffer);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3330      	adds	r3, #48	@ 0x30
 8001254:	4619      	mov	r1, r3
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff3e 	bl	80010d8 <shell_exec>
		pos = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
		h_shell->drv.transmit(prompt, strlen(prompt));
 8001260:	e7b0      	b.n	80011c4 <shell_run+0x10>
 8001262:	bf00      	nop
 8001264:	08009934 	.word	0x08009934
 8001268:	080098f4 	.word	0x080098f4
 800126c:	08009930 	.word	0x08009930

08001270 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <MX_SPI3_Init+0x74>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <MX_SPI3_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800127a:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <MX_SPI3_Init+0x74>)
 800127c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001280:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001282:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <MX_SPI3_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <MX_SPI3_Init+0x74>)
 800128a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800128e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001290:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <MX_SPI3_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001296:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <MX_SPI3_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_SPI3_Init+0x74>)
 800129e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012a6:	2220      	movs	r2, #32
 80012a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012be:	2207      	movs	r2, #7
 80012c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012ca:	2208      	movs	r2, #8
 80012cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012d0:	f004 fb8b 	bl	80059ea <HAL_SPI_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012da:	f7ff fc36 	bl	8000b4a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000530 	.word	0x20000530
 80012e8:	40003c00 	.word	0x40003c00

080012ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a25      	ldr	r2, [pc, #148]	@ (80013a0 <HAL_SPI_MspInit+0xb4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d144      	bne.n	8001398 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800130e:	4b25      	ldr	r3, [pc, #148]	@ (80013a4 <HAL_SPI_MspInit+0xb8>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001312:	4a24      	ldr	r2, [pc, #144]	@ (80013a4 <HAL_SPI_MspInit+0xb8>)
 8001314:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001318:	6593      	str	r3, [r2, #88]	@ 0x58
 800131a:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <HAL_SPI_MspInit+0xb8>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <HAL_SPI_MspInit+0xb8>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <HAL_SPI_MspInit+0xb8>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <HAL_SPI_MspInit+0xb8>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_SPI_MspInit+0xb8>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a18      	ldr	r2, [pc, #96]	@ (80013a4 <HAL_SPI_MspInit+0xb8>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <HAL_SPI_MspInit+0xb8>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001356:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001368:	2306      	movs	r3, #6
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <HAL_SPI_MspInit+0xbc>)
 8001374:	f000 fdc6 	bl	8001f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001378:	2320      	movs	r3, #32
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001388:	2306      	movs	r3, #6
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <HAL_SPI_MspInit+0xc0>)
 8001394:	f000 fdb6 	bl	8001f04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001398:	bf00      	nop
 800139a:	3728      	adds	r7, #40	@ 0x28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40003c00 	.word	0x40003c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000800 	.word	0x48000800
 80013ac:	48000400 	.word	0x48000400

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <HAL_MspInit+0x4c>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ba:	4a10      	ldr	r2, [pc, #64]	@ (80013fc <HAL_MspInit+0x4c>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <HAL_MspInit+0x4c>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <HAL_MspInit+0x4c>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <HAL_MspInit+0x4c>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <HAL_MspInit+0x4c>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	210f      	movs	r1, #15
 80013ea:	f06f 0001 	mvn.w	r0, #1
 80013ee:	f000 fb6c 	bl	8001aca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000

08001400 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001408:	1d39      	adds	r1, r7, #4
 800140a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800140e:	2201      	movs	r2, #1
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <__io_putchar+0x20>)
 8001412:	f004 feb5 	bl	8006180 <HAL_UART_Transmit>

  return ch;
 8001416:	687b      	ldr	r3, [r7, #4]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000598 	.word	0x20000598

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <NMI_Handler+0x4>

0800142c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <MemManage_Handler+0x4>

0800143c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <BusFault_Handler+0x4>

08001444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <UsageFault_Handler+0x4>

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145e:	f000 fa15 	bl	800188c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001462:	f006 faad 	bl	80079c0 <xTaskGetSchedulerState>
 8001466:	4603      	mov	r3, r0
 8001468:	2b01      	cmp	r3, #1
 800146a:	d001      	beq.n	8001470 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800146c:	f006 fcec 	bl	8007e48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <DMA1_Channel6_IRQHandler+0x10>)
 800147a:	f000 fc94 	bl	8001da6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000049c 	.word	0x2000049c

08001488 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800148c:	4802      	ldr	r0, [pc, #8]	@ (8001498 <DMA1_Channel7_IRQHandler+0x10>)
 800148e:	f000 fc8a 	bl	8001da6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200004e4 	.word	0x200004e4

0800149c <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80014a0:	4803      	ldr	r0, [pc, #12]	@ (80014b0 <SAI2_IRQHandler+0x14>)
 80014a2:	f003 ff4f 	bl	8005344 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80014a6:	4803      	ldr	r0, [pc, #12]	@ (80014b4 <SAI2_IRQHandler+0x18>)
 80014a8:	f003 ff4c 	bl	8005344 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000394 	.word	0x20000394
 80014b4:	20000418 	.word	0x20000418

080014b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return 1;
 80014bc:	2301      	movs	r3, #1
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_kill>:

int _kill(int pid, int sig)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014d2:	f007 f9cd 	bl	8008870 <__errno>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2216      	movs	r2, #22
 80014da:	601a      	str	r2, [r3, #0]
  return -1;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <_exit>:

void _exit (int status)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ffe7 	bl	80014c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014fa:	bf00      	nop
 80014fc:	e7fd      	b.n	80014fa <_exit+0x12>

080014fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	e00a      	b.n	8001526 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001510:	f3af 8000 	nop.w
 8001514:	4601      	mov	r1, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	60ba      	str	r2, [r7, #8]
 800151c:	b2ca      	uxtb	r2, r1
 800151e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	429a      	cmp	r2, r3
 800152c:	dbf0      	blt.n	8001510 <_read+0x12>
  }

  return len;
 800152e:	687b      	ldr	r3, [r7, #4]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	e009      	b.n	800155e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	60ba      	str	r2, [r7, #8]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff54 	bl	8001400 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3301      	adds	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	429a      	cmp	r2, r3
 8001564:	dbf1      	blt.n	800154a <_write+0x12>
  }
  return len;
 8001566:	687b      	ldr	r3, [r7, #4]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <_close>:

int _close(int file)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001578:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001598:	605a      	str	r2, [r3, #4]
  return 0;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <_isatty>:

int _isatty(int file)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015b0:	2301      	movs	r3, #1
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015be:	b480      	push	{r7}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e0:	4a14      	ldr	r2, [pc, #80]	@ (8001634 <_sbrk+0x5c>)
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <_sbrk+0x60>)
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <_sbrk+0x64>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <_sbrk+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d207      	bcs.n	8001618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001608:	f007 f932 	bl	8008870 <__errno>
 800160c:	4603      	mov	r3, r0
 800160e:	220c      	movs	r2, #12
 8001610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001616:	e009      	b.n	800162c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161e:	4b07      	ldr	r3, [pc, #28]	@ (800163c <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <_sbrk+0x64>)
 8001628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20018000 	.word	0x20018000
 8001638:	00000400 	.word	0x00000400
 800163c:	20000594 	.word	0x20000594
 8001640:	20001480 	.word	0x20001480

08001644 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <SystemInit+0x20>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164e:	4a05      	ldr	r2, [pc, #20]	@ (8001664 <SystemInit+0x20>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800166c:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <MX_USART2_UART_Init+0x58>)
 800166e:	4a15      	ldr	r2, [pc, #84]	@ (80016c4 <MX_USART2_UART_Init+0x5c>)
 8001670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001672:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <MX_USART2_UART_Init+0x58>)
 8001674:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_USART2_UART_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <MX_USART2_UART_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_USART2_UART_Init+0x58>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <MX_USART2_UART_Init+0x58>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <MX_USART2_UART_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <MX_USART2_UART_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169e:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <MX_USART2_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <MX_USART2_UART_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_USART2_UART_Init+0x58>)
 80016ac:	f004 fd1a 	bl	80060e4 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016b6:	f7ff fa48 	bl	8000b4a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000598 	.word	0x20000598
 80016c4:	40004400 	.word	0x40004400

080016c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0ac      	sub	sp, #176	@ 0xb0
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2288      	movs	r2, #136	@ 0x88
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f007 f817 	bl	800871c <memset>
  if(uartHandle->Instance==USART2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a21      	ldr	r2, [pc, #132]	@ (8001778 <HAL_UART_MspInit+0xb0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d13b      	bne.n	8001770 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016f8:	2302      	movs	r3, #2
 80016fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4618      	mov	r0, r3
 8001706:	f002 f8f9 	bl	80038fc <HAL_RCCEx_PeriphCLKConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001710:	f7ff fa1b 	bl	8000b4a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_UART_MspInit+0xb4>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001718:	4a18      	ldr	r2, [pc, #96]	@ (800177c <HAL_UART_MspInit+0xb4>)
 800171a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001720:	4b16      	ldr	r3, [pc, #88]	@ (800177c <HAL_UART_MspInit+0xb4>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b13      	ldr	r3, [pc, #76]	@ (800177c <HAL_UART_MspInit+0xb4>)
 800172e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001730:	4a12      	ldr	r2, [pc, #72]	@ (800177c <HAL_UART_MspInit+0xb4>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001738:	4b10      	ldr	r3, [pc, #64]	@ (800177c <HAL_UART_MspInit+0xb4>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001744:	230c      	movs	r3, #12
 8001746:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800175c:	2307      	movs	r3, #7
 800175e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176c:	f000 fbca 	bl	8001f04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001770:	bf00      	nop
 8001772:	37b0      	adds	r7, #176	@ 0xb0
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40004400 	.word	0x40004400
 800177c:	40021000 	.word	0x40021000

08001780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001784:	f7ff ff5e 	bl	8001644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <LoopForever+0x6>)
  ldr r1, =_edata
 800178a:	490d      	ldr	r1, [pc, #52]	@ (80017c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800178c:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <LoopForever+0xe>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a0:	4c0a      	ldr	r4, [pc, #40]	@ (80017cc <LoopForever+0x16>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f007 f865 	bl	800887c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017b2:	f7ff f8fd 	bl	80009b0 <main>

080017b6 <LoopForever>:

LoopForever:
    b LoopForever
 80017b6:	e7fe      	b.n	80017b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80017c4:	08009a7c 	.word	0x08009a7c
  ldr r2, =_sbss
 80017c8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80017cc:	2000147c 	.word	0x2000147c

080017d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC1_2_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <HAL_Init+0x3c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001810 <HAL_Init+0x3c>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ea:	2003      	movs	r0, #3
 80017ec:	f000 f962 	bl	8001ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f0:	200f      	movs	r0, #15
 80017f2:	f000 f80f 	bl	8001814 <HAL_InitTick>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	71fb      	strb	r3, [r7, #7]
 8001800:	e001      	b.n	8001806 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001802:	f7ff fdd5 	bl	80013b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001806:	79fb      	ldrb	r3, [r7, #7]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40022000 	.word	0x40022000

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001820:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <HAL_InitTick+0x6c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d023      	beq.n	8001870 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001828:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <HAL_InitTick+0x70>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <HAL_InitTick+0x6c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001836:	fbb3 f3f1 	udiv	r3, r3, r1
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f96d 	bl	8001b1e <HAL_SYSTICK_Config>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10f      	bne.n	800186a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d809      	bhi.n	8001864 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001858:	f000 f937 	bl	8001aca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185c:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <HAL_InitTick+0x74>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e007      	b.n	8001874 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e004      	b.n	8001874 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	e001      	b.n	8001874 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000008 	.word	0x20000008
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_IncTick+0x20>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_IncTick+0x24>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <HAL_IncTick+0x24>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000620 	.word	0x20000620

080018b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <HAL_GetTick+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000620 	.word	0x20000620

080018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff ffee 	bl	80018b4 <HAL_GetTick>
 80018d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018e4:	d005      	beq.n	80018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <HAL_Delay+0x44>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f2:	bf00      	nop
 80018f4:	f7ff ffde 	bl	80018b4 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8f7      	bhi.n	80018f4 <HAL_Delay+0x28>
  {
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000008 	.word	0x20000008

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db0b      	blt.n	80019a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	4907      	ldr	r1, [pc, #28]	@ (80019b0 <__NVIC_EnableIRQ+0x38>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2001      	movs	r0, #1
 800199a:	fa00 f202 	lsl.w	r2, r0, r2
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000e100 	.word	0xe000e100

080019b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0a      	blt.n	80019de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	490c      	ldr	r1, [pc, #48]	@ (8001a00 <__NVIC_SetPriority+0x4c>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019dc:	e00a      	b.n	80019f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4908      	ldr	r1, [pc, #32]	@ (8001a04 <__NVIC_SetPriority+0x50>)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	3b04      	subs	r3, #4
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	761a      	strb	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	@ 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f1c3 0307 	rsb	r3, r3, #7
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	bf28      	it	cs
 8001a26:	2304      	movcs	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d902      	bls.n	8001a38 <NVIC_EncodePriority+0x30>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b03      	subs	r3, #3
 8001a36:	e000      	b.n	8001a3a <NVIC_EncodePriority+0x32>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43d9      	mvns	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	4313      	orrs	r3, r2
         );
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	@ 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a80:	d301      	bcc.n	8001a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00f      	b.n	8001aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a86:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <SysTick_Config+0x40>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8e:	210f      	movs	r1, #15
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a94:	f7ff ff8e 	bl	80019b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <SysTick_Config+0x40>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9e:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <SysTick_Config+0x40>)
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	e000e010 	.word	0xe000e010

08001ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff29 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001adc:	f7ff ff3e 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001ae0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff ff8e 	bl	8001a08 <NVIC_EncodePriority>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff5d 	bl	80019b4 <__NVIC_SetPriority>
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff31 	bl	8001978 <__NVIC_EnableIRQ>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffa2 	bl	8001a70 <SysTick_Config>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e098      	b.n	8001c7c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b4d      	ldr	r3, [pc, #308]	@ (8001c88 <HAL_DMA_Init+0x150>)
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d80f      	bhi.n	8001b76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c8c <HAL_DMA_Init+0x154>)
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a4b      	ldr	r2, [pc, #300]	@ (8001c90 <HAL_DMA_Init+0x158>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	009a      	lsls	r2, r3, #2
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a48      	ldr	r2, [pc, #288]	@ (8001c94 <HAL_DMA_Init+0x15c>)
 8001b72:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b74:	e00e      	b.n	8001b94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b46      	ldr	r3, [pc, #280]	@ (8001c98 <HAL_DMA_Init+0x160>)
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a43      	ldr	r2, [pc, #268]	@ (8001c90 <HAL_DMA_Init+0x158>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	009a      	lsls	r2, r3, #2
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a42      	ldr	r2, [pc, #264]	@ (8001c9c <HAL_DMA_Init+0x164>)
 8001b92:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bee:	d039      	beq.n	8001c64 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	4a27      	ldr	r2, [pc, #156]	@ (8001c94 <HAL_DMA_Init+0x15c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d11a      	bne.n	8001c30 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001bfa:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <HAL_DMA_Init+0x168>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c02:	f003 031c 	and.w	r3, r3, #28
 8001c06:	210f      	movs	r1, #15
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4924      	ldr	r1, [pc, #144]	@ (8001ca0 <HAL_DMA_Init+0x168>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c14:	4b22      	ldr	r3, [pc, #136]	@ (8001ca0 <HAL_DMA_Init+0x168>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6859      	ldr	r1, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c20:	f003 031c 	and.w	r3, r3, #28
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	491d      	ldr	r1, [pc, #116]	@ (8001ca0 <HAL_DMA_Init+0x168>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
 8001c2e:	e019      	b.n	8001c64 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <HAL_DMA_Init+0x16c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c38:	f003 031c 	and.w	r3, r3, #28
 8001c3c:	210f      	movs	r1, #15
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	4917      	ldr	r1, [pc, #92]	@ (8001ca4 <HAL_DMA_Init+0x16c>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ca4 <HAL_DMA_Init+0x16c>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6859      	ldr	r1, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	f003 031c 	and.w	r3, r3, #28
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	4911      	ldr	r1, [pc, #68]	@ (8001ca4 <HAL_DMA_Init+0x16c>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40020407 	.word	0x40020407
 8001c8c:	bffdfff8 	.word	0xbffdfff8
 8001c90:	cccccccd 	.word	0xcccccccd
 8001c94:	40020000 	.word	0x40020000
 8001c98:	bffdfbf8 	.word	0xbffdfbf8
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	400200a8 	.word	0x400200a8
 8001ca4:	400204a8 	.word	0x400204a8

08001ca8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d008      	beq.n	8001cd2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e022      	b.n	8001d18 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 020e 	bic.w	r2, r2, #14
 8001ce0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	f003 021c 	and.w	r2, r3, #28
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	2101      	movs	r1, #1
 8001d00:	fa01 f202 	lsl.w	r2, r1, r2
 8001d04:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d005      	beq.n	8001d48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]
 8001d46:	e029      	b.n	8001d9c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 020e 	bic.w	r2, r2, #14
 8001d56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6c:	f003 021c 	and.w	r2, r3, #28
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
    }
  }
  return status;
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	f003 031c 	and.w	r3, r3, #28
 8001dc6:	2204      	movs	r2, #4
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d026      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x7a>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d021      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d107      	bne.n	8001dfa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0204 	bic.w	r2, r2, #4
 8001df8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f003 021c 	and.w	r2, r3, #28
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	2104      	movs	r1, #4
 8001e08:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d071      	beq.n	8001efa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e1e:	e06c      	b.n	8001efa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e24:	f003 031c 	and.w	r3, r3, #28
 8001e28:	2202      	movs	r2, #2
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d02e      	beq.n	8001e92 <HAL_DMA_IRQHandler+0xec>
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d029      	beq.n	8001e92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10b      	bne.n	8001e64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 020a 	bic.w	r2, r2, #10
 8001e5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e68:	f003 021c 	and.w	r2, r3, #28
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	2102      	movs	r1, #2
 8001e72:	fa01 f202 	lsl.w	r2, r1, r2
 8001e76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d038      	beq.n	8001efa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001e90:	e033      	b.n	8001efa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	f003 031c 	and.w	r3, r3, #28
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d02a      	beq.n	8001efc <HAL_DMA_IRQHandler+0x156>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d025      	beq.n	8001efc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 020e 	bic.w	r2, r2, #14
 8001ebe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec4:	f003 021c 	and.w	r2, r3, #28
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d004      	beq.n	8001efc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001efa:	bf00      	nop
 8001efc:	bf00      	nop
}
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f12:	e17f      	b.n	8002214 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2101      	movs	r1, #1
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8171 	beq.w	800220e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d005      	beq.n	8001f44 <HAL_GPIO_Init+0x40>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d130      	bne.n	8001fa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	f003 0201 	and.w	r2, r3, #1
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d118      	bne.n	8001fe4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	08db      	lsrs	r3, r3, #3
 8001fce:	f003 0201 	and.w	r2, r3, #1
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d017      	beq.n	8002020 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d123      	bne.n	8002074 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	08da      	lsrs	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3208      	adds	r2, #8
 8002034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002038:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	220f      	movs	r2, #15
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	08da      	lsrs	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3208      	adds	r2, #8
 800206e:	6939      	ldr	r1, [r7, #16]
 8002070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2203      	movs	r2, #3
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0203 	and.w	r2, r3, #3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80ac 	beq.w	800220e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002234 <HAL_GPIO_Init+0x330>)
 80020b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002234 <HAL_GPIO_Init+0x330>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80020c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002234 <HAL_GPIO_Init+0x330>)
 80020c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020ce:	4a5a      	ldr	r2, [pc, #360]	@ (8002238 <HAL_GPIO_Init+0x334>)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	220f      	movs	r2, #15
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020f8:	d025      	beq.n	8002146 <HAL_GPIO_Init+0x242>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4f      	ldr	r2, [pc, #316]	@ (800223c <HAL_GPIO_Init+0x338>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01f      	beq.n	8002142 <HAL_GPIO_Init+0x23e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4e      	ldr	r2, [pc, #312]	@ (8002240 <HAL_GPIO_Init+0x33c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d019      	beq.n	800213e <HAL_GPIO_Init+0x23a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4d      	ldr	r2, [pc, #308]	@ (8002244 <HAL_GPIO_Init+0x340>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_GPIO_Init+0x236>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4c      	ldr	r2, [pc, #304]	@ (8002248 <HAL_GPIO_Init+0x344>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00d      	beq.n	8002136 <HAL_GPIO_Init+0x232>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4b      	ldr	r2, [pc, #300]	@ (800224c <HAL_GPIO_Init+0x348>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <HAL_GPIO_Init+0x22e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4a      	ldr	r2, [pc, #296]	@ (8002250 <HAL_GPIO_Init+0x34c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_GPIO_Init+0x22a>
 800212a:	2306      	movs	r3, #6
 800212c:	e00c      	b.n	8002148 <HAL_GPIO_Init+0x244>
 800212e:	2307      	movs	r3, #7
 8002130:	e00a      	b.n	8002148 <HAL_GPIO_Init+0x244>
 8002132:	2305      	movs	r3, #5
 8002134:	e008      	b.n	8002148 <HAL_GPIO_Init+0x244>
 8002136:	2304      	movs	r3, #4
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x244>
 800213a:	2303      	movs	r3, #3
 800213c:	e004      	b.n	8002148 <HAL_GPIO_Init+0x244>
 800213e:	2302      	movs	r3, #2
 8002140:	e002      	b.n	8002148 <HAL_GPIO_Init+0x244>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_GPIO_Init+0x244>
 8002146:	2300      	movs	r3, #0
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	f002 0203 	and.w	r2, r2, #3
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	4093      	lsls	r3, r2
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002158:	4937      	ldr	r1, [pc, #220]	@ (8002238 <HAL_GPIO_Init+0x334>)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	3302      	adds	r3, #2
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002166:	4b3b      	ldr	r3, [pc, #236]	@ (8002254 <HAL_GPIO_Init+0x350>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	43db      	mvns	r3, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800218a:	4a32      	ldr	r2, [pc, #200]	@ (8002254 <HAL_GPIO_Init+0x350>)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002190:	4b30      	ldr	r3, [pc, #192]	@ (8002254 <HAL_GPIO_Init+0x350>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021b4:	4a27      	ldr	r2, [pc, #156]	@ (8002254 <HAL_GPIO_Init+0x350>)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021ba:	4b26      	ldr	r3, [pc, #152]	@ (8002254 <HAL_GPIO_Init+0x350>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021de:	4a1d      	ldr	r2, [pc, #116]	@ (8002254 <HAL_GPIO_Init+0x350>)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <HAL_GPIO_Init+0x350>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002208:	4a12      	ldr	r2, [pc, #72]	@ (8002254 <HAL_GPIO_Init+0x350>)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3301      	adds	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa22 f303 	lsr.w	r3, r2, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	f47f ae78 	bne.w	8001f14 <HAL_GPIO_Init+0x10>
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	40010000 	.word	0x40010000
 800223c:	48000400 	.word	0x48000400
 8002240:	48000800 	.word	0x48000800
 8002244:	48000c00 	.word	0x48000c00
 8002248:	48001000 	.word	0x48001000
 800224c:	48001400 	.word	0x48001400
 8002250:	48001800 	.word	0x48001800
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
 8002264:	4613      	mov	r3, r2
 8002266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002268:	787b      	ldrb	r3, [r7, #1]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002274:	e002      	b.n	800227c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800229a:	887a      	ldrh	r2, [r7, #2]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4013      	ands	r3, r2
 80022a0:	041a      	lsls	r2, r3, #16
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	43d9      	mvns	r1, r3
 80022a6:	887b      	ldrh	r3, [r7, #2]
 80022a8:	400b      	ands	r3, r1
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	619a      	str	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e08d      	b.n	80023ea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe fade 	bl	80008a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2224      	movs	r2, #36	@ 0x24
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800230c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800231c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	e006      	b.n	8002344 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002342:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d108      	bne.n	800235e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	e007      	b.n	800236e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800236c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800237c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002380:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002390:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69d9      	ldr	r1, [r3, #28]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1a      	ldr	r2, [r3, #32]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	4608      	mov	r0, r1
 80023fe:	4611      	mov	r1, r2
 8002400:	461a      	mov	r2, r3
 8002402:	4603      	mov	r3, r0
 8002404:	817b      	strh	r3, [r7, #10]
 8002406:	460b      	mov	r3, r1
 8002408:	813b      	strh	r3, [r7, #8]
 800240a:	4613      	mov	r3, r2
 800240c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b20      	cmp	r3, #32
 8002418:	f040 80fd 	bne.w	8002616 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_I2C_Mem_Read+0x34>
 8002422:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800242e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0f1      	b.n	8002618 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_I2C_Mem_Read+0x4e>
 800243e:	2302      	movs	r3, #2
 8002440:	e0ea      	b.n	8002618 <HAL_I2C_Mem_Read+0x224>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800244a:	f7ff fa33 	bl	80018b4 <HAL_GetTick>
 800244e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2319      	movs	r3, #25
 8002456:	2201      	movs	r2, #1
 8002458:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f95b 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0d5      	b.n	8002618 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2222      	movs	r2, #34	@ 0x22
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2240      	movs	r2, #64	@ 0x40
 8002478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a3a      	ldr	r2, [r7, #32]
 8002486:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800248c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002494:	88f8      	ldrh	r0, [r7, #6]
 8002496:	893a      	ldrh	r2, [r7, #8]
 8002498:	8979      	ldrh	r1, [r7, #10]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	4603      	mov	r3, r0
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f8bf 	bl	8002628 <I2C_RequestMemoryRead>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0ad      	b.n	8002618 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2bff      	cmp	r3, #255	@ 0xff
 80024c4:	d90e      	bls.n	80024e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	8979      	ldrh	r1, [r7, #10]
 80024d4:	4b52      	ldr	r3, [pc, #328]	@ (8002620 <HAL_I2C_Mem_Read+0x22c>)
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fadf 	bl	8002aa0 <I2C_TransferConfig>
 80024e2:	e00f      	b.n	8002504 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	8979      	ldrh	r1, [r7, #10]
 80024f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002620 <HAL_I2C_Mem_Read+0x22c>)
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 face 	bl	8002aa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250a:	2200      	movs	r2, #0
 800250c:	2104      	movs	r1, #4
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f902 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e07c      	b.n	8002618 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d034      	beq.n	80025c4 <HAL_I2C_Mem_Read+0x1d0>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255e:	2b00      	cmp	r3, #0
 8002560:	d130      	bne.n	80025c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002568:	2200      	movs	r2, #0
 800256a:	2180      	movs	r1, #128	@ 0x80
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f8d3 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e04d      	b.n	8002618 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	2bff      	cmp	r3, #255	@ 0xff
 8002584:	d90e      	bls.n	80025a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002590:	b2da      	uxtb	r2, r3
 8002592:	8979      	ldrh	r1, [r7, #10]
 8002594:	2300      	movs	r3, #0
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fa7f 	bl	8002aa0 <I2C_TransferConfig>
 80025a2:	e00f      	b.n	80025c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	8979      	ldrh	r1, [r7, #10]
 80025b6:	2300      	movs	r3, #0
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fa6e 	bl	8002aa0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d19a      	bne.n	8002504 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f940 	bl	8002858 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e01a      	b.n	8002618 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2220      	movs	r2, #32
 80025e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_I2C_Mem_Read+0x230>)
 80025f6:	400b      	ands	r3, r1
 80025f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	e000      	b.n	8002618 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002616:	2302      	movs	r3, #2
  }
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	80002400 	.word	0x80002400
 8002624:	fe00e800 	.word	0xfe00e800

08002628 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	4608      	mov	r0, r1
 8002632:	4611      	mov	r1, r2
 8002634:	461a      	mov	r2, r3
 8002636:	4603      	mov	r3, r0
 8002638:	817b      	strh	r3, [r7, #10]
 800263a:	460b      	mov	r3, r1
 800263c:	813b      	strh	r3, [r7, #8]
 800263e:	4613      	mov	r3, r2
 8002640:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	8979      	ldrh	r1, [r7, #10]
 8002648:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <I2C_RequestMemoryRead+0xa4>)
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2300      	movs	r3, #0
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fa26 	bl	8002aa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	69b9      	ldr	r1, [r7, #24]
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 f8b6 	bl	80027ca <I2C_WaitOnTXISFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e02c      	b.n	80026c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d105      	bne.n	800267a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800266e:	893b      	ldrh	r3, [r7, #8]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	629a      	str	r2, [r3, #40]	@ 0x28
 8002678:	e015      	b.n	80026a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800267a:	893b      	ldrh	r3, [r7, #8]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	b29b      	uxth	r3, r3
 8002680:	b2da      	uxtb	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	69b9      	ldr	r1, [r7, #24]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 f89c 	bl	80027ca <I2C_WaitOnTXISFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e012      	b.n	80026c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800269c:	893b      	ldrh	r3, [r7, #8]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2140      	movs	r1, #64	@ 0x40
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f831 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	80002000 	.word	0x80002000

080026d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d103      	bne.n	80026ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2200      	movs	r2, #0
 80026ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d007      	beq.n	800270c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	619a      	str	r2, [r3, #24]
  }
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002728:	e03b      	b.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	6839      	ldr	r1, [r7, #0]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f8d6 	bl	80028e0 <I2C_IsErrorOccurred>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e041      	b.n	80027c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002744:	d02d      	beq.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002746:	f7ff f8b5 	bl	80018b4 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d302      	bcc.n	800275c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d122      	bne.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	4013      	ands	r3, r2
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	429a      	cmp	r2, r3
 800276a:	bf0c      	ite	eq
 800276c:	2301      	moveq	r3, #1
 800276e:	2300      	movne	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	429a      	cmp	r2, r3
 8002778:	d113      	bne.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e00f      	b.n	80027c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4013      	ands	r3, r2
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d0b4      	beq.n	800272a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027d6:	e033      	b.n	8002840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f87f 	bl	80028e0 <I2C_IsErrorOccurred>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e031      	b.n	8002850 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027f2:	d025      	beq.n	8002840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f4:	f7ff f85e 	bl	80018b4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	429a      	cmp	r2, r3
 8002802:	d302      	bcc.n	800280a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d11a      	bne.n	8002840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b02      	cmp	r3, #2
 8002816:	d013      	beq.n	8002840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e007      	b.n	8002850 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b02      	cmp	r3, #2
 800284c:	d1c4      	bne.n	80027d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002864:	e02f      	b.n	80028c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f838 	bl	80028e0 <I2C_IsErrorOccurred>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e02d      	b.n	80028d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287a:	f7ff f81b 	bl	80018b4 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	d302      	bcc.n	8002890 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d11a      	bne.n	80028c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b20      	cmp	r3, #32
 800289c:	d013      	beq.n	80028c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a2:	f043 0220 	orr.w	r2, r3, #32
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e007      	b.n	80028d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d1c8      	bne.n	8002866 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	@ 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	d068      	beq.n	80029de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2210      	movs	r2, #16
 8002912:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002914:	e049      	b.n	80029aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800291c:	d045      	beq.n	80029aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800291e:	f7fe ffc9 	bl	80018b4 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	429a      	cmp	r2, r3
 800292c:	d302      	bcc.n	8002934 <I2C_IsErrorOccurred+0x54>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d13a      	bne.n	80029aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800293e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002946:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002952:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002956:	d121      	bne.n	800299c <I2C_IsErrorOccurred+0xbc>
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800295e:	d01d      	beq.n	800299c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	2b20      	cmp	r3, #32
 8002964:	d01a      	beq.n	800299c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002974:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002976:	f7fe ff9d 	bl	80018b4 <HAL_GetTick>
 800297a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800297c:	e00e      	b.n	800299c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800297e:	f7fe ff99 	bl	80018b4 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b19      	cmp	r3, #25
 800298a:	d907      	bls.n	800299c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	f043 0320 	orr.w	r3, r3, #32
 8002992:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800299a:	e006      	b.n	80029aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d1e9      	bne.n	800297e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d003      	beq.n	80029c0 <I2C_IsErrorOccurred+0xe0>
 80029b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0aa      	beq.n	8002916 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d103      	bne.n	80029d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2220      	movs	r2, #32
 80029ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	f043 0304 	orr.w	r3, r3, #4
 80029d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00b      	beq.n	8002a08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	f043 0308 	orr.w	r3, r3, #8
 8002a18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00b      	beq.n	8002a4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	f043 0302 	orr.w	r3, r3, #2
 8002a3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01c      	beq.n	8002a8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7ff fe3b 	bl	80026d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b0d      	ldr	r3, [pc, #52]	@ (8002a9c <I2C_IsErrorOccurred+0x1bc>)
 8002a66:	400b      	ands	r3, r1
 8002a68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3728      	adds	r7, #40	@ 0x28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	fe00e800 	.word	0xfe00e800

08002aa0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	817b      	strh	r3, [r7, #10]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ab2:	897b      	ldrh	r3, [r7, #10]
 8002ab4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ab8:	7a7b      	ldrb	r3, [r7, #9]
 8002aba:	041b      	lsls	r3, r3, #16
 8002abc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ac0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ace:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	0d5b      	lsrs	r3, r3, #21
 8002ada:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ade:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <I2C_TransferConfig+0x60>)
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	ea02 0103 	and.w	r1, r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002af2:	bf00      	nop
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	03ff63ff 	.word	0x03ff63ff

08002b04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d138      	bne.n	8002b8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e032      	b.n	8002b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2224      	movs	r2, #36	@ 0x24
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6819      	ldr	r1, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e000      	b.n	8002b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d139      	bne.n	8002c24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e033      	b.n	8002c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2224      	movs	r2, #36	@ 0x24
 8002bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0201 	bic.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e000      	b.n	8002c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
  }
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c38:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40007000 	.word	0x40007000

08002c50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c5e:	d130      	bne.n	8002cc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c60:	4b23      	ldr	r3, [pc, #140]	@ (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c6c:	d038      	beq.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c6e:	4b20      	ldr	r3, [pc, #128]	@ (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c76:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2232      	movs	r2, #50	@ 0x32
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	4a1b      	ldr	r2, [pc, #108]	@ (8002cf8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0c9b      	lsrs	r3, r3, #18
 8002c90:	3301      	adds	r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c94:	e002      	b.n	8002c9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c9c:	4b14      	ldr	r3, [pc, #80]	@ (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ca8:	d102      	bne.n	8002cb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f2      	bne.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cbc:	d110      	bne.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e00f      	b.n	8002ce2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cce:	d007      	beq.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cd0:	4b07      	ldr	r3, [pc, #28]	@ (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cd8:	4a05      	ldr	r2, [pc, #20]	@ (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	431bde83 	.word	0x431bde83

08002cfc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e3ca      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d0e:	4b97      	ldr	r3, [pc, #604]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d18:	4b94      	ldr	r3, [pc, #592]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80e4 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_RCC_OscConfig+0x4a>
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b0c      	cmp	r3, #12
 8002d3a:	f040 808b 	bne.w	8002e54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	f040 8087 	bne.w	8002e54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d46:	4b89      	ldr	r3, [pc, #548]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_RCC_OscConfig+0x62>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e3a2      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	4b82      	ldr	r3, [pc, #520]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d004      	beq.n	8002d78 <HAL_RCC_OscConfig+0x7c>
 8002d6e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d76:	e005      	b.n	8002d84 <HAL_RCC_OscConfig+0x88>
 8002d78:	4b7c      	ldr	r3, [pc, #496]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d223      	bcs.n	8002dd0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fd55 	bl	800383c <RCC_SetFlashLatencyFromMSIRange>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e383      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d9c:	4b73      	ldr	r3, [pc, #460]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a72      	ldr	r2, [pc, #456]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002da2:	f043 0308 	orr.w	r3, r3, #8
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b70      	ldr	r3, [pc, #448]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	496d      	ldr	r1, [pc, #436]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dba:	4b6c      	ldr	r3, [pc, #432]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	4968      	ldr	r1, [pc, #416]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	604b      	str	r3, [r1, #4]
 8002dce:	e025      	b.n	8002e1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd0:	4b66      	ldr	r3, [pc, #408]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a65      	ldr	r2, [pc, #404]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dd6:	f043 0308 	orr.w	r3, r3, #8
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b63      	ldr	r3, [pc, #396]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	4960      	ldr	r1, [pc, #384]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dee:	4b5f      	ldr	r3, [pc, #380]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	495b      	ldr	r1, [pc, #364]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fd15 	bl	800383c <RCC_SetFlashLatencyFromMSIRange>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e343      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e1c:	f000 fc4a 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b52      	ldr	r3, [pc, #328]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	4950      	ldr	r1, [pc, #320]	@ (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
 8002e38:	4a4e      	ldr	r2, [pc, #312]	@ (8002f74 <HAL_RCC_OscConfig+0x278>)
 8002e3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e3c:	4b4e      	ldr	r3, [pc, #312]	@ (8002f78 <HAL_RCC_OscConfig+0x27c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe fce7 	bl	8001814 <HAL_InitTick>
 8002e46:	4603      	mov	r3, r0
 8002e48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d052      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	e327      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d032      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e5c:	4b43      	ldr	r3, [pc, #268]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a42      	ldr	r2, [pc, #264]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e68:	f7fe fd24 	bl	80018b4 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e70:	f7fe fd20 	bl	80018b4 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e310      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e82:	4b3a      	ldr	r3, [pc, #232]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e8e:	4b37      	ldr	r3, [pc, #220]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a36      	ldr	r2, [pc, #216]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e94:	f043 0308 	orr.w	r3, r3, #8
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b34      	ldr	r3, [pc, #208]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4931      	ldr	r1, [pc, #196]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eac:	4b2f      	ldr	r3, [pc, #188]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	492c      	ldr	r1, [pc, #176]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
 8002ec0:	e01a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a29      	ldr	r2, [pc, #164]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ece:	f7fe fcf1 	bl	80018b4 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ed6:	f7fe fced 	bl	80018b4 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e2dd      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ee8:	4b20      	ldr	r3, [pc, #128]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f0      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x1da>
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ef6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d074      	beq.n	8002fee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d005      	beq.n	8002f16 <HAL_RCC_OscConfig+0x21a>
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	2b0c      	cmp	r3, #12
 8002f0e:	d10e      	bne.n	8002f2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d10b      	bne.n	8002f2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f16:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d064      	beq.n	8002fec <HAL_RCC_OscConfig+0x2f0>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d160      	bne.n	8002fec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e2ba      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f36:	d106      	bne.n	8002f46 <HAL_RCC_OscConfig+0x24a>
 8002f38:	4b0c      	ldr	r3, [pc, #48]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	e026      	b.n	8002f94 <HAL_RCC_OscConfig+0x298>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f4e:	d115      	bne.n	8002f7c <HAL_RCC_OscConfig+0x280>
 8002f50:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a05      	ldr	r2, [pc, #20]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b03      	ldr	r3, [pc, #12]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a02      	ldr	r2, [pc, #8]	@ (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	e014      	b.n	8002f94 <HAL_RCC_OscConfig+0x298>
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	08009944 	.word	0x08009944
 8002f74:	20000000 	.word	0x20000000
 8002f78:	20000004 	.word	0x20000004
 8002f7c:	4ba0      	ldr	r3, [pc, #640]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a9f      	ldr	r2, [pc, #636]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b9d      	ldr	r3, [pc, #628]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a9c      	ldr	r2, [pc, #624]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fc8a 	bl	80018b4 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fc86 	bl	80018b4 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	@ 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e276      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fb6:	4b92      	ldr	r3, [pc, #584]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x2a8>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fc76 	bl	80018b4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7fe fc72 	bl	80018b4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	@ 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e262      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fde:	4b88      	ldr	r3, [pc, #544]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x2d0>
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d060      	beq.n	80030bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_OscConfig+0x310>
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d119      	bne.n	800303a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d116      	bne.n	800303a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800300c:	4b7c      	ldr	r3, [pc, #496]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_OscConfig+0x328>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e23f      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	4b76      	ldr	r3, [pc, #472]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	4973      	ldr	r1, [pc, #460]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003038:	e040      	b.n	80030bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d023      	beq.n	800308a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003042:	4b6f      	ldr	r3, [pc, #444]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a6e      	ldr	r2, [pc, #440]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8003048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800304c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fe fc31 	bl	80018b4 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003056:	f7fe fc2d 	bl	80018b4 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e21d      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003068:	4b65      	ldr	r3, [pc, #404]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4b62      	ldr	r3, [pc, #392]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	495f      	ldr	r1, [pc, #380]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
 8003088:	e018      	b.n	80030bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308a:	4b5d      	ldr	r3, [pc, #372]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a5c      	ldr	r2, [pc, #368]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8003090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003096:	f7fe fc0d 	bl	80018b4 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309e:	f7fe fc09 	bl	80018b4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e1f9      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030b0:	4b53      	ldr	r3, [pc, #332]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f0      	bne.n	800309e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d03c      	beq.n	8003142 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01c      	beq.n	800310a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 80030d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7fe fbe8 	bl	80018b4 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e8:	f7fe fbe4 	bl	80018b4 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e1d4      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030fa:	4b41      	ldr	r3, [pc, #260]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 80030fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ef      	beq.n	80030e8 <HAL_RCC_OscConfig+0x3ec>
 8003108:	e01b      	b.n	8003142 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310a:	4b3d      	ldr	r3, [pc, #244]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 800310c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003110:	4a3b      	ldr	r2, [pc, #236]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311a:	f7fe fbcb 	bl	80018b4 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003122:	f7fe fbc7 	bl	80018b4 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e1b7      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003134:	4b32      	ldr	r3, [pc, #200]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8003136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1ef      	bne.n	8003122 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80a6 	beq.w	800329c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003150:	2300      	movs	r3, #0
 8003152:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003154:	4b2a      	ldr	r3, [pc, #168]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10d      	bne.n	800317c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003160:	4b27      	ldr	r3, [pc, #156]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003164:	4a26      	ldr	r2, [pc, #152]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 8003166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800316a:	6593      	str	r3, [r2, #88]	@ 0x58
 800316c:	4b24      	ldr	r3, [pc, #144]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003178:	2301      	movs	r3, #1
 800317a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317c:	4b21      	ldr	r3, [pc, #132]	@ (8003204 <HAL_RCC_OscConfig+0x508>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d118      	bne.n	80031ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003188:	4b1e      	ldr	r3, [pc, #120]	@ (8003204 <HAL_RCC_OscConfig+0x508>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1d      	ldr	r2, [pc, #116]	@ (8003204 <HAL_RCC_OscConfig+0x508>)
 800318e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003192:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003194:	f7fe fb8e 	bl	80018b4 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319c:	f7fe fb8a 	bl	80018b4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e17a      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ae:	4b15      	ldr	r3, [pc, #84]	@ (8003204 <HAL_RCC_OscConfig+0x508>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d108      	bne.n	80031d4 <HAL_RCC_OscConfig+0x4d8>
 80031c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031d2:	e029      	b.n	8003228 <HAL_RCC_OscConfig+0x52c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b05      	cmp	r3, #5
 80031da:	d115      	bne.n	8003208 <HAL_RCC_OscConfig+0x50c>
 80031dc:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e2:	4a07      	ldr	r2, [pc, #28]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 80031e4:	f043 0304 	orr.w	r3, r3, #4
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031ec:	4b04      	ldr	r3, [pc, #16]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f2:	4a03      	ldr	r2, [pc, #12]	@ (8003200 <HAL_RCC_OscConfig+0x504>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031fc:	e014      	b.n	8003228 <HAL_RCC_OscConfig+0x52c>
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	40007000 	.word	0x40007000
 8003208:	4b9c      	ldr	r3, [pc, #624]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320e:	4a9b      	ldr	r2, [pc, #620]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003218:	4b98      	ldr	r3, [pc, #608]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321e:	4a97      	ldr	r2, [pc, #604]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 8003220:	f023 0304 	bic.w	r3, r3, #4
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d016      	beq.n	800325e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fe fb40 	bl	80018b4 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003236:	e00a      	b.n	800324e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fe fb3c 	bl	80018b4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e12a      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800324e:	4b8b      	ldr	r3, [pc, #556]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ed      	beq.n	8003238 <HAL_RCC_OscConfig+0x53c>
 800325c:	e015      	b.n	800328a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325e:	f7fe fb29 	bl	80018b4 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003264:	e00a      	b.n	800327c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003266:	f7fe fb25 	bl	80018b4 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e113      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800327c:	4b7f      	ldr	r3, [pc, #508]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1ed      	bne.n	8003266 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328a:	7ffb      	ldrb	r3, [r7, #31]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d105      	bne.n	800329c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003290:	4b7a      	ldr	r3, [pc, #488]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003294:	4a79      	ldr	r2, [pc, #484]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 8003296:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800329a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80fe 	beq.w	80034a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	f040 80d0 	bne.w	8003450 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032b0:	4b72      	ldr	r3, [pc, #456]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f003 0203 	and.w	r2, r3, #3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d130      	bne.n	8003326 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	3b01      	subs	r3, #1
 80032d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d127      	bne.n	8003326 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d11f      	bne.n	8003326 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032f0:	2a07      	cmp	r2, #7
 80032f2:	bf14      	ite	ne
 80032f4:	2201      	movne	r2, #1
 80032f6:	2200      	moveq	r2, #0
 80032f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d113      	bne.n	8003326 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	3b01      	subs	r3, #1
 800330c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d109      	bne.n	8003326 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	3b01      	subs	r3, #1
 8003320:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d06e      	beq.n	8003404 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b0c      	cmp	r3, #12
 800332a:	d069      	beq.n	8003400 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800332c:	4b53      	ldr	r3, [pc, #332]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003338:	4b50      	ldr	r3, [pc, #320]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0ad      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003348:	4b4c      	ldr	r3, [pc, #304]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a4b      	ldr	r2, [pc, #300]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 800334e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003352:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003354:	f7fe faae 	bl	80018b4 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7fe faaa 	bl	80018b4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e09a      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800336e:	4b43      	ldr	r3, [pc, #268]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800337a:	4b40      	ldr	r3, [pc, #256]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	4b40      	ldr	r3, [pc, #256]	@ (8003480 <HAL_RCC_OscConfig+0x784>)
 8003380:	4013      	ands	r3, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800338a:	3a01      	subs	r2, #1
 800338c:	0112      	lsls	r2, r2, #4
 800338e:	4311      	orrs	r1, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003394:	0212      	lsls	r2, r2, #8
 8003396:	4311      	orrs	r1, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800339c:	0852      	lsrs	r2, r2, #1
 800339e:	3a01      	subs	r2, #1
 80033a0:	0552      	lsls	r2, r2, #21
 80033a2:	4311      	orrs	r1, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033a8:	0852      	lsrs	r2, r2, #1
 80033aa:	3a01      	subs	r2, #1
 80033ac:	0652      	lsls	r2, r2, #25
 80033ae:	4311      	orrs	r1, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033b4:	0912      	lsrs	r2, r2, #4
 80033b6:	0452      	lsls	r2, r2, #17
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4930      	ldr	r1, [pc, #192]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033c0:	4b2e      	ldr	r3, [pc, #184]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a2d      	ldr	r2, [pc, #180]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 80033c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033cc:	4b2b      	ldr	r3, [pc, #172]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a2a      	ldr	r2, [pc, #168]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 80033d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033d8:	f7fe fa6c 	bl	80018b4 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fe fa68 	bl	80018b4 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e058      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f2:	4b22      	ldr	r3, [pc, #136]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033fe:	e050      	b.n	80034a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e04f      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003404:	4b1d      	ldr	r3, [pc, #116]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d148      	bne.n	80034a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003410:	4b1a      	ldr	r3, [pc, #104]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a19      	ldr	r2, [pc, #100]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 8003416:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800341a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800341c:	4b17      	ldr	r3, [pc, #92]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4a16      	ldr	r2, [pc, #88]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 8003422:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003426:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003428:	f7fe fa44 	bl	80018b4 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003430:	f7fe fa40 	bl	80018b4 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e030      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003442:	4b0e      	ldr	r3, [pc, #56]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x734>
 800344e:	e028      	b.n	80034a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2b0c      	cmp	r3, #12
 8003454:	d023      	beq.n	800349e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b09      	ldr	r3, [pc, #36]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a08      	ldr	r2, [pc, #32]	@ (800347c <HAL_RCC_OscConfig+0x780>)
 800345c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fe fa27 	bl	80018b4 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003468:	e00c      	b.n	8003484 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346a:	f7fe fa23 	bl	80018b4 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d905      	bls.n	8003484 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e013      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
 800347c:	40021000 	.word	0x40021000
 8003480:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003484:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <HAL_RCC_OscConfig+0x7b0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1ec      	bne.n	800346a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003490:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <HAL_RCC_OscConfig+0x7b0>)
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	4905      	ldr	r1, [pc, #20]	@ (80034ac <HAL_RCC_OscConfig+0x7b0>)
 8003496:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <HAL_RCC_OscConfig+0x7b4>)
 8003498:	4013      	ands	r3, r2
 800349a:	60cb      	str	r3, [r1, #12]
 800349c:	e001      	b.n	80034a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40021000 	.word	0x40021000
 80034b0:	feeefffc 	.word	0xfeeefffc

080034b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0e7      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c8:	4b75      	ldr	r3, [pc, #468]	@ (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d910      	bls.n	80034f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b72      	ldr	r3, [pc, #456]	@ (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 0207 	bic.w	r2, r3, #7
 80034de:	4970      	ldr	r1, [pc, #448]	@ (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b6e      	ldr	r3, [pc, #440]	@ (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0cf      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d010      	beq.n	8003526 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	4b66      	ldr	r3, [pc, #408]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003510:	429a      	cmp	r2, r3
 8003512:	d908      	bls.n	8003526 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003514:	4b63      	ldr	r3, [pc, #396]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4960      	ldr	r1, [pc, #384]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d04c      	beq.n	80035cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b03      	cmp	r3, #3
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353a:	4b5a      	ldr	r3, [pc, #360]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d121      	bne.n	800358a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0a6      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003552:	4b54      	ldr	r3, [pc, #336]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d115      	bne.n	800358a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e09a      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800356a:	4b4e      	ldr	r3, [pc, #312]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e08e      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800357a:	4b4a      	ldr	r3, [pc, #296]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e086      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800358a:	4b46      	ldr	r3, [pc, #280]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f023 0203 	bic.w	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4943      	ldr	r1, [pc, #268]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003598:	4313      	orrs	r3, r2
 800359a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800359c:	f7fe f98a 	bl	80018b4 <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a4:	f7fe f986 	bl	80018b4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e06e      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	4b3a      	ldr	r3, [pc, #232]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 020c 	and.w	r2, r3, #12
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d1eb      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d010      	beq.n	80035fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	4b31      	ldr	r3, [pc, #196]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d208      	bcs.n	80035fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e8:	4b2e      	ldr	r3, [pc, #184]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	492b      	ldr	r1, [pc, #172]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035fa:	4b29      	ldr	r3, [pc, #164]	@ (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d210      	bcs.n	800362a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003608:	4b25      	ldr	r3, [pc, #148]	@ (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 0207 	bic.w	r2, r3, #7
 8003610:	4923      	ldr	r1, [pc, #140]	@ (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003618:	4b21      	ldr	r3, [pc, #132]	@ (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d001      	beq.n	800362a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e036      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003636:	4b1b      	ldr	r3, [pc, #108]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	4918      	ldr	r1, [pc, #96]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003644:	4313      	orrs	r3, r2
 8003646:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003654:	4b13      	ldr	r3, [pc, #76]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4910      	ldr	r1, [pc, #64]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003664:	4313      	orrs	r3, r2
 8003666:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003668:	f000 f824 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	490b      	ldr	r1, [pc, #44]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f4>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
 8003684:	4a09      	ldr	r2, [pc, #36]	@ (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 8003686:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003688:	4b09      	ldr	r3, [pc, #36]	@ (80036b0 <HAL_RCC_ClockConfig+0x1fc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fe f8c1 	bl	8001814 <HAL_InitTick>
 8003692:	4603      	mov	r3, r0
 8003694:	72fb      	strb	r3, [r7, #11]

  return status;
 8003696:	7afb      	ldrb	r3, [r7, #11]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40022000 	.word	0x40022000
 80036a4:	40021000 	.word	0x40021000
 80036a8:	08009944 	.word	0x08009944
 80036ac:	20000000 	.word	0x20000000
 80036b0:	20000004 	.word	0x20000004

080036b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	@ 0x24
 80036b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c2:	4b3e      	ldr	r3, [pc, #248]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036cc:	4b3b      	ldr	r3, [pc, #236]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x34>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d121      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d11e      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036e8:	4b34      	ldr	r3, [pc, #208]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036f4:	4b31      	ldr	r3, [pc, #196]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 80036f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	e005      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003704:	4b2d      	ldr	r3, [pc, #180]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003710:	4a2b      	ldr	r2, [pc, #172]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003718:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003724:	e00a      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b04      	cmp	r3, #4
 800372a:	d102      	bne.n	8003732 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800372c:	4b25      	ldr	r3, [pc, #148]	@ (80037c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	e004      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b08      	cmp	r3, #8
 8003736:	d101      	bne.n	800373c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003738:	4b23      	ldr	r3, [pc, #140]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800373a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d134      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003742:	4b1e      	ldr	r3, [pc, #120]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d003      	beq.n	800375a <HAL_RCC_GetSysClockFreq+0xa6>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b03      	cmp	r3, #3
 8003756:	d003      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0xac>
 8003758:	e005      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800375a:	4b1a      	ldr	r3, [pc, #104]	@ (80037c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800375c:	617b      	str	r3, [r7, #20]
      break;
 800375e:	e005      	b.n	800376c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003760:	4b19      	ldr	r3, [pc, #100]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003762:	617b      	str	r3, [r7, #20]
      break;
 8003764:	e002      	b.n	800376c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	617b      	str	r3, [r7, #20]
      break;
 800376a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800376c:	4b13      	ldr	r3, [pc, #76]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	3301      	adds	r3, #1
 8003778:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800377a:	4b10      	ldr	r3, [pc, #64]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	fb03 f202 	mul.w	r2, r3, r2
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	0e5b      	lsrs	r3, r3, #25
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	3301      	adds	r3, #1
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037ac:	69bb      	ldr	r3, [r7, #24]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3724      	adds	r7, #36	@ 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	0800995c 	.word	0x0800995c
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	007a1200 	.word	0x007a1200

080037cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d0:	4b03      	ldr	r3, [pc, #12]	@ (80037e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037d2:	681b      	ldr	r3, [r3, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000000 	.word	0x20000000

080037e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037e8:	f7ff fff0 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4904      	ldr	r1, [pc, #16]	@ (800380c <HAL_RCC_GetPCLK1Freq+0x28>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40021000 	.word	0x40021000
 800380c:	08009954 	.word	0x08009954

08003810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003814:	f7ff ffda 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 8003818:	4602      	mov	r2, r0
 800381a:	4b06      	ldr	r3, [pc, #24]	@ (8003834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	0adb      	lsrs	r3, r3, #11
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	4904      	ldr	r1, [pc, #16]	@ (8003838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003826:	5ccb      	ldrb	r3, [r1, r3]
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40021000 	.word	0x40021000
 8003838:	08009954 	.word	0x08009954

0800383c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003844:	2300      	movs	r3, #0
 8003846:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003848:	4b2a      	ldr	r3, [pc, #168]	@ (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003854:	f7ff f9ee 	bl	8002c34 <HAL_PWREx_GetVoltageRange>
 8003858:	6178      	str	r0, [r7, #20]
 800385a:	e014      	b.n	8003886 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800385c:	4b25      	ldr	r3, [pc, #148]	@ (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800385e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003860:	4a24      	ldr	r2, [pc, #144]	@ (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003866:	6593      	str	r3, [r2, #88]	@ 0x58
 8003868:	4b22      	ldr	r3, [pc, #136]	@ (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800386a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003874:	f7ff f9de 	bl	8002c34 <HAL_PWREx_GetVoltageRange>
 8003878:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800387a:	4b1e      	ldr	r3, [pc, #120]	@ (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387e:	4a1d      	ldr	r2, [pc, #116]	@ (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003884:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800388c:	d10b      	bne.n	80038a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b80      	cmp	r3, #128	@ 0x80
 8003892:	d919      	bls.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2ba0      	cmp	r3, #160	@ 0xa0
 8003898:	d902      	bls.n	80038a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800389a:	2302      	movs	r3, #2
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	e013      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038a0:	2301      	movs	r3, #1
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	e010      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b80      	cmp	r3, #128	@ 0x80
 80038aa:	d902      	bls.n	80038b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038ac:	2303      	movs	r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	e00a      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b80      	cmp	r3, #128	@ 0x80
 80038b6:	d102      	bne.n	80038be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038b8:	2302      	movs	r3, #2
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	e004      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b70      	cmp	r3, #112	@ 0x70
 80038c2:	d101      	bne.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038c4:	2301      	movs	r3, #1
 80038c6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038c8:	4b0b      	ldr	r3, [pc, #44]	@ (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 0207 	bic.w	r2, r3, #7
 80038d0:	4909      	ldr	r1, [pc, #36]	@ (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038d8:	4b07      	ldr	r3, [pc, #28]	@ (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d001      	beq.n	80038ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40022000 	.word	0x40022000

080038fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003904:	2300      	movs	r3, #0
 8003906:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003908:	2300      	movs	r3, #0
 800390a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003914:	2b00      	cmp	r3, #0
 8003916:	d041      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800391c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003920:	d02a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003922:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003926:	d824      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003928:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800392c:	d008      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800392e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003932:	d81e      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003938:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800393c:	d010      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800393e:	e018      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003940:	4b86      	ldr	r3, [pc, #536]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4a85      	ldr	r2, [pc, #532]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800394a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800394c:	e015      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f001 f829 	bl	80049ac <RCCEx_PLLSAI1_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800395e:	e00c      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3320      	adds	r3, #32
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f001 f914 	bl	8004b94 <RCCEx_PLLSAI2_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003970:	e003      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	74fb      	strb	r3, [r7, #19]
      break;
 8003976:	e000      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800397a:	7cfb      	ldrb	r3, [r7, #19]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003980:	4b76      	ldr	r3, [pc, #472]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003986:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800398e:	4973      	ldr	r1, [pc, #460]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003996:	e001      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	7cfb      	ldrb	r3, [r7, #19]
 800399a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d041      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039b0:	d02a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80039b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039b6:	d824      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039bc:	d008      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039c2:	d81e      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039cc:	d010      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039ce:	e018      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039d0:	4b62      	ldr	r3, [pc, #392]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4a61      	ldr	r2, [pc, #388]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039dc:	e015      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 ffe1 	bl	80049ac <RCCEx_PLLSAI1_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039ee:	e00c      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3320      	adds	r3, #32
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 f8cc 	bl	8004b94 <RCCEx_PLLSAI2_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a00:	e003      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	74fb      	strb	r3, [r7, #19]
      break;
 8003a06:	e000      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0a:	7cfb      	ldrb	r3, [r7, #19]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10b      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a10:	4b52      	ldr	r3, [pc, #328]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a16:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a1e:	494f      	ldr	r1, [pc, #316]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a26:	e001      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a28:	7cfb      	ldrb	r3, [r7, #19]
 8003a2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80a0 	beq.w	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a3e:	4b47      	ldr	r3, [pc, #284]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a54:	4b41      	ldr	r3, [pc, #260]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a58:	4a40      	ldr	r2, [pc, #256]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a60:	4b3e      	ldr	r3, [pc, #248]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a70:	4b3b      	ldr	r3, [pc, #236]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a3a      	ldr	r2, [pc, #232]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a7c:	f7fd ff1a 	bl	80018b4 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a82:	e009      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a84:	f7fd ff16 	bl	80018b4 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d902      	bls.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	74fb      	strb	r3, [r7, #19]
        break;
 8003a96:	e005      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a98:	4b31      	ldr	r3, [pc, #196]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ef      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d15c      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01f      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d019      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ac8:	4b24      	ldr	r3, [pc, #144]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ad4:	4b21      	ldr	r3, [pc, #132]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ada:	4a20      	ldr	r2, [pc, #128]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aea:	4a1c      	ldr	r2, [pc, #112]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003af4:	4a19      	ldr	r2, [pc, #100]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d016      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fd fed5 	bl	80018b4 <HAL_GetTick>
 8003b0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0c:	e00b      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0e:	f7fd fed1 	bl	80018b4 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d902      	bls.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	74fb      	strb	r3, [r7, #19]
            break;
 8003b24:	e006      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b26:	4b0d      	ldr	r3, [pc, #52]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0ec      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b34:	7cfb      	ldrb	r3, [r7, #19]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b3a:	4b08      	ldr	r3, [pc, #32]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b4a:	4904      	ldr	r1, [pc, #16]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b52:	e009      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	74bb      	strb	r3, [r7, #18]
 8003b58:	e006      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b68:	7c7b      	ldrb	r3, [r7, #17]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d105      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6e:	4b9e      	ldr	r3, [pc, #632]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b72:	4a9d      	ldr	r2, [pc, #628]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b86:	4b98      	ldr	r3, [pc, #608]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8c:	f023 0203 	bic.w	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b94:	4994      	ldr	r1, [pc, #592]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ba8:	4b8f      	ldr	r3, [pc, #572]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bae:	f023 020c 	bic.w	r2, r3, #12
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb6:	498c      	ldr	r1, [pc, #560]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bca:	4b87      	ldr	r3, [pc, #540]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	4983      	ldr	r1, [pc, #524]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bec:	4b7e      	ldr	r3, [pc, #504]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	497b      	ldr	r1, [pc, #492]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c0e:	4b76      	ldr	r3, [pc, #472]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1c:	4972      	ldr	r1, [pc, #456]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c30:	4b6d      	ldr	r3, [pc, #436]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c3e:	496a      	ldr	r1, [pc, #424]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c52:	4b65      	ldr	r3, [pc, #404]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c60:	4961      	ldr	r1, [pc, #388]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c74:	4b5c      	ldr	r3, [pc, #368]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c82:	4959      	ldr	r1, [pc, #356]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c96:	4b54      	ldr	r3, [pc, #336]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca4:	4950      	ldr	r1, [pc, #320]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc6:	4948      	ldr	r1, [pc, #288]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cda:	4b43      	ldr	r3, [pc, #268]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce8:	493f      	ldr	r1, [pc, #252]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d028      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d0a:	4937      	ldr	r1, [pc, #220]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d1c:	4b32      	ldr	r3, [pc, #200]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a31      	ldr	r2, [pc, #196]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d26:	60d3      	str	r3, [r2, #12]
 8003d28:	e011      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d32:	d10c      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	2101      	movs	r1, #1
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fe36 	bl	80049ac <RCCEx_PLLSAI1_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d028      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d5a:	4b23      	ldr	r3, [pc, #140]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d60:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d68:	491f      	ldr	r1, [pc, #124]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d78:	d106      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d84:	60d3      	str	r3, [r2, #12]
 8003d86:	e011      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d90:	d10c      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	2101      	movs	r1, #1
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fe07 	bl	80049ac <RCCEx_PLLSAI1_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02b      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003db8:	4b0b      	ldr	r3, [pc, #44]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc6:	4908      	ldr	r1, [pc, #32]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dd6:	d109      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd8:	4b03      	ldr	r3, [pc, #12]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a02      	ldr	r2, [pc, #8]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003de2:	60d3      	str	r3, [r2, #12]
 8003de4:	e014      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fdd5 	bl	80049ac <RCCEx_PLLSAI1_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e06:	7cfb      	ldrb	r3, [r7, #19]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d02f      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e22:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e2a:	4928      	ldr	r1, [pc, #160]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e3a:	d10d      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	2102      	movs	r1, #2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fdb2 	bl	80049ac <RCCEx_PLLSAI1_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e4c:	7cfb      	ldrb	r3, [r7, #19]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d014      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e52:	7cfb      	ldrb	r3, [r7, #19]
 8003e54:	74bb      	strb	r3, [r7, #18]
 8003e56:	e011      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3320      	adds	r3, #32
 8003e66:	2102      	movs	r1, #2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fe93 	bl	8004b94 <RCCEx_PLLSAI2_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e72:	7cfb      	ldrb	r3, [r7, #19]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e88:	4b10      	ldr	r3, [pc, #64]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e96:	490d      	ldr	r1, [pc, #52]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003eaa:	4b08      	ldr	r3, [pc, #32]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eba:	4904      	ldr	r1, [pc, #16]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ec2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40021000 	.word	0x40021000

08003ed0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ee2:	d13e      	bne.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003ee4:	4bb2      	ldr	r3, [pc, #712]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eee:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ef6:	d028      	beq.n	8003f4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003efe:	f200 8542 	bhi.w	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f08:	d005      	beq.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f10:	d00e      	beq.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003f12:	f000 bd38 	b.w	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f16:	4ba6      	ldr	r3, [pc, #664]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	f040 8532 	bne.w	800498a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8003f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f2a:	61fb      	str	r3, [r7, #28]
      break;
 8003f2c:	f000 bd2d 	b.w	800498a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003f30:	4b9f      	ldr	r3, [pc, #636]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	f040 8527 	bne.w	800498e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003f40:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003f44:	61fb      	str	r3, [r7, #28]
      break;
 8003f46:	f000 bd22 	b.w	800498e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003f4a:	4b99      	ldr	r3, [pc, #612]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f56:	f040 851c 	bne.w	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8003f5a:	4b96      	ldr	r3, [pc, #600]	@ (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003f5c:	61fb      	str	r3, [r7, #28]
      break;
 8003f5e:	f000 bd18 	b.w	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f62:	4b93      	ldr	r3, [pc, #588]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d036      	beq.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d840      	bhi.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d020      	beq.n	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003f84:	e039      	b.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003f86:	4b8a      	ldr	r3, [pc, #552]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d116      	bne.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003f92:	4b87      	ldr	r3, [pc, #540]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003f9e:	4b84      	ldr	r3, [pc, #528]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	091b      	lsrs	r3, r3, #4
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	e005      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003faa:	4b81      	ldr	r3, [pc, #516]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb0:	0a1b      	lsrs	r3, r3, #8
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	4a80      	ldr	r2, [pc, #512]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003fbe:	e01f      	b.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61bb      	str	r3, [r7, #24]
      break;
 8003fc4:	e01c      	b.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fc6:	4b7a      	ldr	r3, [pc, #488]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd2:	d102      	bne.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003fd4:	4b79      	ldr	r3, [pc, #484]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003fd6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003fd8:	e012      	b.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
      break;
 8003fde:	e00f      	b.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003fe0:	4b73      	ldr	r3, [pc, #460]	@ (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fec:	d102      	bne.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003fee:	4b74      	ldr	r3, [pc, #464]	@ (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003ff0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003ff2:	e005      	b.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61bb      	str	r3, [r7, #24]
      break;
 8003ff8:	e002      	b.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
      break;
 8003ffe:	bf00      	nop
    }

    switch(PeriphClk)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004006:	f000 80dd 	beq.w	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004010:	f200 84c1 	bhi.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800401a:	f000 80d3 	beq.w	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004024:	f200 84b7 	bhi.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402e:	f000 835f 	beq.w	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004038:	f200 84ad 	bhi.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004042:	f000 847e 	beq.w	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800404c:	f200 84a3 	bhi.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004056:	f000 82cd 	beq.w	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004060:	f200 8499 	bhi.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800406a:	f000 80ab 	beq.w	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004074:	f200 848f 	bhi.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800407e:	f000 8090 	beq.w	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004088:	f200 8485 	bhi.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004092:	d07f      	beq.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800409a:	f200 847c 	bhi.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a4:	f000 8403 	beq.w	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ae:	f200 8472 	bhi.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040b8:	f000 83af 	beq.w	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040c2:	f200 8468 	bhi.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040cc:	f000 8379 	beq.w	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040d6:	f200 845e 	bhi.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b80      	cmp	r3, #128	@ 0x80
 80040de:	f000 8344 	beq.w	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b80      	cmp	r3, #128	@ 0x80
 80040e6:	f200 8456 	bhi.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d84b      	bhi.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 844f 	beq.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	2b1f      	cmp	r3, #31
 80040fe:	f200 844a 	bhi.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004102:	a201      	add	r2, pc, #4	@ (adr r2, 8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004108:	080042f1 	.word	0x080042f1
 800410c:	0800435f 	.word	0x0800435f
 8004110:	08004997 	.word	0x08004997
 8004114:	080043f3 	.word	0x080043f3
 8004118:	08004997 	.word	0x08004997
 800411c:	08004997 	.word	0x08004997
 8004120:	08004997 	.word	0x08004997
 8004124:	08004479 	.word	0x08004479
 8004128:	08004997 	.word	0x08004997
 800412c:	08004997 	.word	0x08004997
 8004130:	08004997 	.word	0x08004997
 8004134:	08004997 	.word	0x08004997
 8004138:	08004997 	.word	0x08004997
 800413c:	08004997 	.word	0x08004997
 8004140:	08004997 	.word	0x08004997
 8004144:	080044f1 	.word	0x080044f1
 8004148:	08004997 	.word	0x08004997
 800414c:	08004997 	.word	0x08004997
 8004150:	08004997 	.word	0x08004997
 8004154:	08004997 	.word	0x08004997
 8004158:	08004997 	.word	0x08004997
 800415c:	08004997 	.word	0x08004997
 8004160:	08004997 	.word	0x08004997
 8004164:	08004997 	.word	0x08004997
 8004168:	08004997 	.word	0x08004997
 800416c:	08004997 	.word	0x08004997
 8004170:	08004997 	.word	0x08004997
 8004174:	08004997 	.word	0x08004997
 8004178:	08004997 	.word	0x08004997
 800417c:	08004997 	.word	0x08004997
 8004180:	08004997 	.word	0x08004997
 8004184:	08004573 	.word	0x08004573
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b40      	cmp	r3, #64	@ 0x40
 800418c:	f000 82c1 	beq.w	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004190:	f000 bc01 	b.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004194:	69b9      	ldr	r1, [r7, #24]
 8004196:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800419a:	f000 fdd9 	bl	8004d50 <RCCEx_GetSAIxPeriphCLKFreq>
 800419e:	61f8      	str	r0, [r7, #28]
      break;
 80041a0:	e3fa      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80041a2:	69b9      	ldr	r1, [r7, #24]
 80041a4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80041a8:	f000 fdd2 	bl	8004d50 <RCCEx_GetSAIxPeriphCLKFreq>
 80041ac:	61f8      	str	r0, [r7, #28]
      break;
 80041ae:	e3f3      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80041b0:	40021000 	.word	0x40021000
 80041b4:	0003d090 	.word	0x0003d090
 80041b8:	0800995c 	.word	0x0800995c
 80041bc:	00f42400 	.word	0x00f42400
 80041c0:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80041c4:	4ba9      	ldr	r3, [pc, #676]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ca:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80041d6:	d00c      	beq.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80041de:	d87f      	bhi.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041e6:	d04e      	beq.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041ee:	d01d      	beq.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80041f0:	e076      	b.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80041f2:	4b9e      	ldr	r3, [pc, #632]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d172      	bne.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80041fe:	4b9b      	ldr	r3, [pc, #620]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 800420a:	4b98      	ldr	r3, [pc, #608]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	e005      	b.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8004216:	4b95      	ldr	r3, [pc, #596]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	4a93      	ldr	r2, [pc, #588]	@ (8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004228:	61fb      	str	r3, [r7, #28]
          break;
 800422a:	e05b      	b.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800422c:	4b8f      	ldr	r3, [pc, #572]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004234:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004238:	d156      	bne.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800423a:	4b8c      	ldr	r3, [pc, #560]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004246:	d14f      	bne.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004248:	4b88      	ldr	r3, [pc, #544]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004252:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	fb03 f202 	mul.w	r2, r3, r2
 800425c:	4b83      	ldr	r3, [pc, #524]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	3301      	adds	r3, #1
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800426e:	4b7f      	ldr	r3, [pc, #508]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	0d5b      	lsrs	r3, r3, #21
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	3301      	adds	r3, #1
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004282:	61fb      	str	r3, [r7, #28]
          break;
 8004284:	e030      	b.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004286:	4b79      	ldr	r3, [pc, #484]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800428e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004292:	d12b      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004294:	4b75      	ldr	r3, [pc, #468]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800429c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042a0:	d124      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80042a2:	4b72      	ldr	r3, [pc, #456]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	0a1b      	lsrs	r3, r3, #8
 80042a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ac:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	fb03 f202 	mul.w	r2, r3, r2
 80042b6:	4b6d      	ldr	r3, [pc, #436]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	091b      	lsrs	r3, r3, #4
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	3301      	adds	r3, #1
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80042c8:	4b68      	ldr	r3, [pc, #416]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	0d5b      	lsrs	r3, r3, #21
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	3301      	adds	r3, #1
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042dc:	61fb      	str	r3, [r7, #28]
          break;
 80042de:	e005      	b.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80042e0:	bf00      	nop
 80042e2:	e359      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042e4:	bf00      	nop
 80042e6:	e357      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042e8:	bf00      	nop
 80042ea:	e355      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042ec:	bf00      	nop
        break;
 80042ee:	e353      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80042f0:	4b5e      	ldr	r3, [pc, #376]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d827      	bhi.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8004302:	a201      	add	r2, pc, #4	@ (adr r2, 8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	08004319 	.word	0x08004319
 800430c:	08004321 	.word	0x08004321
 8004310:	08004329 	.word	0x08004329
 8004314:	0800433d 	.word	0x0800433d
          frequency = HAL_RCC_GetPCLK2Freq();
 8004318:	f7ff fa7a 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 800431c:	61f8      	str	r0, [r7, #28]
          break;
 800431e:	e01d      	b.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004320:	f7ff f9c8 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8004324:	61f8      	str	r0, [r7, #28]
          break;
 8004326:	e019      	b.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004328:	4b50      	ldr	r3, [pc, #320]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004334:	d10f      	bne.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8004336:	4b4f      	ldr	r3, [pc, #316]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004338:	61fb      	str	r3, [r7, #28]
          break;
 800433a:	e00c      	b.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800433c:	4b4b      	ldr	r3, [pc, #300]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b02      	cmp	r3, #2
 8004348:	d107      	bne.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800434a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800434e:	61fb      	str	r3, [r7, #28]
          break;
 8004350:	e003      	b.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8004352:	bf00      	nop
 8004354:	e320      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004356:	bf00      	nop
 8004358:	e31e      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800435a:	bf00      	nop
        break;
 800435c:	e31c      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800435e:	4b43      	ldr	r3, [pc, #268]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004364:	f003 030c 	and.w	r3, r3, #12
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b0c      	cmp	r3, #12
 800436e:	d83a      	bhi.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004370:	a201      	add	r2, pc, #4	@ (adr r2, 8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004376:	bf00      	nop
 8004378:	080043ad 	.word	0x080043ad
 800437c:	080043e7 	.word	0x080043e7
 8004380:	080043e7 	.word	0x080043e7
 8004384:	080043e7 	.word	0x080043e7
 8004388:	080043b5 	.word	0x080043b5
 800438c:	080043e7 	.word	0x080043e7
 8004390:	080043e7 	.word	0x080043e7
 8004394:	080043e7 	.word	0x080043e7
 8004398:	080043bd 	.word	0x080043bd
 800439c:	080043e7 	.word	0x080043e7
 80043a0:	080043e7 	.word	0x080043e7
 80043a4:	080043e7 	.word	0x080043e7
 80043a8:	080043d1 	.word	0x080043d1
          frequency = HAL_RCC_GetPCLK1Freq();
 80043ac:	f7ff fa1a 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 80043b0:	61f8      	str	r0, [r7, #28]
          break;
 80043b2:	e01d      	b.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80043b4:	f7ff f97e 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 80043b8:	61f8      	str	r0, [r7, #28]
          break;
 80043ba:	e019      	b.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043bc:	4b2b      	ldr	r3, [pc, #172]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c8:	d10f      	bne.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80043ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80043cc:	61fb      	str	r3, [r7, #28]
          break;
 80043ce:	e00c      	b.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043d0:	4b26      	ldr	r3, [pc, #152]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d107      	bne.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80043de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043e2:	61fb      	str	r3, [r7, #28]
          break;
 80043e4:	e003      	b.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80043e6:	bf00      	nop
 80043e8:	e2d6      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043ea:	bf00      	nop
 80043ec:	e2d4      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043ee:	bf00      	nop
        break;
 80043f0:	e2d2      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80043f2:	4b1e      	ldr	r3, [pc, #120]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b30      	cmp	r3, #48	@ 0x30
 8004402:	d021      	beq.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b30      	cmp	r3, #48	@ 0x30
 8004408:	d829      	bhi.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b20      	cmp	r3, #32
 800440e:	d011      	beq.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b20      	cmp	r3, #32
 8004414:	d823      	bhi.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b10      	cmp	r3, #16
 8004420:	d004      	beq.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8004422:	e01c      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004424:	f7ff f9de 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8004428:	61f8      	str	r0, [r7, #28]
          break;
 800442a:	e01d      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 800442c:	f7ff f942 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8004430:	61f8      	str	r0, [r7, #28]
          break;
 8004432:	e019      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004434:	4b0d      	ldr	r3, [pc, #52]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004440:	d10f      	bne.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8004442:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004444:	61fb      	str	r3, [r7, #28]
          break;
 8004446:	e00c      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004448:	4b08      	ldr	r3, [pc, #32]	@ (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b02      	cmp	r3, #2
 8004454:	d107      	bne.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800445a:	61fb      	str	r3, [r7, #28]
          break;
 800445c:	e003      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800445e:	bf00      	nop
 8004460:	e29a      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004462:	bf00      	nop
 8004464:	e298      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004466:	bf00      	nop
        break;
 8004468:	e296      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800446a:	bf00      	nop
 800446c:	40021000 	.word	0x40021000
 8004470:	0800995c 	.word	0x0800995c
 8004474:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004478:	4b9b      	ldr	r3, [pc, #620]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800447e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2bc0      	cmp	r3, #192	@ 0xc0
 8004488:	d021      	beq.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2bc0      	cmp	r3, #192	@ 0xc0
 800448e:	d829      	bhi.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b80      	cmp	r3, #128	@ 0x80
 8004494:	d011      	beq.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2b80      	cmp	r3, #128	@ 0x80
 800449a:	d823      	bhi.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b40      	cmp	r3, #64	@ 0x40
 80044a6:	d004      	beq.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80044a8:	e01c      	b.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044aa:	f7ff f99b 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 80044ae:	61f8      	str	r0, [r7, #28]
          break;
 80044b0:	e01d      	b.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80044b2:	f7ff f8ff 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 80044b6:	61f8      	str	r0, [r7, #28]
          break;
 80044b8:	e019      	b.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044ba:	4b8b      	ldr	r3, [pc, #556]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c6:	d10f      	bne.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80044c8:	4b88      	ldr	r3, [pc, #544]	@ (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80044ca:	61fb      	str	r3, [r7, #28]
          break;
 80044cc:	e00c      	b.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044ce:	4b86      	ldr	r3, [pc, #536]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d107      	bne.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80044dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044e0:	61fb      	str	r3, [r7, #28]
          break;
 80044e2:	e003      	b.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80044e4:	bf00      	nop
 80044e6:	e257      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044e8:	bf00      	nop
 80044ea:	e255      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044ec:	bf00      	nop
        break;
 80044ee:	e253      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80044f0:	4b7d      	ldr	r3, [pc, #500]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004502:	d025      	beq.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800450a:	d82c      	bhi.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004512:	d013      	beq.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800451a:	d824      	bhi.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d004      	beq.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004528:	d004      	beq.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800452a:	e01c      	b.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 800452c:	f7ff f95a 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8004530:	61f8      	str	r0, [r7, #28]
          break;
 8004532:	e01d      	b.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004534:	f7ff f8be 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8004538:	61f8      	str	r0, [r7, #28]
          break;
 800453a:	e019      	b.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800453c:	4b6a      	ldr	r3, [pc, #424]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004548:	d10f      	bne.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800454a:	4b68      	ldr	r3, [pc, #416]	@ (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800454c:	61fb      	str	r3, [r7, #28]
          break;
 800454e:	e00c      	b.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004550:	4b65      	ldr	r3, [pc, #404]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b02      	cmp	r3, #2
 800455c:	d107      	bne.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800455e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004562:	61fb      	str	r3, [r7, #28]
          break;
 8004564:	e003      	b.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004566:	bf00      	nop
 8004568:	e216      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800456a:	bf00      	nop
 800456c:	e214      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800456e:	bf00      	nop
        break;
 8004570:	e212      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004572:	4b5d      	ldr	r3, [pc, #372]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004584:	d025      	beq.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800458c:	d82c      	bhi.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004594:	d013      	beq.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800459c:	d824      	bhi.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d004      	beq.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045aa:	d004      	beq.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80045ac:	e01c      	b.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045ae:	f7ff f919 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 80045b2:	61f8      	str	r0, [r7, #28]
          break;
 80045b4:	e01d      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80045b6:	f7ff f87d 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 80045ba:	61f8      	str	r0, [r7, #28]
          break;
 80045bc:	e019      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045be:	4b4a      	ldr	r3, [pc, #296]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ca:	d10f      	bne.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80045cc:	4b47      	ldr	r3, [pc, #284]	@ (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80045ce:	61fb      	str	r3, [r7, #28]
          break;
 80045d0:	e00c      	b.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045d2:	4b45      	ldr	r3, [pc, #276]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d107      	bne.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80045e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045e4:	61fb      	str	r3, [r7, #28]
          break;
 80045e6:	e003      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80045e8:	bf00      	nop
 80045ea:	e1d5      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045ec:	bf00      	nop
 80045ee:	e1d3      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045f0:	bf00      	nop
        break;
 80045f2:	e1d1      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80045f4:	4b3c      	ldr	r3, [pc, #240]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004606:	d00c      	beq.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800460e:	d864      	bhi.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004616:	d008      	beq.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800461e:	d030      	beq.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004620:	e05b      	b.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004622:	f7ff f847 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8004626:	61f8      	str	r0, [r7, #28]
          break;
 8004628:	e05c      	b.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800462a:	4b2f      	ldr	r3, [pc, #188]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004632:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004636:	d152      	bne.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004638:	4b2b      	ldr	r3, [pc, #172]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d04c      	beq.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004644:	4b28      	ldr	r3, [pc, #160]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	0a1b      	lsrs	r3, r3, #8
 800464a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800464e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	fb03 f202 	mul.w	r2, r3, r2
 8004658:	4b23      	ldr	r3, [pc, #140]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	091b      	lsrs	r3, r3, #4
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	3301      	adds	r3, #1
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800466a:	4b1f      	ldr	r3, [pc, #124]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	0e5b      	lsrs	r3, r3, #25
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	3301      	adds	r3, #1
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	fbb2 f3f3 	udiv	r3, r2, r3
 800467e:	61fb      	str	r3, [r7, #28]
          break;
 8004680:	e02d      	b.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004682:	4b19      	ldr	r3, [pc, #100]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800468a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800468e:	d128      	bne.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004690:	4b15      	ldr	r3, [pc, #84]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d022      	beq.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800469c:	4b12      	ldr	r3, [pc, #72]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046a6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	fb03 f202 	mul.w	r2, r3, r2
 80046b0:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	3301      	adds	r3, #1
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80046c2:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	0e5b      	lsrs	r3, r3, #25
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	3301      	adds	r3, #1
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d6:	61fb      	str	r3, [r7, #28]
          break;
 80046d8:	e003      	b.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80046da:	bf00      	nop
 80046dc:	e15c      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046de:	bf00      	nop
 80046e0:	e15a      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046e2:	bf00      	nop
        break;
 80046e4:	e158      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
 80046ec:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80046f0:	4b9d      	ldr	r3, [pc, #628]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046fa:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004702:	f7ff f885 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 8004706:	61f8      	str	r0, [r7, #28]
        break;
 8004708:	e146      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800470a:	f7fe ffd3 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 800470e:	61f8      	str	r0, [r7, #28]
        break;
 8004710:	e142      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004712:	4b95      	ldr	r3, [pc, #596]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004718:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004724:	d013      	beq.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800472c:	d819      	bhi.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d004      	beq.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800473a:	d004      	beq.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 800473c:	e011      	b.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800473e:	f7ff f851 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8004742:	61f8      	str	r0, [r7, #28]
          break;
 8004744:	e010      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004746:	f7fe ffb5 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 800474a:	61f8      	str	r0, [r7, #28]
          break;
 800474c:	e00c      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800474e:	4b86      	ldr	r3, [pc, #536]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800475a:	d104      	bne.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800475c:	4b83      	ldr	r3, [pc, #524]	@ (800496c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800475e:	61fb      	str	r3, [r7, #28]
          break;
 8004760:	e001      	b.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004762:	bf00      	nop
 8004764:	e118      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004766:	bf00      	nop
        break;
 8004768:	e116      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800476a:	4b7f      	ldr	r3, [pc, #508]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004770:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800477c:	d013      	beq.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004784:	d819      	bhi.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004792:	d004      	beq.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004794:	e011      	b.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004796:	f7ff f825 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 800479a:	61f8      	str	r0, [r7, #28]
          break;
 800479c:	e010      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800479e:	f7fe ff89 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 80047a2:	61f8      	str	r0, [r7, #28]
          break;
 80047a4:	e00c      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047a6:	4b70      	ldr	r3, [pc, #448]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b2:	d104      	bne.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80047b4:	4b6d      	ldr	r3, [pc, #436]	@ (800496c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80047b6:	61fb      	str	r3, [r7, #28]
          break;
 80047b8:	e001      	b.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80047ba:	bf00      	nop
 80047bc:	e0ec      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047be:	bf00      	nop
        break;
 80047c0:	e0ea      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80047c2:	4b69      	ldr	r3, [pc, #420]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047d4:	d013      	beq.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047dc:	d819      	bhi.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d004      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ea:	d004      	beq.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80047ec:	e011      	b.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80047ee:	f7fe fff9 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 80047f2:	61f8      	str	r0, [r7, #28]
          break;
 80047f4:	e010      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80047f6:	f7fe ff5d 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 80047fa:	61f8      	str	r0, [r7, #28]
          break;
 80047fc:	e00c      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047fe:	4b5a      	ldr	r3, [pc, #360]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800480a:	d104      	bne.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 800480c:	4b57      	ldr	r3, [pc, #348]	@ (800496c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800480e:	61fb      	str	r3, [r7, #28]
          break;
 8004810:	e001      	b.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004812:	bf00      	nop
 8004814:	e0c0      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004816:	bf00      	nop
        break;
 8004818:	e0be      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800481a:	4b53      	ldr	r3, [pc, #332]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004820:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800482c:	d02c      	beq.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004834:	d833      	bhi.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800483c:	d01a      	beq.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004844:	d82b      	bhi.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d004      	beq.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004852:	d004      	beq.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004854:	e023      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004856:	f7fe ffc5 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 800485a:	61f8      	str	r0, [r7, #28]
          break;
 800485c:	e026      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800485e:	4b42      	ldr	r3, [pc, #264]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b02      	cmp	r3, #2
 800486a:	d11a      	bne.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 800486c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004870:	61fb      	str	r3, [r7, #28]
          break;
 8004872:	e016      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004874:	4b3c      	ldr	r3, [pc, #240]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800487c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004880:	d111      	bne.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004882:	4b3a      	ldr	r3, [pc, #232]	@ (800496c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004884:	61fb      	str	r3, [r7, #28]
          break;
 8004886:	e00e      	b.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004888:	4b37      	ldr	r3, [pc, #220]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b02      	cmp	r3, #2
 8004894:	d109      	bne.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800489a:	61fb      	str	r3, [r7, #28]
          break;
 800489c:	e005      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800489e:	bf00      	nop
 80048a0:	e07a      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80048a2:	bf00      	nop
 80048a4:	e078      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80048a6:	bf00      	nop
 80048a8:	e076      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80048aa:	bf00      	nop
        break;
 80048ac:	e074      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80048ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048c0:	d02c      	beq.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048c8:	d833      	bhi.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048d0:	d01a      	beq.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048d8:	d82b      	bhi.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d004      	beq.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048e6:	d004      	beq.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80048e8:	e023      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048ea:	f7fe ff7b 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 80048ee:	61f8      	str	r0, [r7, #28]
          break;
 80048f0:	e026      	b.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80048f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80048f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d11a      	bne.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004900:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004904:	61fb      	str	r3, [r7, #28]
          break;
 8004906:	e016      	b.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004908:	4b17      	ldr	r3, [pc, #92]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004914:	d111      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004916:	4b15      	ldr	r3, [pc, #84]	@ (800496c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004918:	61fb      	str	r3, [r7, #28]
          break;
 800491a:	e00e      	b.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800491c:	4b12      	ldr	r3, [pc, #72]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b02      	cmp	r3, #2
 8004928:	d109      	bne.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800492a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800492e:	61fb      	str	r3, [r7, #28]
          break;
 8004930:	e005      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004932:	bf00      	nop
 8004934:	e030      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004936:	bf00      	nop
 8004938:	e02e      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800493a:	bf00      	nop
 800493c:	e02c      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800493e:	bf00      	nop
        break;
 8004940:	e02a      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004942:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004948:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d004      	beq.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800495a:	d009      	beq.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 800495c:	e012      	b.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800495e:	f7fe ff41 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8004962:	61f8      	str	r0, [r7, #28]
          break;
 8004964:	e00e      	b.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000
 800496c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004970:	4b0c      	ldr	r3, [pc, #48]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497c:	d101      	bne.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800497e:	4b0a      	ldr	r3, [pc, #40]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004980:	61fb      	str	r3, [r7, #28]
          break;
 8004982:	bf00      	nop
        break;
 8004984:	e008      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004986:	bf00      	nop
 8004988:	e006      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800498a:	bf00      	nop
 800498c:	e004      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800498e:	bf00      	nop
 8004990:	e002      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004992:	bf00      	nop
 8004994:	e000      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004996:	bf00      	nop
    }
  }

  return(frequency);
 8004998:	69fb      	ldr	r3, [r7, #28]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40021000 	.word	0x40021000
 80049a8:	00f42400 	.word	0x00f42400

080049ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ba:	4b75      	ldr	r3, [pc, #468]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d018      	beq.n	80049f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049c6:	4b72      	ldr	r3, [pc, #456]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0203 	and.w	r2, r3, #3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d10d      	bne.n	80049f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
       ||
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049de:	4b6c      	ldr	r3, [pc, #432]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
       ||
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d047      	beq.n	8004a82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
 80049f6:	e044      	b.n	8004a82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d018      	beq.n	8004a32 <RCCEx_PLLSAI1_Config+0x86>
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d825      	bhi.n	8004a50 <RCCEx_PLLSAI1_Config+0xa4>
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d002      	beq.n	8004a0e <RCCEx_PLLSAI1_Config+0x62>
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d009      	beq.n	8004a20 <RCCEx_PLLSAI1_Config+0x74>
 8004a0c:	e020      	b.n	8004a50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a0e:	4b60      	ldr	r3, [pc, #384]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11d      	bne.n	8004a56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a1e:	e01a      	b.n	8004a56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a20:	4b5b      	ldr	r3, [pc, #364]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d116      	bne.n	8004a5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a30:	e013      	b.n	8004a5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a32:	4b57      	ldr	r3, [pc, #348]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10f      	bne.n	8004a5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a3e:	4b54      	ldr	r3, [pc, #336]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a4e:	e006      	b.n	8004a5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
      break;
 8004a54:	e004      	b.n	8004a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a56:	bf00      	nop
 8004a58:	e002      	b.n	8004a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e000      	b.n	8004a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10d      	bne.n	8004a82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a66:	4b4a      	ldr	r3, [pc, #296]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6819      	ldr	r1, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	4944      	ldr	r1, [pc, #272]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d17d      	bne.n	8004b84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a88:	4b41      	ldr	r3, [pc, #260]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a40      	ldr	r2, [pc, #256]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a94:	f7fc ff0e 	bl	80018b4 <HAL_GetTick>
 8004a98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a9a:	e009      	b.n	8004ab0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a9c:	f7fc ff0a 	bl	80018b4 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d902      	bls.n	8004ab0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	73fb      	strb	r3, [r7, #15]
        break;
 8004aae:	e005      	b.n	8004abc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ab0:	4b37      	ldr	r3, [pc, #220]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ef      	bne.n	8004a9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d160      	bne.n	8004b84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d111      	bne.n	8004aec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ac8:	4b31      	ldr	r3, [pc, #196]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6892      	ldr	r2, [r2, #8]
 8004ad8:	0211      	lsls	r1, r2, #8
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68d2      	ldr	r2, [r2, #12]
 8004ade:	0912      	lsrs	r2, r2, #4
 8004ae0:	0452      	lsls	r2, r2, #17
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	492a      	ldr	r1, [pc, #168]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	610b      	str	r3, [r1, #16]
 8004aea:	e027      	b.n	8004b3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d112      	bne.n	8004b18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004af2:	4b27      	ldr	r3, [pc, #156]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004afa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6892      	ldr	r2, [r2, #8]
 8004b02:	0211      	lsls	r1, r2, #8
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6912      	ldr	r2, [r2, #16]
 8004b08:	0852      	lsrs	r2, r2, #1
 8004b0a:	3a01      	subs	r2, #1
 8004b0c:	0552      	lsls	r2, r2, #21
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	491f      	ldr	r1, [pc, #124]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	610b      	str	r3, [r1, #16]
 8004b16:	e011      	b.n	8004b3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b18:	4b1d      	ldr	r3, [pc, #116]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6892      	ldr	r2, [r2, #8]
 8004b28:	0211      	lsls	r1, r2, #8
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6952      	ldr	r2, [r2, #20]
 8004b2e:	0852      	lsrs	r2, r2, #1
 8004b30:	3a01      	subs	r2, #1
 8004b32:	0652      	lsls	r2, r2, #25
 8004b34:	430a      	orrs	r2, r1
 8004b36:	4916      	ldr	r1, [pc, #88]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b3c:	4b14      	ldr	r3, [pc, #80]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a13      	ldr	r2, [pc, #76]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b48:	f7fc feb4 	bl	80018b4 <HAL_GetTick>
 8004b4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b4e:	e009      	b.n	8004b64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b50:	f7fc feb0 	bl	80018b4 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d902      	bls.n	8004b64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	73fb      	strb	r3, [r7, #15]
          break;
 8004b62:	e005      	b.n	8004b70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b64:	4b0a      	ldr	r3, [pc, #40]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ef      	beq.n	8004b50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b76:	4b06      	ldr	r3, [pc, #24]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	4904      	ldr	r1, [pc, #16]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40021000 	.word	0x40021000

08004b94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d018      	beq.n	8004be0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004bae:	4b67      	ldr	r3, [pc, #412]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f003 0203 	and.w	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d10d      	bne.n	8004bda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
       ||
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004bc6:	4b61      	ldr	r3, [pc, #388]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	091b      	lsrs	r3, r3, #4
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
       ||
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d047      	beq.n	8004c6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	73fb      	strb	r3, [r7, #15]
 8004bde:	e044      	b.n	8004c6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d018      	beq.n	8004c1a <RCCEx_PLLSAI2_Config+0x86>
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d825      	bhi.n	8004c38 <RCCEx_PLLSAI2_Config+0xa4>
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d002      	beq.n	8004bf6 <RCCEx_PLLSAI2_Config+0x62>
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d009      	beq.n	8004c08 <RCCEx_PLLSAI2_Config+0x74>
 8004bf4:	e020      	b.n	8004c38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bf6:	4b55      	ldr	r3, [pc, #340]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d11d      	bne.n	8004c3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c06:	e01a      	b.n	8004c3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c08:	4b50      	ldr	r3, [pc, #320]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d116      	bne.n	8004c42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c18:	e013      	b.n	8004c42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c1a:	4b4c      	ldr	r3, [pc, #304]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10f      	bne.n	8004c46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c26:	4b49      	ldr	r3, [pc, #292]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c36:	e006      	b.n	8004c46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3c:	e004      	b.n	8004c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e002      	b.n	8004c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c46:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10d      	bne.n	8004c6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6819      	ldr	r1, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	430b      	orrs	r3, r1
 8004c64:	4939      	ldr	r1, [pc, #228]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d167      	bne.n	8004d40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c70:	4b36      	ldr	r3, [pc, #216]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a35      	ldr	r2, [pc, #212]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7c:	f7fc fe1a 	bl	80018b4 <HAL_GetTick>
 8004c80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c82:	e009      	b.n	8004c98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c84:	f7fc fe16 	bl	80018b4 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d902      	bls.n	8004c98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	73fb      	strb	r3, [r7, #15]
        break;
 8004c96:	e005      	b.n	8004ca4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c98:	4b2c      	ldr	r3, [pc, #176]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ef      	bne.n	8004c84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d14a      	bne.n	8004d40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d111      	bne.n	8004cd4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cb0:	4b26      	ldr	r3, [pc, #152]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6892      	ldr	r2, [r2, #8]
 8004cc0:	0211      	lsls	r1, r2, #8
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	68d2      	ldr	r2, [r2, #12]
 8004cc6:	0912      	lsrs	r2, r2, #4
 8004cc8:	0452      	lsls	r2, r2, #17
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	491f      	ldr	r1, [pc, #124]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	614b      	str	r3, [r1, #20]
 8004cd2:	e011      	b.n	8004cf8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004cdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6892      	ldr	r2, [r2, #8]
 8004ce4:	0211      	lsls	r1, r2, #8
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6912      	ldr	r2, [r2, #16]
 8004cea:	0852      	lsrs	r2, r2, #1
 8004cec:	3a01      	subs	r2, #1
 8004cee:	0652      	lsls	r2, r2, #25
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	4916      	ldr	r1, [pc, #88]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004cf8:	4b14      	ldr	r3, [pc, #80]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a13      	ldr	r2, [pc, #76]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7fc fdd6 	bl	80018b4 <HAL_GetTick>
 8004d08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d0a:	e009      	b.n	8004d20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d0c:	f7fc fdd2 	bl	80018b4 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d902      	bls.n	8004d20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	73fb      	strb	r3, [r7, #15]
          break;
 8004d1e:	e005      	b.n	8004d2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d20:	4b0a      	ldr	r3, [pc, #40]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0ef      	beq.n	8004d0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d32:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	4904      	ldr	r1, [pc, #16]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000

08004d50 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b089      	sub	sp, #36	@ 0x24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d6c:	d10c      	bne.n	8004d88 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004d6e:	4b6e      	ldr	r3, [pc, #440]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d74:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004d78:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d80:	d112      	bne.n	8004da8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004d82:	4b6a      	ldr	r3, [pc, #424]	@ (8004f2c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	e00f      	b.n	8004da8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d8e:	d10b      	bne.n	8004da8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004d90:	4b65      	ldr	r3, [pc, #404]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d96:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004d9a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004da2:	d101      	bne.n	8004da8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004da4:	4b61      	ldr	r3, [pc, #388]	@ (8004f2c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004da6:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f040 80b4 	bne.w	8004f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dba:	d003      	beq.n	8004dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dc2:	d135      	bne.n	8004e30 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004dc4:	4b58      	ldr	r3, [pc, #352]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dd0:	f040 80a1 	bne.w	8004f16 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004dd4:	4b54      	ldr	r3, [pc, #336]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 809a 	beq.w	8004f16 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004de2:	4b51      	ldr	r3, [pc, #324]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	3301      	adds	r3, #1
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004df6:	4b4c      	ldr	r3, [pc, #304]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e00:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004e08:	4b47      	ldr	r3, [pc, #284]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004e14:	2311      	movs	r3, #17
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	e001      	b.n	8004e1e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004e1a:	2307      	movs	r3, #7
 8004e1c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	fb03 f202 	mul.w	r2, r3, r2
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004e2e:	e072      	b.n	8004f16 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d133      	bne.n	8004e9e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004e36:	4b3c      	ldr	r3, [pc, #240]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e42:	d169      	bne.n	8004f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004e44:	4b38      	ldr	r3, [pc, #224]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d063      	beq.n	8004f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004e50:	4b35      	ldr	r3, [pc, #212]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e62:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004e64:	4b30      	ldr	r3, [pc, #192]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	0a1b      	lsrs	r3, r3, #8
 8004e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e6e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10a      	bne.n	8004e8c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004e76:	4b2c      	ldr	r3, [pc, #176]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004e82:	2311      	movs	r3, #17
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	e001      	b.n	8004e8c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004e88:	2307      	movs	r3, #7
 8004e8a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	fb03 f202 	mul.w	r2, r3, r2
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9a:	61fb      	str	r3, [r7, #28]
 8004e9c:	e03c      	b.n	8004f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ea4:	d003      	beq.n	8004eae <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eac:	d134      	bne.n	8004f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004eae:	4b1e      	ldr	r3, [pc, #120]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eba:	d12d      	bne.n	8004f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d027      	beq.n	8004f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ec8:	4b17      	ldr	r3, [pc, #92]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eda:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004edc:	4b12      	ldr	r3, [pc, #72]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	0a1b      	lsrs	r3, r3, #8
 8004ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ee6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004eee:	4b0e      	ldr	r3, [pc, #56]	@ (8004f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8004efa:	2311      	movs	r3, #17
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	e001      	b.n	8004f04 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004f00:	2307      	movs	r3, #7
 8004f02:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	fb03 f202 	mul.w	r2, r3, r2
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	e000      	b.n	8004f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004f16:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004f18:	69fb      	ldr	r3, [r7, #28]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3724      	adds	r7, #36	@ 0x24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	001fff68 	.word	0x001fff68

08004f30 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d904      	bls.n	8004f4e <HAL_SAI_InitProtocol+0x1e>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	3b03      	subs	r3, #3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d812      	bhi.n	8004f72 <HAL_SAI_InitProtocol+0x42>
 8004f4c:	e008      	b.n	8004f60 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 fba3 	bl	80056a0 <SAI_InitI2S>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f5e:	e00b      	b.n	8004f78 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fc4c 	bl	8005804 <SAI_InitPCM>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f70:	e002      	b.n	8004f78 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
      break;
 8004f76:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d104      	bne.n	8004f88 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f808 	bl	8004f94 <HAL_SAI_Init>
 8004f84:	4603      	mov	r3, r0
 8004f86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e155      	b.n	8005252 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fb fe2c 	bl	8000c18 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fca1 	bl	8005908 <SAI_Disable>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e140      	b.n	8005252 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d00c      	beq.n	8004ffa <HAL_SAI_Init+0x66>
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d80d      	bhi.n	8005000 <HAL_SAI_Init+0x6c>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_SAI_Init+0x5a>
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d003      	beq.n	8004ff4 <HAL_SAI_Init+0x60>
 8004fec:	e008      	b.n	8005000 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
      break;
 8004ff2:	e008      	b.n	8005006 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	61fb      	str	r3, [r7, #28]
      break;
 8004ff8:	e005      	b.n	8005006 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004ffa:	2320      	movs	r3, #32
 8004ffc:	61fb      	str	r3, [r7, #28]
      break;
 8004ffe:	e002      	b.n	8005006 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	61fb      	str	r3, [r7, #28]
      break;
 8005004:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b03      	cmp	r3, #3
 800500c:	d81d      	bhi.n	800504a <HAL_SAI_Init+0xb6>
 800500e:	a201      	add	r2, pc, #4	@ (adr r2, 8005014 <HAL_SAI_Init+0x80>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005025 	.word	0x08005025
 8005018:	0800502b 	.word	0x0800502b
 800501c:	08005033 	.word	0x08005033
 8005020:	0800503b 	.word	0x0800503b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]
      break;
 8005028:	e012      	b.n	8005050 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800502a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800502e:	617b      	str	r3, [r7, #20]
      break;
 8005030:	e00e      	b.n	8005050 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005032:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005036:	617b      	str	r3, [r7, #20]
      break;
 8005038:	e00a      	b.n	8005050 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800503a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800503e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	61fb      	str	r3, [r7, #28]
      break;
 8005048:	e002      	b.n	8005050 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
      break;
 800504e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a81      	ldr	r2, [pc, #516]	@ (800525c <HAL_SAI_Init+0x2c8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <HAL_SAI_Init+0xd0>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a80      	ldr	r2, [pc, #512]	@ (8005260 <HAL_SAI_Init+0x2cc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d103      	bne.n	800506c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005064:	4a7f      	ldr	r2, [pc, #508]	@ (8005264 <HAL_SAI_Init+0x2d0>)
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	e002      	b.n	8005072 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800506c:	4a7e      	ldr	r2, [pc, #504]	@ (8005268 <HAL_SAI_Init+0x2d4>)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d041      	beq.n	80050fe <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a77      	ldr	r2, [pc, #476]	@ (800525c <HAL_SAI_Init+0x2c8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d004      	beq.n	800508e <HAL_SAI_Init+0xfa>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a75      	ldr	r2, [pc, #468]	@ (8005260 <HAL_SAI_Init+0x2cc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d105      	bne.n	800509a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800508e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005092:	f7fe ff1d 	bl	8003ed0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005096:	6138      	str	r0, [r7, #16]
 8005098:	e004      	b.n	80050a4 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800509a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800509e:	f7fe ff17 	bl	8003ed0 <HAL_RCCEx_GetPeriphCLKFreq>
 80050a2:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4613      	mov	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	461a      	mov	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	025b      	lsls	r3, r3, #9
 80050b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ba:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4a6b      	ldr	r2, [pc, #428]	@ (800526c <HAL_SAI_Init+0x2d8>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	08da      	lsrs	r2, r3, #3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80050ca:	68f9      	ldr	r1, [r7, #12]
 80050cc:	4b67      	ldr	r3, [pc, #412]	@ (800526c <HAL_SAI_Init+0x2d8>)
 80050ce:	fba3 2301 	umull	r2, r3, r3, r1
 80050d2:	08da      	lsrs	r2, r3, #3
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	1aca      	subs	r2, r1, r3
 80050de:	2a08      	cmp	r2, #8
 80050e0:	d904      	bls.n	80050ec <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d104      	bne.n	80050fe <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	085a      	lsrs	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_SAI_Init+0x17a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d109      	bne.n	8005122 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_SAI_Init+0x186>
 8005116:	2300      	movs	r3, #0
 8005118:	e001      	b.n	800511e <HAL_SAI_Init+0x18a>
 800511a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e008      	b.n	8005134 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005126:	2b01      	cmp	r3, #1
 8005128:	d102      	bne.n	8005130 <HAL_SAI_Init+0x19c>
 800512a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800512e:	e000      	b.n	8005132 <HAL_SAI_Init+0x19e>
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6819      	ldr	r1, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b4c      	ldr	r3, [pc, #304]	@ (8005270 <HAL_SAI_Init+0x2dc>)
 8005140:	400b      	ands	r3, r1
 8005142:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6819      	ldr	r1, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005152:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005158:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515e:	431a      	orrs	r2, r3
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 800516c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005178:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	051b      	lsls	r3, r3, #20
 8005180:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005198:	f023 030f 	bic.w	r3, r3, #15
 800519c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6859      	ldr	r1, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699a      	ldr	r2, [r3, #24]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6899      	ldr	r1, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005274 <HAL_SAI_Init+0x2e0>)
 80051c8:	400b      	ands	r3, r1
 80051ca:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6899      	ldr	r1, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80051dc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80051e2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80051e8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ee:	3b01      	subs	r3, #1
 80051f0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80051f2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68d9      	ldr	r1, [r3, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800520a:	400b      	ands	r3, r1
 800520c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68d9      	ldr	r1, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005222:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005224:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800522a:	3b01      	subs	r3, #1
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40015404 	.word	0x40015404
 8005260:	40015424 	.word	0x40015424
 8005264:	40015400 	.word	0x40015400
 8005268:	40015800 	.word	0x40015800
 800526c:	cccccccd 	.word	0xcccccccd
 8005270:	ff05c010 	.word	0xff05c010
 8005274:	fff88000 	.word	0xfff88000

08005278 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_SAI_Abort+0x1a>
 800528e:	2302      	movs	r3, #2
 8005290:	e053      	b.n	800533a <HAL_SAI_Abort+0xc2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fb34 	bl	8005908 <SAI_Disable>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052b8:	d125      	bne.n	8005306 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80052c8:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b12      	cmp	r3, #18
 80052d4:	d108      	bne.n	80052e8 <HAL_SAI_Abort+0x70>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fc fce0 	bl	8001ca8 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b22      	cmp	r3, #34	@ 0x22
 80052f2:	d108      	bne.n	8005306 <HAL_SAI_Abort+0x8e>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005300:	4618      	mov	r0, r3
 8005302:	f7fc fcd1 	bl	8001ca8 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2200      	movs	r2, #0
 800530c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005316:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0208 	orr.w	r2, r2, #8
 8005326:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8005338:	7bfb      	ldrb	r3, [r7, #15]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8192 	beq.w	800567e <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d009      	beq.n	8005390 <HAL_SAI_IRQHandler+0x4c>
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d004      	beq.n	8005390 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	4798      	blx	r3
 800538e:	e176      	b.n	800567e <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01e      	beq.n	80053d8 <HAL_SAI_IRQHandler+0x94>
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d019      	beq.n	80053d8 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2201      	movs	r2, #1
 80053aa:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b22      	cmp	r3, #34	@ 0x22
 80053b6:	d101      	bne.n	80053bc <HAL_SAI_IRQHandler+0x78>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <HAL_SAI_IRQHandler+0x7a>
 80053bc:	2302      	movs	r3, #2
 80053be:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f95b 	bl	800568c <HAL_SAI_ErrorCallback>
 80053d6:	e152      	b.n	800567e <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d011      	beq.n	8005406 <HAL_SAI_IRQHandler+0xc2>
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00c      	beq.n	8005406 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2202      	movs	r2, #2
 80053f2:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 8140 	beq.w	800567e <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005402:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8005404:	e13b      	b.n	800567e <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d055      	beq.n	80054bc <HAL_SAI_IRQHandler+0x178>
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d050      	beq.n	80054bc <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2220      	movs	r2, #32
 8005420:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005428:	f043 0204 	orr.w	r2, r3, #4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d038      	beq.n	80054ae <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d016      	beq.n	8005472 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005448:	4a8f      	ldr	r2, [pc, #572]	@ (8005688 <HAL_SAI_IRQHandler+0x344>)
 800544a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005450:	4618      	mov	r0, r3
 8005452:	f7fc fc67 	bl	8001d24 <HAL_DMA_Abort_IT>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005462:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f90d 	bl	800568c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 80fc 	beq.w	8005674 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005480:	4a81      	ldr	r2, [pc, #516]	@ (8005688 <HAL_SAI_IRQHandler+0x344>)
 8005482:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005488:	4618      	mov	r0, r3
 800548a:	f7fc fc4b 	bl	8001d24 <HAL_DMA_Abort_IT>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 80ef 	beq.w	8005674 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800549c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f8f0 	bl	800568c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054ac:	e0e2      	b.n	8005674 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff fee2 	bl	8005278 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f8e9 	bl	800568c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054ba:	e0db      	b.n	8005674 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d055      	beq.n	8005572 <HAL_SAI_IRQHandler+0x22e>
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d050      	beq.n	8005572 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2240      	movs	r2, #64	@ 0x40
 80054d6:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054de:	f043 0208 	orr.w	r2, r3, #8
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d038      	beq.n	8005564 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d016      	beq.n	8005528 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054fe:	4a62      	ldr	r2, [pc, #392]	@ (8005688 <HAL_SAI_IRQHandler+0x344>)
 8005500:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005506:	4618      	mov	r0, r3
 8005508:	f7fc fc0c 	bl	8001d24 <HAL_DMA_Abort_IT>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005518:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f8b2 	bl	800568c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 80a3 	beq.w	8005678 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005536:	4a54      	ldr	r2, [pc, #336]	@ (8005688 <HAL_SAI_IRQHandler+0x344>)
 8005538:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553e:	4618      	mov	r0, r3
 8005540:	f7fc fbf0 	bl	8001d24 <HAL_DMA_Abort_IT>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 8096 	beq.w	8005678 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005552:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f895 	bl	800568c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005562:	e089      	b.n	8005678 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff fe87 	bl	8005278 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f88e 	bl	800568c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005570:	e082      	b.n	8005678 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d061      	beq.n	8005640 <HAL_SAI_IRQHandler+0x2fc>
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	d05c      	beq.n	8005640 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2204      	movs	r2, #4
 800558c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005594:	f043 0220 	orr.w	r2, r3, #32
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d036      	beq.n	8005616 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d016      	beq.n	80055de <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055b4:	4a34      	ldr	r2, [pc, #208]	@ (8005688 <HAL_SAI_IRQHandler+0x344>)
 80055b6:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fc fbb1 	bl	8001d24 <HAL_DMA_Abort_IT>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f857 	bl	800568c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d04a      	beq.n	800567c <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ea:	4a27      	ldr	r2, [pc, #156]	@ (8005688 <HAL_SAI_IRQHandler+0x344>)
 80055ec:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fc fb96 	bl	8001d24 <HAL_DMA_Abort_IT>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d03e      	beq.n	800567c <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005604:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f83c 	bl	800568c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005614:	e032      	b.n	800567c <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2200      	movs	r2, #0
 800561c:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005626:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f827 	bl	800568c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800563e:	e01d      	b.n	800567c <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f003 0310 	and.w	r3, r3, #16
 8005646:	2b00      	cmp	r3, #0
 8005648:	d019      	beq.n	800567e <HAL_SAI_IRQHandler+0x33a>
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b00      	cmp	r3, #0
 8005652:	d014      	beq.n	800567e <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2210      	movs	r2, #16
 800565a:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005662:	f043 0210 	orr.w	r2, r3, #16
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f80d 	bl	800568c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005672:	e004      	b.n	800567e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005674:	bf00      	nop
 8005676:	e002      	b.n	800567e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005678:	bf00      	nop
 800567a:	e000      	b.n	800567e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800567c:	bf00      	nop
}
 800567e:	bf00      	nop
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	0800597d 	.word	0x0800597d

0800568c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <SAI_InitI2S+0x2e>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d103      	bne.n	80056d6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80056d4:	e002      	b.n	80056dc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80056e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e077      	b.n	80057f6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d107      	bne.n	800571c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005718:	651a      	str	r2, [r3, #80]	@ 0x50
 800571a:	e006      	b.n	800572a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005722:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b03      	cmp	r3, #3
 800572e:	d84f      	bhi.n	80057d0 <SAI_InitI2S+0x130>
 8005730:	a201      	add	r2, pc, #4	@ (adr r2, 8005738 <SAI_InitI2S+0x98>)
 8005732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005736:	bf00      	nop
 8005738:	08005749 	.word	0x08005749
 800573c:	0800576b 	.word	0x0800576b
 8005740:	0800578d 	.word	0x0800578d
 8005744:	080057af 	.word	0x080057af
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2280      	movs	r2, #128	@ 0x80
 800574c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	011a      	lsls	r2, r3, #4
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2240      	movs	r2, #64	@ 0x40
 8005766:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005768:	e035      	b.n	80057d6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2280      	movs	r2, #128	@ 0x80
 800576e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	085b      	lsrs	r3, r3, #1
 8005774:	019a      	lsls	r2, r3, #6
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	085b      	lsrs	r3, r3, #1
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2280      	movs	r2, #128	@ 0x80
 8005788:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800578a:	e024      	b.n	80057d6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	22c0      	movs	r2, #192	@ 0xc0
 8005790:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	019a      	lsls	r2, r3, #6
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2280      	movs	r2, #128	@ 0x80
 80057aa:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80057ac:	e013      	b.n	80057d6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	22e0      	movs	r2, #224	@ 0xe0
 80057b2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	019a      	lsls	r2, r3, #6
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	085b      	lsrs	r3, r3, #1
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2280      	movs	r2, #128	@ 0x80
 80057cc:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80057ce:	e002      	b.n	80057d6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	75fb      	strb	r3, [r7, #23]
      break;
 80057d4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d10b      	bne.n	80057f4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d102      	bne.n	80057e8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2210      	movs	r2, #16
 80057e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d102      	bne.n	80057f4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2208      	movs	r2, #8
 80057f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 80057f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop

08005804 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <SAI_InitPCM+0x2e>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d103      	bne.n	800583a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005838:	e002      	b.n	8005840 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800584c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005854:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005868:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b04      	cmp	r3, #4
 800586e:	d103      	bne.n	8005878 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	645a      	str	r2, [r3, #68]	@ 0x44
 8005876:	e002      	b.n	800587e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	220d      	movs	r2, #13
 800587c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b03      	cmp	r3, #3
 8005882:	d837      	bhi.n	80058f4 <SAI_InitPCM+0xf0>
 8005884:	a201      	add	r2, pc, #4	@ (adr r2, 800588c <SAI_InitPCM+0x88>)
 8005886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588a:	bf00      	nop
 800588c:	0800589d 	.word	0x0800589d
 8005890:	080058b3 	.word	0x080058b3
 8005894:	080058c9 	.word	0x080058c9
 8005898:	080058df 	.word	0x080058df
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2280      	movs	r2, #128	@ 0x80
 80058a0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	011a      	lsls	r2, r3, #4
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2240      	movs	r2, #64	@ 0x40
 80058ae:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80058b0:	e023      	b.n	80058fa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2280      	movs	r2, #128	@ 0x80
 80058b6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2280      	movs	r2, #128	@ 0x80
 80058c4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80058c6:	e018      	b.n	80058fa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	22c0      	movs	r2, #192	@ 0xc0
 80058cc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2280      	movs	r2, #128	@ 0x80
 80058da:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80058dc:	e00d      	b.n	80058fa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	22e0      	movs	r2, #224	@ 0xe0
 80058e2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2280      	movs	r2, #128	@ 0x80
 80058f0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80058f2:	e002      	b.n	80058fa <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	75fb      	strb	r3, [r7, #23]
      break;
 80058f8:	bf00      	nop
  }

  return status;
 80058fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005910:	4b18      	ldr	r3, [pc, #96]	@ (8005974 <SAI_Disable+0x6c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a18      	ldr	r2, [pc, #96]	@ (8005978 <SAI_Disable+0x70>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	0b1b      	lsrs	r3, r3, #12
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005932:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10a      	bne.n	8005950 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005940:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	72fb      	strb	r3, [r7, #11]
      break;
 800594e:	e009      	b.n	8005964 <SAI_Disable+0x5c>
    }
    count--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3b01      	subs	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e7      	bne.n	8005934 <SAI_Disable+0x2c>

  return status;
 8005964:	7afb      	ldrb	r3, [r7, #11]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000000 	.word	0x20000000
 8005978:	95cbec1b 	.word	0x95cbec1b

0800597c <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005988:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005998:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2200      	movs	r2, #0
 80059a0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059aa:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d00a      	beq.n	80059cc <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff ffa6 	bl	8005908 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0208 	orr.w	r2, r2, #8
 80059ca:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f7ff fe55 	bl	800568c <HAL_SAI_ErrorCallback>
#endif
}
 80059e2:	bf00      	nop
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e095      	b.n	8005b28 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d108      	bne.n	8005a16 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a0c:	d009      	beq.n	8005a22 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	61da      	str	r2, [r3, #28]
 8005a14:	e005      	b.n	8005a22 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7fb fc55 	bl	80012ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a58:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a62:	d902      	bls.n	8005a6a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	e002      	b.n	8005a70 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a6e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005a78:	d007      	beq.n	8005a8a <HAL_SPI_Init+0xa0>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a82:	d002      	beq.n	8005a8a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005acc:	ea42 0103 	orr.w	r1, r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	0c1b      	lsrs	r3, r3, #16
 8005ae6:	f003 0204 	and.w	r2, r3, #4
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aee:	f003 0310 	and.w	r3, r3, #16
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005b06:	ea42 0103 	orr.w	r1, r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b40:	f7fb feb8 	bl	80018b4 <HAL_GetTick>
 8005b44:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d001      	beq.n	8005b5a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
 8005b58:	e15c      	b.n	8005e14 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <HAL_SPI_Transmit+0x36>
 8005b60:	88fb      	ldrh	r3, [r7, #6]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e154      	b.n	8005e14 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_SPI_Transmit+0x48>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e14d      	b.n	8005e14 <HAL_SPI_Transmit+0x2e4>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2203      	movs	r2, #3
 8005b84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	88fa      	ldrh	r2, [r7, #6]
 8005b9e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bca:	d10f      	bne.n	8005bec <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf6:	2b40      	cmp	r3, #64	@ 0x40
 8005bf8:	d007      	beq.n	8005c0a <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c12:	d952      	bls.n	8005cba <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <HAL_SPI_Transmit+0xf2>
 8005c1c:	8b7b      	ldrh	r3, [r7, #26]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d145      	bne.n	8005cae <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c26:	881a      	ldrh	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c32:	1c9a      	adds	r2, r3, #2
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c46:	e032      	b.n	8005cae <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d112      	bne.n	8005c7c <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5a:	881a      	ldrh	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c66:	1c9a      	adds	r2, r3, #2
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c7a:	e018      	b.n	8005cae <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c7c:	f7fb fe1a 	bl	80018b4 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d803      	bhi.n	8005c94 <HAL_SPI_Transmit+0x164>
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c92:	d102      	bne.n	8005c9a <HAL_SPI_Transmit+0x16a>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d109      	bne.n	8005cae <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e0b2      	b.n	8005e14 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1c7      	bne.n	8005c48 <HAL_SPI_Transmit+0x118>
 8005cb8:	e083      	b.n	8005dc2 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_SPI_Transmit+0x198>
 8005cc2:	8b7b      	ldrh	r3, [r7, #26]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d177      	bne.n	8005db8 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d912      	bls.n	8005cf8 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd6:	881a      	ldrh	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce2:	1c9a      	adds	r2, r3, #2
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b02      	subs	r3, #2
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cf6:	e05f      	b.n	8005db8 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	7812      	ldrb	r2, [r2, #0]
 8005d04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d1e:	e04b      	b.n	8005db8 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d12b      	bne.n	8005d86 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d912      	bls.n	8005d5e <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3c:	881a      	ldrh	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d48:	1c9a      	adds	r2, r3, #2
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b02      	subs	r3, #2
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d5c:	e02c      	b.n	8005db8 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	330c      	adds	r3, #12
 8005d68:	7812      	ldrb	r2, [r2, #0]
 8005d6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d84:	e018      	b.n	8005db8 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d86:	f7fb fd95 	bl	80018b4 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d803      	bhi.n	8005d9e <HAL_SPI_Transmit+0x26e>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d9c:	d102      	bne.n	8005da4 <HAL_SPI_Transmit+0x274>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d109      	bne.n	8005db8 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e02d      	b.n	8005e14 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1ae      	bne.n	8005d20 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f946 	bl	8006058 <SPI_EndRxTxTransaction>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005e12:	2300      	movs	r3, #0
  }
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3720      	adds	r7, #32
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e2c:	f7fb fd42 	bl	80018b4 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	4413      	add	r3, r2
 8005e3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e3c:	f7fb fd3a 	bl	80018b4 <HAL_GetTick>
 8005e40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e42:	4b39      	ldr	r3, [pc, #228]	@ (8005f28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	015b      	lsls	r3, r3, #5
 8005e48:	0d1b      	lsrs	r3, r3, #20
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	fb02 f303 	mul.w	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e52:	e054      	b.n	8005efe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e5a:	d050      	beq.n	8005efe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e5c:	f7fb fd2a 	bl	80018b4 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d902      	bls.n	8005e72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d13d      	bne.n	8005eee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e8a:	d111      	bne.n	8005eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e94:	d004      	beq.n	8005ea0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e9e:	d107      	bne.n	8005eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb8:	d10f      	bne.n	8005eda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e017      	b.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4013      	ands	r3, r2
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	bf0c      	ite	eq
 8005f0e:	2301      	moveq	r3, #1
 8005f10:	2300      	movne	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d19b      	bne.n	8005e54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3720      	adds	r7, #32
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000000 	.word	0x20000000

08005f2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	@ 0x28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f3e:	f7fb fcb9 	bl	80018b4 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005f4e:	f7fb fcb1 	bl	80018b4 <HAL_GetTick>
 8005f52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8006054 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	00da      	lsls	r2, r3, #3
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	0d1b      	lsrs	r3, r3, #20
 8005f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f6e:	fb02 f303 	mul.w	r3, r2, r3
 8005f72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f74:	e060      	b.n	8006038 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f7c:	d107      	bne.n	8005f8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f94:	d050      	beq.n	8006038 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f96:	f7fb fc8d 	bl	80018b4 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d902      	bls.n	8005fac <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d13d      	bne.n	8006028 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fc4:	d111      	bne.n	8005fea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fce:	d004      	beq.n	8005fda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fd8:	d107      	bne.n	8005fea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fe8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ff2:	d10f      	bne.n	8006014 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006012:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e010      	b.n	800604a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	3b01      	subs	r3, #1
 8006036:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4013      	ands	r3, r2
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	429a      	cmp	r2, r3
 8006046:	d196      	bne.n	8005f76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3728      	adds	r7, #40	@ 0x28
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000000 	.word	0x20000000

08006058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2200      	movs	r2, #0
 800606c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f7ff ff5b 	bl	8005f2c <SPI_WaitFifoStateUntilTimeout>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d007      	beq.n	800608c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006080:	f043 0220 	orr.w	r2, r3, #32
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e027      	b.n	80060dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2200      	movs	r2, #0
 8006094:	2180      	movs	r1, #128	@ 0x80
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f7ff fec0 	bl	8005e1c <SPI_WaitFlagStateUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060a6:	f043 0220 	orr.w	r2, r3, #32
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e014      	b.n	80060dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f7ff ff34 	bl	8005f2c <SPI_WaitFifoStateUntilTimeout>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ce:	f043 0220 	orr.w	r2, r3, #32
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e000      	b.n	80060dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e040      	b.n	8006178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fb fade 	bl	80016c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2224      	movs	r2, #36	@ 0x24
 8006110:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fc32 	bl	8006994 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f977 	bl	8006424 <UART_SetConfig>
 8006136:	4603      	mov	r3, r0
 8006138:	2b01      	cmp	r3, #1
 800613a:	d101      	bne.n	8006140 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e01b      	b.n	8006178 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800614e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800615e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fcb1 	bl	8006ad8 <UART_CheckIdleState>
 8006176:	4603      	mov	r3, r0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08a      	sub	sp, #40	@ 0x28
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006194:	2b20      	cmp	r3, #32
 8006196:	d177      	bne.n	8006288 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <HAL_UART_Transmit+0x24>
 800619e:	88fb      	ldrh	r3, [r7, #6]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e070      	b.n	800628a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2221      	movs	r2, #33	@ 0x21
 80061b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061b6:	f7fb fb7d 	bl	80018b4 <HAL_GetTick>
 80061ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	88fa      	ldrh	r2, [r7, #6]
 80061c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061d4:	d108      	bne.n	80061e8 <HAL_UART_Transmit+0x68>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d104      	bne.n	80061e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	e003      	b.n	80061f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061f0:	e02f      	b.n	8006252 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2200      	movs	r2, #0
 80061fa:	2180      	movs	r1, #128	@ 0x80
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fd13 	bl	8006c28 <UART_WaitOnFlagUntilTimeout>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d004      	beq.n	8006212 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e03b      	b.n	800628a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10b      	bne.n	8006230 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	881a      	ldrh	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006224:	b292      	uxth	r2, r2
 8006226:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	3302      	adds	r3, #2
 800622c:	61bb      	str	r3, [r7, #24]
 800622e:	e007      	b.n	8006240 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	781a      	ldrb	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	3301      	adds	r3, #1
 800623e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1c9      	bne.n	80061f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2200      	movs	r2, #0
 8006266:	2140      	movs	r1, #64	@ 0x40
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 fcdd 	bl	8006c28 <UART_WaitOnFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e005      	b.n	800628a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	e000      	b.n	800628a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006288:	2302      	movs	r3, #2
  }
}
 800628a:	4618      	mov	r0, r3
 800628c:	3720      	adds	r7, #32
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b08a      	sub	sp, #40	@ 0x28
 8006296:	af02      	add	r7, sp, #8
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	603b      	str	r3, [r7, #0]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	f040 80b6 	bne.w	800641a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_UART_Receive+0x28>
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e0ae      	b.n	800641c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2222      	movs	r2, #34	@ 0x22
 80062ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062d4:	f7fb faee 	bl	80018b4 <HAL_GetTick>
 80062d8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	88fa      	ldrh	r2, [r7, #6]
 80062de:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f2:	d10e      	bne.n	8006312 <HAL_UART_Receive+0x80>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d105      	bne.n	8006308 <HAL_UART_Receive+0x76>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006302:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006306:	e02d      	b.n	8006364 <HAL_UART_Receive+0xd2>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	22ff      	movs	r2, #255	@ 0xff
 800630c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006310:	e028      	b.n	8006364 <HAL_UART_Receive+0xd2>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10d      	bne.n	8006336 <HAL_UART_Receive+0xa4>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d104      	bne.n	800632c <HAL_UART_Receive+0x9a>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	22ff      	movs	r2, #255	@ 0xff
 8006326:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800632a:	e01b      	b.n	8006364 <HAL_UART_Receive+0xd2>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	227f      	movs	r2, #127	@ 0x7f
 8006330:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006334:	e016      	b.n	8006364 <HAL_UART_Receive+0xd2>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800633e:	d10d      	bne.n	800635c <HAL_UART_Receive+0xca>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d104      	bne.n	8006352 <HAL_UART_Receive+0xc0>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	227f      	movs	r2, #127	@ 0x7f
 800634c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006350:	e008      	b.n	8006364 <HAL_UART_Receive+0xd2>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	223f      	movs	r2, #63	@ 0x3f
 8006356:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800635a:	e003      	b.n	8006364 <HAL_UART_Receive+0xd2>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800636a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006374:	d108      	bne.n	8006388 <HAL_UART_Receive+0xf6>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d104      	bne.n	8006388 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800637e:	2300      	movs	r3, #0
 8006380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	e003      	b.n	8006390 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800638c:	2300      	movs	r3, #0
 800638e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006390:	e037      	b.n	8006402 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2200      	movs	r2, #0
 800639a:	2120      	movs	r1, #32
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 fc43 	bl	8006c28 <UART_WaitOnFlagUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e033      	b.n	800641c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10c      	bne.n	80063d4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	8a7b      	ldrh	r3, [r7, #18]
 80063c4:	4013      	ands	r3, r2
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	3302      	adds	r3, #2
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	e00d      	b.n	80063f0 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80063da:	b29b      	uxth	r3, r3
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	8a7b      	ldrh	r3, [r7, #18]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	4013      	ands	r3, r2
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	3301      	adds	r3, #1
 80063ee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1c1      	bne.n	8006392 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2220      	movs	r2, #32
 8006412:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	e000      	b.n	800641c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800641a:	2302      	movs	r3, #2
  }
}
 800641c:	4618      	mov	r0, r3
 800641e:	3720      	adds	r7, #32
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006428:	b08a      	sub	sp, #40	@ 0x28
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	431a      	orrs	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	431a      	orrs	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	4313      	orrs	r3, r2
 800644a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	4ba4      	ldr	r3, [pc, #656]	@ (80066e4 <UART_SetConfig+0x2c0>)
 8006454:	4013      	ands	r3, r2
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800645c:	430b      	orrs	r3, r1
 800645e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a99      	ldr	r2, [pc, #612]	@ (80066e8 <UART_SetConfig+0x2c4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d004      	beq.n	8006490 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800648c:	4313      	orrs	r3, r2
 800648e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064a0:	430a      	orrs	r2, r1
 80064a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a90      	ldr	r2, [pc, #576]	@ (80066ec <UART_SetConfig+0x2c8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d126      	bne.n	80064fc <UART_SetConfig+0xd8>
 80064ae:	4b90      	ldr	r3, [pc, #576]	@ (80066f0 <UART_SetConfig+0x2cc>)
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b4:	f003 0303 	and.w	r3, r3, #3
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d81b      	bhi.n	80064f4 <UART_SetConfig+0xd0>
 80064bc:	a201      	add	r2, pc, #4	@ (adr r2, 80064c4 <UART_SetConfig+0xa0>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	080064e5 	.word	0x080064e5
 80064cc:	080064dd 	.word	0x080064dd
 80064d0:	080064ed 	.word	0x080064ed
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064da:	e116      	b.n	800670a <UART_SetConfig+0x2e6>
 80064dc:	2302      	movs	r3, #2
 80064de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e2:	e112      	b.n	800670a <UART_SetConfig+0x2e6>
 80064e4:	2304      	movs	r3, #4
 80064e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ea:	e10e      	b.n	800670a <UART_SetConfig+0x2e6>
 80064ec:	2308      	movs	r3, #8
 80064ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064f2:	e10a      	b.n	800670a <UART_SetConfig+0x2e6>
 80064f4:	2310      	movs	r3, #16
 80064f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064fa:	e106      	b.n	800670a <UART_SetConfig+0x2e6>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a7c      	ldr	r2, [pc, #496]	@ (80066f4 <UART_SetConfig+0x2d0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d138      	bne.n	8006578 <UART_SetConfig+0x154>
 8006506:	4b7a      	ldr	r3, [pc, #488]	@ (80066f0 <UART_SetConfig+0x2cc>)
 8006508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650c:	f003 030c 	and.w	r3, r3, #12
 8006510:	2b0c      	cmp	r3, #12
 8006512:	d82d      	bhi.n	8006570 <UART_SetConfig+0x14c>
 8006514:	a201      	add	r2, pc, #4	@ (adr r2, 800651c <UART_SetConfig+0xf8>)
 8006516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651a:	bf00      	nop
 800651c:	08006551 	.word	0x08006551
 8006520:	08006571 	.word	0x08006571
 8006524:	08006571 	.word	0x08006571
 8006528:	08006571 	.word	0x08006571
 800652c:	08006561 	.word	0x08006561
 8006530:	08006571 	.word	0x08006571
 8006534:	08006571 	.word	0x08006571
 8006538:	08006571 	.word	0x08006571
 800653c:	08006559 	.word	0x08006559
 8006540:	08006571 	.word	0x08006571
 8006544:	08006571 	.word	0x08006571
 8006548:	08006571 	.word	0x08006571
 800654c:	08006569 	.word	0x08006569
 8006550:	2300      	movs	r3, #0
 8006552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006556:	e0d8      	b.n	800670a <UART_SetConfig+0x2e6>
 8006558:	2302      	movs	r3, #2
 800655a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800655e:	e0d4      	b.n	800670a <UART_SetConfig+0x2e6>
 8006560:	2304      	movs	r3, #4
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006566:	e0d0      	b.n	800670a <UART_SetConfig+0x2e6>
 8006568:	2308      	movs	r3, #8
 800656a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800656e:	e0cc      	b.n	800670a <UART_SetConfig+0x2e6>
 8006570:	2310      	movs	r3, #16
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006576:	e0c8      	b.n	800670a <UART_SetConfig+0x2e6>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a5e      	ldr	r2, [pc, #376]	@ (80066f8 <UART_SetConfig+0x2d4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d125      	bne.n	80065ce <UART_SetConfig+0x1aa>
 8006582:	4b5b      	ldr	r3, [pc, #364]	@ (80066f0 <UART_SetConfig+0x2cc>)
 8006584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006588:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800658c:	2b30      	cmp	r3, #48	@ 0x30
 800658e:	d016      	beq.n	80065be <UART_SetConfig+0x19a>
 8006590:	2b30      	cmp	r3, #48	@ 0x30
 8006592:	d818      	bhi.n	80065c6 <UART_SetConfig+0x1a2>
 8006594:	2b20      	cmp	r3, #32
 8006596:	d00a      	beq.n	80065ae <UART_SetConfig+0x18a>
 8006598:	2b20      	cmp	r3, #32
 800659a:	d814      	bhi.n	80065c6 <UART_SetConfig+0x1a2>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <UART_SetConfig+0x182>
 80065a0:	2b10      	cmp	r3, #16
 80065a2:	d008      	beq.n	80065b6 <UART_SetConfig+0x192>
 80065a4:	e00f      	b.n	80065c6 <UART_SetConfig+0x1a2>
 80065a6:	2300      	movs	r3, #0
 80065a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ac:	e0ad      	b.n	800670a <UART_SetConfig+0x2e6>
 80065ae:	2302      	movs	r3, #2
 80065b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b4:	e0a9      	b.n	800670a <UART_SetConfig+0x2e6>
 80065b6:	2304      	movs	r3, #4
 80065b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065bc:	e0a5      	b.n	800670a <UART_SetConfig+0x2e6>
 80065be:	2308      	movs	r3, #8
 80065c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065c4:	e0a1      	b.n	800670a <UART_SetConfig+0x2e6>
 80065c6:	2310      	movs	r3, #16
 80065c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065cc:	e09d      	b.n	800670a <UART_SetConfig+0x2e6>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a4a      	ldr	r2, [pc, #296]	@ (80066fc <UART_SetConfig+0x2d8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d125      	bne.n	8006624 <UART_SetConfig+0x200>
 80065d8:	4b45      	ldr	r3, [pc, #276]	@ (80066f0 <UART_SetConfig+0x2cc>)
 80065da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80065e4:	d016      	beq.n	8006614 <UART_SetConfig+0x1f0>
 80065e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80065e8:	d818      	bhi.n	800661c <UART_SetConfig+0x1f8>
 80065ea:	2b80      	cmp	r3, #128	@ 0x80
 80065ec:	d00a      	beq.n	8006604 <UART_SetConfig+0x1e0>
 80065ee:	2b80      	cmp	r3, #128	@ 0x80
 80065f0:	d814      	bhi.n	800661c <UART_SetConfig+0x1f8>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <UART_SetConfig+0x1d8>
 80065f6:	2b40      	cmp	r3, #64	@ 0x40
 80065f8:	d008      	beq.n	800660c <UART_SetConfig+0x1e8>
 80065fa:	e00f      	b.n	800661c <UART_SetConfig+0x1f8>
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006602:	e082      	b.n	800670a <UART_SetConfig+0x2e6>
 8006604:	2302      	movs	r3, #2
 8006606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800660a:	e07e      	b.n	800670a <UART_SetConfig+0x2e6>
 800660c:	2304      	movs	r3, #4
 800660e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006612:	e07a      	b.n	800670a <UART_SetConfig+0x2e6>
 8006614:	2308      	movs	r3, #8
 8006616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800661a:	e076      	b.n	800670a <UART_SetConfig+0x2e6>
 800661c:	2310      	movs	r3, #16
 800661e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006622:	e072      	b.n	800670a <UART_SetConfig+0x2e6>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a35      	ldr	r2, [pc, #212]	@ (8006700 <UART_SetConfig+0x2dc>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d12a      	bne.n	8006684 <UART_SetConfig+0x260>
 800662e:	4b30      	ldr	r3, [pc, #192]	@ (80066f0 <UART_SetConfig+0x2cc>)
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006634:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006638:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800663c:	d01a      	beq.n	8006674 <UART_SetConfig+0x250>
 800663e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006642:	d81b      	bhi.n	800667c <UART_SetConfig+0x258>
 8006644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006648:	d00c      	beq.n	8006664 <UART_SetConfig+0x240>
 800664a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800664e:	d815      	bhi.n	800667c <UART_SetConfig+0x258>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <UART_SetConfig+0x238>
 8006654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006658:	d008      	beq.n	800666c <UART_SetConfig+0x248>
 800665a:	e00f      	b.n	800667c <UART_SetConfig+0x258>
 800665c:	2300      	movs	r3, #0
 800665e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006662:	e052      	b.n	800670a <UART_SetConfig+0x2e6>
 8006664:	2302      	movs	r3, #2
 8006666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800666a:	e04e      	b.n	800670a <UART_SetConfig+0x2e6>
 800666c:	2304      	movs	r3, #4
 800666e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006672:	e04a      	b.n	800670a <UART_SetConfig+0x2e6>
 8006674:	2308      	movs	r3, #8
 8006676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800667a:	e046      	b.n	800670a <UART_SetConfig+0x2e6>
 800667c:	2310      	movs	r3, #16
 800667e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006682:	e042      	b.n	800670a <UART_SetConfig+0x2e6>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a17      	ldr	r2, [pc, #92]	@ (80066e8 <UART_SetConfig+0x2c4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d13a      	bne.n	8006704 <UART_SetConfig+0x2e0>
 800668e:	4b18      	ldr	r3, [pc, #96]	@ (80066f0 <UART_SetConfig+0x2cc>)
 8006690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006694:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006698:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800669c:	d01a      	beq.n	80066d4 <UART_SetConfig+0x2b0>
 800669e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066a2:	d81b      	bhi.n	80066dc <UART_SetConfig+0x2b8>
 80066a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066a8:	d00c      	beq.n	80066c4 <UART_SetConfig+0x2a0>
 80066aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ae:	d815      	bhi.n	80066dc <UART_SetConfig+0x2b8>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <UART_SetConfig+0x298>
 80066b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066b8:	d008      	beq.n	80066cc <UART_SetConfig+0x2a8>
 80066ba:	e00f      	b.n	80066dc <UART_SetConfig+0x2b8>
 80066bc:	2300      	movs	r3, #0
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066c2:	e022      	b.n	800670a <UART_SetConfig+0x2e6>
 80066c4:	2302      	movs	r3, #2
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ca:	e01e      	b.n	800670a <UART_SetConfig+0x2e6>
 80066cc:	2304      	movs	r3, #4
 80066ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066d2:	e01a      	b.n	800670a <UART_SetConfig+0x2e6>
 80066d4:	2308      	movs	r3, #8
 80066d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066da:	e016      	b.n	800670a <UART_SetConfig+0x2e6>
 80066dc:	2310      	movs	r3, #16
 80066de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066e2:	e012      	b.n	800670a <UART_SetConfig+0x2e6>
 80066e4:	efff69f3 	.word	0xefff69f3
 80066e8:	40008000 	.word	0x40008000
 80066ec:	40013800 	.word	0x40013800
 80066f0:	40021000 	.word	0x40021000
 80066f4:	40004400 	.word	0x40004400
 80066f8:	40004800 	.word	0x40004800
 80066fc:	40004c00 	.word	0x40004c00
 8006700:	40005000 	.word	0x40005000
 8006704:	2310      	movs	r3, #16
 8006706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a9f      	ldr	r2, [pc, #636]	@ (800698c <UART_SetConfig+0x568>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d17a      	bne.n	800680a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006714:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006718:	2b08      	cmp	r3, #8
 800671a:	d824      	bhi.n	8006766 <UART_SetConfig+0x342>
 800671c:	a201      	add	r2, pc, #4	@ (adr r2, 8006724 <UART_SetConfig+0x300>)
 800671e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006722:	bf00      	nop
 8006724:	08006749 	.word	0x08006749
 8006728:	08006767 	.word	0x08006767
 800672c:	08006751 	.word	0x08006751
 8006730:	08006767 	.word	0x08006767
 8006734:	08006757 	.word	0x08006757
 8006738:	08006767 	.word	0x08006767
 800673c:	08006767 	.word	0x08006767
 8006740:	08006767 	.word	0x08006767
 8006744:	0800675f 	.word	0x0800675f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006748:	f7fd f84c 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 800674c:	61f8      	str	r0, [r7, #28]
        break;
 800674e:	e010      	b.n	8006772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006750:	4b8f      	ldr	r3, [pc, #572]	@ (8006990 <UART_SetConfig+0x56c>)
 8006752:	61fb      	str	r3, [r7, #28]
        break;
 8006754:	e00d      	b.n	8006772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006756:	f7fc ffad 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 800675a:	61f8      	str	r0, [r7, #28]
        break;
 800675c:	e009      	b.n	8006772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800675e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006762:	61fb      	str	r3, [r7, #28]
        break;
 8006764:	e005      	b.n	8006772 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006770:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80fb 	beq.w	8006970 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	4613      	mov	r3, r2
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	4413      	add	r3, r2
 8006784:	69fa      	ldr	r2, [r7, #28]
 8006786:	429a      	cmp	r2, r3
 8006788:	d305      	bcc.n	8006796 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006790:	69fa      	ldr	r2, [r7, #28]
 8006792:	429a      	cmp	r2, r3
 8006794:	d903      	bls.n	800679e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800679c:	e0e8      	b.n	8006970 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	2200      	movs	r2, #0
 80067a2:	461c      	mov	r4, r3
 80067a4:	4615      	mov	r5, r2
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	f04f 0300 	mov.w	r3, #0
 80067ae:	022b      	lsls	r3, r5, #8
 80067b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80067b4:	0222      	lsls	r2, r4, #8
 80067b6:	68f9      	ldr	r1, [r7, #12]
 80067b8:	6849      	ldr	r1, [r1, #4]
 80067ba:	0849      	lsrs	r1, r1, #1
 80067bc:	2000      	movs	r0, #0
 80067be:	4688      	mov	r8, r1
 80067c0:	4681      	mov	r9, r0
 80067c2:	eb12 0a08 	adds.w	sl, r2, r8
 80067c6:	eb43 0b09 	adc.w	fp, r3, r9
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	603b      	str	r3, [r7, #0]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d8:	4650      	mov	r0, sl
 80067da:	4659      	mov	r1, fp
 80067dc:	f7f9 fd58 	bl	8000290 <__aeabi_uldivmod>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4613      	mov	r3, r2
 80067e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067ee:	d308      	bcc.n	8006802 <UART_SetConfig+0x3de>
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067f6:	d204      	bcs.n	8006802 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	60da      	str	r2, [r3, #12]
 8006800:	e0b6      	b.n	8006970 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006808:	e0b2      	b.n	8006970 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006812:	d15e      	bne.n	80068d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006814:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006818:	2b08      	cmp	r3, #8
 800681a:	d828      	bhi.n	800686e <UART_SetConfig+0x44a>
 800681c:	a201      	add	r2, pc, #4	@ (adr r2, 8006824 <UART_SetConfig+0x400>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	08006849 	.word	0x08006849
 8006828:	08006851 	.word	0x08006851
 800682c:	08006859 	.word	0x08006859
 8006830:	0800686f 	.word	0x0800686f
 8006834:	0800685f 	.word	0x0800685f
 8006838:	0800686f 	.word	0x0800686f
 800683c:	0800686f 	.word	0x0800686f
 8006840:	0800686f 	.word	0x0800686f
 8006844:	08006867 	.word	0x08006867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006848:	f7fc ffcc 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 800684c:	61f8      	str	r0, [r7, #28]
        break;
 800684e:	e014      	b.n	800687a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006850:	f7fc ffde 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 8006854:	61f8      	str	r0, [r7, #28]
        break;
 8006856:	e010      	b.n	800687a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006858:	4b4d      	ldr	r3, [pc, #308]	@ (8006990 <UART_SetConfig+0x56c>)
 800685a:	61fb      	str	r3, [r7, #28]
        break;
 800685c:	e00d      	b.n	800687a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800685e:	f7fc ff29 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8006862:	61f8      	str	r0, [r7, #28]
        break;
 8006864:	e009      	b.n	800687a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800686a:	61fb      	str	r3, [r7, #28]
        break;
 800686c:	e005      	b.n	800687a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d077      	beq.n	8006970 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	005a      	lsls	r2, r3, #1
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	085b      	lsrs	r3, r3, #1
 800688a:	441a      	add	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	fbb2 f3f3 	udiv	r3, r2, r3
 8006894:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2b0f      	cmp	r3, #15
 800689a:	d916      	bls.n	80068ca <UART_SetConfig+0x4a6>
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a2:	d212      	bcs.n	80068ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	f023 030f 	bic.w	r3, r3, #15
 80068ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	085b      	lsrs	r3, r3, #1
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	8afb      	ldrh	r3, [r7, #22]
 80068bc:	4313      	orrs	r3, r2
 80068be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	8afa      	ldrh	r2, [r7, #22]
 80068c6:	60da      	str	r2, [r3, #12]
 80068c8:	e052      	b.n	8006970 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80068d0:	e04e      	b.n	8006970 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d827      	bhi.n	800692a <UART_SetConfig+0x506>
 80068da:	a201      	add	r2, pc, #4	@ (adr r2, 80068e0 <UART_SetConfig+0x4bc>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	08006905 	.word	0x08006905
 80068e4:	0800690d 	.word	0x0800690d
 80068e8:	08006915 	.word	0x08006915
 80068ec:	0800692b 	.word	0x0800692b
 80068f0:	0800691b 	.word	0x0800691b
 80068f4:	0800692b 	.word	0x0800692b
 80068f8:	0800692b 	.word	0x0800692b
 80068fc:	0800692b 	.word	0x0800692b
 8006900:	08006923 	.word	0x08006923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006904:	f7fc ff6e 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8006908:	61f8      	str	r0, [r7, #28]
        break;
 800690a:	e014      	b.n	8006936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800690c:	f7fc ff80 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 8006910:	61f8      	str	r0, [r7, #28]
        break;
 8006912:	e010      	b.n	8006936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006914:	4b1e      	ldr	r3, [pc, #120]	@ (8006990 <UART_SetConfig+0x56c>)
 8006916:	61fb      	str	r3, [r7, #28]
        break;
 8006918:	e00d      	b.n	8006936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800691a:	f7fc fecb 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 800691e:	61f8      	str	r0, [r7, #28]
        break;
 8006920:	e009      	b.n	8006936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006926:	61fb      	str	r3, [r7, #28]
        break;
 8006928:	e005      	b.n	8006936 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006934:	bf00      	nop
    }

    if (pclk != 0U)
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d019      	beq.n	8006970 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	085a      	lsrs	r2, r3, #1
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	441a      	add	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	fbb2 f3f3 	udiv	r3, r2, r3
 800694e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	2b0f      	cmp	r3, #15
 8006954:	d909      	bls.n	800696a <UART_SetConfig+0x546>
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800695c:	d205      	bcs.n	800696a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	b29a      	uxth	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60da      	str	r2, [r3, #12]
 8006968:	e002      	b.n	8006970 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800697c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006980:	4618      	mov	r0, r3
 8006982:	3728      	adds	r7, #40	@ 0x28
 8006984:	46bd      	mov	sp, r7
 8006986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800698a:	bf00      	nop
 800698c:	40008000 	.word	0x40008000
 8006990:	00f42400 	.word	0x00f42400

08006994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00a      	beq.n	8006a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a28:	f003 0310 	and.w	r3, r3, #16
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01a      	beq.n	8006aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a92:	d10a      	bne.n	8006aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00a      	beq.n	8006acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	605a      	str	r2, [r3, #4]
  }
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b098      	sub	sp, #96	@ 0x60
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ae8:	f7fa fee4 	bl	80018b4 <HAL_GetTick>
 8006aec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d12e      	bne.n	8006b5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006afc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b04:	2200      	movs	r2, #0
 8006b06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f88c 	bl	8006c28 <UART_WaitOnFlagUntilTimeout>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d021      	beq.n	8006b5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e6      	bne.n	8006b16 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e062      	b.n	8006c20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d149      	bne.n	8006bfc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b70:	2200      	movs	r2, #0
 8006b72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f856 	bl	8006c28 <UART_WaitOnFlagUntilTimeout>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d03c      	beq.n	8006bfc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	623b      	str	r3, [r7, #32]
   return(result);
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ba0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e6      	bne.n	8006b82 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3308      	adds	r3, #8
 8006bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0301 	bic.w	r3, r3, #1
 8006bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bd4:	61fa      	str	r2, [r7, #28]
 8006bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd8:	69b9      	ldr	r1, [r7, #24]
 8006bda:	69fa      	ldr	r2, [r7, #28]
 8006bdc:	e841 2300 	strex	r3, r2, [r1]
 8006be0:	617b      	str	r3, [r7, #20]
   return(result);
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1e5      	bne.n	8006bb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e011      	b.n	8006c20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3758      	adds	r7, #88	@ 0x58
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	4613      	mov	r3, r2
 8006c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c38:	e04f      	b.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c40:	d04b      	beq.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c42:	f7fa fe37 	bl	80018b4 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d302      	bcc.n	8006c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e04e      	b.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0304 	and.w	r3, r3, #4
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d037      	beq.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b80      	cmp	r3, #128	@ 0x80
 8006c6e:	d034      	beq.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b40      	cmp	r3, #64	@ 0x40
 8006c74:	d031      	beq.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d110      	bne.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2208      	movs	r2, #8
 8006c8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f838 	bl	8006d02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2208      	movs	r2, #8
 8006c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e029      	b.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb4:	d111      	bne.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f81e 	bl	8006d02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e00f      	b.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69da      	ldr	r2, [r3, #28]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	bf0c      	ite	eq
 8006cea:	2301      	moveq	r3, #1
 8006cec:	2300      	movne	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	79fb      	ldrb	r3, [r7, #7]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d0a0      	beq.n	8006c3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b095      	sub	sp, #84	@ 0x54
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	461a      	mov	r2, r3
 8006d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e6      	bne.n	8006d0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3308      	adds	r3, #8
 8006d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f023 0301 	bic.w	r3, r3, #1
 8006d52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3308      	adds	r3, #8
 8006d5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d64:	e841 2300 	strex	r3, r2, [r1]
 8006d68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e5      	bne.n	8006d3c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d118      	bne.n	8006daa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f023 0310 	bic.w	r3, r3, #16
 8006d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d96:	61bb      	str	r3, [r7, #24]
 8006d98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	6979      	ldr	r1, [r7, #20]
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	613b      	str	r3, [r7, #16]
   return(result);
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e6      	bne.n	8006d78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006dbe:	bf00      	nop
 8006dc0:	3754      	adds	r7, #84	@ 0x54
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b085      	sub	sp, #20
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ddc:	2b84      	cmp	r3, #132	@ 0x84
 8006dde:	d005      	beq.n	8006dec <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006de0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	3303      	adds	r3, #3
 8006dea:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006dec:	68fb      	ldr	r3, [r7, #12]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006dfe:	f000 fae5 	bl	80073cc <vTaskStartScheduler>
  
  return osOK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e0a:	b089      	sub	sp, #36	@ 0x24
 8006e0c:	af04      	add	r7, sp, #16
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d020      	beq.n	8006e5c <osThreadCreate+0x54>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d01c      	beq.n	8006e5c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685c      	ldr	r4, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691e      	ldr	r6, [r3, #16]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7ff ffc8 	bl	8006dca <makeFreeRtosPriority>
 8006e3a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e44:	9202      	str	r2, [sp, #8]
 8006e46:	9301      	str	r3, [sp, #4]
 8006e48:	9100      	str	r1, [sp, #0]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	4632      	mov	r2, r6
 8006e4e:	4629      	mov	r1, r5
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 f8ed 	bl	8007030 <xTaskCreateStatic>
 8006e56:	4603      	mov	r3, r0
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e01c      	b.n	8006e96 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685c      	ldr	r4, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e68:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff ffaa 	bl	8006dca <makeFreeRtosPriority>
 8006e76:	4602      	mov	r2, r0
 8006e78:	f107 030c 	add.w	r3, r7, #12
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	9200      	str	r2, [sp, #0]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	4632      	mov	r2, r6
 8006e84:	4629      	mov	r1, r5
 8006e86:	4620      	mov	r0, r4
 8006e88:	f000 f932 	bl	80070f0 <xTaskCreate>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d001      	beq.n	8006e96 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	e000      	b.n	8006e98 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006e96:	68fb      	ldr	r3, [r7, #12]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ea0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <osDelay+0x16>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	e000      	b.n	8006eb8 <osDelay+0x18>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fa51 	bl	8007360 <vTaskDelay>
  
  return osOK;
 8006ebe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f103 0208 	add.w	r2, r3, #8
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ee0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f103 0208 	add.w	r2, r3, #8
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f103 0208 	add.w	r2, r3, #8
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f22:	b480      	push	{r7}
 8006f24:	b085      	sub	sp, #20
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	601a      	str	r2, [r3, #0]
}
 8006f5e:	bf00      	nop
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f80:	d103      	bne.n	8006f8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	e00c      	b.n	8006fa4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	e002      	b.n	8006f98 <vListInsert+0x2e>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d2f6      	bcs.n	8006f92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	601a      	str	r2, [r3, #0]
}
 8006fd0:	bf00      	nop
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6892      	ldr	r2, [r2, #8]
 8006ff2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6852      	ldr	r2, [r2, #4]
 8006ffc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	429a      	cmp	r2, r3
 8007006:	d103      	bne.n	8007010 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	1e5a      	subs	r2, r3, #1
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007030:	b580      	push	{r7, lr}
 8007032:	b08e      	sub	sp, #56	@ 0x38
 8007034:	af04      	add	r7, sp, #16
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800703e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10b      	bne.n	800705c <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007056:	bf00      	nop
 8007058:	bf00      	nop
 800705a:	e7fd      	b.n	8007058 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800705c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10b      	bne.n	800707a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	61fb      	str	r3, [r7, #28]
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop
 8007078:	e7fd      	b.n	8007076 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800707a:	2354      	movs	r3, #84	@ 0x54
 800707c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	2b54      	cmp	r3, #84	@ 0x54
 8007082:	d00b      	beq.n	800709c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	61bb      	str	r3, [r7, #24]
}
 8007096:	bf00      	nop
 8007098:	bf00      	nop
 800709a:	e7fd      	b.n	8007098 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800709c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800709e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01e      	beq.n	80070e2 <xTaskCreateStatic+0xb2>
 80070a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d01b      	beq.n	80070e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070bc:	2300      	movs	r3, #0
 80070be:	9303      	str	r3, [sp, #12]
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	9302      	str	r3, [sp, #8]
 80070c4:	f107 0314 	add.w	r3, r7, #20
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 f850 	bl	800717a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070dc:	f000 f8d6 	bl	800728c <prvAddNewTaskToReadyList>
 80070e0:	e001      	b.n	80070e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070e6:	697b      	ldr	r3, [r7, #20]
	}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3728      	adds	r7, #40	@ 0x28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08c      	sub	sp, #48	@ 0x30
 80070f4:	af04      	add	r7, sp, #16
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	4613      	mov	r3, r2
 80070fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007100:	88fb      	ldrh	r3, [r7, #6]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4618      	mov	r0, r3
 8007106:	f000 feef 	bl	8007ee8 <pvPortMalloc>
 800710a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00e      	beq.n	8007130 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007112:	2054      	movs	r0, #84	@ 0x54
 8007114:	f000 fee8 	bl	8007ee8 <pvPortMalloc>
 8007118:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	631a      	str	r2, [r3, #48]	@ 0x30
 8007126:	e005      	b.n	8007134 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007128:	6978      	ldr	r0, [r7, #20]
 800712a:	f000 ffab 	bl	8008084 <vPortFree>
 800712e:	e001      	b.n	8007134 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007130:	2300      	movs	r3, #0
 8007132:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d017      	beq.n	800716a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007142:	88fa      	ldrh	r2, [r7, #6]
 8007144:	2300      	movs	r3, #0
 8007146:	9303      	str	r3, [sp, #12]
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	9302      	str	r3, [sp, #8]
 800714c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	68b9      	ldr	r1, [r7, #8]
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f80e 	bl	800717a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800715e:	69f8      	ldr	r0, [r7, #28]
 8007160:	f000 f894 	bl	800728c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007164:	2301      	movs	r3, #1
 8007166:	61bb      	str	r3, [r7, #24]
 8007168:	e002      	b.n	8007170 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800716a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800716e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007170:	69bb      	ldr	r3, [r7, #24]
	}
 8007172:	4618      	mov	r0, r3
 8007174:	3720      	adds	r7, #32
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b088      	sub	sp, #32
 800717e:	af00      	add	r7, sp, #0
 8007180:	60f8      	str	r0, [r7, #12]
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007192:	3b01      	subs	r3, #1
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	f023 0307 	bic.w	r3, r3, #7
 80071a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	617b      	str	r3, [r7, #20]
}
 80071be:	bf00      	nop
 80071c0:	bf00      	nop
 80071c2:	e7fd      	b.n	80071c0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d01f      	beq.n	800720a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071ca:	2300      	movs	r3, #0
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	e012      	b.n	80071f6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	4413      	add	r3, r2
 80071d6:	7819      	ldrb	r1, [r3, #0]
 80071d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	4413      	add	r3, r2
 80071de:	3334      	adds	r3, #52	@ 0x34
 80071e0:	460a      	mov	r2, r1
 80071e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d006      	beq.n	80071fe <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	3301      	adds	r3, #1
 80071f4:	61fb      	str	r3, [r7, #28]
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	2b0f      	cmp	r3, #15
 80071fa:	d9e9      	bls.n	80071d0 <prvInitialiseNewTask+0x56>
 80071fc:	e000      	b.n	8007200 <prvInitialiseNewTask+0x86>
			{
				break;
 80071fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007208:	e003      	b.n	8007212 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007214:	2b06      	cmp	r3, #6
 8007216:	d901      	bls.n	800721c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007218:	2306      	movs	r3, #6
 800721a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800721c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007220:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007224:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007226:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722a:	2200      	movs	r2, #0
 800722c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800722e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007230:	3304      	adds	r3, #4
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff fe68 	bl	8006f08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723a:	3318      	adds	r3, #24
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff fe63 	bl	8006f08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007246:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	f1c3 0207 	rsb	r2, r3, #7
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007256:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725a:	2200      	movs	r2, #0
 800725c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	68f9      	ldr	r1, [r7, #12]
 800726a:	69b8      	ldr	r0, [r7, #24]
 800726c:	f000 fc2c 	bl	8007ac8 <pxPortInitialiseStack>
 8007270:	4602      	mov	r2, r0
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800727c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007280:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007282:	bf00      	nop
 8007284:	3720      	adds	r7, #32
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007294:	f000 fd48 	bl	8007d28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007298:	4b2a      	ldr	r3, [pc, #168]	@ (8007344 <prvAddNewTaskToReadyList+0xb8>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3301      	adds	r3, #1
 800729e:	4a29      	ldr	r2, [pc, #164]	@ (8007344 <prvAddNewTaskToReadyList+0xb8>)
 80072a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072a2:	4b29      	ldr	r3, [pc, #164]	@ (8007348 <prvAddNewTaskToReadyList+0xbc>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d109      	bne.n	80072be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072aa:	4a27      	ldr	r2, [pc, #156]	@ (8007348 <prvAddNewTaskToReadyList+0xbc>)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072b0:	4b24      	ldr	r3, [pc, #144]	@ (8007344 <prvAddNewTaskToReadyList+0xb8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d110      	bne.n	80072da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072b8:	f000 fac4 	bl	8007844 <prvInitialiseTaskLists>
 80072bc:	e00d      	b.n	80072da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072be:	4b23      	ldr	r3, [pc, #140]	@ (800734c <prvAddNewTaskToReadyList+0xc0>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d109      	bne.n	80072da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072c6:	4b20      	ldr	r3, [pc, #128]	@ (8007348 <prvAddNewTaskToReadyList+0xbc>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d802      	bhi.n	80072da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007348 <prvAddNewTaskToReadyList+0xbc>)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072da:	4b1d      	ldr	r3, [pc, #116]	@ (8007350 <prvAddNewTaskToReadyList+0xc4>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3301      	adds	r3, #1
 80072e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007350 <prvAddNewTaskToReadyList+0xc4>)
 80072e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e8:	2201      	movs	r2, #1
 80072ea:	409a      	lsls	r2, r3
 80072ec:	4b19      	ldr	r3, [pc, #100]	@ (8007354 <prvAddNewTaskToReadyList+0xc8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	4a18      	ldr	r2, [pc, #96]	@ (8007354 <prvAddNewTaskToReadyList+0xc8>)
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4a15      	ldr	r2, [pc, #84]	@ (8007358 <prvAddNewTaskToReadyList+0xcc>)
 8007304:	441a      	add	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3304      	adds	r3, #4
 800730a:	4619      	mov	r1, r3
 800730c:	4610      	mov	r0, r2
 800730e:	f7ff fe08 	bl	8006f22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007312:	f000 fd3b 	bl	8007d8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007316:	4b0d      	ldr	r3, [pc, #52]	@ (800734c <prvAddNewTaskToReadyList+0xc0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00e      	beq.n	800733c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800731e:	4b0a      	ldr	r3, [pc, #40]	@ (8007348 <prvAddNewTaskToReadyList+0xbc>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007328:	429a      	cmp	r2, r3
 800732a:	d207      	bcs.n	800733c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800732c:	4b0b      	ldr	r3, [pc, #44]	@ (800735c <prvAddNewTaskToReadyList+0xd0>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	20000724 	.word	0x20000724
 8007348:	20000624 	.word	0x20000624
 800734c:	20000730 	.word	0x20000730
 8007350:	20000740 	.word	0x20000740
 8007354:	2000072c 	.word	0x2000072c
 8007358:	20000628 	.word	0x20000628
 800735c:	e000ed04 	.word	0xe000ed04

08007360 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d018      	beq.n	80073a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007372:	4b14      	ldr	r3, [pc, #80]	@ (80073c4 <vTaskDelay+0x64>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00b      	beq.n	8007392 <vTaskDelay+0x32>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	60bb      	str	r3, [r7, #8]
}
 800738c:	bf00      	nop
 800738e:	bf00      	nop
 8007390:	e7fd      	b.n	800738e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007392:	f000 f87d 	bl	8007490 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007396:	2100      	movs	r1, #0
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fb2f 	bl	80079fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800739e:	f000 f885 	bl	80074ac <xTaskResumeAll>
 80073a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d107      	bne.n	80073ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80073aa:	4b07      	ldr	r3, [pc, #28]	@ (80073c8 <vTaskDelay+0x68>)
 80073ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073ba:	bf00      	nop
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	2000074c 	.word	0x2000074c
 80073c8:	e000ed04 	.word	0xe000ed04

080073cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08a      	sub	sp, #40	@ 0x28
 80073d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073d6:	2300      	movs	r3, #0
 80073d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073da:	463a      	mov	r2, r7
 80073dc:	1d39      	adds	r1, r7, #4
 80073de:	f107 0308 	add.w	r3, r7, #8
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7f9 f95e 	bl	80006a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	9202      	str	r2, [sp, #8]
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	2300      	movs	r3, #0
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	2300      	movs	r3, #0
 80073f8:	460a      	mov	r2, r1
 80073fa:	491f      	ldr	r1, [pc, #124]	@ (8007478 <vTaskStartScheduler+0xac>)
 80073fc:	481f      	ldr	r0, [pc, #124]	@ (800747c <vTaskStartScheduler+0xb0>)
 80073fe:	f7ff fe17 	bl	8007030 <xTaskCreateStatic>
 8007402:	4603      	mov	r3, r0
 8007404:	4a1e      	ldr	r2, [pc, #120]	@ (8007480 <vTaskStartScheduler+0xb4>)
 8007406:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007408:	4b1d      	ldr	r3, [pc, #116]	@ (8007480 <vTaskStartScheduler+0xb4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007410:	2301      	movs	r3, #1
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	e001      	b.n	800741a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d116      	bne.n	800744e <vTaskStartScheduler+0x82>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	613b      	str	r3, [r7, #16]
}
 8007432:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007434:	4b13      	ldr	r3, [pc, #76]	@ (8007484 <vTaskStartScheduler+0xb8>)
 8007436:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800743a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800743c:	4b12      	ldr	r3, [pc, #72]	@ (8007488 <vTaskStartScheduler+0xbc>)
 800743e:	2201      	movs	r2, #1
 8007440:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007442:	4b12      	ldr	r3, [pc, #72]	@ (800748c <vTaskStartScheduler+0xc0>)
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007448:	f000 fbca 	bl	8007be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800744c:	e00f      	b.n	800746e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007454:	d10b      	bne.n	800746e <vTaskStartScheduler+0xa2>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	60fb      	str	r3, [r7, #12]
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	e7fd      	b.n	800746a <vTaskStartScheduler+0x9e>
}
 800746e:	bf00      	nop
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	080098f8 	.word	0x080098f8
 800747c:	08007815 	.word	0x08007815
 8007480:	20000748 	.word	0x20000748
 8007484:	20000744 	.word	0x20000744
 8007488:	20000730 	.word	0x20000730
 800748c:	20000728 	.word	0x20000728

08007490 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007490:	b480      	push	{r7}
 8007492:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007494:	4b04      	ldr	r3, [pc, #16]	@ (80074a8 <vTaskSuspendAll+0x18>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3301      	adds	r3, #1
 800749a:	4a03      	ldr	r2, [pc, #12]	@ (80074a8 <vTaskSuspendAll+0x18>)
 800749c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800749e:	bf00      	nop
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	2000074c 	.word	0x2000074c

080074ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074ba:	4b42      	ldr	r3, [pc, #264]	@ (80075c4 <xTaskResumeAll+0x118>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10b      	bne.n	80074da <xTaskResumeAll+0x2e>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	603b      	str	r3, [r7, #0]
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	e7fd      	b.n	80074d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074da:	f000 fc25 	bl	8007d28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074de:	4b39      	ldr	r3, [pc, #228]	@ (80075c4 <xTaskResumeAll+0x118>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	4a37      	ldr	r2, [pc, #220]	@ (80075c4 <xTaskResumeAll+0x118>)
 80074e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074e8:	4b36      	ldr	r3, [pc, #216]	@ (80075c4 <xTaskResumeAll+0x118>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d161      	bne.n	80075b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074f0:	4b35      	ldr	r3, [pc, #212]	@ (80075c8 <xTaskResumeAll+0x11c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d05d      	beq.n	80075b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074f8:	e02e      	b.n	8007558 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074fa:	4b34      	ldr	r3, [pc, #208]	@ (80075cc <xTaskResumeAll+0x120>)
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3318      	adds	r3, #24
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff fd68 	bl	8006fdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3304      	adds	r3, #4
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff fd63 	bl	8006fdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751a:	2201      	movs	r2, #1
 800751c:	409a      	lsls	r2, r3
 800751e:	4b2c      	ldr	r3, [pc, #176]	@ (80075d0 <xTaskResumeAll+0x124>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4313      	orrs	r3, r2
 8007524:	4a2a      	ldr	r2, [pc, #168]	@ (80075d0 <xTaskResumeAll+0x124>)
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4a27      	ldr	r2, [pc, #156]	@ (80075d4 <xTaskResumeAll+0x128>)
 8007536:	441a      	add	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3304      	adds	r3, #4
 800753c:	4619      	mov	r1, r3
 800753e:	4610      	mov	r0, r2
 8007540:	f7ff fcef 	bl	8006f22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007548:	4b23      	ldr	r3, [pc, #140]	@ (80075d8 <xTaskResumeAll+0x12c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754e:	429a      	cmp	r2, r3
 8007550:	d302      	bcc.n	8007558 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007552:	4b22      	ldr	r3, [pc, #136]	@ (80075dc <xTaskResumeAll+0x130>)
 8007554:	2201      	movs	r2, #1
 8007556:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007558:	4b1c      	ldr	r3, [pc, #112]	@ (80075cc <xTaskResumeAll+0x120>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1cc      	bne.n	80074fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007566:	f000 fa0b 	bl	8007980 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800756a:	4b1d      	ldr	r3, [pc, #116]	@ (80075e0 <xTaskResumeAll+0x134>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d010      	beq.n	8007598 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007576:	f000 f837 	bl	80075e8 <xTaskIncrementTick>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007580:	4b16      	ldr	r3, [pc, #88]	@ (80075dc <xTaskResumeAll+0x130>)
 8007582:	2201      	movs	r2, #1
 8007584:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	3b01      	subs	r3, #1
 800758a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1f1      	bne.n	8007576 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007592:	4b13      	ldr	r3, [pc, #76]	@ (80075e0 <xTaskResumeAll+0x134>)
 8007594:	2200      	movs	r2, #0
 8007596:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007598:	4b10      	ldr	r3, [pc, #64]	@ (80075dc <xTaskResumeAll+0x130>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d009      	beq.n	80075b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075a0:	2301      	movs	r3, #1
 80075a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075a4:	4b0f      	ldr	r3, [pc, #60]	@ (80075e4 <xTaskResumeAll+0x138>)
 80075a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075b4:	f000 fbea 	bl	8007d8c <vPortExitCritical>

	return xAlreadyYielded;
 80075b8:	68bb      	ldr	r3, [r7, #8]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	2000074c 	.word	0x2000074c
 80075c8:	20000724 	.word	0x20000724
 80075cc:	200006e4 	.word	0x200006e4
 80075d0:	2000072c 	.word	0x2000072c
 80075d4:	20000628 	.word	0x20000628
 80075d8:	20000624 	.word	0x20000624
 80075dc:	20000738 	.word	0x20000738
 80075e0:	20000734 	.word	0x20000734
 80075e4:	e000ed04 	.word	0xe000ed04

080075e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075f2:	4b4f      	ldr	r3, [pc, #316]	@ (8007730 <xTaskIncrementTick+0x148>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f040 808f 	bne.w	800771a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075fc:	4b4d      	ldr	r3, [pc, #308]	@ (8007734 <xTaskIncrementTick+0x14c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3301      	adds	r3, #1
 8007602:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007604:	4a4b      	ldr	r2, [pc, #300]	@ (8007734 <xTaskIncrementTick+0x14c>)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d121      	bne.n	8007654 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007610:	4b49      	ldr	r3, [pc, #292]	@ (8007738 <xTaskIncrementTick+0x150>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00b      	beq.n	8007632 <xTaskIncrementTick+0x4a>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	603b      	str	r3, [r7, #0]
}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	e7fd      	b.n	800762e <xTaskIncrementTick+0x46>
 8007632:	4b41      	ldr	r3, [pc, #260]	@ (8007738 <xTaskIncrementTick+0x150>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	4b40      	ldr	r3, [pc, #256]	@ (800773c <xTaskIncrementTick+0x154>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a3e      	ldr	r2, [pc, #248]	@ (8007738 <xTaskIncrementTick+0x150>)
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	4a3e      	ldr	r2, [pc, #248]	@ (800773c <xTaskIncrementTick+0x154>)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6013      	str	r3, [r2, #0]
 8007646:	4b3e      	ldr	r3, [pc, #248]	@ (8007740 <xTaskIncrementTick+0x158>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3301      	adds	r3, #1
 800764c:	4a3c      	ldr	r2, [pc, #240]	@ (8007740 <xTaskIncrementTick+0x158>)
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	f000 f996 	bl	8007980 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007654:	4b3b      	ldr	r3, [pc, #236]	@ (8007744 <xTaskIncrementTick+0x15c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	429a      	cmp	r2, r3
 800765c:	d348      	bcc.n	80076f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800765e:	4b36      	ldr	r3, [pc, #216]	@ (8007738 <xTaskIncrementTick+0x150>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d104      	bne.n	8007672 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007668:	4b36      	ldr	r3, [pc, #216]	@ (8007744 <xTaskIncrementTick+0x15c>)
 800766a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800766e:	601a      	str	r2, [r3, #0]
					break;
 8007670:	e03e      	b.n	80076f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007672:	4b31      	ldr	r3, [pc, #196]	@ (8007738 <xTaskIncrementTick+0x150>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	429a      	cmp	r2, r3
 8007688:	d203      	bcs.n	8007692 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800768a:	4a2e      	ldr	r2, [pc, #184]	@ (8007744 <xTaskIncrementTick+0x15c>)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007690:	e02e      	b.n	80076f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	3304      	adds	r3, #4
 8007696:	4618      	mov	r0, r3
 8007698:	f7ff fca0 	bl	8006fdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	3318      	adds	r3, #24
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff fc97 	bl	8006fdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b2:	2201      	movs	r2, #1
 80076b4:	409a      	lsls	r2, r3
 80076b6:	4b24      	ldr	r3, [pc, #144]	@ (8007748 <xTaskIncrementTick+0x160>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	4a22      	ldr	r2, [pc, #136]	@ (8007748 <xTaskIncrementTick+0x160>)
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c4:	4613      	mov	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4a1f      	ldr	r2, [pc, #124]	@ (800774c <xTaskIncrementTick+0x164>)
 80076ce:	441a      	add	r2, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4619      	mov	r1, r3
 80076d6:	4610      	mov	r0, r2
 80076d8:	f7ff fc23 	bl	8006f22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007750 <xTaskIncrementTick+0x168>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d3b9      	bcc.n	800765e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80076ea:	2301      	movs	r3, #1
 80076ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ee:	e7b6      	b.n	800765e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076f0:	4b17      	ldr	r3, [pc, #92]	@ (8007750 <xTaskIncrementTick+0x168>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f6:	4915      	ldr	r1, [pc, #84]	@ (800774c <xTaskIncrementTick+0x164>)
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d901      	bls.n	800770c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800770c:	4b11      	ldr	r3, [pc, #68]	@ (8007754 <xTaskIncrementTick+0x16c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d007      	beq.n	8007724 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007714:	2301      	movs	r3, #1
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	e004      	b.n	8007724 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800771a:	4b0f      	ldr	r3, [pc, #60]	@ (8007758 <xTaskIncrementTick+0x170>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3301      	adds	r3, #1
 8007720:	4a0d      	ldr	r2, [pc, #52]	@ (8007758 <xTaskIncrementTick+0x170>)
 8007722:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007724:	697b      	ldr	r3, [r7, #20]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	2000074c 	.word	0x2000074c
 8007734:	20000728 	.word	0x20000728
 8007738:	200006dc 	.word	0x200006dc
 800773c:	200006e0 	.word	0x200006e0
 8007740:	2000073c 	.word	0x2000073c
 8007744:	20000744 	.word	0x20000744
 8007748:	2000072c 	.word	0x2000072c
 800774c:	20000628 	.word	0x20000628
 8007750:	20000624 	.word	0x20000624
 8007754:	20000738 	.word	0x20000738
 8007758:	20000734 	.word	0x20000734

0800775c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007762:	4b27      	ldr	r3, [pc, #156]	@ (8007800 <vTaskSwitchContext+0xa4>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800776a:	4b26      	ldr	r3, [pc, #152]	@ (8007804 <vTaskSwitchContext+0xa8>)
 800776c:	2201      	movs	r2, #1
 800776e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007770:	e040      	b.n	80077f4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007772:	4b24      	ldr	r3, [pc, #144]	@ (8007804 <vTaskSwitchContext+0xa8>)
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007778:	4b23      	ldr	r3, [pc, #140]	@ (8007808 <vTaskSwitchContext+0xac>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	fab3 f383 	clz	r3, r3
 8007784:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007786:	7afb      	ldrb	r3, [r7, #11]
 8007788:	f1c3 031f 	rsb	r3, r3, #31
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	491f      	ldr	r1, [pc, #124]	@ (800780c <vTaskSwitchContext+0xb0>)
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	440b      	add	r3, r1
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10b      	bne.n	80077ba <vTaskSwitchContext+0x5e>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	607b      	str	r3, [r7, #4]
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop
 80077b8:	e7fd      	b.n	80077b6 <vTaskSwitchContext+0x5a>
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4613      	mov	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4a11      	ldr	r2, [pc, #68]	@ (800780c <vTaskSwitchContext+0xb0>)
 80077c6:	4413      	add	r3, r2
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	605a      	str	r2, [r3, #4]
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	3308      	adds	r3, #8
 80077dc:	429a      	cmp	r2, r3
 80077de:	d104      	bne.n	80077ea <vTaskSwitchContext+0x8e>
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	605a      	str	r2, [r3, #4]
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	4a07      	ldr	r2, [pc, #28]	@ (8007810 <vTaskSwitchContext+0xb4>)
 80077f2:	6013      	str	r3, [r2, #0]
}
 80077f4:	bf00      	nop
 80077f6:	371c      	adds	r7, #28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	2000074c 	.word	0x2000074c
 8007804:	20000738 	.word	0x20000738
 8007808:	2000072c 	.word	0x2000072c
 800780c:	20000628 	.word	0x20000628
 8007810:	20000624 	.word	0x20000624

08007814 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800781c:	f000 f852 	bl	80078c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007820:	4b06      	ldr	r3, [pc, #24]	@ (800783c <prvIdleTask+0x28>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d9f9      	bls.n	800781c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007828:	4b05      	ldr	r3, [pc, #20]	@ (8007840 <prvIdleTask+0x2c>)
 800782a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007838:	e7f0      	b.n	800781c <prvIdleTask+0x8>
 800783a:	bf00      	nop
 800783c:	20000628 	.word	0x20000628
 8007840:	e000ed04 	.word	0xe000ed04

08007844 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800784a:	2300      	movs	r3, #0
 800784c:	607b      	str	r3, [r7, #4]
 800784e:	e00c      	b.n	800786a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4a12      	ldr	r2, [pc, #72]	@ (80078a4 <prvInitialiseTaskLists+0x60>)
 800785c:	4413      	add	r3, r2
 800785e:	4618      	mov	r0, r3
 8007860:	f7ff fb32 	bl	8006ec8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3301      	adds	r3, #1
 8007868:	607b      	str	r3, [r7, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b06      	cmp	r3, #6
 800786e:	d9ef      	bls.n	8007850 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007870:	480d      	ldr	r0, [pc, #52]	@ (80078a8 <prvInitialiseTaskLists+0x64>)
 8007872:	f7ff fb29 	bl	8006ec8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007876:	480d      	ldr	r0, [pc, #52]	@ (80078ac <prvInitialiseTaskLists+0x68>)
 8007878:	f7ff fb26 	bl	8006ec8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800787c:	480c      	ldr	r0, [pc, #48]	@ (80078b0 <prvInitialiseTaskLists+0x6c>)
 800787e:	f7ff fb23 	bl	8006ec8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007882:	480c      	ldr	r0, [pc, #48]	@ (80078b4 <prvInitialiseTaskLists+0x70>)
 8007884:	f7ff fb20 	bl	8006ec8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007888:	480b      	ldr	r0, [pc, #44]	@ (80078b8 <prvInitialiseTaskLists+0x74>)
 800788a:	f7ff fb1d 	bl	8006ec8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800788e:	4b0b      	ldr	r3, [pc, #44]	@ (80078bc <prvInitialiseTaskLists+0x78>)
 8007890:	4a05      	ldr	r2, [pc, #20]	@ (80078a8 <prvInitialiseTaskLists+0x64>)
 8007892:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007894:	4b0a      	ldr	r3, [pc, #40]	@ (80078c0 <prvInitialiseTaskLists+0x7c>)
 8007896:	4a05      	ldr	r2, [pc, #20]	@ (80078ac <prvInitialiseTaskLists+0x68>)
 8007898:	601a      	str	r2, [r3, #0]
}
 800789a:	bf00      	nop
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20000628 	.word	0x20000628
 80078a8:	200006b4 	.word	0x200006b4
 80078ac:	200006c8 	.word	0x200006c8
 80078b0:	200006e4 	.word	0x200006e4
 80078b4:	200006f8 	.word	0x200006f8
 80078b8:	20000710 	.word	0x20000710
 80078bc:	200006dc 	.word	0x200006dc
 80078c0:	200006e0 	.word	0x200006e0

080078c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078ca:	e019      	b.n	8007900 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078cc:	f000 fa2c 	bl	8007d28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d0:	4b10      	ldr	r3, [pc, #64]	@ (8007914 <prvCheckTasksWaitingTermination+0x50>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3304      	adds	r3, #4
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff fb7d 	bl	8006fdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007918 <prvCheckTasksWaitingTermination+0x54>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	4a0b      	ldr	r2, [pc, #44]	@ (8007918 <prvCheckTasksWaitingTermination+0x54>)
 80078ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078ec:	4b0b      	ldr	r3, [pc, #44]	@ (800791c <prvCheckTasksWaitingTermination+0x58>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	4a0a      	ldr	r2, [pc, #40]	@ (800791c <prvCheckTasksWaitingTermination+0x58>)
 80078f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078f6:	f000 fa49 	bl	8007d8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f810 	bl	8007920 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007900:	4b06      	ldr	r3, [pc, #24]	@ (800791c <prvCheckTasksWaitingTermination+0x58>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e1      	bne.n	80078cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007908:	bf00      	nop
 800790a:	bf00      	nop
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	200006f8 	.word	0x200006f8
 8007918:	20000724 	.word	0x20000724
 800791c:	2000070c 	.word	0x2000070c

08007920 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800792e:	2b00      	cmp	r3, #0
 8007930:	d108      	bne.n	8007944 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007936:	4618      	mov	r0, r3
 8007938:	f000 fba4 	bl	8008084 <vPortFree>
				vPortFree( pxTCB );
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fba1 	bl	8008084 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007942:	e019      	b.n	8007978 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800794a:	2b01      	cmp	r3, #1
 800794c:	d103      	bne.n	8007956 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fb98 	bl	8008084 <vPortFree>
	}
 8007954:	e010      	b.n	8007978 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800795c:	2b02      	cmp	r3, #2
 800795e:	d00b      	beq.n	8007978 <prvDeleteTCB+0x58>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	60fb      	str	r3, [r7, #12]
}
 8007972:	bf00      	nop
 8007974:	bf00      	nop
 8007976:	e7fd      	b.n	8007974 <prvDeleteTCB+0x54>
	}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007986:	4b0c      	ldr	r3, [pc, #48]	@ (80079b8 <prvResetNextTaskUnblockTime+0x38>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d104      	bne.n	800799a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007990:	4b0a      	ldr	r3, [pc, #40]	@ (80079bc <prvResetNextTaskUnblockTime+0x3c>)
 8007992:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007996:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007998:	e008      	b.n	80079ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800799a:	4b07      	ldr	r3, [pc, #28]	@ (80079b8 <prvResetNextTaskUnblockTime+0x38>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	4a04      	ldr	r2, [pc, #16]	@ (80079bc <prvResetNextTaskUnblockTime+0x3c>)
 80079aa:	6013      	str	r3, [r2, #0]
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	200006dc 	.word	0x200006dc
 80079bc:	20000744 	.word	0x20000744

080079c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079c6:	4b0b      	ldr	r3, [pc, #44]	@ (80079f4 <xTaskGetSchedulerState+0x34>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d102      	bne.n	80079d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079ce:	2301      	movs	r3, #1
 80079d0:	607b      	str	r3, [r7, #4]
 80079d2:	e008      	b.n	80079e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079d4:	4b08      	ldr	r3, [pc, #32]	@ (80079f8 <xTaskGetSchedulerState+0x38>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d102      	bne.n	80079e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079dc:	2302      	movs	r3, #2
 80079de:	607b      	str	r3, [r7, #4]
 80079e0:	e001      	b.n	80079e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079e2:	2300      	movs	r3, #0
 80079e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079e6:	687b      	ldr	r3, [r7, #4]
	}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	20000730 	.word	0x20000730
 80079f8:	2000074c 	.word	0x2000074c

080079fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a06:	4b29      	ldr	r3, [pc, #164]	@ (8007aac <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a0c:	4b28      	ldr	r3, [pc, #160]	@ (8007ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3304      	adds	r3, #4
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff fae2 	bl	8006fdc <uxListRemove>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10b      	bne.n	8007a36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a1e:	4b24      	ldr	r3, [pc, #144]	@ (8007ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a24:	2201      	movs	r2, #1
 8007a26:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2a:	43da      	mvns	r2, r3
 8007a2c:	4b21      	ldr	r3, [pc, #132]	@ (8007ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4013      	ands	r3, r2
 8007a32:	4a20      	ldr	r2, [pc, #128]	@ (8007ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a3c:	d10a      	bne.n	8007a54 <prvAddCurrentTaskToDelayedList+0x58>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d007      	beq.n	8007a54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a44:	4b1a      	ldr	r3, [pc, #104]	@ (8007ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	481a      	ldr	r0, [pc, #104]	@ (8007ab8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a4e:	f7ff fa68 	bl	8006f22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a52:	e026      	b.n	8007aa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a5c:	4b14      	ldr	r3, [pc, #80]	@ (8007ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d209      	bcs.n	8007a80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a6c:	4b13      	ldr	r3, [pc, #76]	@ (8007abc <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	4b0f      	ldr	r3, [pc, #60]	@ (8007ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3304      	adds	r3, #4
 8007a76:	4619      	mov	r1, r3
 8007a78:	4610      	mov	r0, r2
 8007a7a:	f7ff fa76 	bl	8006f6a <vListInsert>
}
 8007a7e:	e010      	b.n	8007aa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a80:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f7ff fa6c 	bl	8006f6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a92:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d202      	bcs.n	8007aa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a9c:	4a09      	ldr	r2, [pc, #36]	@ (8007ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	6013      	str	r3, [r2, #0]
}
 8007aa2:	bf00      	nop
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20000728 	.word	0x20000728
 8007ab0:	20000624 	.word	0x20000624
 8007ab4:	2000072c 	.word	0x2000072c
 8007ab8:	20000710 	.word	0x20000710
 8007abc:	200006e0 	.word	0x200006e0
 8007ac0:	200006dc 	.word	0x200006dc
 8007ac4:	20000744 	.word	0x20000744

08007ac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3b04      	subs	r3, #4
 8007ad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3b04      	subs	r3, #4
 8007ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f023 0201 	bic.w	r2, r3, #1
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3b04      	subs	r3, #4
 8007af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007af8:	4a0c      	ldr	r2, [pc, #48]	@ (8007b2c <pxPortInitialiseStack+0x64>)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3b14      	subs	r3, #20
 8007b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3b04      	subs	r3, #4
 8007b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f06f 0202 	mvn.w	r2, #2
 8007b16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3b20      	subs	r3, #32
 8007b1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	08007b31 	.word	0x08007b31

08007b30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b36:	2300      	movs	r3, #0
 8007b38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b3a:	4b13      	ldr	r3, [pc, #76]	@ (8007b88 <prvTaskExitError+0x58>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b42:	d00b      	beq.n	8007b5c <prvTaskExitError+0x2c>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	60fb      	str	r3, [r7, #12]
}
 8007b56:	bf00      	nop
 8007b58:	bf00      	nop
 8007b5a:	e7fd      	b.n	8007b58 <prvTaskExitError+0x28>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	60bb      	str	r3, [r7, #8]
}
 8007b6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b70:	bf00      	nop
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0fc      	beq.n	8007b72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b78:	bf00      	nop
 8007b7a:	bf00      	nop
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	2000000c 	.word	0x2000000c
 8007b8c:	00000000 	.word	0x00000000

08007b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b90:	4b07      	ldr	r3, [pc, #28]	@ (8007bb0 <pxCurrentTCBConst2>)
 8007b92:	6819      	ldr	r1, [r3, #0]
 8007b94:	6808      	ldr	r0, [r1, #0]
 8007b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9a:	f380 8809 	msr	PSP, r0
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f04f 0000 	mov.w	r0, #0
 8007ba6:	f380 8811 	msr	BASEPRI, r0
 8007baa:	4770      	bx	lr
 8007bac:	f3af 8000 	nop.w

08007bb0 <pxCurrentTCBConst2>:
 8007bb0:	20000624 	.word	0x20000624
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop

08007bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bb8:	4808      	ldr	r0, [pc, #32]	@ (8007bdc <prvPortStartFirstTask+0x24>)
 8007bba:	6800      	ldr	r0, [r0, #0]
 8007bbc:	6800      	ldr	r0, [r0, #0]
 8007bbe:	f380 8808 	msr	MSP, r0
 8007bc2:	f04f 0000 	mov.w	r0, #0
 8007bc6:	f380 8814 	msr	CONTROL, r0
 8007bca:	b662      	cpsie	i
 8007bcc:	b661      	cpsie	f
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	df00      	svc	0
 8007bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bda:	bf00      	nop
 8007bdc:	e000ed08 	.word	0xe000ed08

08007be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007be6:	4b47      	ldr	r3, [pc, #284]	@ (8007d04 <xPortStartScheduler+0x124>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a47      	ldr	r2, [pc, #284]	@ (8007d08 <xPortStartScheduler+0x128>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d10b      	bne.n	8007c08 <xPortStartScheduler+0x28>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	613b      	str	r3, [r7, #16]
}
 8007c02:	bf00      	nop
 8007c04:	bf00      	nop
 8007c06:	e7fd      	b.n	8007c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c08:	4b3e      	ldr	r3, [pc, #248]	@ (8007d04 <xPortStartScheduler+0x124>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a3f      	ldr	r2, [pc, #252]	@ (8007d0c <xPortStartScheduler+0x12c>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d10b      	bne.n	8007c2a <xPortStartScheduler+0x4a>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	60fb      	str	r3, [r7, #12]
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop
 8007c28:	e7fd      	b.n	8007c26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c2a:	4b39      	ldr	r3, [pc, #228]	@ (8007d10 <xPortStartScheduler+0x130>)
 8007c2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	22ff      	movs	r2, #255	@ 0xff
 8007c3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	4b31      	ldr	r3, [pc, #196]	@ (8007d14 <xPortStartScheduler+0x134>)
 8007c50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c52:	4b31      	ldr	r3, [pc, #196]	@ (8007d18 <xPortStartScheduler+0x138>)
 8007c54:	2207      	movs	r2, #7
 8007c56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c58:	e009      	b.n	8007c6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d18 <xPortStartScheduler+0x138>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	4a2d      	ldr	r2, [pc, #180]	@ (8007d18 <xPortStartScheduler+0x138>)
 8007c62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c64:	78fb      	ldrb	r3, [r7, #3]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c76:	2b80      	cmp	r3, #128	@ 0x80
 8007c78:	d0ef      	beq.n	8007c5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c7a:	4b27      	ldr	r3, [pc, #156]	@ (8007d18 <xPortStartScheduler+0x138>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f1c3 0307 	rsb	r3, r3, #7
 8007c82:	2b04      	cmp	r3, #4
 8007c84:	d00b      	beq.n	8007c9e <xPortStartScheduler+0xbe>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	60bb      	str	r3, [r7, #8]
}
 8007c98:	bf00      	nop
 8007c9a:	bf00      	nop
 8007c9c:	e7fd      	b.n	8007c9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007d18 <xPortStartScheduler+0x138>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	021b      	lsls	r3, r3, #8
 8007ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d18 <xPortStartScheduler+0x138>)
 8007ca6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8007d18 <xPortStartScheduler+0x138>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007cb0:	4a19      	ldr	r2, [pc, #100]	@ (8007d18 <xPortStartScheduler+0x138>)
 8007cb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cbc:	4b17      	ldr	r3, [pc, #92]	@ (8007d1c <xPortStartScheduler+0x13c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a16      	ldr	r2, [pc, #88]	@ (8007d1c <xPortStartScheduler+0x13c>)
 8007cc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007cc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cc8:	4b14      	ldr	r3, [pc, #80]	@ (8007d1c <xPortStartScheduler+0x13c>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a13      	ldr	r2, [pc, #76]	@ (8007d1c <xPortStartScheduler+0x13c>)
 8007cce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007cd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cd4:	f000 f8da 	bl	8007e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cd8:	4b11      	ldr	r3, [pc, #68]	@ (8007d20 <xPortStartScheduler+0x140>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cde:	f000 f8f9 	bl	8007ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ce2:	4b10      	ldr	r3, [pc, #64]	@ (8007d24 <xPortStartScheduler+0x144>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8007d24 <xPortStartScheduler+0x144>)
 8007ce8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007cec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cee:	f7ff ff63 	bl	8007bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cf2:	f7ff fd33 	bl	800775c <vTaskSwitchContext>
	prvTaskExitError();
 8007cf6:	f7ff ff1b 	bl	8007b30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	e000ed00 	.word	0xe000ed00
 8007d08:	410fc271 	.word	0x410fc271
 8007d0c:	410fc270 	.word	0x410fc270
 8007d10:	e000e400 	.word	0xe000e400
 8007d14:	20000750 	.word	0x20000750
 8007d18:	20000754 	.word	0x20000754
 8007d1c:	e000ed20 	.word	0xe000ed20
 8007d20:	2000000c 	.word	0x2000000c
 8007d24:	e000ef34 	.word	0xe000ef34

08007d28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	607b      	str	r3, [r7, #4]
}
 8007d40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d42:	4b10      	ldr	r3, [pc, #64]	@ (8007d84 <vPortEnterCritical+0x5c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3301      	adds	r3, #1
 8007d48:	4a0e      	ldr	r2, [pc, #56]	@ (8007d84 <vPortEnterCritical+0x5c>)
 8007d4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d84 <vPortEnterCritical+0x5c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d110      	bne.n	8007d76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d54:	4b0c      	ldr	r3, [pc, #48]	@ (8007d88 <vPortEnterCritical+0x60>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00b      	beq.n	8007d76 <vPortEnterCritical+0x4e>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	603b      	str	r3, [r7, #0]
}
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	e7fd      	b.n	8007d72 <vPortEnterCritical+0x4a>
	}
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	2000000c 	.word	0x2000000c
 8007d88:	e000ed04 	.word	0xe000ed04

08007d8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d92:	4b12      	ldr	r3, [pc, #72]	@ (8007ddc <vPortExitCritical+0x50>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10b      	bne.n	8007db2 <vPortExitCritical+0x26>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	607b      	str	r3, [r7, #4]
}
 8007dac:	bf00      	nop
 8007dae:	bf00      	nop
 8007db0:	e7fd      	b.n	8007dae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007db2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ddc <vPortExitCritical+0x50>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	4a08      	ldr	r2, [pc, #32]	@ (8007ddc <vPortExitCritical+0x50>)
 8007dba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dbc:	4b07      	ldr	r3, [pc, #28]	@ (8007ddc <vPortExitCritical+0x50>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d105      	bne.n	8007dd0 <vPortExitCritical+0x44>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007dce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	2000000c 	.word	0x2000000c

08007de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007de0:	f3ef 8009 	mrs	r0, PSP
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	4b15      	ldr	r3, [pc, #84]	@ (8007e40 <pxCurrentTCBConst>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	f01e 0f10 	tst.w	lr, #16
 8007df0:	bf08      	it	eq
 8007df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfa:	6010      	str	r0, [r2, #0]
 8007dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e04:	f380 8811 	msr	BASEPRI, r0
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f7ff fca4 	bl	800775c <vTaskSwitchContext>
 8007e14:	f04f 0000 	mov.w	r0, #0
 8007e18:	f380 8811 	msr	BASEPRI, r0
 8007e1c:	bc09      	pop	{r0, r3}
 8007e1e:	6819      	ldr	r1, [r3, #0]
 8007e20:	6808      	ldr	r0, [r1, #0]
 8007e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e26:	f01e 0f10 	tst.w	lr, #16
 8007e2a:	bf08      	it	eq
 8007e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e30:	f380 8809 	msr	PSP, r0
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	f3af 8000 	nop.w

08007e40 <pxCurrentTCBConst>:
 8007e40:	20000624 	.word	0x20000624
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop

08007e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	607b      	str	r3, [r7, #4]
}
 8007e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e62:	f7ff fbc1 	bl	80075e8 <xTaskIncrementTick>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e6c:	4b06      	ldr	r3, [pc, #24]	@ (8007e88 <xPortSysTickHandler+0x40>)
 8007e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	2300      	movs	r3, #0
 8007e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	f383 8811 	msr	BASEPRI, r3
}
 8007e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	e000ed04 	.word	0xe000ed04

08007e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e90:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec0 <vPortSetupTimerInterrupt+0x34>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e96:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec4 <vPortSetupTimerInterrupt+0x38>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec8 <vPortSetupTimerInterrupt+0x3c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8007ecc <vPortSetupTimerInterrupt+0x40>)
 8007ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea6:	099b      	lsrs	r3, r3, #6
 8007ea8:	4a09      	ldr	r2, [pc, #36]	@ (8007ed0 <vPortSetupTimerInterrupt+0x44>)
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007eae:	4b04      	ldr	r3, [pc, #16]	@ (8007ec0 <vPortSetupTimerInterrupt+0x34>)
 8007eb0:	2207      	movs	r2, #7
 8007eb2:	601a      	str	r2, [r3, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	e000e010 	.word	0xe000e010
 8007ec4:	e000e018 	.word	0xe000e018
 8007ec8:	20000000 	.word	0x20000000
 8007ecc:	10624dd3 	.word	0x10624dd3
 8007ed0:	e000e014 	.word	0xe000e014

08007ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ee4 <vPortEnableVFP+0x10>
 8007ed8:	6801      	ldr	r1, [r0, #0]
 8007eda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ede:	6001      	str	r1, [r0, #0]
 8007ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ee2:	bf00      	nop
 8007ee4:	e000ed88 	.word	0xe000ed88

08007ee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	@ 0x28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ef4:	f7ff facc 	bl	8007490 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ef8:	4b5c      	ldr	r3, [pc, #368]	@ (800806c <pvPortMalloc+0x184>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f00:	f000 f924 	bl	800814c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f04:	4b5a      	ldr	r3, [pc, #360]	@ (8008070 <pvPortMalloc+0x188>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f040 8095 	bne.w	800803c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01e      	beq.n	8007f56 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007f18:	2208      	movs	r2, #8
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f003 0307 	and.w	r3, r3, #7
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d015      	beq.n	8007f56 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f023 0307 	bic.w	r3, r3, #7
 8007f30:	3308      	adds	r3, #8
 8007f32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00b      	beq.n	8007f56 <pvPortMalloc+0x6e>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	617b      	str	r3, [r7, #20]
}
 8007f50:	bf00      	nop
 8007f52:	bf00      	nop
 8007f54:	e7fd      	b.n	8007f52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d06f      	beq.n	800803c <pvPortMalloc+0x154>
 8007f5c:	4b45      	ldr	r3, [pc, #276]	@ (8008074 <pvPortMalloc+0x18c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d86a      	bhi.n	800803c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f66:	4b44      	ldr	r3, [pc, #272]	@ (8008078 <pvPortMalloc+0x190>)
 8007f68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f6a:	4b43      	ldr	r3, [pc, #268]	@ (8008078 <pvPortMalloc+0x190>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f70:	e004      	b.n	8007f7c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d903      	bls.n	8007f8e <pvPortMalloc+0xa6>
 8007f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1f1      	bne.n	8007f72 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f8e:	4b37      	ldr	r3, [pc, #220]	@ (800806c <pvPortMalloc+0x184>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d051      	beq.n	800803c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2208      	movs	r2, #8
 8007f9e:	4413      	add	r3, r2
 8007fa0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	1ad2      	subs	r2, r2, r3
 8007fb2:	2308      	movs	r3, #8
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d920      	bls.n	8007ffc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	f003 0307 	and.w	r3, r3, #7
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <pvPortMalloc+0xfc>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	613b      	str	r3, [r7, #16]
}
 8007fde:	bf00      	nop
 8007fe0:	bf00      	nop
 8007fe2:	e7fd      	b.n	8007fe0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	1ad2      	subs	r2, r2, r3
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ff6:	69b8      	ldr	r0, [r7, #24]
 8007ff8:	f000 f90a 	bl	8008210 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8008074 <pvPortMalloc+0x18c>)
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	4a1b      	ldr	r2, [pc, #108]	@ (8008074 <pvPortMalloc+0x18c>)
 8008008:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800800a:	4b1a      	ldr	r3, [pc, #104]	@ (8008074 <pvPortMalloc+0x18c>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4b1b      	ldr	r3, [pc, #108]	@ (800807c <pvPortMalloc+0x194>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d203      	bcs.n	800801e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008016:	4b17      	ldr	r3, [pc, #92]	@ (8008074 <pvPortMalloc+0x18c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a18      	ldr	r2, [pc, #96]	@ (800807c <pvPortMalloc+0x194>)
 800801c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800801e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	4b13      	ldr	r3, [pc, #76]	@ (8008070 <pvPortMalloc+0x188>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	431a      	orrs	r2, r3
 8008028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802e:	2200      	movs	r2, #0
 8008030:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008032:	4b13      	ldr	r3, [pc, #76]	@ (8008080 <pvPortMalloc+0x198>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3301      	adds	r3, #1
 8008038:	4a11      	ldr	r2, [pc, #68]	@ (8008080 <pvPortMalloc+0x198>)
 800803a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800803c:	f7ff fa36 	bl	80074ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00b      	beq.n	8008062 <pvPortMalloc+0x17a>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	60fb      	str	r3, [r7, #12]
}
 800805c:	bf00      	nop
 800805e:	bf00      	nop
 8008060:	e7fd      	b.n	800805e <pvPortMalloc+0x176>
	return pvReturn;
 8008062:	69fb      	ldr	r3, [r7, #28]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3728      	adds	r7, #40	@ 0x28
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	20001318 	.word	0x20001318
 8008070:	2000132c 	.word	0x2000132c
 8008074:	2000131c 	.word	0x2000131c
 8008078:	20001310 	.word	0x20001310
 800807c:	20001320 	.word	0x20001320
 8008080:	20001324 	.word	0x20001324

08008084 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d04f      	beq.n	8008136 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008096:	2308      	movs	r3, #8
 8008098:	425b      	negs	r3, r3
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	4413      	add	r3, r2
 800809e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	4b25      	ldr	r3, [pc, #148]	@ (8008140 <vPortFree+0xbc>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4013      	ands	r3, r2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10b      	bne.n	80080ca <vPortFree+0x46>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	60fb      	str	r3, [r7, #12]
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop
 80080c8:	e7fd      	b.n	80080c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00b      	beq.n	80080ea <vPortFree+0x66>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	60bb      	str	r3, [r7, #8]
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
 80080e8:	e7fd      	b.n	80080e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	4b14      	ldr	r3, [pc, #80]	@ (8008140 <vPortFree+0xbc>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d01e      	beq.n	8008136 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d11a      	bne.n	8008136 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	4b0e      	ldr	r3, [pc, #56]	@ (8008140 <vPortFree+0xbc>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	43db      	mvns	r3, r3
 800810a:	401a      	ands	r2, r3
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008110:	f7ff f9be 	bl	8007490 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	4b0a      	ldr	r3, [pc, #40]	@ (8008144 <vPortFree+0xc0>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4413      	add	r3, r2
 800811e:	4a09      	ldr	r2, [pc, #36]	@ (8008144 <vPortFree+0xc0>)
 8008120:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008122:	6938      	ldr	r0, [r7, #16]
 8008124:	f000 f874 	bl	8008210 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008128:	4b07      	ldr	r3, [pc, #28]	@ (8008148 <vPortFree+0xc4>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3301      	adds	r3, #1
 800812e:	4a06      	ldr	r2, [pc, #24]	@ (8008148 <vPortFree+0xc4>)
 8008130:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008132:	f7ff f9bb 	bl	80074ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008136:	bf00      	nop
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	2000132c 	.word	0x2000132c
 8008144:	2000131c 	.word	0x2000131c
 8008148:	20001328 	.word	0x20001328

0800814c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008152:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008156:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008158:	4b27      	ldr	r3, [pc, #156]	@ (80081f8 <prvHeapInit+0xac>)
 800815a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00c      	beq.n	8008180 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3307      	adds	r3, #7
 800816a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0307 	bic.w	r3, r3, #7
 8008172:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	4a1f      	ldr	r2, [pc, #124]	@ (80081f8 <prvHeapInit+0xac>)
 800817c:	4413      	add	r3, r2
 800817e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008184:	4a1d      	ldr	r2, [pc, #116]	@ (80081fc <prvHeapInit+0xb0>)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800818a:	4b1c      	ldr	r3, [pc, #112]	@ (80081fc <prvHeapInit+0xb0>)
 800818c:	2200      	movs	r2, #0
 800818e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	4413      	add	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008198:	2208      	movs	r2, #8
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	1a9b      	subs	r3, r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 0307 	bic.w	r3, r3, #7
 80081a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4a15      	ldr	r2, [pc, #84]	@ (8008200 <prvHeapInit+0xb4>)
 80081ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081ae:	4b14      	ldr	r3, [pc, #80]	@ (8008200 <prvHeapInit+0xb4>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2200      	movs	r2, #0
 80081b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081b6:	4b12      	ldr	r3, [pc, #72]	@ (8008200 <prvHeapInit+0xb4>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2200      	movs	r2, #0
 80081bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	1ad2      	subs	r2, r2, r3
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008200 <prvHeapInit+0xb4>)
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	4a0a      	ldr	r2, [pc, #40]	@ (8008204 <prvHeapInit+0xb8>)
 80081da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	4a09      	ldr	r2, [pc, #36]	@ (8008208 <prvHeapInit+0xbc>)
 80081e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081e4:	4b09      	ldr	r3, [pc, #36]	@ (800820c <prvHeapInit+0xc0>)
 80081e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80081ea:	601a      	str	r2, [r3, #0]
}
 80081ec:	bf00      	nop
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	20000758 	.word	0x20000758
 80081fc:	20001310 	.word	0x20001310
 8008200:	20001318 	.word	0x20001318
 8008204:	20001320 	.word	0x20001320
 8008208:	2000131c 	.word	0x2000131c
 800820c:	2000132c 	.word	0x2000132c

08008210 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008218:	4b28      	ldr	r3, [pc, #160]	@ (80082bc <prvInsertBlockIntoFreeList+0xac>)
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	e002      	b.n	8008224 <prvInsertBlockIntoFreeList+0x14>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	429a      	cmp	r2, r3
 800822c:	d8f7      	bhi.n	800821e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	4413      	add	r3, r2
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	429a      	cmp	r2, r3
 800823e:	d108      	bne.n	8008252 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	441a      	add	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	441a      	add	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d118      	bne.n	8008298 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	4b15      	ldr	r3, [pc, #84]	@ (80082c0 <prvInsertBlockIntoFreeList+0xb0>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	429a      	cmp	r2, r3
 8008270:	d00d      	beq.n	800828e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	441a      	add	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	e008      	b.n	80082a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800828e:	4b0c      	ldr	r3, [pc, #48]	@ (80082c0 <prvInsertBlockIntoFreeList+0xb0>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	e003      	b.n	80082a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d002      	beq.n	80082ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082ae:	bf00      	nop
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	20001310 	.word	0x20001310
 80082c0:	20001318 	.word	0x20001318

080082c4 <std>:
 80082c4:	2300      	movs	r3, #0
 80082c6:	b510      	push	{r4, lr}
 80082c8:	4604      	mov	r4, r0
 80082ca:	e9c0 3300 	strd	r3, r3, [r0]
 80082ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082d2:	6083      	str	r3, [r0, #8]
 80082d4:	8181      	strh	r1, [r0, #12]
 80082d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80082d8:	81c2      	strh	r2, [r0, #14]
 80082da:	6183      	str	r3, [r0, #24]
 80082dc:	4619      	mov	r1, r3
 80082de:	2208      	movs	r2, #8
 80082e0:	305c      	adds	r0, #92	@ 0x5c
 80082e2:	f000 fa1b 	bl	800871c <memset>
 80082e6:	4b0d      	ldr	r3, [pc, #52]	@ (800831c <std+0x58>)
 80082e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80082ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008320 <std+0x5c>)
 80082ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80082ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008324 <std+0x60>)
 80082f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80082f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008328 <std+0x64>)
 80082f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80082f6:	4b0d      	ldr	r3, [pc, #52]	@ (800832c <std+0x68>)
 80082f8:	6224      	str	r4, [r4, #32]
 80082fa:	429c      	cmp	r4, r3
 80082fc:	d006      	beq.n	800830c <std+0x48>
 80082fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008302:	4294      	cmp	r4, r2
 8008304:	d002      	beq.n	800830c <std+0x48>
 8008306:	33d0      	adds	r3, #208	@ 0xd0
 8008308:	429c      	cmp	r4, r3
 800830a:	d105      	bne.n	8008318 <std+0x54>
 800830c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008314:	f000 bad6 	b.w	80088c4 <__retarget_lock_init_recursive>
 8008318:	bd10      	pop	{r4, pc}
 800831a:	bf00      	nop
 800831c:	0800856d 	.word	0x0800856d
 8008320:	0800858f 	.word	0x0800858f
 8008324:	080085c7 	.word	0x080085c7
 8008328:	080085eb 	.word	0x080085eb
 800832c:	20001330 	.word	0x20001330

08008330 <stdio_exit_handler>:
 8008330:	4a02      	ldr	r2, [pc, #8]	@ (800833c <stdio_exit_handler+0xc>)
 8008332:	4903      	ldr	r1, [pc, #12]	@ (8008340 <stdio_exit_handler+0x10>)
 8008334:	4803      	ldr	r0, [pc, #12]	@ (8008344 <stdio_exit_handler+0x14>)
 8008336:	f000 b869 	b.w	800840c <_fwalk_sglue>
 800833a:	bf00      	nop
 800833c:	20000010 	.word	0x20000010
 8008340:	080091f9 	.word	0x080091f9
 8008344:	20000020 	.word	0x20000020

08008348 <cleanup_stdio>:
 8008348:	6841      	ldr	r1, [r0, #4]
 800834a:	4b0c      	ldr	r3, [pc, #48]	@ (800837c <cleanup_stdio+0x34>)
 800834c:	4299      	cmp	r1, r3
 800834e:	b510      	push	{r4, lr}
 8008350:	4604      	mov	r4, r0
 8008352:	d001      	beq.n	8008358 <cleanup_stdio+0x10>
 8008354:	f000 ff50 	bl	80091f8 <_fflush_r>
 8008358:	68a1      	ldr	r1, [r4, #8]
 800835a:	4b09      	ldr	r3, [pc, #36]	@ (8008380 <cleanup_stdio+0x38>)
 800835c:	4299      	cmp	r1, r3
 800835e:	d002      	beq.n	8008366 <cleanup_stdio+0x1e>
 8008360:	4620      	mov	r0, r4
 8008362:	f000 ff49 	bl	80091f8 <_fflush_r>
 8008366:	68e1      	ldr	r1, [r4, #12]
 8008368:	4b06      	ldr	r3, [pc, #24]	@ (8008384 <cleanup_stdio+0x3c>)
 800836a:	4299      	cmp	r1, r3
 800836c:	d004      	beq.n	8008378 <cleanup_stdio+0x30>
 800836e:	4620      	mov	r0, r4
 8008370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008374:	f000 bf40 	b.w	80091f8 <_fflush_r>
 8008378:	bd10      	pop	{r4, pc}
 800837a:	bf00      	nop
 800837c:	20001330 	.word	0x20001330
 8008380:	20001398 	.word	0x20001398
 8008384:	20001400 	.word	0x20001400

08008388 <global_stdio_init.part.0>:
 8008388:	b510      	push	{r4, lr}
 800838a:	4b0b      	ldr	r3, [pc, #44]	@ (80083b8 <global_stdio_init.part.0+0x30>)
 800838c:	4c0b      	ldr	r4, [pc, #44]	@ (80083bc <global_stdio_init.part.0+0x34>)
 800838e:	4a0c      	ldr	r2, [pc, #48]	@ (80083c0 <global_stdio_init.part.0+0x38>)
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	4620      	mov	r0, r4
 8008394:	2200      	movs	r2, #0
 8008396:	2104      	movs	r1, #4
 8008398:	f7ff ff94 	bl	80082c4 <std>
 800839c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80083a0:	2201      	movs	r2, #1
 80083a2:	2109      	movs	r1, #9
 80083a4:	f7ff ff8e 	bl	80082c4 <std>
 80083a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80083ac:	2202      	movs	r2, #2
 80083ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083b2:	2112      	movs	r1, #18
 80083b4:	f7ff bf86 	b.w	80082c4 <std>
 80083b8:	20001468 	.word	0x20001468
 80083bc:	20001330 	.word	0x20001330
 80083c0:	08008331 	.word	0x08008331

080083c4 <__sfp_lock_acquire>:
 80083c4:	4801      	ldr	r0, [pc, #4]	@ (80083cc <__sfp_lock_acquire+0x8>)
 80083c6:	f000 ba7e 	b.w	80088c6 <__retarget_lock_acquire_recursive>
 80083ca:	bf00      	nop
 80083cc:	20001471 	.word	0x20001471

080083d0 <__sfp_lock_release>:
 80083d0:	4801      	ldr	r0, [pc, #4]	@ (80083d8 <__sfp_lock_release+0x8>)
 80083d2:	f000 ba79 	b.w	80088c8 <__retarget_lock_release_recursive>
 80083d6:	bf00      	nop
 80083d8:	20001471 	.word	0x20001471

080083dc <__sinit>:
 80083dc:	b510      	push	{r4, lr}
 80083de:	4604      	mov	r4, r0
 80083e0:	f7ff fff0 	bl	80083c4 <__sfp_lock_acquire>
 80083e4:	6a23      	ldr	r3, [r4, #32]
 80083e6:	b11b      	cbz	r3, 80083f0 <__sinit+0x14>
 80083e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083ec:	f7ff bff0 	b.w	80083d0 <__sfp_lock_release>
 80083f0:	4b04      	ldr	r3, [pc, #16]	@ (8008404 <__sinit+0x28>)
 80083f2:	6223      	str	r3, [r4, #32]
 80083f4:	4b04      	ldr	r3, [pc, #16]	@ (8008408 <__sinit+0x2c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1f5      	bne.n	80083e8 <__sinit+0xc>
 80083fc:	f7ff ffc4 	bl	8008388 <global_stdio_init.part.0>
 8008400:	e7f2      	b.n	80083e8 <__sinit+0xc>
 8008402:	bf00      	nop
 8008404:	08008349 	.word	0x08008349
 8008408:	20001468 	.word	0x20001468

0800840c <_fwalk_sglue>:
 800840c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008410:	4607      	mov	r7, r0
 8008412:	4688      	mov	r8, r1
 8008414:	4614      	mov	r4, r2
 8008416:	2600      	movs	r6, #0
 8008418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800841c:	f1b9 0901 	subs.w	r9, r9, #1
 8008420:	d505      	bpl.n	800842e <_fwalk_sglue+0x22>
 8008422:	6824      	ldr	r4, [r4, #0]
 8008424:	2c00      	cmp	r4, #0
 8008426:	d1f7      	bne.n	8008418 <_fwalk_sglue+0xc>
 8008428:	4630      	mov	r0, r6
 800842a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800842e:	89ab      	ldrh	r3, [r5, #12]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d907      	bls.n	8008444 <_fwalk_sglue+0x38>
 8008434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008438:	3301      	adds	r3, #1
 800843a:	d003      	beq.n	8008444 <_fwalk_sglue+0x38>
 800843c:	4629      	mov	r1, r5
 800843e:	4638      	mov	r0, r7
 8008440:	47c0      	blx	r8
 8008442:	4306      	orrs	r6, r0
 8008444:	3568      	adds	r5, #104	@ 0x68
 8008446:	e7e9      	b.n	800841c <_fwalk_sglue+0x10>

08008448 <_puts_r>:
 8008448:	6a03      	ldr	r3, [r0, #32]
 800844a:	b570      	push	{r4, r5, r6, lr}
 800844c:	6884      	ldr	r4, [r0, #8]
 800844e:	4605      	mov	r5, r0
 8008450:	460e      	mov	r6, r1
 8008452:	b90b      	cbnz	r3, 8008458 <_puts_r+0x10>
 8008454:	f7ff ffc2 	bl	80083dc <__sinit>
 8008458:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800845a:	07db      	lsls	r3, r3, #31
 800845c:	d405      	bmi.n	800846a <_puts_r+0x22>
 800845e:	89a3      	ldrh	r3, [r4, #12]
 8008460:	0598      	lsls	r0, r3, #22
 8008462:	d402      	bmi.n	800846a <_puts_r+0x22>
 8008464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008466:	f000 fa2e 	bl	80088c6 <__retarget_lock_acquire_recursive>
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	0719      	lsls	r1, r3, #28
 800846e:	d502      	bpl.n	8008476 <_puts_r+0x2e>
 8008470:	6923      	ldr	r3, [r4, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d135      	bne.n	80084e2 <_puts_r+0x9a>
 8008476:	4621      	mov	r1, r4
 8008478:	4628      	mov	r0, r5
 800847a:	f000 f8f9 	bl	8008670 <__swsetup_r>
 800847e:	b380      	cbz	r0, 80084e2 <_puts_r+0x9a>
 8008480:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008484:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008486:	07da      	lsls	r2, r3, #31
 8008488:	d405      	bmi.n	8008496 <_puts_r+0x4e>
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	059b      	lsls	r3, r3, #22
 800848e:	d402      	bmi.n	8008496 <_puts_r+0x4e>
 8008490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008492:	f000 fa19 	bl	80088c8 <__retarget_lock_release_recursive>
 8008496:	4628      	mov	r0, r5
 8008498:	bd70      	pop	{r4, r5, r6, pc}
 800849a:	2b00      	cmp	r3, #0
 800849c:	da04      	bge.n	80084a8 <_puts_r+0x60>
 800849e:	69a2      	ldr	r2, [r4, #24]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	dc17      	bgt.n	80084d4 <_puts_r+0x8c>
 80084a4:	290a      	cmp	r1, #10
 80084a6:	d015      	beq.n	80084d4 <_puts_r+0x8c>
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	6022      	str	r2, [r4, #0]
 80084ae:	7019      	strb	r1, [r3, #0]
 80084b0:	68a3      	ldr	r3, [r4, #8]
 80084b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084b6:	3b01      	subs	r3, #1
 80084b8:	60a3      	str	r3, [r4, #8]
 80084ba:	2900      	cmp	r1, #0
 80084bc:	d1ed      	bne.n	800849a <_puts_r+0x52>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	da11      	bge.n	80084e6 <_puts_r+0x9e>
 80084c2:	4622      	mov	r2, r4
 80084c4:	210a      	movs	r1, #10
 80084c6:	4628      	mov	r0, r5
 80084c8:	f000 f893 	bl	80085f2 <__swbuf_r>
 80084cc:	3001      	adds	r0, #1
 80084ce:	d0d7      	beq.n	8008480 <_puts_r+0x38>
 80084d0:	250a      	movs	r5, #10
 80084d2:	e7d7      	b.n	8008484 <_puts_r+0x3c>
 80084d4:	4622      	mov	r2, r4
 80084d6:	4628      	mov	r0, r5
 80084d8:	f000 f88b 	bl	80085f2 <__swbuf_r>
 80084dc:	3001      	adds	r0, #1
 80084de:	d1e7      	bne.n	80084b0 <_puts_r+0x68>
 80084e0:	e7ce      	b.n	8008480 <_puts_r+0x38>
 80084e2:	3e01      	subs	r6, #1
 80084e4:	e7e4      	b.n	80084b0 <_puts_r+0x68>
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	6022      	str	r2, [r4, #0]
 80084ec:	220a      	movs	r2, #10
 80084ee:	701a      	strb	r2, [r3, #0]
 80084f0:	e7ee      	b.n	80084d0 <_puts_r+0x88>
	...

080084f4 <puts>:
 80084f4:	4b02      	ldr	r3, [pc, #8]	@ (8008500 <puts+0xc>)
 80084f6:	4601      	mov	r1, r0
 80084f8:	6818      	ldr	r0, [r3, #0]
 80084fa:	f7ff bfa5 	b.w	8008448 <_puts_r>
 80084fe:	bf00      	nop
 8008500:	2000001c 	.word	0x2000001c

08008504 <sniprintf>:
 8008504:	b40c      	push	{r2, r3}
 8008506:	b530      	push	{r4, r5, lr}
 8008508:	4b17      	ldr	r3, [pc, #92]	@ (8008568 <sniprintf+0x64>)
 800850a:	1e0c      	subs	r4, r1, #0
 800850c:	681d      	ldr	r5, [r3, #0]
 800850e:	b09d      	sub	sp, #116	@ 0x74
 8008510:	da08      	bge.n	8008524 <sniprintf+0x20>
 8008512:	238b      	movs	r3, #139	@ 0x8b
 8008514:	602b      	str	r3, [r5, #0]
 8008516:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800851a:	b01d      	add	sp, #116	@ 0x74
 800851c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008520:	b002      	add	sp, #8
 8008522:	4770      	bx	lr
 8008524:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008528:	f8ad 3014 	strh.w	r3, [sp, #20]
 800852c:	bf14      	ite	ne
 800852e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008532:	4623      	moveq	r3, r4
 8008534:	9304      	str	r3, [sp, #16]
 8008536:	9307      	str	r3, [sp, #28]
 8008538:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800853c:	9002      	str	r0, [sp, #8]
 800853e:	9006      	str	r0, [sp, #24]
 8008540:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008544:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008546:	ab21      	add	r3, sp, #132	@ 0x84
 8008548:	a902      	add	r1, sp, #8
 800854a:	4628      	mov	r0, r5
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	f000 fb45 	bl	8008bdc <_svfiprintf_r>
 8008552:	1c43      	adds	r3, r0, #1
 8008554:	bfbc      	itt	lt
 8008556:	238b      	movlt	r3, #139	@ 0x8b
 8008558:	602b      	strlt	r3, [r5, #0]
 800855a:	2c00      	cmp	r4, #0
 800855c:	d0dd      	beq.n	800851a <sniprintf+0x16>
 800855e:	9b02      	ldr	r3, [sp, #8]
 8008560:	2200      	movs	r2, #0
 8008562:	701a      	strb	r2, [r3, #0]
 8008564:	e7d9      	b.n	800851a <sniprintf+0x16>
 8008566:	bf00      	nop
 8008568:	2000001c 	.word	0x2000001c

0800856c <__sread>:
 800856c:	b510      	push	{r4, lr}
 800856e:	460c      	mov	r4, r1
 8008570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008574:	f000 f958 	bl	8008828 <_read_r>
 8008578:	2800      	cmp	r0, #0
 800857a:	bfab      	itete	ge
 800857c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800857e:	89a3      	ldrhlt	r3, [r4, #12]
 8008580:	181b      	addge	r3, r3, r0
 8008582:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008586:	bfac      	ite	ge
 8008588:	6563      	strge	r3, [r4, #84]	@ 0x54
 800858a:	81a3      	strhlt	r3, [r4, #12]
 800858c:	bd10      	pop	{r4, pc}

0800858e <__swrite>:
 800858e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008592:	461f      	mov	r7, r3
 8008594:	898b      	ldrh	r3, [r1, #12]
 8008596:	05db      	lsls	r3, r3, #23
 8008598:	4605      	mov	r5, r0
 800859a:	460c      	mov	r4, r1
 800859c:	4616      	mov	r6, r2
 800859e:	d505      	bpl.n	80085ac <__swrite+0x1e>
 80085a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a4:	2302      	movs	r3, #2
 80085a6:	2200      	movs	r2, #0
 80085a8:	f000 f92c 	bl	8008804 <_lseek_r>
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085b6:	81a3      	strh	r3, [r4, #12]
 80085b8:	4632      	mov	r2, r6
 80085ba:	463b      	mov	r3, r7
 80085bc:	4628      	mov	r0, r5
 80085be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085c2:	f000 b943 	b.w	800884c <_write_r>

080085c6 <__sseek>:
 80085c6:	b510      	push	{r4, lr}
 80085c8:	460c      	mov	r4, r1
 80085ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ce:	f000 f919 	bl	8008804 <_lseek_r>
 80085d2:	1c43      	adds	r3, r0, #1
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	bf15      	itete	ne
 80085d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80085da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80085de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80085e2:	81a3      	strheq	r3, [r4, #12]
 80085e4:	bf18      	it	ne
 80085e6:	81a3      	strhne	r3, [r4, #12]
 80085e8:	bd10      	pop	{r4, pc}

080085ea <__sclose>:
 80085ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ee:	f000 b8f9 	b.w	80087e4 <_close_r>

080085f2 <__swbuf_r>:
 80085f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f4:	460e      	mov	r6, r1
 80085f6:	4614      	mov	r4, r2
 80085f8:	4605      	mov	r5, r0
 80085fa:	b118      	cbz	r0, 8008604 <__swbuf_r+0x12>
 80085fc:	6a03      	ldr	r3, [r0, #32]
 80085fe:	b90b      	cbnz	r3, 8008604 <__swbuf_r+0x12>
 8008600:	f7ff feec 	bl	80083dc <__sinit>
 8008604:	69a3      	ldr	r3, [r4, #24]
 8008606:	60a3      	str	r3, [r4, #8]
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	071a      	lsls	r2, r3, #28
 800860c:	d501      	bpl.n	8008612 <__swbuf_r+0x20>
 800860e:	6923      	ldr	r3, [r4, #16]
 8008610:	b943      	cbnz	r3, 8008624 <__swbuf_r+0x32>
 8008612:	4621      	mov	r1, r4
 8008614:	4628      	mov	r0, r5
 8008616:	f000 f82b 	bl	8008670 <__swsetup_r>
 800861a:	b118      	cbz	r0, 8008624 <__swbuf_r+0x32>
 800861c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008620:	4638      	mov	r0, r7
 8008622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	6922      	ldr	r2, [r4, #16]
 8008628:	1a98      	subs	r0, r3, r2
 800862a:	6963      	ldr	r3, [r4, #20]
 800862c:	b2f6      	uxtb	r6, r6
 800862e:	4283      	cmp	r3, r0
 8008630:	4637      	mov	r7, r6
 8008632:	dc05      	bgt.n	8008640 <__swbuf_r+0x4e>
 8008634:	4621      	mov	r1, r4
 8008636:	4628      	mov	r0, r5
 8008638:	f000 fdde 	bl	80091f8 <_fflush_r>
 800863c:	2800      	cmp	r0, #0
 800863e:	d1ed      	bne.n	800861c <__swbuf_r+0x2a>
 8008640:	68a3      	ldr	r3, [r4, #8]
 8008642:	3b01      	subs	r3, #1
 8008644:	60a3      	str	r3, [r4, #8]
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	1c5a      	adds	r2, r3, #1
 800864a:	6022      	str	r2, [r4, #0]
 800864c:	701e      	strb	r6, [r3, #0]
 800864e:	6962      	ldr	r2, [r4, #20]
 8008650:	1c43      	adds	r3, r0, #1
 8008652:	429a      	cmp	r2, r3
 8008654:	d004      	beq.n	8008660 <__swbuf_r+0x6e>
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	07db      	lsls	r3, r3, #31
 800865a:	d5e1      	bpl.n	8008620 <__swbuf_r+0x2e>
 800865c:	2e0a      	cmp	r6, #10
 800865e:	d1df      	bne.n	8008620 <__swbuf_r+0x2e>
 8008660:	4621      	mov	r1, r4
 8008662:	4628      	mov	r0, r5
 8008664:	f000 fdc8 	bl	80091f8 <_fflush_r>
 8008668:	2800      	cmp	r0, #0
 800866a:	d0d9      	beq.n	8008620 <__swbuf_r+0x2e>
 800866c:	e7d6      	b.n	800861c <__swbuf_r+0x2a>
	...

08008670 <__swsetup_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4b29      	ldr	r3, [pc, #164]	@ (8008718 <__swsetup_r+0xa8>)
 8008674:	4605      	mov	r5, r0
 8008676:	6818      	ldr	r0, [r3, #0]
 8008678:	460c      	mov	r4, r1
 800867a:	b118      	cbz	r0, 8008684 <__swsetup_r+0x14>
 800867c:	6a03      	ldr	r3, [r0, #32]
 800867e:	b90b      	cbnz	r3, 8008684 <__swsetup_r+0x14>
 8008680:	f7ff feac 	bl	80083dc <__sinit>
 8008684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008688:	0719      	lsls	r1, r3, #28
 800868a:	d422      	bmi.n	80086d2 <__swsetup_r+0x62>
 800868c:	06da      	lsls	r2, r3, #27
 800868e:	d407      	bmi.n	80086a0 <__swsetup_r+0x30>
 8008690:	2209      	movs	r2, #9
 8008692:	602a      	str	r2, [r5, #0]
 8008694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008698:	81a3      	strh	r3, [r4, #12]
 800869a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800869e:	e033      	b.n	8008708 <__swsetup_r+0x98>
 80086a0:	0758      	lsls	r0, r3, #29
 80086a2:	d512      	bpl.n	80086ca <__swsetup_r+0x5a>
 80086a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086a6:	b141      	cbz	r1, 80086ba <__swsetup_r+0x4a>
 80086a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086ac:	4299      	cmp	r1, r3
 80086ae:	d002      	beq.n	80086b6 <__swsetup_r+0x46>
 80086b0:	4628      	mov	r0, r5
 80086b2:	f000 f937 	bl	8008924 <_free_r>
 80086b6:	2300      	movs	r3, #0
 80086b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80086c0:	81a3      	strh	r3, [r4, #12]
 80086c2:	2300      	movs	r3, #0
 80086c4:	6063      	str	r3, [r4, #4]
 80086c6:	6923      	ldr	r3, [r4, #16]
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	f043 0308 	orr.w	r3, r3, #8
 80086d0:	81a3      	strh	r3, [r4, #12]
 80086d2:	6923      	ldr	r3, [r4, #16]
 80086d4:	b94b      	cbnz	r3, 80086ea <__swsetup_r+0x7a>
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80086dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086e0:	d003      	beq.n	80086ea <__swsetup_r+0x7a>
 80086e2:	4621      	mov	r1, r4
 80086e4:	4628      	mov	r0, r5
 80086e6:	f000 fde7 	bl	80092b8 <__smakebuf_r>
 80086ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ee:	f013 0201 	ands.w	r2, r3, #1
 80086f2:	d00a      	beq.n	800870a <__swsetup_r+0x9a>
 80086f4:	2200      	movs	r2, #0
 80086f6:	60a2      	str	r2, [r4, #8]
 80086f8:	6962      	ldr	r2, [r4, #20]
 80086fa:	4252      	negs	r2, r2
 80086fc:	61a2      	str	r2, [r4, #24]
 80086fe:	6922      	ldr	r2, [r4, #16]
 8008700:	b942      	cbnz	r2, 8008714 <__swsetup_r+0xa4>
 8008702:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008706:	d1c5      	bne.n	8008694 <__swsetup_r+0x24>
 8008708:	bd38      	pop	{r3, r4, r5, pc}
 800870a:	0799      	lsls	r1, r3, #30
 800870c:	bf58      	it	pl
 800870e:	6962      	ldrpl	r2, [r4, #20]
 8008710:	60a2      	str	r2, [r4, #8]
 8008712:	e7f4      	b.n	80086fe <__swsetup_r+0x8e>
 8008714:	2000      	movs	r0, #0
 8008716:	e7f7      	b.n	8008708 <__swsetup_r+0x98>
 8008718:	2000001c 	.word	0x2000001c

0800871c <memset>:
 800871c:	4402      	add	r2, r0
 800871e:	4603      	mov	r3, r0
 8008720:	4293      	cmp	r3, r2
 8008722:	d100      	bne.n	8008726 <memset+0xa>
 8008724:	4770      	bx	lr
 8008726:	f803 1b01 	strb.w	r1, [r3], #1
 800872a:	e7f9      	b.n	8008720 <memset+0x4>

0800872c <strtok>:
 800872c:	4b16      	ldr	r3, [pc, #88]	@ (8008788 <strtok+0x5c>)
 800872e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008732:	681f      	ldr	r7, [r3, #0]
 8008734:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008736:	4605      	mov	r5, r0
 8008738:	460e      	mov	r6, r1
 800873a:	b9ec      	cbnz	r4, 8008778 <strtok+0x4c>
 800873c:	2050      	movs	r0, #80	@ 0x50
 800873e:	f000 f93b 	bl	80089b8 <malloc>
 8008742:	4602      	mov	r2, r0
 8008744:	6478      	str	r0, [r7, #68]	@ 0x44
 8008746:	b920      	cbnz	r0, 8008752 <strtok+0x26>
 8008748:	4b10      	ldr	r3, [pc, #64]	@ (800878c <strtok+0x60>)
 800874a:	4811      	ldr	r0, [pc, #68]	@ (8008790 <strtok+0x64>)
 800874c:	215b      	movs	r1, #91	@ 0x5b
 800874e:	f000 f8cb 	bl	80088e8 <__assert_func>
 8008752:	e9c0 4400 	strd	r4, r4, [r0]
 8008756:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800875a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800875e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008762:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008766:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800876a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800876e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008772:	6184      	str	r4, [r0, #24]
 8008774:	7704      	strb	r4, [r0, #28]
 8008776:	6244      	str	r4, [r0, #36]	@ 0x24
 8008778:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800877a:	4631      	mov	r1, r6
 800877c:	4628      	mov	r0, r5
 800877e:	2301      	movs	r3, #1
 8008780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008784:	f000 b806 	b.w	8008794 <__strtok_r>
 8008788:	2000001c 	.word	0x2000001c
 800878c:	0800998c 	.word	0x0800998c
 8008790:	080099a3 	.word	0x080099a3

08008794 <__strtok_r>:
 8008794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008796:	4604      	mov	r4, r0
 8008798:	b908      	cbnz	r0, 800879e <__strtok_r+0xa>
 800879a:	6814      	ldr	r4, [r2, #0]
 800879c:	b144      	cbz	r4, 80087b0 <__strtok_r+0x1c>
 800879e:	4620      	mov	r0, r4
 80087a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80087a4:	460f      	mov	r7, r1
 80087a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80087aa:	b91e      	cbnz	r6, 80087b4 <__strtok_r+0x20>
 80087ac:	b965      	cbnz	r5, 80087c8 <__strtok_r+0x34>
 80087ae:	6015      	str	r5, [r2, #0]
 80087b0:	2000      	movs	r0, #0
 80087b2:	e005      	b.n	80087c0 <__strtok_r+0x2c>
 80087b4:	42b5      	cmp	r5, r6
 80087b6:	d1f6      	bne.n	80087a6 <__strtok_r+0x12>
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1f0      	bne.n	800879e <__strtok_r+0xa>
 80087bc:	6014      	str	r4, [r2, #0]
 80087be:	7003      	strb	r3, [r0, #0]
 80087c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087c2:	461c      	mov	r4, r3
 80087c4:	e00c      	b.n	80087e0 <__strtok_r+0x4c>
 80087c6:	b915      	cbnz	r5, 80087ce <__strtok_r+0x3a>
 80087c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087cc:	460e      	mov	r6, r1
 80087ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 80087d2:	42ab      	cmp	r3, r5
 80087d4:	d1f7      	bne.n	80087c6 <__strtok_r+0x32>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0f3      	beq.n	80087c2 <__strtok_r+0x2e>
 80087da:	2300      	movs	r3, #0
 80087dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80087e0:	6014      	str	r4, [r2, #0]
 80087e2:	e7ed      	b.n	80087c0 <__strtok_r+0x2c>

080087e4 <_close_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4d06      	ldr	r5, [pc, #24]	@ (8008800 <_close_r+0x1c>)
 80087e8:	2300      	movs	r3, #0
 80087ea:	4604      	mov	r4, r0
 80087ec:	4608      	mov	r0, r1
 80087ee:	602b      	str	r3, [r5, #0]
 80087f0:	f7f8 febe 	bl	8001570 <_close>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_close_r+0x1a>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_close_r+0x1a>
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	2000146c 	.word	0x2000146c

08008804 <_lseek_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4d07      	ldr	r5, [pc, #28]	@ (8008824 <_lseek_r+0x20>)
 8008808:	4604      	mov	r4, r0
 800880a:	4608      	mov	r0, r1
 800880c:	4611      	mov	r1, r2
 800880e:	2200      	movs	r2, #0
 8008810:	602a      	str	r2, [r5, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	f7f8 fed3 	bl	80015be <_lseek>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d102      	bne.n	8008822 <_lseek_r+0x1e>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	b103      	cbz	r3, 8008822 <_lseek_r+0x1e>
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	2000146c 	.word	0x2000146c

08008828 <_read_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4d07      	ldr	r5, [pc, #28]	@ (8008848 <_read_r+0x20>)
 800882c:	4604      	mov	r4, r0
 800882e:	4608      	mov	r0, r1
 8008830:	4611      	mov	r1, r2
 8008832:	2200      	movs	r2, #0
 8008834:	602a      	str	r2, [r5, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	f7f8 fe61 	bl	80014fe <_read>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d102      	bne.n	8008846 <_read_r+0x1e>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	b103      	cbz	r3, 8008846 <_read_r+0x1e>
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	2000146c 	.word	0x2000146c

0800884c <_write_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4d07      	ldr	r5, [pc, #28]	@ (800886c <_write_r+0x20>)
 8008850:	4604      	mov	r4, r0
 8008852:	4608      	mov	r0, r1
 8008854:	4611      	mov	r1, r2
 8008856:	2200      	movs	r2, #0
 8008858:	602a      	str	r2, [r5, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	f7f8 fe6c 	bl	8001538 <_write>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d102      	bne.n	800886a <_write_r+0x1e>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	b103      	cbz	r3, 800886a <_write_r+0x1e>
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	2000146c 	.word	0x2000146c

08008870 <__errno>:
 8008870:	4b01      	ldr	r3, [pc, #4]	@ (8008878 <__errno+0x8>)
 8008872:	6818      	ldr	r0, [r3, #0]
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	2000001c 	.word	0x2000001c

0800887c <__libc_init_array>:
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	4d0d      	ldr	r5, [pc, #52]	@ (80088b4 <__libc_init_array+0x38>)
 8008880:	4c0d      	ldr	r4, [pc, #52]	@ (80088b8 <__libc_init_array+0x3c>)
 8008882:	1b64      	subs	r4, r4, r5
 8008884:	10a4      	asrs	r4, r4, #2
 8008886:	2600      	movs	r6, #0
 8008888:	42a6      	cmp	r6, r4
 800888a:	d109      	bne.n	80088a0 <__libc_init_array+0x24>
 800888c:	4d0b      	ldr	r5, [pc, #44]	@ (80088bc <__libc_init_array+0x40>)
 800888e:	4c0c      	ldr	r4, [pc, #48]	@ (80088c0 <__libc_init_array+0x44>)
 8008890:	f000 ff5c 	bl	800974c <_init>
 8008894:	1b64      	subs	r4, r4, r5
 8008896:	10a4      	asrs	r4, r4, #2
 8008898:	2600      	movs	r6, #0
 800889a:	42a6      	cmp	r6, r4
 800889c:	d105      	bne.n	80088aa <__libc_init_array+0x2e>
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a4:	4798      	blx	r3
 80088a6:	3601      	adds	r6, #1
 80088a8:	e7ee      	b.n	8008888 <__libc_init_array+0xc>
 80088aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ae:	4798      	blx	r3
 80088b0:	3601      	adds	r6, #1
 80088b2:	e7f2      	b.n	800889a <__libc_init_array+0x1e>
 80088b4:	08009a74 	.word	0x08009a74
 80088b8:	08009a74 	.word	0x08009a74
 80088bc:	08009a74 	.word	0x08009a74
 80088c0:	08009a78 	.word	0x08009a78

080088c4 <__retarget_lock_init_recursive>:
 80088c4:	4770      	bx	lr

080088c6 <__retarget_lock_acquire_recursive>:
 80088c6:	4770      	bx	lr

080088c8 <__retarget_lock_release_recursive>:
 80088c8:	4770      	bx	lr

080088ca <memcpy>:
 80088ca:	440a      	add	r2, r1
 80088cc:	4291      	cmp	r1, r2
 80088ce:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80088d2:	d100      	bne.n	80088d6 <memcpy+0xc>
 80088d4:	4770      	bx	lr
 80088d6:	b510      	push	{r4, lr}
 80088d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088e0:	4291      	cmp	r1, r2
 80088e2:	d1f9      	bne.n	80088d8 <memcpy+0xe>
 80088e4:	bd10      	pop	{r4, pc}
	...

080088e8 <__assert_func>:
 80088e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088ea:	4614      	mov	r4, r2
 80088ec:	461a      	mov	r2, r3
 80088ee:	4b09      	ldr	r3, [pc, #36]	@ (8008914 <__assert_func+0x2c>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4605      	mov	r5, r0
 80088f4:	68d8      	ldr	r0, [r3, #12]
 80088f6:	b954      	cbnz	r4, 800890e <__assert_func+0x26>
 80088f8:	4b07      	ldr	r3, [pc, #28]	@ (8008918 <__assert_func+0x30>)
 80088fa:	461c      	mov	r4, r3
 80088fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008900:	9100      	str	r1, [sp, #0]
 8008902:	462b      	mov	r3, r5
 8008904:	4905      	ldr	r1, [pc, #20]	@ (800891c <__assert_func+0x34>)
 8008906:	f000 fc9f 	bl	8009248 <fiprintf>
 800890a:	f000 fd5d 	bl	80093c8 <abort>
 800890e:	4b04      	ldr	r3, [pc, #16]	@ (8008920 <__assert_func+0x38>)
 8008910:	e7f4      	b.n	80088fc <__assert_func+0x14>
 8008912:	bf00      	nop
 8008914:	2000001c 	.word	0x2000001c
 8008918:	08009a38 	.word	0x08009a38
 800891c:	08009a0a 	.word	0x08009a0a
 8008920:	080099fd 	.word	0x080099fd

08008924 <_free_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4605      	mov	r5, r0
 8008928:	2900      	cmp	r1, #0
 800892a:	d041      	beq.n	80089b0 <_free_r+0x8c>
 800892c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008930:	1f0c      	subs	r4, r1, #4
 8008932:	2b00      	cmp	r3, #0
 8008934:	bfb8      	it	lt
 8008936:	18e4      	addlt	r4, r4, r3
 8008938:	f000 f8e8 	bl	8008b0c <__malloc_lock>
 800893c:	4a1d      	ldr	r2, [pc, #116]	@ (80089b4 <_free_r+0x90>)
 800893e:	6813      	ldr	r3, [r2, #0]
 8008940:	b933      	cbnz	r3, 8008950 <_free_r+0x2c>
 8008942:	6063      	str	r3, [r4, #4]
 8008944:	6014      	str	r4, [r2, #0]
 8008946:	4628      	mov	r0, r5
 8008948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800894c:	f000 b8e4 	b.w	8008b18 <__malloc_unlock>
 8008950:	42a3      	cmp	r3, r4
 8008952:	d908      	bls.n	8008966 <_free_r+0x42>
 8008954:	6820      	ldr	r0, [r4, #0]
 8008956:	1821      	adds	r1, r4, r0
 8008958:	428b      	cmp	r3, r1
 800895a:	bf01      	itttt	eq
 800895c:	6819      	ldreq	r1, [r3, #0]
 800895e:	685b      	ldreq	r3, [r3, #4]
 8008960:	1809      	addeq	r1, r1, r0
 8008962:	6021      	streq	r1, [r4, #0]
 8008964:	e7ed      	b.n	8008942 <_free_r+0x1e>
 8008966:	461a      	mov	r2, r3
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	b10b      	cbz	r3, 8008970 <_free_r+0x4c>
 800896c:	42a3      	cmp	r3, r4
 800896e:	d9fa      	bls.n	8008966 <_free_r+0x42>
 8008970:	6811      	ldr	r1, [r2, #0]
 8008972:	1850      	adds	r0, r2, r1
 8008974:	42a0      	cmp	r0, r4
 8008976:	d10b      	bne.n	8008990 <_free_r+0x6c>
 8008978:	6820      	ldr	r0, [r4, #0]
 800897a:	4401      	add	r1, r0
 800897c:	1850      	adds	r0, r2, r1
 800897e:	4283      	cmp	r3, r0
 8008980:	6011      	str	r1, [r2, #0]
 8008982:	d1e0      	bne.n	8008946 <_free_r+0x22>
 8008984:	6818      	ldr	r0, [r3, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	6053      	str	r3, [r2, #4]
 800898a:	4408      	add	r0, r1
 800898c:	6010      	str	r0, [r2, #0]
 800898e:	e7da      	b.n	8008946 <_free_r+0x22>
 8008990:	d902      	bls.n	8008998 <_free_r+0x74>
 8008992:	230c      	movs	r3, #12
 8008994:	602b      	str	r3, [r5, #0]
 8008996:	e7d6      	b.n	8008946 <_free_r+0x22>
 8008998:	6820      	ldr	r0, [r4, #0]
 800899a:	1821      	adds	r1, r4, r0
 800899c:	428b      	cmp	r3, r1
 800899e:	bf04      	itt	eq
 80089a0:	6819      	ldreq	r1, [r3, #0]
 80089a2:	685b      	ldreq	r3, [r3, #4]
 80089a4:	6063      	str	r3, [r4, #4]
 80089a6:	bf04      	itt	eq
 80089a8:	1809      	addeq	r1, r1, r0
 80089aa:	6021      	streq	r1, [r4, #0]
 80089ac:	6054      	str	r4, [r2, #4]
 80089ae:	e7ca      	b.n	8008946 <_free_r+0x22>
 80089b0:	bd38      	pop	{r3, r4, r5, pc}
 80089b2:	bf00      	nop
 80089b4:	20001478 	.word	0x20001478

080089b8 <malloc>:
 80089b8:	4b02      	ldr	r3, [pc, #8]	@ (80089c4 <malloc+0xc>)
 80089ba:	4601      	mov	r1, r0
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	f000 b825 	b.w	8008a0c <_malloc_r>
 80089c2:	bf00      	nop
 80089c4:	2000001c 	.word	0x2000001c

080089c8 <sbrk_aligned>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	4e0f      	ldr	r6, [pc, #60]	@ (8008a08 <sbrk_aligned+0x40>)
 80089cc:	460c      	mov	r4, r1
 80089ce:	6831      	ldr	r1, [r6, #0]
 80089d0:	4605      	mov	r5, r0
 80089d2:	b911      	cbnz	r1, 80089da <sbrk_aligned+0x12>
 80089d4:	f000 fce8 	bl	80093a8 <_sbrk_r>
 80089d8:	6030      	str	r0, [r6, #0]
 80089da:	4621      	mov	r1, r4
 80089dc:	4628      	mov	r0, r5
 80089de:	f000 fce3 	bl	80093a8 <_sbrk_r>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	d103      	bne.n	80089ee <sbrk_aligned+0x26>
 80089e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80089ea:	4620      	mov	r0, r4
 80089ec:	bd70      	pop	{r4, r5, r6, pc}
 80089ee:	1cc4      	adds	r4, r0, #3
 80089f0:	f024 0403 	bic.w	r4, r4, #3
 80089f4:	42a0      	cmp	r0, r4
 80089f6:	d0f8      	beq.n	80089ea <sbrk_aligned+0x22>
 80089f8:	1a21      	subs	r1, r4, r0
 80089fa:	4628      	mov	r0, r5
 80089fc:	f000 fcd4 	bl	80093a8 <_sbrk_r>
 8008a00:	3001      	adds	r0, #1
 8008a02:	d1f2      	bne.n	80089ea <sbrk_aligned+0x22>
 8008a04:	e7ef      	b.n	80089e6 <sbrk_aligned+0x1e>
 8008a06:	bf00      	nop
 8008a08:	20001474 	.word	0x20001474

08008a0c <_malloc_r>:
 8008a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a10:	1ccd      	adds	r5, r1, #3
 8008a12:	f025 0503 	bic.w	r5, r5, #3
 8008a16:	3508      	adds	r5, #8
 8008a18:	2d0c      	cmp	r5, #12
 8008a1a:	bf38      	it	cc
 8008a1c:	250c      	movcc	r5, #12
 8008a1e:	2d00      	cmp	r5, #0
 8008a20:	4606      	mov	r6, r0
 8008a22:	db01      	blt.n	8008a28 <_malloc_r+0x1c>
 8008a24:	42a9      	cmp	r1, r5
 8008a26:	d904      	bls.n	8008a32 <_malloc_r+0x26>
 8008a28:	230c      	movs	r3, #12
 8008a2a:	6033      	str	r3, [r6, #0]
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b08 <_malloc_r+0xfc>
 8008a36:	f000 f869 	bl	8008b0c <__malloc_lock>
 8008a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a3e:	461c      	mov	r4, r3
 8008a40:	bb44      	cbnz	r4, 8008a94 <_malloc_r+0x88>
 8008a42:	4629      	mov	r1, r5
 8008a44:	4630      	mov	r0, r6
 8008a46:	f7ff ffbf 	bl	80089c8 <sbrk_aligned>
 8008a4a:	1c43      	adds	r3, r0, #1
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	d158      	bne.n	8008b02 <_malloc_r+0xf6>
 8008a50:	f8d8 4000 	ldr.w	r4, [r8]
 8008a54:	4627      	mov	r7, r4
 8008a56:	2f00      	cmp	r7, #0
 8008a58:	d143      	bne.n	8008ae2 <_malloc_r+0xd6>
 8008a5a:	2c00      	cmp	r4, #0
 8008a5c:	d04b      	beq.n	8008af6 <_malloc_r+0xea>
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	4639      	mov	r1, r7
 8008a62:	4630      	mov	r0, r6
 8008a64:	eb04 0903 	add.w	r9, r4, r3
 8008a68:	f000 fc9e 	bl	80093a8 <_sbrk_r>
 8008a6c:	4581      	cmp	r9, r0
 8008a6e:	d142      	bne.n	8008af6 <_malloc_r+0xea>
 8008a70:	6821      	ldr	r1, [r4, #0]
 8008a72:	1a6d      	subs	r5, r5, r1
 8008a74:	4629      	mov	r1, r5
 8008a76:	4630      	mov	r0, r6
 8008a78:	f7ff ffa6 	bl	80089c8 <sbrk_aligned>
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d03a      	beq.n	8008af6 <_malloc_r+0xea>
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	442b      	add	r3, r5
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	f8d8 3000 	ldr.w	r3, [r8]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	bb62      	cbnz	r2, 8008ae8 <_malloc_r+0xdc>
 8008a8e:	f8c8 7000 	str.w	r7, [r8]
 8008a92:	e00f      	b.n	8008ab4 <_malloc_r+0xa8>
 8008a94:	6822      	ldr	r2, [r4, #0]
 8008a96:	1b52      	subs	r2, r2, r5
 8008a98:	d420      	bmi.n	8008adc <_malloc_r+0xd0>
 8008a9a:	2a0b      	cmp	r2, #11
 8008a9c:	d917      	bls.n	8008ace <_malloc_r+0xc2>
 8008a9e:	1961      	adds	r1, r4, r5
 8008aa0:	42a3      	cmp	r3, r4
 8008aa2:	6025      	str	r5, [r4, #0]
 8008aa4:	bf18      	it	ne
 8008aa6:	6059      	strne	r1, [r3, #4]
 8008aa8:	6863      	ldr	r3, [r4, #4]
 8008aaa:	bf08      	it	eq
 8008aac:	f8c8 1000 	streq.w	r1, [r8]
 8008ab0:	5162      	str	r2, [r4, r5]
 8008ab2:	604b      	str	r3, [r1, #4]
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f000 f82f 	bl	8008b18 <__malloc_unlock>
 8008aba:	f104 000b 	add.w	r0, r4, #11
 8008abe:	1d23      	adds	r3, r4, #4
 8008ac0:	f020 0007 	bic.w	r0, r0, #7
 8008ac4:	1ac2      	subs	r2, r0, r3
 8008ac6:	bf1c      	itt	ne
 8008ac8:	1a1b      	subne	r3, r3, r0
 8008aca:	50a3      	strne	r3, [r4, r2]
 8008acc:	e7af      	b.n	8008a2e <_malloc_r+0x22>
 8008ace:	6862      	ldr	r2, [r4, #4]
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	bf0c      	ite	eq
 8008ad4:	f8c8 2000 	streq.w	r2, [r8]
 8008ad8:	605a      	strne	r2, [r3, #4]
 8008ada:	e7eb      	b.n	8008ab4 <_malloc_r+0xa8>
 8008adc:	4623      	mov	r3, r4
 8008ade:	6864      	ldr	r4, [r4, #4]
 8008ae0:	e7ae      	b.n	8008a40 <_malloc_r+0x34>
 8008ae2:	463c      	mov	r4, r7
 8008ae4:	687f      	ldr	r7, [r7, #4]
 8008ae6:	e7b6      	b.n	8008a56 <_malloc_r+0x4a>
 8008ae8:	461a      	mov	r2, r3
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	42a3      	cmp	r3, r4
 8008aee:	d1fb      	bne.n	8008ae8 <_malloc_r+0xdc>
 8008af0:	2300      	movs	r3, #0
 8008af2:	6053      	str	r3, [r2, #4]
 8008af4:	e7de      	b.n	8008ab4 <_malloc_r+0xa8>
 8008af6:	230c      	movs	r3, #12
 8008af8:	6033      	str	r3, [r6, #0]
 8008afa:	4630      	mov	r0, r6
 8008afc:	f000 f80c 	bl	8008b18 <__malloc_unlock>
 8008b00:	e794      	b.n	8008a2c <_malloc_r+0x20>
 8008b02:	6005      	str	r5, [r0, #0]
 8008b04:	e7d6      	b.n	8008ab4 <_malloc_r+0xa8>
 8008b06:	bf00      	nop
 8008b08:	20001478 	.word	0x20001478

08008b0c <__malloc_lock>:
 8008b0c:	4801      	ldr	r0, [pc, #4]	@ (8008b14 <__malloc_lock+0x8>)
 8008b0e:	f7ff beda 	b.w	80088c6 <__retarget_lock_acquire_recursive>
 8008b12:	bf00      	nop
 8008b14:	20001470 	.word	0x20001470

08008b18 <__malloc_unlock>:
 8008b18:	4801      	ldr	r0, [pc, #4]	@ (8008b20 <__malloc_unlock+0x8>)
 8008b1a:	f7ff bed5 	b.w	80088c8 <__retarget_lock_release_recursive>
 8008b1e:	bf00      	nop
 8008b20:	20001470 	.word	0x20001470

08008b24 <__ssputs_r>:
 8008b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b28:	688e      	ldr	r6, [r1, #8]
 8008b2a:	461f      	mov	r7, r3
 8008b2c:	42be      	cmp	r6, r7
 8008b2e:	680b      	ldr	r3, [r1, #0]
 8008b30:	4682      	mov	sl, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	4690      	mov	r8, r2
 8008b36:	d82d      	bhi.n	8008b94 <__ssputs_r+0x70>
 8008b38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b40:	d026      	beq.n	8008b90 <__ssputs_r+0x6c>
 8008b42:	6965      	ldr	r5, [r4, #20]
 8008b44:	6909      	ldr	r1, [r1, #16]
 8008b46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b4a:	eba3 0901 	sub.w	r9, r3, r1
 8008b4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b52:	1c7b      	adds	r3, r7, #1
 8008b54:	444b      	add	r3, r9
 8008b56:	106d      	asrs	r5, r5, #1
 8008b58:	429d      	cmp	r5, r3
 8008b5a:	bf38      	it	cc
 8008b5c:	461d      	movcc	r5, r3
 8008b5e:	0553      	lsls	r3, r2, #21
 8008b60:	d527      	bpl.n	8008bb2 <__ssputs_r+0x8e>
 8008b62:	4629      	mov	r1, r5
 8008b64:	f7ff ff52 	bl	8008a0c <_malloc_r>
 8008b68:	4606      	mov	r6, r0
 8008b6a:	b360      	cbz	r0, 8008bc6 <__ssputs_r+0xa2>
 8008b6c:	6921      	ldr	r1, [r4, #16]
 8008b6e:	464a      	mov	r2, r9
 8008b70:	f7ff feab 	bl	80088ca <memcpy>
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b7e:	81a3      	strh	r3, [r4, #12]
 8008b80:	6126      	str	r6, [r4, #16]
 8008b82:	6165      	str	r5, [r4, #20]
 8008b84:	444e      	add	r6, r9
 8008b86:	eba5 0509 	sub.w	r5, r5, r9
 8008b8a:	6026      	str	r6, [r4, #0]
 8008b8c:	60a5      	str	r5, [r4, #8]
 8008b8e:	463e      	mov	r6, r7
 8008b90:	42be      	cmp	r6, r7
 8008b92:	d900      	bls.n	8008b96 <__ssputs_r+0x72>
 8008b94:	463e      	mov	r6, r7
 8008b96:	6820      	ldr	r0, [r4, #0]
 8008b98:	4632      	mov	r2, r6
 8008b9a:	4641      	mov	r1, r8
 8008b9c:	f000 fbc8 	bl	8009330 <memmove>
 8008ba0:	68a3      	ldr	r3, [r4, #8]
 8008ba2:	1b9b      	subs	r3, r3, r6
 8008ba4:	60a3      	str	r3, [r4, #8]
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	4433      	add	r3, r6
 8008baa:	6023      	str	r3, [r4, #0]
 8008bac:	2000      	movs	r0, #0
 8008bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb2:	462a      	mov	r2, r5
 8008bb4:	f000 fc0f 	bl	80093d6 <_realloc_r>
 8008bb8:	4606      	mov	r6, r0
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d1e0      	bne.n	8008b80 <__ssputs_r+0x5c>
 8008bbe:	6921      	ldr	r1, [r4, #16]
 8008bc0:	4650      	mov	r0, sl
 8008bc2:	f7ff feaf 	bl	8008924 <_free_r>
 8008bc6:	230c      	movs	r3, #12
 8008bc8:	f8ca 3000 	str.w	r3, [sl]
 8008bcc:	89a3      	ldrh	r3, [r4, #12]
 8008bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bd2:	81a3      	strh	r3, [r4, #12]
 8008bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008bd8:	e7e9      	b.n	8008bae <__ssputs_r+0x8a>
	...

08008bdc <_svfiprintf_r>:
 8008bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be0:	4698      	mov	r8, r3
 8008be2:	898b      	ldrh	r3, [r1, #12]
 8008be4:	061b      	lsls	r3, r3, #24
 8008be6:	b09d      	sub	sp, #116	@ 0x74
 8008be8:	4607      	mov	r7, r0
 8008bea:	460d      	mov	r5, r1
 8008bec:	4614      	mov	r4, r2
 8008bee:	d510      	bpl.n	8008c12 <_svfiprintf_r+0x36>
 8008bf0:	690b      	ldr	r3, [r1, #16]
 8008bf2:	b973      	cbnz	r3, 8008c12 <_svfiprintf_r+0x36>
 8008bf4:	2140      	movs	r1, #64	@ 0x40
 8008bf6:	f7ff ff09 	bl	8008a0c <_malloc_r>
 8008bfa:	6028      	str	r0, [r5, #0]
 8008bfc:	6128      	str	r0, [r5, #16]
 8008bfe:	b930      	cbnz	r0, 8008c0e <_svfiprintf_r+0x32>
 8008c00:	230c      	movs	r3, #12
 8008c02:	603b      	str	r3, [r7, #0]
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c08:	b01d      	add	sp, #116	@ 0x74
 8008c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0e:	2340      	movs	r3, #64	@ 0x40
 8008c10:	616b      	str	r3, [r5, #20]
 8008c12:	2300      	movs	r3, #0
 8008c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c16:	2320      	movs	r3, #32
 8008c18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c20:	2330      	movs	r3, #48	@ 0x30
 8008c22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008dc0 <_svfiprintf_r+0x1e4>
 8008c26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c2a:	f04f 0901 	mov.w	r9, #1
 8008c2e:	4623      	mov	r3, r4
 8008c30:	469a      	mov	sl, r3
 8008c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c36:	b10a      	cbz	r2, 8008c3c <_svfiprintf_r+0x60>
 8008c38:	2a25      	cmp	r2, #37	@ 0x25
 8008c3a:	d1f9      	bne.n	8008c30 <_svfiprintf_r+0x54>
 8008c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c40:	d00b      	beq.n	8008c5a <_svfiprintf_r+0x7e>
 8008c42:	465b      	mov	r3, fp
 8008c44:	4622      	mov	r2, r4
 8008c46:	4629      	mov	r1, r5
 8008c48:	4638      	mov	r0, r7
 8008c4a:	f7ff ff6b 	bl	8008b24 <__ssputs_r>
 8008c4e:	3001      	adds	r0, #1
 8008c50:	f000 80a7 	beq.w	8008da2 <_svfiprintf_r+0x1c6>
 8008c54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c56:	445a      	add	r2, fp
 8008c58:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f000 809f 	beq.w	8008da2 <_svfiprintf_r+0x1c6>
 8008c64:	2300      	movs	r3, #0
 8008c66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c6e:	f10a 0a01 	add.w	sl, sl, #1
 8008c72:	9304      	str	r3, [sp, #16]
 8008c74:	9307      	str	r3, [sp, #28]
 8008c76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c7c:	4654      	mov	r4, sl
 8008c7e:	2205      	movs	r2, #5
 8008c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c84:	484e      	ldr	r0, [pc, #312]	@ (8008dc0 <_svfiprintf_r+0x1e4>)
 8008c86:	f7f7 fab3 	bl	80001f0 <memchr>
 8008c8a:	9a04      	ldr	r2, [sp, #16]
 8008c8c:	b9d8      	cbnz	r0, 8008cc6 <_svfiprintf_r+0xea>
 8008c8e:	06d0      	lsls	r0, r2, #27
 8008c90:	bf44      	itt	mi
 8008c92:	2320      	movmi	r3, #32
 8008c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c98:	0711      	lsls	r1, r2, #28
 8008c9a:	bf44      	itt	mi
 8008c9c:	232b      	movmi	r3, #43	@ 0x2b
 8008c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ca8:	d015      	beq.n	8008cd6 <_svfiprintf_r+0xfa>
 8008caa:	9a07      	ldr	r2, [sp, #28]
 8008cac:	4654      	mov	r4, sl
 8008cae:	2000      	movs	r0, #0
 8008cb0:	f04f 0c0a 	mov.w	ip, #10
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cba:	3b30      	subs	r3, #48	@ 0x30
 8008cbc:	2b09      	cmp	r3, #9
 8008cbe:	d94b      	bls.n	8008d58 <_svfiprintf_r+0x17c>
 8008cc0:	b1b0      	cbz	r0, 8008cf0 <_svfiprintf_r+0x114>
 8008cc2:	9207      	str	r2, [sp, #28]
 8008cc4:	e014      	b.n	8008cf0 <_svfiprintf_r+0x114>
 8008cc6:	eba0 0308 	sub.w	r3, r0, r8
 8008cca:	fa09 f303 	lsl.w	r3, r9, r3
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	9304      	str	r3, [sp, #16]
 8008cd2:	46a2      	mov	sl, r4
 8008cd4:	e7d2      	b.n	8008c7c <_svfiprintf_r+0xa0>
 8008cd6:	9b03      	ldr	r3, [sp, #12]
 8008cd8:	1d19      	adds	r1, r3, #4
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	9103      	str	r1, [sp, #12]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	bfbb      	ittet	lt
 8008ce2:	425b      	neglt	r3, r3
 8008ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ce8:	9307      	strge	r3, [sp, #28]
 8008cea:	9307      	strlt	r3, [sp, #28]
 8008cec:	bfb8      	it	lt
 8008cee:	9204      	strlt	r2, [sp, #16]
 8008cf0:	7823      	ldrb	r3, [r4, #0]
 8008cf2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cf4:	d10a      	bne.n	8008d0c <_svfiprintf_r+0x130>
 8008cf6:	7863      	ldrb	r3, [r4, #1]
 8008cf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cfa:	d132      	bne.n	8008d62 <_svfiprintf_r+0x186>
 8008cfc:	9b03      	ldr	r3, [sp, #12]
 8008cfe:	1d1a      	adds	r2, r3, #4
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	9203      	str	r2, [sp, #12]
 8008d04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d08:	3402      	adds	r4, #2
 8008d0a:	9305      	str	r3, [sp, #20]
 8008d0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008dd0 <_svfiprintf_r+0x1f4>
 8008d10:	7821      	ldrb	r1, [r4, #0]
 8008d12:	2203      	movs	r2, #3
 8008d14:	4650      	mov	r0, sl
 8008d16:	f7f7 fa6b 	bl	80001f0 <memchr>
 8008d1a:	b138      	cbz	r0, 8008d2c <_svfiprintf_r+0x150>
 8008d1c:	9b04      	ldr	r3, [sp, #16]
 8008d1e:	eba0 000a 	sub.w	r0, r0, sl
 8008d22:	2240      	movs	r2, #64	@ 0x40
 8008d24:	4082      	lsls	r2, r0
 8008d26:	4313      	orrs	r3, r2
 8008d28:	3401      	adds	r4, #1
 8008d2a:	9304      	str	r3, [sp, #16]
 8008d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d30:	4824      	ldr	r0, [pc, #144]	@ (8008dc4 <_svfiprintf_r+0x1e8>)
 8008d32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d36:	2206      	movs	r2, #6
 8008d38:	f7f7 fa5a 	bl	80001f0 <memchr>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d036      	beq.n	8008dae <_svfiprintf_r+0x1d2>
 8008d40:	4b21      	ldr	r3, [pc, #132]	@ (8008dc8 <_svfiprintf_r+0x1ec>)
 8008d42:	bb1b      	cbnz	r3, 8008d8c <_svfiprintf_r+0x1b0>
 8008d44:	9b03      	ldr	r3, [sp, #12]
 8008d46:	3307      	adds	r3, #7
 8008d48:	f023 0307 	bic.w	r3, r3, #7
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	9303      	str	r3, [sp, #12]
 8008d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d52:	4433      	add	r3, r6
 8008d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d56:	e76a      	b.n	8008c2e <_svfiprintf_r+0x52>
 8008d58:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	2001      	movs	r0, #1
 8008d60:	e7a8      	b.n	8008cb4 <_svfiprintf_r+0xd8>
 8008d62:	2300      	movs	r3, #0
 8008d64:	3401      	adds	r4, #1
 8008d66:	9305      	str	r3, [sp, #20]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	f04f 0c0a 	mov.w	ip, #10
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d74:	3a30      	subs	r2, #48	@ 0x30
 8008d76:	2a09      	cmp	r2, #9
 8008d78:	d903      	bls.n	8008d82 <_svfiprintf_r+0x1a6>
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d0c6      	beq.n	8008d0c <_svfiprintf_r+0x130>
 8008d7e:	9105      	str	r1, [sp, #20]
 8008d80:	e7c4      	b.n	8008d0c <_svfiprintf_r+0x130>
 8008d82:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d86:	4604      	mov	r4, r0
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e7f0      	b.n	8008d6e <_svfiprintf_r+0x192>
 8008d8c:	ab03      	add	r3, sp, #12
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	462a      	mov	r2, r5
 8008d92:	4b0e      	ldr	r3, [pc, #56]	@ (8008dcc <_svfiprintf_r+0x1f0>)
 8008d94:	a904      	add	r1, sp, #16
 8008d96:	4638      	mov	r0, r7
 8008d98:	f3af 8000 	nop.w
 8008d9c:	1c42      	adds	r2, r0, #1
 8008d9e:	4606      	mov	r6, r0
 8008da0:	d1d6      	bne.n	8008d50 <_svfiprintf_r+0x174>
 8008da2:	89ab      	ldrh	r3, [r5, #12]
 8008da4:	065b      	lsls	r3, r3, #25
 8008da6:	f53f af2d 	bmi.w	8008c04 <_svfiprintf_r+0x28>
 8008daa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dac:	e72c      	b.n	8008c08 <_svfiprintf_r+0x2c>
 8008dae:	ab03      	add	r3, sp, #12
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	462a      	mov	r2, r5
 8008db4:	4b05      	ldr	r3, [pc, #20]	@ (8008dcc <_svfiprintf_r+0x1f0>)
 8008db6:	a904      	add	r1, sp, #16
 8008db8:	4638      	mov	r0, r7
 8008dba:	f000 f879 	bl	8008eb0 <_printf_i>
 8008dbe:	e7ed      	b.n	8008d9c <_svfiprintf_r+0x1c0>
 8008dc0:	08009a39 	.word	0x08009a39
 8008dc4:	08009a43 	.word	0x08009a43
 8008dc8:	00000000 	.word	0x00000000
 8008dcc:	08008b25 	.word	0x08008b25
 8008dd0:	08009a3f 	.word	0x08009a3f

08008dd4 <_printf_common>:
 8008dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd8:	4616      	mov	r6, r2
 8008dda:	4698      	mov	r8, r3
 8008ddc:	688a      	ldr	r2, [r1, #8]
 8008dde:	690b      	ldr	r3, [r1, #16]
 8008de0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008de4:	4293      	cmp	r3, r2
 8008de6:	bfb8      	it	lt
 8008de8:	4613      	movlt	r3, r2
 8008dea:	6033      	str	r3, [r6, #0]
 8008dec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008df0:	4607      	mov	r7, r0
 8008df2:	460c      	mov	r4, r1
 8008df4:	b10a      	cbz	r2, 8008dfa <_printf_common+0x26>
 8008df6:	3301      	adds	r3, #1
 8008df8:	6033      	str	r3, [r6, #0]
 8008dfa:	6823      	ldr	r3, [r4, #0]
 8008dfc:	0699      	lsls	r1, r3, #26
 8008dfe:	bf42      	ittt	mi
 8008e00:	6833      	ldrmi	r3, [r6, #0]
 8008e02:	3302      	addmi	r3, #2
 8008e04:	6033      	strmi	r3, [r6, #0]
 8008e06:	6825      	ldr	r5, [r4, #0]
 8008e08:	f015 0506 	ands.w	r5, r5, #6
 8008e0c:	d106      	bne.n	8008e1c <_printf_common+0x48>
 8008e0e:	f104 0a19 	add.w	sl, r4, #25
 8008e12:	68e3      	ldr	r3, [r4, #12]
 8008e14:	6832      	ldr	r2, [r6, #0]
 8008e16:	1a9b      	subs	r3, r3, r2
 8008e18:	42ab      	cmp	r3, r5
 8008e1a:	dc26      	bgt.n	8008e6a <_printf_common+0x96>
 8008e1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e20:	6822      	ldr	r2, [r4, #0]
 8008e22:	3b00      	subs	r3, #0
 8008e24:	bf18      	it	ne
 8008e26:	2301      	movne	r3, #1
 8008e28:	0692      	lsls	r2, r2, #26
 8008e2a:	d42b      	bmi.n	8008e84 <_printf_common+0xb0>
 8008e2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e30:	4641      	mov	r1, r8
 8008e32:	4638      	mov	r0, r7
 8008e34:	47c8      	blx	r9
 8008e36:	3001      	adds	r0, #1
 8008e38:	d01e      	beq.n	8008e78 <_printf_common+0xa4>
 8008e3a:	6823      	ldr	r3, [r4, #0]
 8008e3c:	6922      	ldr	r2, [r4, #16]
 8008e3e:	f003 0306 	and.w	r3, r3, #6
 8008e42:	2b04      	cmp	r3, #4
 8008e44:	bf02      	ittt	eq
 8008e46:	68e5      	ldreq	r5, [r4, #12]
 8008e48:	6833      	ldreq	r3, [r6, #0]
 8008e4a:	1aed      	subeq	r5, r5, r3
 8008e4c:	68a3      	ldr	r3, [r4, #8]
 8008e4e:	bf0c      	ite	eq
 8008e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e54:	2500      	movne	r5, #0
 8008e56:	4293      	cmp	r3, r2
 8008e58:	bfc4      	itt	gt
 8008e5a:	1a9b      	subgt	r3, r3, r2
 8008e5c:	18ed      	addgt	r5, r5, r3
 8008e5e:	2600      	movs	r6, #0
 8008e60:	341a      	adds	r4, #26
 8008e62:	42b5      	cmp	r5, r6
 8008e64:	d11a      	bne.n	8008e9c <_printf_common+0xc8>
 8008e66:	2000      	movs	r0, #0
 8008e68:	e008      	b.n	8008e7c <_printf_common+0xa8>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	4652      	mov	r2, sl
 8008e6e:	4641      	mov	r1, r8
 8008e70:	4638      	mov	r0, r7
 8008e72:	47c8      	blx	r9
 8008e74:	3001      	adds	r0, #1
 8008e76:	d103      	bne.n	8008e80 <_printf_common+0xac>
 8008e78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e80:	3501      	adds	r5, #1
 8008e82:	e7c6      	b.n	8008e12 <_printf_common+0x3e>
 8008e84:	18e1      	adds	r1, r4, r3
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	2030      	movs	r0, #48	@ 0x30
 8008e8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e8e:	4422      	add	r2, r4
 8008e90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e98:	3302      	adds	r3, #2
 8008e9a:	e7c7      	b.n	8008e2c <_printf_common+0x58>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	4622      	mov	r2, r4
 8008ea0:	4641      	mov	r1, r8
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	47c8      	blx	r9
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d0e6      	beq.n	8008e78 <_printf_common+0xa4>
 8008eaa:	3601      	adds	r6, #1
 8008eac:	e7d9      	b.n	8008e62 <_printf_common+0x8e>
	...

08008eb0 <_printf_i>:
 8008eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb4:	7e0f      	ldrb	r7, [r1, #24]
 8008eb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008eb8:	2f78      	cmp	r7, #120	@ 0x78
 8008eba:	4691      	mov	r9, r2
 8008ebc:	4680      	mov	r8, r0
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	469a      	mov	sl, r3
 8008ec2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ec6:	d807      	bhi.n	8008ed8 <_printf_i+0x28>
 8008ec8:	2f62      	cmp	r7, #98	@ 0x62
 8008eca:	d80a      	bhi.n	8008ee2 <_printf_i+0x32>
 8008ecc:	2f00      	cmp	r7, #0
 8008ece:	f000 80d2 	beq.w	8009076 <_printf_i+0x1c6>
 8008ed2:	2f58      	cmp	r7, #88	@ 0x58
 8008ed4:	f000 80b9 	beq.w	800904a <_printf_i+0x19a>
 8008ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008edc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ee0:	e03a      	b.n	8008f58 <_printf_i+0xa8>
 8008ee2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ee6:	2b15      	cmp	r3, #21
 8008ee8:	d8f6      	bhi.n	8008ed8 <_printf_i+0x28>
 8008eea:	a101      	add	r1, pc, #4	@ (adr r1, 8008ef0 <_printf_i+0x40>)
 8008eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ef0:	08008f49 	.word	0x08008f49
 8008ef4:	08008f5d 	.word	0x08008f5d
 8008ef8:	08008ed9 	.word	0x08008ed9
 8008efc:	08008ed9 	.word	0x08008ed9
 8008f00:	08008ed9 	.word	0x08008ed9
 8008f04:	08008ed9 	.word	0x08008ed9
 8008f08:	08008f5d 	.word	0x08008f5d
 8008f0c:	08008ed9 	.word	0x08008ed9
 8008f10:	08008ed9 	.word	0x08008ed9
 8008f14:	08008ed9 	.word	0x08008ed9
 8008f18:	08008ed9 	.word	0x08008ed9
 8008f1c:	0800905d 	.word	0x0800905d
 8008f20:	08008f87 	.word	0x08008f87
 8008f24:	08009017 	.word	0x08009017
 8008f28:	08008ed9 	.word	0x08008ed9
 8008f2c:	08008ed9 	.word	0x08008ed9
 8008f30:	0800907f 	.word	0x0800907f
 8008f34:	08008ed9 	.word	0x08008ed9
 8008f38:	08008f87 	.word	0x08008f87
 8008f3c:	08008ed9 	.word	0x08008ed9
 8008f40:	08008ed9 	.word	0x08008ed9
 8008f44:	0800901f 	.word	0x0800901f
 8008f48:	6833      	ldr	r3, [r6, #0]
 8008f4a:	1d1a      	adds	r2, r3, #4
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6032      	str	r2, [r6, #0]
 8008f50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e09d      	b.n	8009098 <_printf_i+0x1e8>
 8008f5c:	6833      	ldr	r3, [r6, #0]
 8008f5e:	6820      	ldr	r0, [r4, #0]
 8008f60:	1d19      	adds	r1, r3, #4
 8008f62:	6031      	str	r1, [r6, #0]
 8008f64:	0606      	lsls	r6, r0, #24
 8008f66:	d501      	bpl.n	8008f6c <_printf_i+0xbc>
 8008f68:	681d      	ldr	r5, [r3, #0]
 8008f6a:	e003      	b.n	8008f74 <_printf_i+0xc4>
 8008f6c:	0645      	lsls	r5, r0, #25
 8008f6e:	d5fb      	bpl.n	8008f68 <_printf_i+0xb8>
 8008f70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f74:	2d00      	cmp	r5, #0
 8008f76:	da03      	bge.n	8008f80 <_printf_i+0xd0>
 8008f78:	232d      	movs	r3, #45	@ 0x2d
 8008f7a:	426d      	negs	r5, r5
 8008f7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f80:	4859      	ldr	r0, [pc, #356]	@ (80090e8 <_printf_i+0x238>)
 8008f82:	230a      	movs	r3, #10
 8008f84:	e011      	b.n	8008faa <_printf_i+0xfa>
 8008f86:	6821      	ldr	r1, [r4, #0]
 8008f88:	6833      	ldr	r3, [r6, #0]
 8008f8a:	0608      	lsls	r0, r1, #24
 8008f8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f90:	d402      	bmi.n	8008f98 <_printf_i+0xe8>
 8008f92:	0649      	lsls	r1, r1, #25
 8008f94:	bf48      	it	mi
 8008f96:	b2ad      	uxthmi	r5, r5
 8008f98:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f9a:	4853      	ldr	r0, [pc, #332]	@ (80090e8 <_printf_i+0x238>)
 8008f9c:	6033      	str	r3, [r6, #0]
 8008f9e:	bf14      	ite	ne
 8008fa0:	230a      	movne	r3, #10
 8008fa2:	2308      	moveq	r3, #8
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008faa:	6866      	ldr	r6, [r4, #4]
 8008fac:	60a6      	str	r6, [r4, #8]
 8008fae:	2e00      	cmp	r6, #0
 8008fb0:	bfa2      	ittt	ge
 8008fb2:	6821      	ldrge	r1, [r4, #0]
 8008fb4:	f021 0104 	bicge.w	r1, r1, #4
 8008fb8:	6021      	strge	r1, [r4, #0]
 8008fba:	b90d      	cbnz	r5, 8008fc0 <_printf_i+0x110>
 8008fbc:	2e00      	cmp	r6, #0
 8008fbe:	d04b      	beq.n	8009058 <_printf_i+0x1a8>
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fc6:	fb03 5711 	mls	r7, r3, r1, r5
 8008fca:	5dc7      	ldrb	r7, [r0, r7]
 8008fcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fd0:	462f      	mov	r7, r5
 8008fd2:	42bb      	cmp	r3, r7
 8008fd4:	460d      	mov	r5, r1
 8008fd6:	d9f4      	bls.n	8008fc2 <_printf_i+0x112>
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d10b      	bne.n	8008ff4 <_printf_i+0x144>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	07df      	lsls	r7, r3, #31
 8008fe0:	d508      	bpl.n	8008ff4 <_printf_i+0x144>
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	6861      	ldr	r1, [r4, #4]
 8008fe6:	4299      	cmp	r1, r3
 8008fe8:	bfde      	ittt	le
 8008fea:	2330      	movle	r3, #48	@ 0x30
 8008fec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ff0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008ff4:	1b92      	subs	r2, r2, r6
 8008ff6:	6122      	str	r2, [r4, #16]
 8008ff8:	f8cd a000 	str.w	sl, [sp]
 8008ffc:	464b      	mov	r3, r9
 8008ffe:	aa03      	add	r2, sp, #12
 8009000:	4621      	mov	r1, r4
 8009002:	4640      	mov	r0, r8
 8009004:	f7ff fee6 	bl	8008dd4 <_printf_common>
 8009008:	3001      	adds	r0, #1
 800900a:	d14a      	bne.n	80090a2 <_printf_i+0x1f2>
 800900c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009010:	b004      	add	sp, #16
 8009012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	f043 0320 	orr.w	r3, r3, #32
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	4833      	ldr	r0, [pc, #204]	@ (80090ec <_printf_i+0x23c>)
 8009020:	2778      	movs	r7, #120	@ 0x78
 8009022:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	6831      	ldr	r1, [r6, #0]
 800902a:	061f      	lsls	r7, r3, #24
 800902c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009030:	d402      	bmi.n	8009038 <_printf_i+0x188>
 8009032:	065f      	lsls	r7, r3, #25
 8009034:	bf48      	it	mi
 8009036:	b2ad      	uxthmi	r5, r5
 8009038:	6031      	str	r1, [r6, #0]
 800903a:	07d9      	lsls	r1, r3, #31
 800903c:	bf44      	itt	mi
 800903e:	f043 0320 	orrmi.w	r3, r3, #32
 8009042:	6023      	strmi	r3, [r4, #0]
 8009044:	b11d      	cbz	r5, 800904e <_printf_i+0x19e>
 8009046:	2310      	movs	r3, #16
 8009048:	e7ac      	b.n	8008fa4 <_printf_i+0xf4>
 800904a:	4827      	ldr	r0, [pc, #156]	@ (80090e8 <_printf_i+0x238>)
 800904c:	e7e9      	b.n	8009022 <_printf_i+0x172>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	f023 0320 	bic.w	r3, r3, #32
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	e7f6      	b.n	8009046 <_printf_i+0x196>
 8009058:	4616      	mov	r6, r2
 800905a:	e7bd      	b.n	8008fd8 <_printf_i+0x128>
 800905c:	6833      	ldr	r3, [r6, #0]
 800905e:	6825      	ldr	r5, [r4, #0]
 8009060:	6961      	ldr	r1, [r4, #20]
 8009062:	1d18      	adds	r0, r3, #4
 8009064:	6030      	str	r0, [r6, #0]
 8009066:	062e      	lsls	r6, r5, #24
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	d501      	bpl.n	8009070 <_printf_i+0x1c0>
 800906c:	6019      	str	r1, [r3, #0]
 800906e:	e002      	b.n	8009076 <_printf_i+0x1c6>
 8009070:	0668      	lsls	r0, r5, #25
 8009072:	d5fb      	bpl.n	800906c <_printf_i+0x1bc>
 8009074:	8019      	strh	r1, [r3, #0]
 8009076:	2300      	movs	r3, #0
 8009078:	6123      	str	r3, [r4, #16]
 800907a:	4616      	mov	r6, r2
 800907c:	e7bc      	b.n	8008ff8 <_printf_i+0x148>
 800907e:	6833      	ldr	r3, [r6, #0]
 8009080:	1d1a      	adds	r2, r3, #4
 8009082:	6032      	str	r2, [r6, #0]
 8009084:	681e      	ldr	r6, [r3, #0]
 8009086:	6862      	ldr	r2, [r4, #4]
 8009088:	2100      	movs	r1, #0
 800908a:	4630      	mov	r0, r6
 800908c:	f7f7 f8b0 	bl	80001f0 <memchr>
 8009090:	b108      	cbz	r0, 8009096 <_printf_i+0x1e6>
 8009092:	1b80      	subs	r0, r0, r6
 8009094:	6060      	str	r0, [r4, #4]
 8009096:	6863      	ldr	r3, [r4, #4]
 8009098:	6123      	str	r3, [r4, #16]
 800909a:	2300      	movs	r3, #0
 800909c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090a0:	e7aa      	b.n	8008ff8 <_printf_i+0x148>
 80090a2:	6923      	ldr	r3, [r4, #16]
 80090a4:	4632      	mov	r2, r6
 80090a6:	4649      	mov	r1, r9
 80090a8:	4640      	mov	r0, r8
 80090aa:	47d0      	blx	sl
 80090ac:	3001      	adds	r0, #1
 80090ae:	d0ad      	beq.n	800900c <_printf_i+0x15c>
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	079b      	lsls	r3, r3, #30
 80090b4:	d413      	bmi.n	80090de <_printf_i+0x22e>
 80090b6:	68e0      	ldr	r0, [r4, #12]
 80090b8:	9b03      	ldr	r3, [sp, #12]
 80090ba:	4298      	cmp	r0, r3
 80090bc:	bfb8      	it	lt
 80090be:	4618      	movlt	r0, r3
 80090c0:	e7a6      	b.n	8009010 <_printf_i+0x160>
 80090c2:	2301      	movs	r3, #1
 80090c4:	4632      	mov	r2, r6
 80090c6:	4649      	mov	r1, r9
 80090c8:	4640      	mov	r0, r8
 80090ca:	47d0      	blx	sl
 80090cc:	3001      	adds	r0, #1
 80090ce:	d09d      	beq.n	800900c <_printf_i+0x15c>
 80090d0:	3501      	adds	r5, #1
 80090d2:	68e3      	ldr	r3, [r4, #12]
 80090d4:	9903      	ldr	r1, [sp, #12]
 80090d6:	1a5b      	subs	r3, r3, r1
 80090d8:	42ab      	cmp	r3, r5
 80090da:	dcf2      	bgt.n	80090c2 <_printf_i+0x212>
 80090dc:	e7eb      	b.n	80090b6 <_printf_i+0x206>
 80090de:	2500      	movs	r5, #0
 80090e0:	f104 0619 	add.w	r6, r4, #25
 80090e4:	e7f5      	b.n	80090d2 <_printf_i+0x222>
 80090e6:	bf00      	nop
 80090e8:	08009a4a 	.word	0x08009a4a
 80090ec:	08009a5b 	.word	0x08009a5b

080090f0 <__sflush_r>:
 80090f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f8:	0716      	lsls	r6, r2, #28
 80090fa:	4605      	mov	r5, r0
 80090fc:	460c      	mov	r4, r1
 80090fe:	d454      	bmi.n	80091aa <__sflush_r+0xba>
 8009100:	684b      	ldr	r3, [r1, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	dc02      	bgt.n	800910c <__sflush_r+0x1c>
 8009106:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009108:	2b00      	cmp	r3, #0
 800910a:	dd48      	ble.n	800919e <__sflush_r+0xae>
 800910c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800910e:	2e00      	cmp	r6, #0
 8009110:	d045      	beq.n	800919e <__sflush_r+0xae>
 8009112:	2300      	movs	r3, #0
 8009114:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009118:	682f      	ldr	r7, [r5, #0]
 800911a:	6a21      	ldr	r1, [r4, #32]
 800911c:	602b      	str	r3, [r5, #0]
 800911e:	d030      	beq.n	8009182 <__sflush_r+0x92>
 8009120:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	0759      	lsls	r1, r3, #29
 8009126:	d505      	bpl.n	8009134 <__sflush_r+0x44>
 8009128:	6863      	ldr	r3, [r4, #4]
 800912a:	1ad2      	subs	r2, r2, r3
 800912c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800912e:	b10b      	cbz	r3, 8009134 <__sflush_r+0x44>
 8009130:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009132:	1ad2      	subs	r2, r2, r3
 8009134:	2300      	movs	r3, #0
 8009136:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009138:	6a21      	ldr	r1, [r4, #32]
 800913a:	4628      	mov	r0, r5
 800913c:	47b0      	blx	r6
 800913e:	1c43      	adds	r3, r0, #1
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	d106      	bne.n	8009152 <__sflush_r+0x62>
 8009144:	6829      	ldr	r1, [r5, #0]
 8009146:	291d      	cmp	r1, #29
 8009148:	d82b      	bhi.n	80091a2 <__sflush_r+0xb2>
 800914a:	4a2a      	ldr	r2, [pc, #168]	@ (80091f4 <__sflush_r+0x104>)
 800914c:	410a      	asrs	r2, r1
 800914e:	07d6      	lsls	r6, r2, #31
 8009150:	d427      	bmi.n	80091a2 <__sflush_r+0xb2>
 8009152:	2200      	movs	r2, #0
 8009154:	6062      	str	r2, [r4, #4]
 8009156:	04d9      	lsls	r1, r3, #19
 8009158:	6922      	ldr	r2, [r4, #16]
 800915a:	6022      	str	r2, [r4, #0]
 800915c:	d504      	bpl.n	8009168 <__sflush_r+0x78>
 800915e:	1c42      	adds	r2, r0, #1
 8009160:	d101      	bne.n	8009166 <__sflush_r+0x76>
 8009162:	682b      	ldr	r3, [r5, #0]
 8009164:	b903      	cbnz	r3, 8009168 <__sflush_r+0x78>
 8009166:	6560      	str	r0, [r4, #84]	@ 0x54
 8009168:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800916a:	602f      	str	r7, [r5, #0]
 800916c:	b1b9      	cbz	r1, 800919e <__sflush_r+0xae>
 800916e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009172:	4299      	cmp	r1, r3
 8009174:	d002      	beq.n	800917c <__sflush_r+0x8c>
 8009176:	4628      	mov	r0, r5
 8009178:	f7ff fbd4 	bl	8008924 <_free_r>
 800917c:	2300      	movs	r3, #0
 800917e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009180:	e00d      	b.n	800919e <__sflush_r+0xae>
 8009182:	2301      	movs	r3, #1
 8009184:	4628      	mov	r0, r5
 8009186:	47b0      	blx	r6
 8009188:	4602      	mov	r2, r0
 800918a:	1c50      	adds	r0, r2, #1
 800918c:	d1c9      	bne.n	8009122 <__sflush_r+0x32>
 800918e:	682b      	ldr	r3, [r5, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0c6      	beq.n	8009122 <__sflush_r+0x32>
 8009194:	2b1d      	cmp	r3, #29
 8009196:	d001      	beq.n	800919c <__sflush_r+0xac>
 8009198:	2b16      	cmp	r3, #22
 800919a:	d11e      	bne.n	80091da <__sflush_r+0xea>
 800919c:	602f      	str	r7, [r5, #0]
 800919e:	2000      	movs	r0, #0
 80091a0:	e022      	b.n	80091e8 <__sflush_r+0xf8>
 80091a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091a6:	b21b      	sxth	r3, r3
 80091a8:	e01b      	b.n	80091e2 <__sflush_r+0xf2>
 80091aa:	690f      	ldr	r7, [r1, #16]
 80091ac:	2f00      	cmp	r7, #0
 80091ae:	d0f6      	beq.n	800919e <__sflush_r+0xae>
 80091b0:	0793      	lsls	r3, r2, #30
 80091b2:	680e      	ldr	r6, [r1, #0]
 80091b4:	bf08      	it	eq
 80091b6:	694b      	ldreq	r3, [r1, #20]
 80091b8:	600f      	str	r7, [r1, #0]
 80091ba:	bf18      	it	ne
 80091bc:	2300      	movne	r3, #0
 80091be:	eba6 0807 	sub.w	r8, r6, r7
 80091c2:	608b      	str	r3, [r1, #8]
 80091c4:	f1b8 0f00 	cmp.w	r8, #0
 80091c8:	dde9      	ble.n	800919e <__sflush_r+0xae>
 80091ca:	6a21      	ldr	r1, [r4, #32]
 80091cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80091ce:	4643      	mov	r3, r8
 80091d0:	463a      	mov	r2, r7
 80091d2:	4628      	mov	r0, r5
 80091d4:	47b0      	blx	r6
 80091d6:	2800      	cmp	r0, #0
 80091d8:	dc08      	bgt.n	80091ec <__sflush_r+0xfc>
 80091da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091e2:	81a3      	strh	r3, [r4, #12]
 80091e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091ec:	4407      	add	r7, r0
 80091ee:	eba8 0800 	sub.w	r8, r8, r0
 80091f2:	e7e7      	b.n	80091c4 <__sflush_r+0xd4>
 80091f4:	dfbffffe 	.word	0xdfbffffe

080091f8 <_fflush_r>:
 80091f8:	b538      	push	{r3, r4, r5, lr}
 80091fa:	690b      	ldr	r3, [r1, #16]
 80091fc:	4605      	mov	r5, r0
 80091fe:	460c      	mov	r4, r1
 8009200:	b913      	cbnz	r3, 8009208 <_fflush_r+0x10>
 8009202:	2500      	movs	r5, #0
 8009204:	4628      	mov	r0, r5
 8009206:	bd38      	pop	{r3, r4, r5, pc}
 8009208:	b118      	cbz	r0, 8009212 <_fflush_r+0x1a>
 800920a:	6a03      	ldr	r3, [r0, #32]
 800920c:	b90b      	cbnz	r3, 8009212 <_fflush_r+0x1a>
 800920e:	f7ff f8e5 	bl	80083dc <__sinit>
 8009212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d0f3      	beq.n	8009202 <_fflush_r+0xa>
 800921a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800921c:	07d0      	lsls	r0, r2, #31
 800921e:	d404      	bmi.n	800922a <_fflush_r+0x32>
 8009220:	0599      	lsls	r1, r3, #22
 8009222:	d402      	bmi.n	800922a <_fflush_r+0x32>
 8009224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009226:	f7ff fb4e 	bl	80088c6 <__retarget_lock_acquire_recursive>
 800922a:	4628      	mov	r0, r5
 800922c:	4621      	mov	r1, r4
 800922e:	f7ff ff5f 	bl	80090f0 <__sflush_r>
 8009232:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009234:	07da      	lsls	r2, r3, #31
 8009236:	4605      	mov	r5, r0
 8009238:	d4e4      	bmi.n	8009204 <_fflush_r+0xc>
 800923a:	89a3      	ldrh	r3, [r4, #12]
 800923c:	059b      	lsls	r3, r3, #22
 800923e:	d4e1      	bmi.n	8009204 <_fflush_r+0xc>
 8009240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009242:	f7ff fb41 	bl	80088c8 <__retarget_lock_release_recursive>
 8009246:	e7dd      	b.n	8009204 <_fflush_r+0xc>

08009248 <fiprintf>:
 8009248:	b40e      	push	{r1, r2, r3}
 800924a:	b503      	push	{r0, r1, lr}
 800924c:	4601      	mov	r1, r0
 800924e:	ab03      	add	r3, sp, #12
 8009250:	4805      	ldr	r0, [pc, #20]	@ (8009268 <fiprintf+0x20>)
 8009252:	f853 2b04 	ldr.w	r2, [r3], #4
 8009256:	6800      	ldr	r0, [r0, #0]
 8009258:	9301      	str	r3, [sp, #4]
 800925a:	f000 f913 	bl	8009484 <_vfiprintf_r>
 800925e:	b002      	add	sp, #8
 8009260:	f85d eb04 	ldr.w	lr, [sp], #4
 8009264:	b003      	add	sp, #12
 8009266:	4770      	bx	lr
 8009268:	2000001c 	.word	0x2000001c

0800926c <__swhatbuf_r>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	460c      	mov	r4, r1
 8009270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009274:	2900      	cmp	r1, #0
 8009276:	b096      	sub	sp, #88	@ 0x58
 8009278:	4615      	mov	r5, r2
 800927a:	461e      	mov	r6, r3
 800927c:	da0d      	bge.n	800929a <__swhatbuf_r+0x2e>
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009284:	f04f 0100 	mov.w	r1, #0
 8009288:	bf14      	ite	ne
 800928a:	2340      	movne	r3, #64	@ 0x40
 800928c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009290:	2000      	movs	r0, #0
 8009292:	6031      	str	r1, [r6, #0]
 8009294:	602b      	str	r3, [r5, #0]
 8009296:	b016      	add	sp, #88	@ 0x58
 8009298:	bd70      	pop	{r4, r5, r6, pc}
 800929a:	466a      	mov	r2, sp
 800929c:	f000 f862 	bl	8009364 <_fstat_r>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	dbec      	blt.n	800927e <__swhatbuf_r+0x12>
 80092a4:	9901      	ldr	r1, [sp, #4]
 80092a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092ae:	4259      	negs	r1, r3
 80092b0:	4159      	adcs	r1, r3
 80092b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092b6:	e7eb      	b.n	8009290 <__swhatbuf_r+0x24>

080092b8 <__smakebuf_r>:
 80092b8:	898b      	ldrh	r3, [r1, #12]
 80092ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092bc:	079d      	lsls	r5, r3, #30
 80092be:	4606      	mov	r6, r0
 80092c0:	460c      	mov	r4, r1
 80092c2:	d507      	bpl.n	80092d4 <__smakebuf_r+0x1c>
 80092c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	6123      	str	r3, [r4, #16]
 80092cc:	2301      	movs	r3, #1
 80092ce:	6163      	str	r3, [r4, #20]
 80092d0:	b003      	add	sp, #12
 80092d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092d4:	ab01      	add	r3, sp, #4
 80092d6:	466a      	mov	r2, sp
 80092d8:	f7ff ffc8 	bl	800926c <__swhatbuf_r>
 80092dc:	9f00      	ldr	r7, [sp, #0]
 80092de:	4605      	mov	r5, r0
 80092e0:	4639      	mov	r1, r7
 80092e2:	4630      	mov	r0, r6
 80092e4:	f7ff fb92 	bl	8008a0c <_malloc_r>
 80092e8:	b948      	cbnz	r0, 80092fe <__smakebuf_r+0x46>
 80092ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ee:	059a      	lsls	r2, r3, #22
 80092f0:	d4ee      	bmi.n	80092d0 <__smakebuf_r+0x18>
 80092f2:	f023 0303 	bic.w	r3, r3, #3
 80092f6:	f043 0302 	orr.w	r3, r3, #2
 80092fa:	81a3      	strh	r3, [r4, #12]
 80092fc:	e7e2      	b.n	80092c4 <__smakebuf_r+0xc>
 80092fe:	89a3      	ldrh	r3, [r4, #12]
 8009300:	6020      	str	r0, [r4, #0]
 8009302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009306:	81a3      	strh	r3, [r4, #12]
 8009308:	9b01      	ldr	r3, [sp, #4]
 800930a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800930e:	b15b      	cbz	r3, 8009328 <__smakebuf_r+0x70>
 8009310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009314:	4630      	mov	r0, r6
 8009316:	f000 f837 	bl	8009388 <_isatty_r>
 800931a:	b128      	cbz	r0, 8009328 <__smakebuf_r+0x70>
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	f023 0303 	bic.w	r3, r3, #3
 8009322:	f043 0301 	orr.w	r3, r3, #1
 8009326:	81a3      	strh	r3, [r4, #12]
 8009328:	89a3      	ldrh	r3, [r4, #12]
 800932a:	431d      	orrs	r5, r3
 800932c:	81a5      	strh	r5, [r4, #12]
 800932e:	e7cf      	b.n	80092d0 <__smakebuf_r+0x18>

08009330 <memmove>:
 8009330:	4288      	cmp	r0, r1
 8009332:	b510      	push	{r4, lr}
 8009334:	eb01 0402 	add.w	r4, r1, r2
 8009338:	d902      	bls.n	8009340 <memmove+0x10>
 800933a:	4284      	cmp	r4, r0
 800933c:	4623      	mov	r3, r4
 800933e:	d807      	bhi.n	8009350 <memmove+0x20>
 8009340:	1e43      	subs	r3, r0, #1
 8009342:	42a1      	cmp	r1, r4
 8009344:	d008      	beq.n	8009358 <memmove+0x28>
 8009346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800934a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800934e:	e7f8      	b.n	8009342 <memmove+0x12>
 8009350:	4402      	add	r2, r0
 8009352:	4601      	mov	r1, r0
 8009354:	428a      	cmp	r2, r1
 8009356:	d100      	bne.n	800935a <memmove+0x2a>
 8009358:	bd10      	pop	{r4, pc}
 800935a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800935e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009362:	e7f7      	b.n	8009354 <memmove+0x24>

08009364 <_fstat_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4d07      	ldr	r5, [pc, #28]	@ (8009384 <_fstat_r+0x20>)
 8009368:	2300      	movs	r3, #0
 800936a:	4604      	mov	r4, r0
 800936c:	4608      	mov	r0, r1
 800936e:	4611      	mov	r1, r2
 8009370:	602b      	str	r3, [r5, #0]
 8009372:	f7f8 f909 	bl	8001588 <_fstat>
 8009376:	1c43      	adds	r3, r0, #1
 8009378:	d102      	bne.n	8009380 <_fstat_r+0x1c>
 800937a:	682b      	ldr	r3, [r5, #0]
 800937c:	b103      	cbz	r3, 8009380 <_fstat_r+0x1c>
 800937e:	6023      	str	r3, [r4, #0]
 8009380:	bd38      	pop	{r3, r4, r5, pc}
 8009382:	bf00      	nop
 8009384:	2000146c 	.word	0x2000146c

08009388 <_isatty_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d06      	ldr	r5, [pc, #24]	@ (80093a4 <_isatty_r+0x1c>)
 800938c:	2300      	movs	r3, #0
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	f7f8 f908 	bl	80015a8 <_isatty>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_isatty_r+0x1a>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_isatty_r+0x1a>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	2000146c 	.word	0x2000146c

080093a8 <_sbrk_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4d06      	ldr	r5, [pc, #24]	@ (80093c4 <_sbrk_r+0x1c>)
 80093ac:	2300      	movs	r3, #0
 80093ae:	4604      	mov	r4, r0
 80093b0:	4608      	mov	r0, r1
 80093b2:	602b      	str	r3, [r5, #0]
 80093b4:	f7f8 f910 	bl	80015d8 <_sbrk>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d102      	bne.n	80093c2 <_sbrk_r+0x1a>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	b103      	cbz	r3, 80093c2 <_sbrk_r+0x1a>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	2000146c 	.word	0x2000146c

080093c8 <abort>:
 80093c8:	b508      	push	{r3, lr}
 80093ca:	2006      	movs	r0, #6
 80093cc:	f000 f99a 	bl	8009704 <raise>
 80093d0:	2001      	movs	r0, #1
 80093d2:	f7f8 f889 	bl	80014e8 <_exit>

080093d6 <_realloc_r>:
 80093d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093da:	4680      	mov	r8, r0
 80093dc:	4615      	mov	r5, r2
 80093de:	460c      	mov	r4, r1
 80093e0:	b921      	cbnz	r1, 80093ec <_realloc_r+0x16>
 80093e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093e6:	4611      	mov	r1, r2
 80093e8:	f7ff bb10 	b.w	8008a0c <_malloc_r>
 80093ec:	b92a      	cbnz	r2, 80093fa <_realloc_r+0x24>
 80093ee:	f7ff fa99 	bl	8008924 <_free_r>
 80093f2:	2400      	movs	r4, #0
 80093f4:	4620      	mov	r0, r4
 80093f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093fa:	f000 f99f 	bl	800973c <_malloc_usable_size_r>
 80093fe:	4285      	cmp	r5, r0
 8009400:	4606      	mov	r6, r0
 8009402:	d802      	bhi.n	800940a <_realloc_r+0x34>
 8009404:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009408:	d8f4      	bhi.n	80093f4 <_realloc_r+0x1e>
 800940a:	4629      	mov	r1, r5
 800940c:	4640      	mov	r0, r8
 800940e:	f7ff fafd 	bl	8008a0c <_malloc_r>
 8009412:	4607      	mov	r7, r0
 8009414:	2800      	cmp	r0, #0
 8009416:	d0ec      	beq.n	80093f2 <_realloc_r+0x1c>
 8009418:	42b5      	cmp	r5, r6
 800941a:	462a      	mov	r2, r5
 800941c:	4621      	mov	r1, r4
 800941e:	bf28      	it	cs
 8009420:	4632      	movcs	r2, r6
 8009422:	f7ff fa52 	bl	80088ca <memcpy>
 8009426:	4621      	mov	r1, r4
 8009428:	4640      	mov	r0, r8
 800942a:	f7ff fa7b 	bl	8008924 <_free_r>
 800942e:	463c      	mov	r4, r7
 8009430:	e7e0      	b.n	80093f4 <_realloc_r+0x1e>

08009432 <__sfputc_r>:
 8009432:	6893      	ldr	r3, [r2, #8]
 8009434:	3b01      	subs	r3, #1
 8009436:	2b00      	cmp	r3, #0
 8009438:	b410      	push	{r4}
 800943a:	6093      	str	r3, [r2, #8]
 800943c:	da08      	bge.n	8009450 <__sfputc_r+0x1e>
 800943e:	6994      	ldr	r4, [r2, #24]
 8009440:	42a3      	cmp	r3, r4
 8009442:	db01      	blt.n	8009448 <__sfputc_r+0x16>
 8009444:	290a      	cmp	r1, #10
 8009446:	d103      	bne.n	8009450 <__sfputc_r+0x1e>
 8009448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800944c:	f7ff b8d1 	b.w	80085f2 <__swbuf_r>
 8009450:	6813      	ldr	r3, [r2, #0]
 8009452:	1c58      	adds	r0, r3, #1
 8009454:	6010      	str	r0, [r2, #0]
 8009456:	7019      	strb	r1, [r3, #0]
 8009458:	4608      	mov	r0, r1
 800945a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800945e:	4770      	bx	lr

08009460 <__sfputs_r>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	4606      	mov	r6, r0
 8009464:	460f      	mov	r7, r1
 8009466:	4614      	mov	r4, r2
 8009468:	18d5      	adds	r5, r2, r3
 800946a:	42ac      	cmp	r4, r5
 800946c:	d101      	bne.n	8009472 <__sfputs_r+0x12>
 800946e:	2000      	movs	r0, #0
 8009470:	e007      	b.n	8009482 <__sfputs_r+0x22>
 8009472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009476:	463a      	mov	r2, r7
 8009478:	4630      	mov	r0, r6
 800947a:	f7ff ffda 	bl	8009432 <__sfputc_r>
 800947e:	1c43      	adds	r3, r0, #1
 8009480:	d1f3      	bne.n	800946a <__sfputs_r+0xa>
 8009482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009484 <_vfiprintf_r>:
 8009484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009488:	460d      	mov	r5, r1
 800948a:	b09d      	sub	sp, #116	@ 0x74
 800948c:	4614      	mov	r4, r2
 800948e:	4698      	mov	r8, r3
 8009490:	4606      	mov	r6, r0
 8009492:	b118      	cbz	r0, 800949c <_vfiprintf_r+0x18>
 8009494:	6a03      	ldr	r3, [r0, #32]
 8009496:	b90b      	cbnz	r3, 800949c <_vfiprintf_r+0x18>
 8009498:	f7fe ffa0 	bl	80083dc <__sinit>
 800949c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800949e:	07d9      	lsls	r1, r3, #31
 80094a0:	d405      	bmi.n	80094ae <_vfiprintf_r+0x2a>
 80094a2:	89ab      	ldrh	r3, [r5, #12]
 80094a4:	059a      	lsls	r2, r3, #22
 80094a6:	d402      	bmi.n	80094ae <_vfiprintf_r+0x2a>
 80094a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094aa:	f7ff fa0c 	bl	80088c6 <__retarget_lock_acquire_recursive>
 80094ae:	89ab      	ldrh	r3, [r5, #12]
 80094b0:	071b      	lsls	r3, r3, #28
 80094b2:	d501      	bpl.n	80094b8 <_vfiprintf_r+0x34>
 80094b4:	692b      	ldr	r3, [r5, #16]
 80094b6:	b99b      	cbnz	r3, 80094e0 <_vfiprintf_r+0x5c>
 80094b8:	4629      	mov	r1, r5
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7ff f8d8 	bl	8008670 <__swsetup_r>
 80094c0:	b170      	cbz	r0, 80094e0 <_vfiprintf_r+0x5c>
 80094c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094c4:	07dc      	lsls	r4, r3, #31
 80094c6:	d504      	bpl.n	80094d2 <_vfiprintf_r+0x4e>
 80094c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094cc:	b01d      	add	sp, #116	@ 0x74
 80094ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d2:	89ab      	ldrh	r3, [r5, #12]
 80094d4:	0598      	lsls	r0, r3, #22
 80094d6:	d4f7      	bmi.n	80094c8 <_vfiprintf_r+0x44>
 80094d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094da:	f7ff f9f5 	bl	80088c8 <__retarget_lock_release_recursive>
 80094de:	e7f3      	b.n	80094c8 <_vfiprintf_r+0x44>
 80094e0:	2300      	movs	r3, #0
 80094e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80094e4:	2320      	movs	r3, #32
 80094e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80094ee:	2330      	movs	r3, #48	@ 0x30
 80094f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80096a0 <_vfiprintf_r+0x21c>
 80094f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094f8:	f04f 0901 	mov.w	r9, #1
 80094fc:	4623      	mov	r3, r4
 80094fe:	469a      	mov	sl, r3
 8009500:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009504:	b10a      	cbz	r2, 800950a <_vfiprintf_r+0x86>
 8009506:	2a25      	cmp	r2, #37	@ 0x25
 8009508:	d1f9      	bne.n	80094fe <_vfiprintf_r+0x7a>
 800950a:	ebba 0b04 	subs.w	fp, sl, r4
 800950e:	d00b      	beq.n	8009528 <_vfiprintf_r+0xa4>
 8009510:	465b      	mov	r3, fp
 8009512:	4622      	mov	r2, r4
 8009514:	4629      	mov	r1, r5
 8009516:	4630      	mov	r0, r6
 8009518:	f7ff ffa2 	bl	8009460 <__sfputs_r>
 800951c:	3001      	adds	r0, #1
 800951e:	f000 80a7 	beq.w	8009670 <_vfiprintf_r+0x1ec>
 8009522:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009524:	445a      	add	r2, fp
 8009526:	9209      	str	r2, [sp, #36]	@ 0x24
 8009528:	f89a 3000 	ldrb.w	r3, [sl]
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 809f 	beq.w	8009670 <_vfiprintf_r+0x1ec>
 8009532:	2300      	movs	r3, #0
 8009534:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800953c:	f10a 0a01 	add.w	sl, sl, #1
 8009540:	9304      	str	r3, [sp, #16]
 8009542:	9307      	str	r3, [sp, #28]
 8009544:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009548:	931a      	str	r3, [sp, #104]	@ 0x68
 800954a:	4654      	mov	r4, sl
 800954c:	2205      	movs	r2, #5
 800954e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009552:	4853      	ldr	r0, [pc, #332]	@ (80096a0 <_vfiprintf_r+0x21c>)
 8009554:	f7f6 fe4c 	bl	80001f0 <memchr>
 8009558:	9a04      	ldr	r2, [sp, #16]
 800955a:	b9d8      	cbnz	r0, 8009594 <_vfiprintf_r+0x110>
 800955c:	06d1      	lsls	r1, r2, #27
 800955e:	bf44      	itt	mi
 8009560:	2320      	movmi	r3, #32
 8009562:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009566:	0713      	lsls	r3, r2, #28
 8009568:	bf44      	itt	mi
 800956a:	232b      	movmi	r3, #43	@ 0x2b
 800956c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009570:	f89a 3000 	ldrb.w	r3, [sl]
 8009574:	2b2a      	cmp	r3, #42	@ 0x2a
 8009576:	d015      	beq.n	80095a4 <_vfiprintf_r+0x120>
 8009578:	9a07      	ldr	r2, [sp, #28]
 800957a:	4654      	mov	r4, sl
 800957c:	2000      	movs	r0, #0
 800957e:	f04f 0c0a 	mov.w	ip, #10
 8009582:	4621      	mov	r1, r4
 8009584:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009588:	3b30      	subs	r3, #48	@ 0x30
 800958a:	2b09      	cmp	r3, #9
 800958c:	d94b      	bls.n	8009626 <_vfiprintf_r+0x1a2>
 800958e:	b1b0      	cbz	r0, 80095be <_vfiprintf_r+0x13a>
 8009590:	9207      	str	r2, [sp, #28]
 8009592:	e014      	b.n	80095be <_vfiprintf_r+0x13a>
 8009594:	eba0 0308 	sub.w	r3, r0, r8
 8009598:	fa09 f303 	lsl.w	r3, r9, r3
 800959c:	4313      	orrs	r3, r2
 800959e:	9304      	str	r3, [sp, #16]
 80095a0:	46a2      	mov	sl, r4
 80095a2:	e7d2      	b.n	800954a <_vfiprintf_r+0xc6>
 80095a4:	9b03      	ldr	r3, [sp, #12]
 80095a6:	1d19      	adds	r1, r3, #4
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	9103      	str	r1, [sp, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	bfbb      	ittet	lt
 80095b0:	425b      	neglt	r3, r3
 80095b2:	f042 0202 	orrlt.w	r2, r2, #2
 80095b6:	9307      	strge	r3, [sp, #28]
 80095b8:	9307      	strlt	r3, [sp, #28]
 80095ba:	bfb8      	it	lt
 80095bc:	9204      	strlt	r2, [sp, #16]
 80095be:	7823      	ldrb	r3, [r4, #0]
 80095c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80095c2:	d10a      	bne.n	80095da <_vfiprintf_r+0x156>
 80095c4:	7863      	ldrb	r3, [r4, #1]
 80095c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80095c8:	d132      	bne.n	8009630 <_vfiprintf_r+0x1ac>
 80095ca:	9b03      	ldr	r3, [sp, #12]
 80095cc:	1d1a      	adds	r2, r3, #4
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	9203      	str	r2, [sp, #12]
 80095d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095d6:	3402      	adds	r4, #2
 80095d8:	9305      	str	r3, [sp, #20]
 80095da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80096b0 <_vfiprintf_r+0x22c>
 80095de:	7821      	ldrb	r1, [r4, #0]
 80095e0:	2203      	movs	r2, #3
 80095e2:	4650      	mov	r0, sl
 80095e4:	f7f6 fe04 	bl	80001f0 <memchr>
 80095e8:	b138      	cbz	r0, 80095fa <_vfiprintf_r+0x176>
 80095ea:	9b04      	ldr	r3, [sp, #16]
 80095ec:	eba0 000a 	sub.w	r0, r0, sl
 80095f0:	2240      	movs	r2, #64	@ 0x40
 80095f2:	4082      	lsls	r2, r0
 80095f4:	4313      	orrs	r3, r2
 80095f6:	3401      	adds	r4, #1
 80095f8:	9304      	str	r3, [sp, #16]
 80095fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095fe:	4829      	ldr	r0, [pc, #164]	@ (80096a4 <_vfiprintf_r+0x220>)
 8009600:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009604:	2206      	movs	r2, #6
 8009606:	f7f6 fdf3 	bl	80001f0 <memchr>
 800960a:	2800      	cmp	r0, #0
 800960c:	d03f      	beq.n	800968e <_vfiprintf_r+0x20a>
 800960e:	4b26      	ldr	r3, [pc, #152]	@ (80096a8 <_vfiprintf_r+0x224>)
 8009610:	bb1b      	cbnz	r3, 800965a <_vfiprintf_r+0x1d6>
 8009612:	9b03      	ldr	r3, [sp, #12]
 8009614:	3307      	adds	r3, #7
 8009616:	f023 0307 	bic.w	r3, r3, #7
 800961a:	3308      	adds	r3, #8
 800961c:	9303      	str	r3, [sp, #12]
 800961e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009620:	443b      	add	r3, r7
 8009622:	9309      	str	r3, [sp, #36]	@ 0x24
 8009624:	e76a      	b.n	80094fc <_vfiprintf_r+0x78>
 8009626:	fb0c 3202 	mla	r2, ip, r2, r3
 800962a:	460c      	mov	r4, r1
 800962c:	2001      	movs	r0, #1
 800962e:	e7a8      	b.n	8009582 <_vfiprintf_r+0xfe>
 8009630:	2300      	movs	r3, #0
 8009632:	3401      	adds	r4, #1
 8009634:	9305      	str	r3, [sp, #20]
 8009636:	4619      	mov	r1, r3
 8009638:	f04f 0c0a 	mov.w	ip, #10
 800963c:	4620      	mov	r0, r4
 800963e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009642:	3a30      	subs	r2, #48	@ 0x30
 8009644:	2a09      	cmp	r2, #9
 8009646:	d903      	bls.n	8009650 <_vfiprintf_r+0x1cc>
 8009648:	2b00      	cmp	r3, #0
 800964a:	d0c6      	beq.n	80095da <_vfiprintf_r+0x156>
 800964c:	9105      	str	r1, [sp, #20]
 800964e:	e7c4      	b.n	80095da <_vfiprintf_r+0x156>
 8009650:	fb0c 2101 	mla	r1, ip, r1, r2
 8009654:	4604      	mov	r4, r0
 8009656:	2301      	movs	r3, #1
 8009658:	e7f0      	b.n	800963c <_vfiprintf_r+0x1b8>
 800965a:	ab03      	add	r3, sp, #12
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	462a      	mov	r2, r5
 8009660:	4b12      	ldr	r3, [pc, #72]	@ (80096ac <_vfiprintf_r+0x228>)
 8009662:	a904      	add	r1, sp, #16
 8009664:	4630      	mov	r0, r6
 8009666:	f3af 8000 	nop.w
 800966a:	4607      	mov	r7, r0
 800966c:	1c78      	adds	r0, r7, #1
 800966e:	d1d6      	bne.n	800961e <_vfiprintf_r+0x19a>
 8009670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009672:	07d9      	lsls	r1, r3, #31
 8009674:	d405      	bmi.n	8009682 <_vfiprintf_r+0x1fe>
 8009676:	89ab      	ldrh	r3, [r5, #12]
 8009678:	059a      	lsls	r2, r3, #22
 800967a:	d402      	bmi.n	8009682 <_vfiprintf_r+0x1fe>
 800967c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800967e:	f7ff f923 	bl	80088c8 <__retarget_lock_release_recursive>
 8009682:	89ab      	ldrh	r3, [r5, #12]
 8009684:	065b      	lsls	r3, r3, #25
 8009686:	f53f af1f 	bmi.w	80094c8 <_vfiprintf_r+0x44>
 800968a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800968c:	e71e      	b.n	80094cc <_vfiprintf_r+0x48>
 800968e:	ab03      	add	r3, sp, #12
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	462a      	mov	r2, r5
 8009694:	4b05      	ldr	r3, [pc, #20]	@ (80096ac <_vfiprintf_r+0x228>)
 8009696:	a904      	add	r1, sp, #16
 8009698:	4630      	mov	r0, r6
 800969a:	f7ff fc09 	bl	8008eb0 <_printf_i>
 800969e:	e7e4      	b.n	800966a <_vfiprintf_r+0x1e6>
 80096a0:	08009a39 	.word	0x08009a39
 80096a4:	08009a43 	.word	0x08009a43
 80096a8:	00000000 	.word	0x00000000
 80096ac:	08009461 	.word	0x08009461
 80096b0:	08009a3f 	.word	0x08009a3f

080096b4 <_raise_r>:
 80096b4:	291f      	cmp	r1, #31
 80096b6:	b538      	push	{r3, r4, r5, lr}
 80096b8:	4605      	mov	r5, r0
 80096ba:	460c      	mov	r4, r1
 80096bc:	d904      	bls.n	80096c8 <_raise_r+0x14>
 80096be:	2316      	movs	r3, #22
 80096c0:	6003      	str	r3, [r0, #0]
 80096c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096c6:	bd38      	pop	{r3, r4, r5, pc}
 80096c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80096ca:	b112      	cbz	r2, 80096d2 <_raise_r+0x1e>
 80096cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096d0:	b94b      	cbnz	r3, 80096e6 <_raise_r+0x32>
 80096d2:	4628      	mov	r0, r5
 80096d4:	f000 f830 	bl	8009738 <_getpid_r>
 80096d8:	4622      	mov	r2, r4
 80096da:	4601      	mov	r1, r0
 80096dc:	4628      	mov	r0, r5
 80096de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096e2:	f000 b817 	b.w	8009714 <_kill_r>
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d00a      	beq.n	8009700 <_raise_r+0x4c>
 80096ea:	1c59      	adds	r1, r3, #1
 80096ec:	d103      	bne.n	80096f6 <_raise_r+0x42>
 80096ee:	2316      	movs	r3, #22
 80096f0:	6003      	str	r3, [r0, #0]
 80096f2:	2001      	movs	r0, #1
 80096f4:	e7e7      	b.n	80096c6 <_raise_r+0x12>
 80096f6:	2100      	movs	r1, #0
 80096f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80096fc:	4620      	mov	r0, r4
 80096fe:	4798      	blx	r3
 8009700:	2000      	movs	r0, #0
 8009702:	e7e0      	b.n	80096c6 <_raise_r+0x12>

08009704 <raise>:
 8009704:	4b02      	ldr	r3, [pc, #8]	@ (8009710 <raise+0xc>)
 8009706:	4601      	mov	r1, r0
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	f7ff bfd3 	b.w	80096b4 <_raise_r>
 800970e:	bf00      	nop
 8009710:	2000001c 	.word	0x2000001c

08009714 <_kill_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	4d07      	ldr	r5, [pc, #28]	@ (8009734 <_kill_r+0x20>)
 8009718:	2300      	movs	r3, #0
 800971a:	4604      	mov	r4, r0
 800971c:	4608      	mov	r0, r1
 800971e:	4611      	mov	r1, r2
 8009720:	602b      	str	r3, [r5, #0]
 8009722:	f7f7 fed1 	bl	80014c8 <_kill>
 8009726:	1c43      	adds	r3, r0, #1
 8009728:	d102      	bne.n	8009730 <_kill_r+0x1c>
 800972a:	682b      	ldr	r3, [r5, #0]
 800972c:	b103      	cbz	r3, 8009730 <_kill_r+0x1c>
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	bd38      	pop	{r3, r4, r5, pc}
 8009732:	bf00      	nop
 8009734:	2000146c 	.word	0x2000146c

08009738 <_getpid_r>:
 8009738:	f7f7 bebe 	b.w	80014b8 <_getpid>

0800973c <_malloc_usable_size_r>:
 800973c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009740:	1f18      	subs	r0, r3, #4
 8009742:	2b00      	cmp	r3, #0
 8009744:	bfbc      	itt	lt
 8009746:	580b      	ldrlt	r3, [r1, r0]
 8009748:	18c0      	addlt	r0, r0, r3
 800974a:	4770      	bx	lr

0800974c <_init>:
 800974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974e:	bf00      	nop
 8009750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009752:	bc08      	pop	{r3}
 8009754:	469e      	mov	lr, r3
 8009756:	4770      	bx	lr

08009758 <_fini>:
 8009758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975a:	bf00      	nop
 800975c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800975e:	bc08      	pop	{r3}
 8009760:	469e      	mov	lr, r3
 8009762:	4770      	bx	lr
